(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[2],{

/***/ "./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/CubeTextureCanvas.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/CubeTextureCanvas.js ***!
  \****************************************************************************************/
/*! exports provided: CubeTextureCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CubeTextureCanvas\", function() { return CubeTextureCanvas; });\n/* harmony import */ var _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../viewer/scene/math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n/**\n * @private\n */\nfunction CubeTextureCanvas(viewer, cfg = {}) {\n\n    var axisLabels = false;\n\n    const cubeColor = \"lightgrey\";\n    const cubeHighlightColor = cfg.hoverColor || \"rgba(0,0,0,0.4)\";\n\n    var height = 500;\n    var width = height + (height / 3);\n    var scale = width / 24;\n\n    const facesZUp = [\n        {boundary: [6, 6, 6, 6], color: cfg.frontColor || cfg.color || \"#55FF55\"},\n        {boundary: [18, 6, 6, 6], color: cfg.backColor || cfg.color || \"#55FF55\"},\n        {boundary: [12, 6, 6, 6], color: cfg.leftColor || cfg.color || \"#FF5555\"},\n        {boundary: [0, 6, 6, 6], color: cfg.rightColor || cfg.color || \"#FF5555\"},\n        {boundary: [6, 0, 6, 6], color: cfg.topColor || cfg.color || \"#7777FF\"},\n        {boundary: [6, 12, 6, 6], color: cfg.bottomColor || cfg.color || \"#7777FF\"}\n    ];\n\n    const areasZUp = [\n        {label: \"front\", boundaries: [[7, 7, 4, 4]], dir: [0, 1, 0], up: [0, 0, 1]},\n        {label: \"back\", boundaries: [[19, 7, 4, 4]], dir: [0, -1, 0], up: [0, 0, 1]},\n        {label: \"right\", boundaries: [[13, 7, 4, 4]], dir: [-1, 0, 0], up: [0, 0, 1]},\n        {label: \"left\", boundaries: [[1, 7, 4, 4]], dir: [1, 0, 0], up: [0, 0, 1]},\n        {label: \"top\", boundaries: [[7, 1, 4, 4]], dir: [0, 0, -1], up: [0, 1, 0]},\n        {label: \"bottom\", boundaries: [[7, 13, 4, 4]], dir: [0, 0, 1], up: [0, -1, 0]},\n        {boundaries: [[7, 5, 4, 2]], dir: [0, 1, -1], up: [0, 1, 1]},\n        {boundaries: [[1, 6, 4, 1], [6, 1, 1, 4]], dir: [1, 0, -1], up: [1, 0, 1]},\n        {boundaries: [[7, 0, 4, 1], [19, 6, 4, 1]], dir: [0, -1, -1], up: [0, -1, 1]},\n        {boundaries: [[13, 6, 4, 1], [11, 1, 1, 4]], dir: [-1, 0, -1], up: [-1, 0, 1]},\n        {boundaries: [[7, 11, 4, 2]], dir: [0, 1, 1], up: [0, -1, 1]},\n        {boundaries: [[1, 11, 4, 1], [6, 13, 1, 4]], dir: [1, 0, 1], up: [-1, 0, 1]},\n        {boundaries: [[7, 17, 4, 1], [19, 11, 4, 1]], dir: [0, -1, 1], up: [0, 1, 1]},\n        {boundaries: [[13, 11, 4, 1], [11, 13, 1, 4]], dir: [-1, 0, 1], up: [1, 0, 1]},\n        {boundaries: [[5, 7, 2, 4]], dir: [1, 1, 0], up: [0, 0, 1]},\n        {boundaries: [[11, 7, 2, 4]], dir: [-1, 1, 0], up: [0, 0, 1]},\n        {boundaries: [[17, 7, 2, 4]], dir: [-1, -1, 0], up: [0, 0, 1]},\n        {boundaries: [[0, 7, 1, 4], [23, 7, 1, 4]], dir: [1, -1, 0], up: [0, 0, 1]},\n        {boundaries: [[5, 11, 2, 2]], dir: [1, 1, 1], up: [-1, -1, 1]},\n        {boundaries: [[23, 11, 1, 1], [6, 17, 1, 1], [0, 11, 1, 1]], dir: [1, -1, 1], up: [-1, 1, 1]},\n        {boundaries: [[5, 5, 2, 2]], dir: [1, 1, -1], up: [1, 1, 1]},\n        {boundaries: [[11, 17, 1, 1], [17, 11, 2, 1]], dir: [-1, -1, 1], up: [1, 1, 1]},\n        {boundaries: [[17, 6, 2, 1], [11, 0, 1, 1]], dir: [-1, -1, -1], up: [-1, -1, 1]},\n        {boundaries: [[11, 11, 2, 2]], dir: [-1, 1, 1], up: [1, -1, 1]},\n        {boundaries: [[0, 6, 1, 1], [6, 0, 1, 1], [23, 6, 1, 1]], dir: [1, -1, -1], up: [1, -1, 1]},\n        {boundaries: [[11, 5, 2, 2]], dir: [-1, 1, -1], up: [-1, 1, 1]}\n    ];\n\n    const facesYUp = [\n        {boundary: [6, 6, 6, 6], color: cfg.frontColor || cfg.color || \"#55FF55\"},\n        {boundary: [18, 6, 6, 6], color: cfg.backColor || cfg.color || \"#55FF55\"},\n        {boundary: [12, 6, 6, 6], color: cfg.leftColor || cfg.color || \"#FF5555\"},\n        {boundary: [0, 6, 6, 6], color: cfg.rightColor || cfg.color || \"#FF5555\"},\n        {boundary: [6, 0, 6, 6], color: cfg.topColor || cfg.color || \"#7777FF\"},\n        {boundary: [6, 12, 6, 6], color: cfg.bottomColor || cfg.color || \"#7777FF\"}\n    ];\n\n    const areasYUp = [\n        {label: \"front\", boundaries: [[7, 7, 4, 4]], dir: [0, 0, -1], up: [0, 1, 0]},\n        {label: \"back\", boundaries: [[19, 7, 4, 4]], dir: [0, 0, 1], up: [0, 1, 0]},\n        {label: \"right\", boundaries: [[13, 7, 4, 4]], dir: [-1, 0, 0], up: [0, 1, 0]},\n        {label: \"left\", boundaries: [[1, 7, 4, 4]], dir: [1, 0, 0], up: [0, 1, 0]},\n        {label: \"top\", boundaries: [[7, 1, 4, 4]], dir: [0, -1, 0], up: [0, 0, -1]},\n        {label: \"bottom\", boundaries: [[7, 13, 4, 4]], dir: [0, 1, 0], up: [0, 0, 1]},\n        {boundaries: [[7, 5, 4, 2]], dir: [0, -1, -1], up: [0, 1, -1]},\n        {boundaries: [[1, 6, 4, 1], [6, 1, 1, 4]], dir: [1, -1, 0], up: [1, 1, 0]},\n        {boundaries: [[7, 0, 4, 1], [19, 6, 4, 1]], dir: [0, -1, 1], up: [0, 1, 1]},\n        {boundaries: [[13, 6, 4, 1], [11, 1, 1, 4]], dir: [-1, -1, 0], up: [-1, 1, 0]},\n        {boundaries: [[7, 11, 4, 2]], dir: [0, 1, -1], up: [0, 1, 1]},\n        {boundaries: [[1, 11, 4, 1], [6, 13, 1, 4]], dir: [1, 1, 0], up: [-1, 1, 0]},\n        {boundaries: [[7, 17, 4, 1], [19, 11, 4, 1]], dir: [0, 1, 1], up: [0, 1, -1]},\n        {boundaries: [[13, 11, 4, 1], [11, 13, 1, 4]], dir: [-1, 1, 0], up: [1, 1, 0]},\n        {boundaries: [[5, 7, 2, 4]], dir: [1, 0, -1], up: [0, 1, 0]},\n        {boundaries: [[11, 7, 2, 4]], dir: [-1, 0, -1], up: [0, 1, 0]},\n        {boundaries: [[17, 7, 2, 4]], dir: [-1, 0, 1], up: [0, 1, 0]},\n        {boundaries: [[0, 7, 1, 4], [23, 7, 1, 4]], dir: [1, 0, 1], up: [0, 1, 0]},\n        {boundaries: [[5, 11, 2, 2]], dir: [1, 1, -1], up: [-1, 1, 1]},\n        {boundaries: [[23, 11, 1, 1], [6, 17, 1, 1], [0, 11, 1, 1]], dir: [1, 1, 1], up: [-1, 1, -1]},\n        {boundaries: [[5, 5, 2, 2]], dir: [1, -1, -1], up: [1, 1, -1]},\n        {boundaries: [[11, 17, 1, 1], [17, 11, 2, 1]], dir: [-1, 1, 1], up: [1, 1, -1]},\n        {boundaries: [[17, 6, 2, 1], [11, 0, 1, 1]], dir: [-1, -1, 1], up: [-1, 1, 1]},\n        {boundaries: [[11, 11, 2, 2]], dir: [-1, 1, -1], up: [1, 1, 1]},\n        {boundaries: [[0, 6, 1, 1], [6, 0, 1, 1], [23, 6, 1, 1]], dir: [1, -1, 1], up: [1, 1, 1]},\n        {boundaries: [[11, 5, 2, 2]], dir: [-1, -1, -1], up: [-1, 1, -1]}\n    ];\n\n    for (let i = 0, len = areasZUp.length; i < len; i++) {\n        _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(areasZUp[i].dir, areasZUp[i].dir);\n        _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(areasYUp[i].dir, areasYUp[i].dir);\n    }\n\n    var faces = facesYUp;\n    var areas = areasYUp;\n\n    this._textureCanvas = document.createElement('canvas');\n    this._textureCanvas.width = width;\n    this._textureCanvas.height = height;\n    this._textureCanvas.style.width = width + \"px\";\n    this._textureCanvas.style.height = height + \"px\";\n    this._textureCanvas.style.padding = \"0\";\n    this._textureCanvas.style.margin = \"0\";\n    this._textureCanvas.style.top = \"0\";\n    this._textureCanvas.style.background = cubeColor;\n    this._textureCanvas.style.position = \"absolute\";\n    this._textureCanvas.style.opacity = \"1.0\";\n    this._textureCanvas.style.visibility = \"hidden\";\n    this._textureCanvas.style[\"z-index\"] = 2000000;\n\n    const body = document.getElementsByTagName(\"body\")[0];\n    body.appendChild(this._textureCanvas);\n\n    const context = this._textureCanvas.getContext(\"2d\");\n\n    var zUp = false;\n\n    function paint() {\n\n        for (let i = 0, len = facesZUp.length; i < len; i++) {\n            const face = facesZUp[i];\n            const boundary = face.boundary;\n            const xmin = Math.round(boundary[0] * scale);\n            const ymin = Math.round(boundary[1] * scale);\n            const width = Math.round(boundary[2] * scale);\n            const height = Math.round(boundary[3] * scale);\n            context.fillStyle = face.color;\n            context.fillRect(xmin, ymin, width, height);\n        }\n\n        for (let i = 0, len = areas.length; i < len; i++) {\n            let xmin;\n            let ymin;\n            let width;\n            let height;\n            const area = areas[i];\n\n            const boundaries = area.boundaries;\n            for (var j = 0, lenj = boundaries.length; j < lenj; j++) {\n                const boundary = boundaries[j];\n                xmin = Math.round(boundary[0] * scale);\n                ymin = Math.round(boundary[1] * scale);\n                width = Math.round(boundary[2] * scale);\n                height = Math.round(boundary[3] * scale);\n                if (area.highlighted) {\n                    context.fillStyle = area.highlighted ? cubeHighlightColor : (area.color || cubeColor);\n                    context.fillRect(xmin, ymin, width, height);\n                }\n            }\n            if (area.label) {\n                context.fillStyle = \"black\";\n                context.font = '60px sans-serif';\n                context.textAlign = \"center\";\n                var xcenter = xmin + (width * 0.5);\n                var ycenter = ymin + (height * 0.7);\n                context.fillText(translateLabel(area.label), xcenter, ycenter, 80);\n            }\n        }\n    }\n\n    var translateLabel = (function () {\n        const dictionaries = {\n            \"yUp\": {\"front\": \"+Z\", \"back\": \"-Z\", \"right\": \"+X\", \"left\": \"-X\", \"top\": \"+Y\", \"bottom\": \"-Y\"},\n            \"en\": {\"front\": \"FRONT\", \"back\": \"BACK\", \"right\": \"RIGHT\", \"left\": \"LEFT\", \"top\": \"TOP\", \"bottom\": \"BOTTOM\"}\n        };\n        return function (key) {\n            var dictionary;\n            if (axisLabels) {\n                if (zUp) {\n                    dictionary = dictionaries[\"zUp\"];\n                } else {\n                    dictionary = dictionaries[\"yUp\"];\n                }\n            } else {\n                dictionary = dictionaries[viewer.language || \"en\"];\n            }\n            return dictionary ? (dictionary[key] || key) : key;\n        };\n    })();\n\n    this.setZUp = function () {\n        zUp = true;\n        faces = facesZUp;\n        areas = areasZUp;\n        this.clear();\n    };\n\n    this.setYUp = function () {\n        zUp = false;\n        faces = facesYUp;\n        areas = areasYUp;\n        this.clear();\n    };\n\n    this.clear = function () {\n        context.fillStyle = cubeColor;\n        context.fillRect(0, 0, width, height);\n        for (var i = 0, len = areas.length; i < len; i++) {\n            const area = areas[i];\n            area.highlighted = false;\n        }\n        paint();\n    };\n\n    this.getArea = function (uv) {\n        const s = uv[0] * width;\n        const t = height - (uv[1] * height); // Correct for our texture Y-flipping\n        for (var i = 0, len = areas.length; i < len; i++) {\n            const area = areas[i];\n            const boundaries = area.boundaries;\n            for (var j = 0, lenj = boundaries.length; j < lenj; j++) {\n                const boundary = boundaries[j];\n                if (s >= (boundary[0] * scale) && s <= ((boundary[0] + boundary[2]) * scale) && t >= (boundary[1] * scale) && t <= ((boundary[1] + boundary[3]) * scale)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n\n    this.setAreaHighlighted = function (areaId, highlighted) {\n        var area = areas[areaId];\n        if (!area) {\n            throw \"Area not found: \" + areaId;\n        }\n        area.highlighted = !!highlighted;\n        paint();\n    };\n\n    this.getAreaDir = function (areaId) {\n        var area = areas[areaId];\n        if (!area) {\n            throw \"Unknown area: \" + areaId;\n        }\n        return area.dir;\n    };\n\n    this.getAreaUp = function (areaId) {\n        var area = areas[areaId];\n        if (!area) {\n            throw \"Unknown area: \" + areaId;\n        }\n        return area.up;\n    };\n\n    this.getImage = function () {\n        return this._textureCanvas;\n    };\n\n    this.destroy = function () {\n        if (this._textureCanvas) {\n            this._textureCanvas.parentNode.removeChild(this._textureCanvas);\n            this._textureCanvas = null;\n        }\n    };\n\n    this.clear();\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/CubeTextureCanvas.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/NavCubePlugin.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/NavCubePlugin.js ***!
  \************************************************************************************/
/*! exports provided: NavCubePlugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavCubePlugin\", function() { return NavCubePlugin; });\n/* harmony import */ var _viewer_Plugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../viewer/Plugin.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/Plugin.js\");\n/* harmony import */ var _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../viewer/scene/math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _viewer_scene_scene_Scene_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../viewer/scene/scene/Scene.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/scene/Scene.js\");\n/* harmony import */ var _viewer_scene_lights_DirLight_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../viewer/scene/lights/DirLight.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js\");\n/* harmony import */ var _viewer_scene_mesh_Mesh_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../viewer/scene/mesh/Mesh.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js\");\n/* harmony import */ var _viewer_scene_geometry_ReadableGeometry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../viewer/scene/geometry/ReadableGeometry.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/ReadableGeometry.js\");\n/* harmony import */ var _viewer_scene_materials_PhongMaterial_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../viewer/scene/materials/PhongMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PhongMaterial.js\");\n/* harmony import */ var _viewer_scene_materials_Texture_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../viewer/scene/materials/Texture.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Texture.js\");\n/* harmony import */ var _viewer_scene_geometry_builders_buildCylinderGeometry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../viewer/scene/geometry/builders/buildCylinderGeometry.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildCylinderGeometry.js\");\n/* harmony import */ var _CubeTextureCanvas_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CubeTextureCanvas.js */ \"./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/CubeTextureCanvas.js\");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * {@link Viewer} plugin that lets us look at the entire {@link Scene} from along a chosen axis or diagonal.\n *\n *  [<img src=\"https://user-images.githubusercontent.com/83100/55674490-c93c2e00-58b5-11e9-8a28-eb08876947c0.gif\">](https://xeokit.github.io/xeokit-sdk/examples/#gizmos_NavCubePlugin)\n *\n * [[Run this example](https://xeokit.github.io/xeokit-sdk/examples/#gizmos_NavCubePlugin)]\n *\n * ## Overview\n *\n * * Rotating the NavCube causes the Viewer's {@link Camera} to orbit its current\n * point-of-interest. Conversely, orbiting the Camera causes the NavCube to rotate accordingly.\n * * The faces of the NavCube are aligned with the Viewer's {@link Scene}'s World-space coordinate axis. Clicking on a face moves\n * the Camera to look at the entire Scene along the corresponding axis. Clicking on an edge or a corner looks at\n * the entire Scene along a diagonal.\n * * The NavCube can be configured to either jump or fly the Camera to each new position. We can configure how tightly the\n * NavCube fits the Scene to view, and when flying, we can configure how fast it flies. We can also configure whether the\n * NavCube fits all objects to view, or just the currently visible objects. See below for a usage example.\n * * Clicking the NavCube also sets {@link CameraControl#pivotPos} to the center of the fitted objects.\n *\n * ## Usage\n *\n * In the example below, we'll create a Viewer and add a NavCubePlugin, which will create a NavCube gizmo in the canvas\n * with the given ID. Then we'll use the {@link XKTLoaderPlugin} to load a model into the Viewer's Scene. We can then\n * use the NavCube to look at the model along each axis or diagonal.\n *\n * ````JavaScript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {XKTLoaderPlugin} from \"../src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\n * import {NavCubePlugin} from \"../src/plugins/NavCubePlugin/NavCubePlugin.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * viewer.camera.eye = [-3.93, 2.85, 27.01];\n * viewer.camera.look = [4.40, 3.72, 8.89];\n * viewer.camera.up = [-0.01, 0.99, 0.03];\n *\n * const navCube = new NavCubePlugin(viewer, {\n *\n *     canvasID: \"myNavCubeCanvas\",\n *\n *     visible: true,         // Initially visible (default)\n *\n *     cameraFly: true,       // Fly camera to each selected axis/diagonal\n *     cameraFitFOV: 45,      // How much field-of-view the scene takes once camera has fitted it to view\n *     cameraFlyDuration: 0.5,// How long (in seconds) camera takes to fly to each new axis/diagonal\n *\n *     fitVisible: false,     // Fit whole scene, including invisible objects (default)\n *\n *     synchProjection: false // Keep NavCube in perspective projection, even when camera switches to ortho (default)\n * });\n *\n * const xktLoader = new XKTLoaderPlugin(viewer);\n *\n * const model = xktLoader.load({\n *     id: \"myModel\",\n *     src: \"./models/xkt/duplex/duplex.xkt\",\n *     metaModelSrc: \"./metaModels/duplex/metaModel.json\", // Sets visual states of object in model\n *     edges: true\n * });\n * ````\n */\nclass NavCubePlugin extends _viewer_Plugin_js__WEBPACK_IMPORTED_MODULE_0__[\"Plugin\"] {\n\n    /**\n     * @constructor\n     * @param {Viewer} viewer The Viewer.\n     * @param {Object} cfg NavCubePlugin configuration.\n     * @param {String} [cfg.id=\"NavCube\"] Optional ID for this plugin, so that we can find it within {@link Viewer#plugins}.\n     * @param {String} [cfg.canvasId] ID of an existing HTML canvas to display the NavCube - either this or canvasElement is mandatory. When both values are given, the element reference is always preferred to the ID.\n     * @param {HTMLCanvasElement} [cfg.canvasElement] Reference of an existing HTML canvas to display the NavCube - either this or canvasId is mandatory. When both values are given, the element reference is always preferred to the ID.\n     * @param {Boolean} [cfg.visible=true] Initial visibility.\n     * @param {String} [cfg.cameraFly=true] Whether the {@link Camera} flies or jumps to each selected axis or diagonal.\n     * @param {String} [cfg.cameraFitFOV=45] How much of the field-of-view, in degrees, that the 3D scene should fill the {@link Canvas} when the {@link Camera} moves to an axis or diagonal.\n     * @param {String} [cfg.cameraFlyDuration=0.5] When flying the {@link Camera} to each new axis or diagonal, how long, in seconds, that the Camera takes to get there.\n     * @param {String} [cfg.color=\"lightgrey] Custom uniform color for the faces of the NavCube.\n     * @param {String} [cfg.frontColor=\"#55FF55\"] Custom color for the front face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.backColor=\"#55FF55\"] Custom color for the back face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.leftColor=\"#FF5555\"] Custom color for the left face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.rightColor=\"#FF5555\"] Custom color for the right face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.topColor=\"#5555FF\"] Custom color for the top face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.bottomColor=\"#5555FF\"] Custom color for the bottom face of the NavCube. Overrides ````color````.\n     * @param {String} [cfg.hoverColor=\"rgba(0,0,0,0.4)\"] Custom color for highlighting regions on the NavCube as we hover the pointer over them.\n     * @param {Boolean} [cfg.fitVisible=false] Sets whether the axis, corner and edge-aligned views will fit the\n     * view to the entire {@link Scene} or just to visible object-{@link Entity}s. Entitys are visible objects when {@link Entity#isObject} and {@link Entity#visible} are both ````true````.\n     * @param {Boolean} [cfg.synchProjection=false] Sets whether the NavCube switches between perspective and orthographic projections in synchrony with the {@link Camera}. When ````false````, the NavCube will always be rendered with perspective projection.\n     */\n    constructor(viewer, cfg = {}) {\n\n        super(\"NavCube\", viewer, cfg);\n\n        viewer.navCube = this;\n\n        var visible = true;\n\n        try {\n            this._navCubeScene = new _viewer_scene_scene_Scene_js__WEBPACK_IMPORTED_MODULE_2__[\"Scene\"](viewer, {\n                canvasId: cfg.canvasId,\n                canvasElement: cfg.canvasElement,\n                transparent: true\n            });\n\n            this._navCubeCanvas = this._navCubeScene.canvas.canvas;\n\n            this._navCubeScene.input.keyboardEnabled = false; // Don't want keyboard input in the NavCube\n\n        } catch (error) {\n            this.error(error);\n            return;\n        }\n\n        const navCubeScene = this._navCubeScene;\n\n        navCubeScene.clearLights();\n\n        new _viewer_scene_lights_DirLight_js__WEBPACK_IMPORTED_MODULE_3__[\"DirLight\"](navCubeScene, {dir: [0.4, -0.4, 0.8], color: [0.8, 1.0, 1.0], intensity: 1.0, space: \"view\"});\n        new _viewer_scene_lights_DirLight_js__WEBPACK_IMPORTED_MODULE_3__[\"DirLight\"](navCubeScene, {dir: [-0.8, -0.3, -0.4], color: [0.8, 0.8, 0.8], intensity: 1.0, space: \"view\"});\n        new _viewer_scene_lights_DirLight_js__WEBPACK_IMPORTED_MODULE_3__[\"DirLight\"](navCubeScene, {dir: [0.8, -0.6, -0.8], color: [1.0, 1.0, 1.0], intensity: 1.0, space: \"view\"});\n\n        this._navCubeCamera = navCubeScene.camera;\n        this._navCubeCamera.ortho.scale = 7.0;\n        this._navCubeCamera.ortho.near = 0.1;\n        this._navCubeCamera.ortho.far = 2000;\n\n        this._zUp = Boolean(viewer.camera.zUp);\n\n        var self = this;\n\n        this._synchCamera = (function () {\n            var matrix = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].rotationMat4c(-90 * _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].DEGTORAD, 1, 0, 0);\n            var eyeLookVec = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n            var eyeLookVecCube = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n            var upCube = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n            return function () {\n                var eye = viewer.camera.eye;\n                var look = viewer.camera.look;\n                var up = viewer.camera.up;\n                eyeLookVec = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].mulVec3Scalar(_viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].normalizeVec3(_viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].subVec3(eye, look, eyeLookVec)), 5);\n                if (self._zUp) { // +Z up\n                    _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].transformVec3(matrix, eyeLookVec, eyeLookVecCube);\n                    _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].transformVec3(matrix, up, upCube);\n                    self._navCubeCamera.look = [0, 0, 0];\n                    self._navCubeCamera.eye = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].transformVec3(matrix, eyeLookVec, eyeLookVecCube);\n                    self._navCubeCamera.up = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].transformPoint3(matrix, up, upCube);\n                } else { // +Y up\n                    self._navCubeCamera.look = [0, 0, 0];\n                    self._navCubeCamera.eye = eyeLookVec;\n                    self._navCubeCamera.up = up;\n                }\n            };\n        }());\n\n        this._cubeTextureCanvas = new _CubeTextureCanvas_js__WEBPACK_IMPORTED_MODULE_9__[\"CubeTextureCanvas\"](viewer, cfg);\n\n        this._cubeSampler = new _viewer_scene_materials_Texture_js__WEBPACK_IMPORTED_MODULE_7__[\"Texture\"](navCubeScene, {\n            image: this._cubeTextureCanvas.getImage(),\n            flipY: true,\n            wrapS: \"clampToEdge\",\n            wrapT: \"clampToEdge\"\n        });\n\n        this._cubeMesh = new _viewer_scene_mesh_Mesh_js__WEBPACK_IMPORTED_MODULE_4__[\"Mesh\"](navCubeScene, {\n            geometry: new _viewer_scene_geometry_ReadableGeometry_js__WEBPACK_IMPORTED_MODULE_5__[\"ReadableGeometry\"](navCubeScene, {\n                primitive: \"triangles\",\n                normals: [\n                    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n                    0, 1, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1,\n                    0, 0, -1, 0, 0, -1, 0, 0, -1\n                ],\n                positions: [\n                    1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, -1,\n                    1, -1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1,\n                    1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1\n                ],\n                uv: [\n                    0.5, 0.6666, 0.25, 0.6666, 0.25, 0.3333, 0.5, 0.3333, 0.5, 0.6666, 0.5, 0.3333, 0.75, 0.3333, 0.75, 0.6666,\n                    0.5, 0.6666, 0.5, 1, 0.25, 1, 0.25, 0.6666, 0.25, 0.6666, 0.0, 0.6666, 0.0, 0.3333, 0.25, 0.3333,\n                    0.25, 0, 0.50, 0, 0.50, 0.3333, 0.25, 0.3333, 0.75, 0.3333, 1.0, 0.3333, 1.0, 0.6666, 0.75, 0.6666\n                ],\n                indices: [\n                    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16,\n                    18, 19, 20, 21, 22, 20, 22, 23\n                ]\n            }),\n            material: new _viewer_scene_materials_PhongMaterial_js__WEBPACK_IMPORTED_MODULE_6__[\"PhongMaterial\"](navCubeScene, {\n                diffuse: [0.4, 0.4, 0.4],\n                specular: [0.4, 0.4, 0.4],\n                emissive: [.6, .6, .6],\n                diffuseMap: this._cubeSampler,\n                emissiveMap: this._cubeSampler\n            }),\n            visible: !!visible,\n            edges: true\n        });\n\n        this._shadow = new _viewer_scene_mesh_Mesh_js__WEBPACK_IMPORTED_MODULE_4__[\"Mesh\"](navCubeScene, {\n            geometry: new _viewer_scene_geometry_ReadableGeometry_js__WEBPACK_IMPORTED_MODULE_5__[\"ReadableGeometry\"](navCubeScene, Object(_viewer_scene_geometry_builders_buildCylinderGeometry_js__WEBPACK_IMPORTED_MODULE_8__[\"buildCylinderGeometry\"])({\n                center: [0, 0, 0],\n                radiusTop: 0.001,\n                radiusBottom: 1.4,\n                height: 0.01,\n                radialSegments: 20,\n                heightSegments: 1,\n                openEnded: true\n            })),\n            material: new _viewer_scene_materials_PhongMaterial_js__WEBPACK_IMPORTED_MODULE_6__[\"PhongMaterial\"](navCubeScene, {\n                diffuse: [0.0, 0.0, 0.0], specular: [0, 0, 0], emissive: [0.0, 0.0, 0.0], alpha: 0.5\n            }),\n            position: [0, -1.5, 0],\n            visible: !!visible,\n            pickable: false,\n            backfaces: false\n        });\n\n        this._onCameraMatrix = viewer.camera.on(\"matrix\", this._synchCamera);\n        this._onCameraWorldAxis = viewer.camera.on(\"worldAxis\", () => {\n            if (viewer.camera.zUp) {\n                this._zUp = true;\n                this._cubeTextureCanvas.setZUp();\n                this._repaint();\n                this._synchCamera();\n            } else if (viewer.camera.yUp) {\n                this._zUp = false;\n                this._cubeTextureCanvas.setYUp();\n                this._repaint();\n                this._synchCamera();\n            }\n        });\n        this._onCameraFOV = viewer.camera.perspective.on(\"fov\", (fov) => {\n            if (this._synchProjection) {\n                this._navCubeCamera.perspective.fov = fov;\n            }\n        });\n        this._onCameraProjection = viewer.camera.on(\"projection\", (projection) => {\n            if (this._synchProjection) {\n                this._navCubeCamera.projection = projection;\n            }\n        });\n\n        var lastAreaId = -1;\n\n        function actionMove(posX, posY) {\n            var yawInc = (posX - lastX) * -sensitivity;\n            var pitchInc = (posY - lastY) * -sensitivity;\n            yaw -= yawInc;\n            pitch -= pitchInc;\n            if (minPitch !== undefined && pitch < minPitch) {\n                pitch = minPitch;\n            }\n            if (maxPitch !== undefined && pitch > maxPitch) {\n                pitch = maxPitch;\n            }\n            viewer.camera.orbitYaw(yawInc);\n            viewer.camera.orbitPitch(-pitchInc);\n            lastX = posX;\n            lastY = posY;\n        }\n\n        function getCoordsWithinElement(event) {\n            var coords = [0, 0];\n            if (!event) {\n                event = window.event;\n                coords[0] = event.x;\n                coords[1] = event.y;\n            } else {\n                var element = event.target;\n                var totalOffsetLeft = 0;\n                var totalOffsetTop = 0;\n                while (element.offsetParent) {\n                    totalOffsetLeft += element.offsetLeft;\n                    totalOffsetTop += element.offsetTop;\n                    element = element.offsetParent;\n                }\n                coords[0] = event.pageX - totalOffsetLeft;\n                coords[1] = event.pageY - totalOffsetTop;\n            }\n            return coords;\n        }\n\n        {\n            var downX = null;\n            var downY = null;\n            var down = false;\n            var over = false;\n\n            var yaw = 0;\n            var pitch = 0;\n            var minPitch = null;\n            var maxPitch = null;\n            var sensitivity = 0.5;\n\n            var lastX;\n            var lastY;\n            var dragging = false;\n\n            self._navCubeCanvas.addEventListener(\"mouseenter\", self._onMouseEnter = function (e) {\n                over = true;\n            });\n\n\n            self._navCubeCanvas.addEventListener(\"mouseleave\", self._onMouseLeave = function (e) {\n                over = false;\n            });\n\n            self._navCubeCanvas.addEventListener(\"mousedown\", self._onMouseDown = function (e) {\n                if (e.which !== 1) {\n                    return;\n                }\n                downX = e.x;\n                downY = e.y;\n                lastX = e.clientX;\n                lastY = e.clientY;\n                var canvasPos = getCoordsWithinElement(e);\n                var hit = navCubeScene.pick({\n                    canvasPos: canvasPos\n                });\n                if (hit) {\n                    down = true;\n\n                } else {\n                    down = false;\n                }\n            });\n\n            document.addEventListener(\"mouseup\", self._onMouseUp = function (e) {\n                if (e.which !== 1) {// Left button\n                    return;\n                }\n                down = false;\n                if (downX === null) {\n                    return;\n                }\n                var canvasPos = getCoordsWithinElement(e);\n                var hit = navCubeScene.pick({\n                    canvasPos: canvasPos,\n                    pickSurface: true\n                });\n                if (hit) {\n                    if (hit.uv) {\n                        var areaId = self._cubeTextureCanvas.getArea(hit.uv);\n                        if (areaId >= 0) {\n                            document.body.style.cursor = \"pointer\";\n                            if (lastAreaId >= 0) {\n                                self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                                self._repaint();\n                                lastAreaId = -1;\n                            }\n                            if (areaId >= 0) {\n                                self._cubeTextureCanvas.setAreaHighlighted(areaId, true);\n                                lastAreaId = areaId;\n                                self._repaint();\n                                if (e.x < (downX - 3) || e.x > (downX + 3) || e.y < (downY - 3) || e.y > (downY + 3)) {\n                                    return;\n                                }\n                                var dir = self._cubeTextureCanvas.getAreaDir(areaId);\n                                if (dir) {\n                                    var up = self._cubeTextureCanvas.getAreaUp(areaId);\n                                    flyTo(dir, up, function () {\n                                        if (lastAreaId >= 0) {\n                                            self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                                            self._repaint();\n                                            lastAreaId = -1;\n                                        }\n                                        var hit = navCubeScene.pick({\n                                            canvasPos: canvasPos,\n                                            pickSurface: true\n                                        });\n                                        if (hit) {\n                                            if (hit.uv) {\n                                                var areaId = self._cubeTextureCanvas.getArea(hit.uv);\n                                                if (areaId !== undefined) {\n                                                    document.body.style.cursor = \"pointer\";\n                                                    if (lastAreaId >= 0) {\n                                                        self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                                                        self._repaint();\n                                                        lastAreaId = -1;\n                                                    }\n                                                    if (areaId >= 0) {\n                                                        self._cubeTextureCanvas.setAreaHighlighted(areaId, true);\n                                                        lastAreaId = areaId;\n                                                        self._repaint();\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n\n            document.addEventListener(\"mousemove\", self._onMouseMove = function (e) {\n                if (lastAreaId >= 0) {\n                    self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                    self._repaint();\n                    lastAreaId = -1;\n                }\n                if (e.buttons === 1 && !down) {\n                    return;\n                }\n                if (down) {\n                    var posX = e.clientX;\n                    var posY = e.clientY;\n                    document.body.style.cursor = \"move\";\n                    actionMove(posX, posY);\n                    return;\n                }\n                if (!over) {\n                    return;\n                }\n                var canvasPos = getCoordsWithinElement(e);\n                var hit = navCubeScene.pick({\n                    canvasPos: canvasPos,\n                    pickSurface: true\n                });\n                if (hit) {\n                    if (hit.uv) {\n                        document.body.style.cursor = \"pointer\";\n                        var areaId = self._cubeTextureCanvas.getArea(hit.uv);\n                        if (areaId === lastAreaId) {\n                            return;\n                        }\n                        if (lastAreaId >= 0) {\n                            self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                        }\n                        if (areaId >= 0) {\n                            self._cubeTextureCanvas.setAreaHighlighted(areaId, true);\n                            self._repaint();\n                            lastAreaId = areaId;\n                        }\n                    }\n                } else {\n                    document.body.style.cursor = \"default\";\n                    if (lastAreaId >= 0) {\n                        self._cubeTextureCanvas.setAreaHighlighted(lastAreaId, false);\n                        self._repaint();\n                        lastAreaId = -1;\n                    }\n                }\n            });\n\n            var flyTo = (function () {\n                var center = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n                return function (dir, up, ok) {\n                    var aabb = self._fitVisible ? viewer.scene.getAABB(viewer.scene.visibleObjectIds) : viewer.scene.aabb;\n                    var diag = _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].getAABB3Diag(aabb);\n                    _viewer_scene_math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].getAABB3Center(aabb, center);\n                    var dist = Math.abs(diag / Math.tan(55.0 / 2));\n                    viewer.cameraControl.pivotPos = center;\n                    if (self._cameraFly) {\n                        viewer.cameraFlight.flyTo({\n                            look: center,\n                            eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\n                            up: up || [0, 1, 0],\n                            orthoScale: diag * 1.3,\n                            fitFOV: self._cameraFitFOV,\n                            duration: self._cameraFlyDuration\n                        }, ok);\n                    } else {\n                        viewer.cameraFlight.jumpTo({\n                            look: center,\n                            eye: [center[0] - (dist * dir[0]), center[1] - (dist * dir[1]), center[2] - (dist * dir[2])],\n                            up: up || [0, 1, 0],\n                            orthoScale: diag * 1.3,\n                            fitFOV: self._cameraFitFOV\n                        }, ok);\n                    }\n                };\n            })();\n        }\n\n        this.setVisible(cfg.visible);\n        this.setCameraFitFOV(cfg.cameraFitFOV);\n        this.setCameraFly(cfg.cameraFly);\n        this.setCameraFlyDuration(cfg.cameraFlyDuration);\n        this.setFitVisible(cfg.fitVisible);\n        this.setSynchProjection(cfg.synchProjection);\n    }\n\n    send(name, value) {\n        switch (name) {\n            case \"language\":\n                this._cubeTextureCanvas.clear();\n                this._repaint(); // CubeTextureCanvas gets language from Viewer\n                break;\n        }\n    }\n\n    _repaint() {\n        const image = this._cubeTextureCanvas.getImage();\n        this._cubeMesh.material.diffuseMap.image = image;\n        this._cubeMesh.material.emissiveMap.image = image;\n    }\n\n    /**\n     * Sets if the NavCube is visible.\n     *\n     * @param {Boolean} visible Whether or not the NavCube is visible.\n     */\n    setVisible(visible = true) {\n        if (!this._navCubeCanvas) {\n            return;\n        }\n        this._cubeMesh.visible = visible;\n        this._shadow.visible = visible;\n        this._navCubeCanvas.style.visibility = visible ? \"visible\" : \"hidden\";\n    }\n\n    /**\n     * Gets if the NavCube is visible.\n     *\n     * @return {Boolean} True when the NavCube is visible.\n     */\n    getVisible() {\n        if (!this._navCubeCanvas) {\n            return false;\n        }\n        return this._cubeMesh.visible;\n    }\n\n\n    /**\n     * Sets whether the axis, corner and edge-aligned views will fit the\n     * view to the entire {@link Scene} or just to visible object-{@link Entity}s.\n     *\n     * Entitys are visible objects when {@link Entity#isObject} and {@link Entity#visible} are both ````true````.\n     *\n     * @param {Boolean} fitVisible Set ````true```` to fit only visible object-Entitys.\n     */\n    setFitVisible(fitVisible = false) {\n        this._fitVisible = fitVisible;\n    }\n\n    /**\n     * Gets whether the axis, corner and edge-aligned views will fit the\n     * view to the entire {@link Scene} or just to visible object-{@link Entity}s.\n     *\n     * Entitys are visible objects when {@link Entity#isObject} and {@link Entity#visible} are both ````true````.\n     *\n     * @return {Boolean} True when fitting only visible object-Entitys.\n     */\n    getFitVisible() {\n        return this._fitVisible;\n    }\n\n    /**\n     * Sets whether the {@link Camera} flies or jumps to each selected axis or diagonal.\n     *\n     * Default is ````true````, to fly.\n     *\n     * @param {Boolean} cameraFly Set ````true```` to fly, else ````false```` to jump.\n     */\n    setCameraFly(cameraFly = true) {\n        this._cameraFly = cameraFly;\n    }\n\n    /**\n     * Gets whether the {@link Camera} flies or jumps to each selected axis or diagonal.\n     *\n     * Default is ````true````, to fly.\n     *\n     * @returns {Boolean} Returns ````true```` to fly, else ````false```` to jump.\n     */\n    getCameraFly() {\n        return this._cameraFly;\n    }\n\n    /**\n     * Sets how much of the field-of-view, in degrees, that the {@link Scene} should\n     * fill the canvas when flying or jumping the {@link Camera} to each selected axis or diagonal.\n     *\n     * Default value is ````45````.\n     *\n     * @param {Number} cameraFitFOV New FOV value.\n     */\n    setCameraFitFOV(cameraFitFOV = 45) {\n        this._cameraFitFOV = cameraFitFOV;\n    }\n\n    /**\n     * Gets how much of the field-of-view, in degrees, that the {@link Scene} should\n     * fill the canvas when flying or jumping the {@link Camera} to each selected axis or diagonal.\n     *\n     * Default value is ````45````.\n     *\n     * @returns {Number} Current FOV value.\n     */\n    getCameraFitFOV() {\n        return this._cameraFitFOV;\n    }\n\n    /**\n     * When flying the {@link Camera} to each new axis or diagonal, sets how long, in seconds, that the Camera takes to get there.\n     *\n     * Default is ````0.5````.\n     *\n     * @param {Boolean} cameraFlyDuration Camera flight duration in seconds.\n     */\n    setCameraFlyDuration(cameraFlyDuration = 0.5) {\n        this._cameraFlyDuration = cameraFlyDuration;\n    }\n\n    /**\n     * When flying the {@link Camera} to each new axis or diagonal, gets how long, in seconds, that the Camera takes to get there.\n     *\n     * Default is ````0.5````.\n     *\n     * @returns {Boolean} Camera flight duration in seconds.\n     */\n    getCameraFlyDuration() {\n        return this._cameraFlyDuration;\n    }\n\n    /**\n     * Sets whether the NavCube switches between perspective and orthographic projections in synchrony with\n     * the {@link Camera}. When ````false````, the NavCube will always be rendered with perspective projection.\n     *\n     * @param {Boolean} synchProjection Set ````true```` to keep NavCube projection synchronized with {@link Camera#projection}.\n     */\n    setSynchProjection(synchProjection = false) {\n        this._synchProjection = synchProjection;\n    }\n\n    /**\n     * Gets whether the NavCube switches between perspective and orthographic projections in synchrony with\n     * the {@link Camera}. When ````false````, the NavCube will always be rendered with perspective projection.\n     *\n     * @return {Boolean} True when NavCube projection is synchronized with {@link Camera#projection}.\n     */\n    getSynchProjection() {\n        return this._synchProjection;\n    }\n\n    /**\n     * Destroys this NavCubePlugin.\n     *\n     * Does not destroy the canvas the NavCubePlugin was configured with.\n     */\n    destroy() {\n\n        if (this._navCubeCanvas) {\n\n            this.viewer.camera.off(this._onCameraMatrix);\n            this.viewer.camera.off(this._onCameraWorldAxis);\n            this.viewer.camera.perspective.off(this._onCameraFOV);\n            this.viewer.camera.off(this._onCameraProjection);\n\n            this._navCubeCanvas.removeEventListener(\"mouseenter\", this._onMouseEnter);\n            this._navCubeCanvas.removeEventListener(\"mouseleave\", this._onMouseLeave);\n            this._navCubeCanvas.removeEventListener(\"mousedown\", this._onMouseDown);\n\n            document.removeEventListener(\"mousemove\", this._onMouseMove);\n            document.removeEventListener(\"mouseup\", this._onMouseUp);\n\n            this._navCubeCanvas = null;\n            this._cubeTextureCanvas.destroy();\n            this._cubeTextureCanvas = null;\n\n            this._onMouseEnter = null;\n            this._onMouseLeave = null;\n            this._onMouseDown = null;\n            this._onMouseMove = null;\n            this._onMouseUp = null;\n        }\n\n        this._navCubeScene.destroy();\n        this._navCubeScene = null;\n        this._cubeMesh = null;\n        this._shadow = null;\n\n        super.destroy();\n    }\n}\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvcGx1Z2lucy9OYXZDdWJlUGx1Z2luL05hdkN1YmVQbHVnaW4uanM/NmE1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBOEM7QUFDTztBQUNHO0FBQ1M7QUFDVjtBQUMwQjtBQUNMO0FBQ1o7QUFDb0M7QUFDM0M7O0FBRXpEO0FBQ0EsSUFBSSxhQUFhLHlDQUF5QyxZQUFZO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLGFBQWE7QUFDNUQ7QUFDQSw2REFBNkQsWUFBWTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDZCQUE2QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxzQkFBc0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDRCQUE0Qix3REFBTTs7QUFFbEM7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPLGdGQUFnRixxQkFBcUI7QUFDM0gsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsa0JBQWtCO0FBQ2pDLGVBQWUsUUFBUTtBQUN2QixlQUFlLE9BQU8sbUNBQW1DLGFBQWE7QUFDdEUsZUFBZSxPQUFPLHFHQUFxRyxhQUFhLFdBQVcsYUFBYTtBQUNoSyxlQUFlLE9BQU8sOENBQThDLGFBQWE7QUFDakYsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsMkJBQTJCLFlBQVksNEJBQTRCLGFBQWEscUNBQXFDLHNCQUFzQixNQUFNLHFCQUFxQjtBQUN0SyxlQUFlLFFBQVEsdUlBQXVJLGFBQWE7QUFDM0s7QUFDQSxnQ0FBZ0M7O0FBRWhDOztBQUVBOztBQUVBOztBQUVBO0FBQ0EscUNBQXFDLGtFQUFLO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7O0FBRUEsNkRBQTZEOztBQUU3RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLFlBQVkseUVBQVEsZ0JBQWdCLDZFQUE2RTtBQUNqSCxZQUFZLHlFQUFRLGdCQUFnQiwrRUFBK0U7QUFDbkgsWUFBWSx5RUFBUSxnQkFBZ0IsOEVBQThFOztBQUVsSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLHlCQUF5QiwrREFBSSxxQkFBcUIsK0RBQUk7QUFDdEQsNkJBQTZCLCtEQUFJO0FBQ2pDLGlDQUFpQywrREFBSTtBQUNyQyx5QkFBeUIsK0RBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsK0RBQUksZUFBZSwrREFBSSxlQUFlLCtEQUFJO0FBQ3ZFLGdDQUFnQztBQUNoQyxvQkFBb0IsK0RBQUk7QUFDeEIsb0JBQW9CLCtEQUFJO0FBQ3hCO0FBQ0EsOENBQThDLCtEQUFJO0FBQ2xELDZDQUE2QywrREFBSTtBQUNqRCxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVCxzQ0FBc0MsdUVBQWlCOztBQUV2RCxnQ0FBZ0MsMEVBQU87QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVULDZCQUE2QiwrREFBSTtBQUNqQywwQkFBMEIsMkZBQWdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCLHNGQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7O0FBRVQsMkJBQTJCLCtEQUFJO0FBQy9CLDBCQUEwQiwyRkFBZ0IsZUFBZSxzSEFBcUI7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCLHNGQUFhO0FBQ3ZDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTs7O0FBR2I7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBLDZCQUE2QiwrREFBSTtBQUNqQztBQUNBO0FBQ0EsK0JBQStCLCtEQUFJO0FBQ25DLG9CQUFvQiwrREFBSTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZLDRCQUE0QixhQUFhO0FBQ2hGO0FBQ0EseUNBQXlDLHNCQUFzQixNQUFNLHFCQUFxQjtBQUMxRjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLFlBQVksNEJBQTRCLGFBQWE7QUFDaEY7QUFDQSx5Q0FBeUMsc0JBQXNCLE1BQU0scUJBQXFCO0FBQzFGO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRSxZQUFZO0FBQzdFLG1EQUFtRCxhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRSxZQUFZO0FBQzdFLG1EQUFtRCxhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksYUFBYTtBQUN6QjtBQUNBLGVBQWUsUUFBUSxnRkFBZ0Ysd0JBQXdCO0FBQy9IO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQSxnQkFBZ0IsUUFBUSxvREFBb0Qsd0JBQXdCO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFdUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy9wbHVnaW5zL05hdkN1YmVQbHVnaW4vTmF2Q3ViZVBsdWdpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGx1Z2lufSBmcm9tIFwiLi4vLi4vdmlld2VyL1BsdWdpbi5qc1wiO1xuaW1wb3J0IHttYXRofSBmcm9tIFwiLi4vLi4vdmlld2VyL3NjZW5lL21hdGgvbWF0aC5qc1wiO1xuaW1wb3J0IHtTY2VuZX0gZnJvbSBcIi4uLy4uL3ZpZXdlci9zY2VuZS9zY2VuZS9TY2VuZS5qc1wiO1xuaW1wb3J0IHtEaXJMaWdodH0gZnJvbSBcIi4vLi4vLi4vdmlld2VyL3NjZW5lL2xpZ2h0cy9EaXJMaWdodC5qc1wiO1xuaW1wb3J0IHtNZXNofSBmcm9tIFwiLi8uLi8uLi92aWV3ZXIvc2NlbmUvbWVzaC9NZXNoLmpzXCI7XG5pbXBvcnQge1JlYWRhYmxlR2VvbWV0cnl9IGZyb20gXCIuLi8uLi92aWV3ZXIvc2NlbmUvZ2VvbWV0cnkvUmVhZGFibGVHZW9tZXRyeS5qc1wiO1xuaW1wb3J0IHtQaG9uZ01hdGVyaWFsfSBmcm9tIFwiLi4vLi4vdmlld2VyL3NjZW5lL21hdGVyaWFscy9QaG9uZ01hdGVyaWFsLmpzXCI7XG5pbXBvcnQge1RleHR1cmV9IGZyb20gXCIuLi8uLi92aWV3ZXIvc2NlbmUvbWF0ZXJpYWxzL1RleHR1cmUuanNcIjtcbmltcG9ydCB7YnVpbGRDeWxpbmRlckdlb21ldHJ5fSBmcm9tIFwiLi4vLi4vdmlld2VyL3NjZW5lL2dlb21ldHJ5L2J1aWxkZXJzL2J1aWxkQ3lsaW5kZXJHZW9tZXRyeS5qc1wiO1xuaW1wb3J0IHtDdWJlVGV4dHVyZUNhbnZhc30gZnJvbSBcIi4vQ3ViZVRleHR1cmVDYW52YXMuanNcIjtcblxuLyoqXG4gKiB7QGxpbmsgVmlld2VyfSBwbHVnaW4gdGhhdCBsZXRzIHVzIGxvb2sgYXQgdGhlIGVudGlyZSB7QGxpbmsgU2NlbmV9IGZyb20gYWxvbmcgYSBjaG9zZW4gYXhpcyBvciBkaWFnb25hbC5cbiAqXG4gKiAgWzxpbWcgc3JjPVwiaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODMxMDAvNTU2NzQ0OTAtYzkzYzJlMDAtNThiNS0xMWU5LThhMjgtZWIwODg3Njk0N2MwLmdpZlwiPl0oaHR0cHM6Ly94ZW9raXQuZ2l0aHViLmlvL3hlb2tpdC1zZGsvZXhhbXBsZXMvI2dpem1vc19OYXZDdWJlUGx1Z2luKVxuICpcbiAqIFtbUnVuIHRoaXMgZXhhbXBsZV0oaHR0cHM6Ly94ZW9raXQuZ2l0aHViLmlvL3hlb2tpdC1zZGsvZXhhbXBsZXMvI2dpem1vc19OYXZDdWJlUGx1Z2luKV1cbiAqXG4gKiAjIyBPdmVydmlld1xuICpcbiAqICogUm90YXRpbmcgdGhlIE5hdkN1YmUgY2F1c2VzIHRoZSBWaWV3ZXIncyB7QGxpbmsgQ2FtZXJhfSB0byBvcmJpdCBpdHMgY3VycmVudFxuICogcG9pbnQtb2YtaW50ZXJlc3QuIENvbnZlcnNlbHksIG9yYml0aW5nIHRoZSBDYW1lcmEgY2F1c2VzIHRoZSBOYXZDdWJlIHRvIHJvdGF0ZSBhY2NvcmRpbmdseS5cbiAqICogVGhlIGZhY2VzIG9mIHRoZSBOYXZDdWJlIGFyZSBhbGlnbmVkIHdpdGggdGhlIFZpZXdlcidzIHtAbGluayBTY2VuZX0ncyBXb3JsZC1zcGFjZSBjb29yZGluYXRlIGF4aXMuIENsaWNraW5nIG9uIGEgZmFjZSBtb3Zlc1xuICogdGhlIENhbWVyYSB0byBsb29rIGF0IHRoZSBlbnRpcmUgU2NlbmUgYWxvbmcgdGhlIGNvcnJlc3BvbmRpbmcgYXhpcy4gQ2xpY2tpbmcgb24gYW4gZWRnZSBvciBhIGNvcm5lciBsb29rcyBhdFxuICogdGhlIGVudGlyZSBTY2VuZSBhbG9uZyBhIGRpYWdvbmFsLlxuICogKiBUaGUgTmF2Q3ViZSBjYW4gYmUgY29uZmlndXJlZCB0byBlaXRoZXIganVtcCBvciBmbHkgdGhlIENhbWVyYSB0byBlYWNoIG5ldyBwb3NpdGlvbi4gV2UgY2FuIGNvbmZpZ3VyZSBob3cgdGlnaHRseSB0aGVcbiAqIE5hdkN1YmUgZml0cyB0aGUgU2NlbmUgdG8gdmlldywgYW5kIHdoZW4gZmx5aW5nLCB3ZSBjYW4gY29uZmlndXJlIGhvdyBmYXN0IGl0IGZsaWVzLiBXZSBjYW4gYWxzbyBjb25maWd1cmUgd2hldGhlciB0aGVcbiAqIE5hdkN1YmUgZml0cyBhbGwgb2JqZWN0cyB0byB2aWV3LCBvciBqdXN0IHRoZSBjdXJyZW50bHkgdmlzaWJsZSBvYmplY3RzLiBTZWUgYmVsb3cgZm9yIGEgdXNhZ2UgZXhhbXBsZS5cbiAqICogQ2xpY2tpbmcgdGhlIE5hdkN1YmUgYWxzbyBzZXRzIHtAbGluayBDYW1lcmFDb250cm9sI3Bpdm90UG9zfSB0byB0aGUgY2VudGVyIG9mIHRoZSBmaXR0ZWQgb2JqZWN0cy5cbiAqXG4gKiAjIyBVc2FnZVxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93LCB3ZSdsbCBjcmVhdGUgYSBWaWV3ZXIgYW5kIGFkZCBhIE5hdkN1YmVQbHVnaW4sIHdoaWNoIHdpbGwgY3JlYXRlIGEgTmF2Q3ViZSBnaXptbyBpbiB0aGUgY2FudmFzXG4gKiB3aXRoIHRoZSBnaXZlbiBJRC4gVGhlbiB3ZSdsbCB1c2UgdGhlIHtAbGluayBYS1RMb2FkZXJQbHVnaW59IHRvIGxvYWQgYSBtb2RlbCBpbnRvIHRoZSBWaWV3ZXIncyBTY2VuZS4gV2UgY2FuIHRoZW5cbiAqIHVzZSB0aGUgTmF2Q3ViZSB0byBsb29rIGF0IHRoZSBtb2RlbCBhbG9uZyBlYWNoIGF4aXMgb3IgZGlhZ29uYWwuXG4gKlxuICogYGBgYEphdmFTY3JpcHRcbiAqIGltcG9ydCB7Vmlld2VyfSBmcm9tIFwiLi4vc3JjL3ZpZXdlci9WaWV3ZXIuanNcIjtcbiAqIGltcG9ydCB7WEtUTG9hZGVyUGx1Z2lufSBmcm9tIFwiLi4vc3JjL3BsdWdpbnMvWEtUTG9hZGVyUGx1Z2luL1hLVExvYWRlclBsdWdpbi5qc1wiO1xuICogaW1wb3J0IHtOYXZDdWJlUGx1Z2lufSBmcm9tIFwiLi4vc3JjL3BsdWdpbnMvTmF2Q3ViZVBsdWdpbi9OYXZDdWJlUGx1Z2luLmpzXCI7XG4gKlxuICogY29uc3Qgdmlld2VyID0gbmV3IFZpZXdlcih7XG4gKiAgICAgY2FudmFzSWQ6IFwibXlDYW52YXNcIlxuICogfSk7XG4gKlxuICogdmlld2VyLmNhbWVyYS5leWUgPSBbLTMuOTMsIDIuODUsIDI3LjAxXTtcbiAqIHZpZXdlci5jYW1lcmEubG9vayA9IFs0LjQwLCAzLjcyLCA4Ljg5XTtcbiAqIHZpZXdlci5jYW1lcmEudXAgPSBbLTAuMDEsIDAuOTksIDAuMDNdO1xuICpcbiAqIGNvbnN0IG5hdkN1YmUgPSBuZXcgTmF2Q3ViZVBsdWdpbih2aWV3ZXIsIHtcbiAqXG4gKiAgICAgY2FudmFzSUQ6IFwibXlOYXZDdWJlQ2FudmFzXCIsXG4gKlxuICogICAgIHZpc2libGU6IHRydWUsICAgICAgICAgLy8gSW5pdGlhbGx5IHZpc2libGUgKGRlZmF1bHQpXG4gKlxuICogICAgIGNhbWVyYUZseTogdHJ1ZSwgICAgICAgLy8gRmx5IGNhbWVyYSB0byBlYWNoIHNlbGVjdGVkIGF4aXMvZGlhZ29uYWxcbiAqICAgICBjYW1lcmFGaXRGT1Y6IDQ1LCAgICAgIC8vIEhvdyBtdWNoIGZpZWxkLW9mLXZpZXcgdGhlIHNjZW5lIHRha2VzIG9uY2UgY2FtZXJhIGhhcyBmaXR0ZWQgaXQgdG8gdmlld1xuICogICAgIGNhbWVyYUZseUR1cmF0aW9uOiAwLjUsLy8gSG93IGxvbmcgKGluIHNlY29uZHMpIGNhbWVyYSB0YWtlcyB0byBmbHkgdG8gZWFjaCBuZXcgYXhpcy9kaWFnb25hbFxuICpcbiAqICAgICBmaXRWaXNpYmxlOiBmYWxzZSwgICAgIC8vIEZpdCB3aG9sZSBzY2VuZSwgaW5jbHVkaW5nIGludmlzaWJsZSBvYmplY3RzIChkZWZhdWx0KVxuICpcbiAqICAgICBzeW5jaFByb2plY3Rpb246IGZhbHNlIC8vIEtlZXAgTmF2Q3ViZSBpbiBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uLCBldmVuIHdoZW4gY2FtZXJhIHN3aXRjaGVzIHRvIG9ydGhvIChkZWZhdWx0KVxuICogfSk7XG4gKlxuICogY29uc3QgeGt0TG9hZGVyID0gbmV3IFhLVExvYWRlclBsdWdpbih2aWV3ZXIpO1xuICpcbiAqIGNvbnN0IG1vZGVsID0geGt0TG9hZGVyLmxvYWQoe1xuICogICAgIGlkOiBcIm15TW9kZWxcIixcbiAqICAgICBzcmM6IFwiLi9tb2RlbHMveGt0L2R1cGxleC9kdXBsZXgueGt0XCIsXG4gKiAgICAgbWV0YU1vZGVsU3JjOiBcIi4vbWV0YU1vZGVscy9kdXBsZXgvbWV0YU1vZGVsLmpzb25cIiwgLy8gU2V0cyB2aXN1YWwgc3RhdGVzIG9mIG9iamVjdCBpbiBtb2RlbFxuICogICAgIGVkZ2VzOiB0cnVlXG4gKiB9KTtcbiAqIGBgYGBcbiAqL1xuY2xhc3MgTmF2Q3ViZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1ZpZXdlcn0gdmlld2VyIFRoZSBWaWV3ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyBOYXZDdWJlUGx1Z2luIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuaWQ9XCJOYXZDdWJlXCJdIE9wdGlvbmFsIElEIGZvciB0aGlzIHBsdWdpbiwgc28gdGhhdCB3ZSBjYW4gZmluZCBpdCB3aXRoaW4ge0BsaW5rIFZpZXdlciNwbHVnaW5zfS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NmZy5jYW52YXNJZF0gSUQgb2YgYW4gZXhpc3RpbmcgSFRNTCBjYW52YXMgdG8gZGlzcGxheSB0aGUgTmF2Q3ViZSAtIGVpdGhlciB0aGlzIG9yIGNhbnZhc0VsZW1lbnQgaXMgbWFuZGF0b3J5LiBXaGVuIGJvdGggdmFsdWVzIGFyZSBnaXZlbiwgdGhlIGVsZW1lbnQgcmVmZXJlbmNlIGlzIGFsd2F5cyBwcmVmZXJyZWQgdG8gdGhlIElELlxuICAgICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IFtjZmcuY2FudmFzRWxlbWVudF0gUmVmZXJlbmNlIG9mIGFuIGV4aXN0aW5nIEhUTUwgY2FudmFzIHRvIGRpc3BsYXkgdGhlIE5hdkN1YmUgLSBlaXRoZXIgdGhpcyBvciBjYW52YXNJZCBpcyBtYW5kYXRvcnkuIFdoZW4gYm90aCB2YWx1ZXMgYXJlIGdpdmVuLCB0aGUgZWxlbWVudCByZWZlcmVuY2UgaXMgYWx3YXlzIHByZWZlcnJlZCB0byB0aGUgSUQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2ZnLnZpc2libGU9dHJ1ZV0gSW5pdGlhbCB2aXNpYmlsaXR5LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2ZnLmNhbWVyYUZseT10cnVlXSBXaGV0aGVyIHRoZSB7QGxpbmsgQ2FtZXJhfSBmbGllcyBvciBqdW1wcyB0byBlYWNoIHNlbGVjdGVkIGF4aXMgb3IgZGlhZ29uYWwuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuY2FtZXJhRml0Rk9WPTQ1XSBIb3cgbXVjaCBvZiB0aGUgZmllbGQtb2YtdmlldywgaW4gZGVncmVlcywgdGhhdCB0aGUgM0Qgc2NlbmUgc2hvdWxkIGZpbGwgdGhlIHtAbGluayBDYW52YXN9IHdoZW4gdGhlIHtAbGluayBDYW1lcmF9IG1vdmVzIHRvIGFuIGF4aXMgb3IgZGlhZ29uYWwuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuY2FtZXJhRmx5RHVyYXRpb249MC41XSBXaGVuIGZseWluZyB0aGUge0BsaW5rIENhbWVyYX0gdG8gZWFjaCBuZXcgYXhpcyBvciBkaWFnb25hbCwgaG93IGxvbmcsIGluIHNlY29uZHMsIHRoYXQgdGhlIENhbWVyYSB0YWtlcyB0byBnZXQgdGhlcmUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuY29sb3I9XCJsaWdodGdyZXldIEN1c3RvbSB1bmlmb3JtIGNvbG9yIGZvciB0aGUgZmFjZXMgb2YgdGhlIE5hdkN1YmUuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuZnJvbnRDb2xvcj1cIiM1NUZGNTVcIl0gQ3VzdG9tIGNvbG9yIGZvciB0aGUgZnJvbnQgZmFjZSBvZiB0aGUgTmF2Q3ViZS4gT3ZlcnJpZGVzIGBgYGBjb2xvcmBgYGAuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuYmFja0NvbG9yPVwiIzU1RkY1NVwiXSBDdXN0b20gY29sb3IgZm9yIHRoZSBiYWNrIGZhY2Ugb2YgdGhlIE5hdkN1YmUuIE92ZXJyaWRlcyBgYGBgY29sb3JgYGBgLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2ZnLmxlZnRDb2xvcj1cIiNGRjU1NTVcIl0gQ3VzdG9tIGNvbG9yIGZvciB0aGUgbGVmdCBmYWNlIG9mIHRoZSBOYXZDdWJlLiBPdmVycmlkZXMgYGBgYGNvbG9yYGBgYC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NmZy5yaWdodENvbG9yPVwiI0ZGNTU1NVwiXSBDdXN0b20gY29sb3IgZm9yIHRoZSByaWdodCBmYWNlIG9mIHRoZSBOYXZDdWJlLiBPdmVycmlkZXMgYGBgYGNvbG9yYGBgYC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NmZy50b3BDb2xvcj1cIiM1NTU1RkZcIl0gQ3VzdG9tIGNvbG9yIGZvciB0aGUgdG9wIGZhY2Ugb2YgdGhlIE5hdkN1YmUuIE92ZXJyaWRlcyBgYGBgY29sb3JgYGBgLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2ZnLmJvdHRvbUNvbG9yPVwiIzU1NTVGRlwiXSBDdXN0b20gY29sb3IgZm9yIHRoZSBib3R0b20gZmFjZSBvZiB0aGUgTmF2Q3ViZS4gT3ZlcnJpZGVzIGBgYGBjb2xvcmBgYGAuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuaG92ZXJDb2xvcj1cInJnYmEoMCwwLDAsMC40KVwiXSBDdXN0b20gY29sb3IgZm9yIGhpZ2hsaWdodGluZyByZWdpb25zIG9uIHRoZSBOYXZDdWJlIGFzIHdlIGhvdmVyIHRoZSBwb2ludGVyIG92ZXIgdGhlbS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjZmcuZml0VmlzaWJsZT1mYWxzZV0gU2V0cyB3aGV0aGVyIHRoZSBheGlzLCBjb3JuZXIgYW5kIGVkZ2UtYWxpZ25lZCB2aWV3cyB3aWxsIGZpdCB0aGVcbiAgICAgKiB2aWV3IHRvIHRoZSBlbnRpcmUge0BsaW5rIFNjZW5lfSBvciBqdXN0IHRvIHZpc2libGUgb2JqZWN0LXtAbGluayBFbnRpdHl9cy4gRW50aXR5cyBhcmUgdmlzaWJsZSBvYmplY3RzIHdoZW4ge0BsaW5rIEVudGl0eSNpc09iamVjdH0gYW5kIHtAbGluayBFbnRpdHkjdmlzaWJsZX0gYXJlIGJvdGggYGBgYHRydWVgYGBgLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NmZy5zeW5jaFByb2plY3Rpb249ZmFsc2VdIFNldHMgd2hldGhlciB0aGUgTmF2Q3ViZSBzd2l0Y2hlcyBiZXR3ZWVuIHBlcnNwZWN0aXZlIGFuZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbnMgaW4gc3luY2hyb255IHdpdGggdGhlIHtAbGluayBDYW1lcmF9LiBXaGVuIGBgYGBmYWxzZWBgYGAsIHRoZSBOYXZDdWJlIHdpbGwgYWx3YXlzIGJlIHJlbmRlcmVkIHdpdGggcGVyc3BlY3RpdmUgcHJvamVjdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2aWV3ZXIsIGNmZyA9IHt9KSB7XG5cbiAgICAgICAgc3VwZXIoXCJOYXZDdWJlXCIsIHZpZXdlciwgY2ZnKTtcblxuICAgICAgICB2aWV3ZXIubmF2Q3ViZSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHZpc2libGUgPSB0cnVlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9uYXZDdWJlU2NlbmUgPSBuZXcgU2NlbmUodmlld2VyLCB7XG4gICAgICAgICAgICAgICAgY2FudmFzSWQ6IGNmZy5jYW52YXNJZCxcbiAgICAgICAgICAgICAgICBjYW52YXNFbGVtZW50OiBjZmcuY2FudmFzRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX25hdkN1YmVDYW52YXMgPSB0aGlzLl9uYXZDdWJlU2NlbmUuY2FudmFzLmNhbnZhcztcblxuICAgICAgICAgICAgdGhpcy5fbmF2Q3ViZVNjZW5lLmlucHV0LmtleWJvYXJkRW5hYmxlZCA9IGZhbHNlOyAvLyBEb24ndCB3YW50IGtleWJvYXJkIGlucHV0IGluIHRoZSBOYXZDdWJlXG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmF2Q3ViZVNjZW5lID0gdGhpcy5fbmF2Q3ViZVNjZW5lO1xuXG4gICAgICAgIG5hdkN1YmVTY2VuZS5jbGVhckxpZ2h0cygpO1xuXG4gICAgICAgIG5ldyBEaXJMaWdodChuYXZDdWJlU2NlbmUsIHtkaXI6IFswLjQsIC0wLjQsIDAuOF0sIGNvbG9yOiBbMC44LCAxLjAsIDEuMF0sIGludGVuc2l0eTogMS4wLCBzcGFjZTogXCJ2aWV3XCJ9KTtcbiAgICAgICAgbmV3IERpckxpZ2h0KG5hdkN1YmVTY2VuZSwge2RpcjogWy0wLjgsIC0wLjMsIC0wLjRdLCBjb2xvcjogWzAuOCwgMC44LCAwLjhdLCBpbnRlbnNpdHk6IDEuMCwgc3BhY2U6IFwidmlld1wifSk7XG4gICAgICAgIG5ldyBEaXJMaWdodChuYXZDdWJlU2NlbmUsIHtkaXI6IFswLjgsIC0wLjYsIC0wLjhdLCBjb2xvcjogWzEuMCwgMS4wLCAxLjBdLCBpbnRlbnNpdHk6IDEuMCwgc3BhY2U6IFwidmlld1wifSk7XG5cbiAgICAgICAgdGhpcy5fbmF2Q3ViZUNhbWVyYSA9IG5hdkN1YmVTY2VuZS5jYW1lcmE7XG4gICAgICAgIHRoaXMuX25hdkN1YmVDYW1lcmEub3J0aG8uc2NhbGUgPSA3LjA7XG4gICAgICAgIHRoaXMuX25hdkN1YmVDYW1lcmEub3J0aG8ubmVhciA9IDAuMTtcbiAgICAgICAgdGhpcy5fbmF2Q3ViZUNhbWVyYS5vcnRoby5mYXIgPSAyMDAwO1xuXG4gICAgICAgIHRoaXMuX3pVcCA9IEJvb2xlYW4odmlld2VyLmNhbWVyYS56VXApO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB0aGlzLl9zeW5jaENhbWVyYSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gbWF0aC5yb3RhdGlvbk1hdDRjKC05MCAqIG1hdGguREVHVE9SQUQsIDEsIDAsIDApO1xuICAgICAgICAgICAgdmFyIGV5ZUxvb2tWZWMgPSBtYXRoLnZlYzMoKTtcbiAgICAgICAgICAgIHZhciBleWVMb29rVmVjQ3ViZSA9IG1hdGgudmVjMygpO1xuICAgICAgICAgICAgdmFyIHVwQ3ViZSA9IG1hdGgudmVjMygpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXllID0gdmlld2VyLmNhbWVyYS5leWU7XG4gICAgICAgICAgICAgICAgdmFyIGxvb2sgPSB2aWV3ZXIuY2FtZXJhLmxvb2s7XG4gICAgICAgICAgICAgICAgdmFyIHVwID0gdmlld2VyLmNhbWVyYS51cDtcbiAgICAgICAgICAgICAgICBleWVMb29rVmVjID0gbWF0aC5tdWxWZWMzU2NhbGFyKG1hdGgubm9ybWFsaXplVmVjMyhtYXRoLnN1YlZlYzMoZXllLCBsb29rLCBleWVMb29rVmVjKSksIDUpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLl96VXApIHsgLy8gK1ogdXBcbiAgICAgICAgICAgICAgICAgICAgbWF0aC50cmFuc2Zvcm1WZWMzKG1hdHJpeCwgZXllTG9va1ZlYywgZXllTG9va1ZlY0N1YmUpO1xuICAgICAgICAgICAgICAgICAgICBtYXRoLnRyYW5zZm9ybVZlYzMobWF0cml4LCB1cCwgdXBDdWJlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbmF2Q3ViZUNhbWVyYS5sb29rID0gWzAsIDAsIDBdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9uYXZDdWJlQ2FtZXJhLmV5ZSA9IG1hdGgudHJhbnNmb3JtVmVjMyhtYXRyaXgsIGV5ZUxvb2tWZWMsIGV5ZUxvb2tWZWNDdWJlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbmF2Q3ViZUNhbWVyYS51cCA9IG1hdGgudHJhbnNmb3JtUG9pbnQzKG1hdHJpeCwgdXAsIHVwQ3ViZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gK1kgdXBcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbmF2Q3ViZUNhbWVyYS5sb29rID0gWzAsIDAsIDBdO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl9uYXZDdWJlQ2FtZXJhLmV5ZSA9IGV5ZUxvb2tWZWM7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX25hdkN1YmVDYW1lcmEudXAgPSB1cDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KCkpO1xuXG4gICAgICAgIHRoaXMuX2N1YmVUZXh0dXJlQ2FudmFzID0gbmV3IEN1YmVUZXh0dXJlQ2FudmFzKHZpZXdlciwgY2ZnKTtcblxuICAgICAgICB0aGlzLl9jdWJlU2FtcGxlciA9IG5ldyBUZXh0dXJlKG5hdkN1YmVTY2VuZSwge1xuICAgICAgICAgICAgaW1hZ2U6IHRoaXMuX2N1YmVUZXh0dXJlQ2FudmFzLmdldEltYWdlKCksXG4gICAgICAgICAgICBmbGlwWTogdHJ1ZSxcbiAgICAgICAgICAgIHdyYXBTOiBcImNsYW1wVG9FZGdlXCIsXG4gICAgICAgICAgICB3cmFwVDogXCJjbGFtcFRvRWRnZVwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2N1YmVNZXNoID0gbmV3IE1lc2gobmF2Q3ViZVNjZW5lLCB7XG4gICAgICAgICAgICBnZW9tZXRyeTogbmV3IFJlYWRhYmxlR2VvbWV0cnkobmF2Q3ViZVNjZW5lLCB7XG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlOiBcInRyaWFuZ2xlc1wiLFxuICAgICAgICAgICAgICAgIG5vcm1hbHM6IFtcbiAgICAgICAgICAgICAgICAgICAgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMCwgMSwgMCwgMCwgMSwgMCwgMCwgMSwgMCxcbiAgICAgICAgICAgICAgICAgICAgMCwgMSwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIDAsIC0xLCAwLCAwLCAtMSwgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAwLCAtMSxcbiAgICAgICAgICAgICAgICAgICAgMCwgMCwgLTEsIDAsIDAsIC0xLCAwLCAwLCAtMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIDEsIDEsIDEsIC0xLCAxLCAxLCAtMSwgLTEsIDEsIDEsIC0xLCAxLCAxLCAxLCAxLCAxLCAtMSwgMSwgMSwgLTEsIC0xLCAxLCAxLCAtMSwgMSwgMSwgMSwgMSwgMSwgLTEsIC0xLFxuICAgICAgICAgICAgICAgICAgICAxLCAtMSwgLTEsIDEsIDEsIC0xLCAxLCAxLCAtMSwgMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgMSwgLTEsIC0xLCAtMSwgMSwgLTEsIC0xLCAxLCAtMSwgMSwgLTEsIC0xLFxuICAgICAgICAgICAgICAgICAgICAxLCAxLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAxLCAtMSwgMSwgMSwgLTFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHV2OiBbXG4gICAgICAgICAgICAgICAgICAgIDAuNSwgMC42NjY2LCAwLjI1LCAwLjY2NjYsIDAuMjUsIDAuMzMzMywgMC41LCAwLjMzMzMsIDAuNSwgMC42NjY2LCAwLjUsIDAuMzMzMywgMC43NSwgMC4zMzMzLCAwLjc1LCAwLjY2NjYsXG4gICAgICAgICAgICAgICAgICAgIDAuNSwgMC42NjY2LCAwLjUsIDEsIDAuMjUsIDEsIDAuMjUsIDAuNjY2NiwgMC4yNSwgMC42NjY2LCAwLjAsIDAuNjY2NiwgMC4wLCAwLjMzMzMsIDAuMjUsIDAuMzMzMyxcbiAgICAgICAgICAgICAgICAgICAgMC4yNSwgMCwgMC41MCwgMCwgMC41MCwgMC4zMzMzLCAwLjI1LCAwLjMzMzMsIDAuNzUsIDAuMzMzMywgMS4wLCAwLjMzMzMsIDEuMCwgMC42NjY2LCAwLjc1LCAwLjY2NjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGluZGljZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgMCwgMSwgMiwgMCwgMiwgMywgNCwgNSwgNiwgNCwgNiwgNywgOCwgOSwgMTAsIDgsIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTIsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTYsXG4gICAgICAgICAgICAgICAgICAgIDE4LCAxOSwgMjAsIDIxLCAyMiwgMjAsIDIyLCAyM1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbWF0ZXJpYWw6IG5ldyBQaG9uZ01hdGVyaWFsKG5hdkN1YmVTY2VuZSwge1xuICAgICAgICAgICAgICAgIGRpZmZ1c2U6IFswLjQsIDAuNCwgMC40XSxcbiAgICAgICAgICAgICAgICBzcGVjdWxhcjogWzAuNCwgMC40LCAwLjRdLFxuICAgICAgICAgICAgICAgIGVtaXNzaXZlOiBbLjYsIC42LCAuNl0sXG4gICAgICAgICAgICAgICAgZGlmZnVzZU1hcDogdGhpcy5fY3ViZVNhbXBsZXIsXG4gICAgICAgICAgICAgICAgZW1pc3NpdmVNYXA6IHRoaXMuX2N1YmVTYW1wbGVyXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHZpc2libGU6ICEhdmlzaWJsZSxcbiAgICAgICAgICAgIGVkZ2VzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3NoYWRvdyA9IG5ldyBNZXNoKG5hdkN1YmVTY2VuZSwge1xuICAgICAgICAgICAgZ2VvbWV0cnk6IG5ldyBSZWFkYWJsZUdlb21ldHJ5KG5hdkN1YmVTY2VuZSwgYnVpbGRDeWxpbmRlckdlb21ldHJ5KHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IFswLCAwLCAwXSxcbiAgICAgICAgICAgICAgICByYWRpdXNUb3A6IDAuMDAxLFxuICAgICAgICAgICAgICAgIHJhZGl1c0JvdHRvbTogMS40LFxuICAgICAgICAgICAgICAgIGhlaWdodDogMC4wMSxcbiAgICAgICAgICAgICAgICByYWRpYWxTZWdtZW50czogMjAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0U2VnbWVudHM6IDEsXG4gICAgICAgICAgICAgICAgb3BlbkVuZGVkOiB0cnVlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBtYXRlcmlhbDogbmV3IFBob25nTWF0ZXJpYWwobmF2Q3ViZVNjZW5lLCB7XG4gICAgICAgICAgICAgICAgZGlmZnVzZTogWzAuMCwgMC4wLCAwLjBdLCBzcGVjdWxhcjogWzAsIDAsIDBdLCBlbWlzc2l2ZTogWzAuMCwgMC4wLCAwLjBdLCBhbHBoYTogMC41XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBbMCwgLTEuNSwgMF0sXG4gICAgICAgICAgICB2aXNpYmxlOiAhIXZpc2libGUsXG4gICAgICAgICAgICBwaWNrYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBiYWNrZmFjZXM6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX29uQ2FtZXJhTWF0cml4ID0gdmlld2VyLmNhbWVyYS5vbihcIm1hdHJpeFwiLCB0aGlzLl9zeW5jaENhbWVyYSk7XG4gICAgICAgIHRoaXMuX29uQ2FtZXJhV29ybGRBeGlzID0gdmlld2VyLmNhbWVyYS5vbihcIndvcmxkQXhpc1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodmlld2VyLmNhbWVyYS56VXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl96VXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1YmVUZXh0dXJlQ2FudmFzLnNldFpVcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGFpbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zeW5jaENhbWVyYSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2aWV3ZXIuY2FtZXJhLnlVcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3pVcCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1YmVUZXh0dXJlQ2FudmFzLnNldFlVcCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGFpbnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zeW5jaENhbWVyYSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fb25DYW1lcmFGT1YgPSB2aWV3ZXIuY2FtZXJhLnBlcnNwZWN0aXZlLm9uKFwiZm92XCIsIChmb3YpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zeW5jaFByb2plY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9uYXZDdWJlQ2FtZXJhLnBlcnNwZWN0aXZlLmZvdiA9IGZvdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX29uQ2FtZXJhUHJvamVjdGlvbiA9IHZpZXdlci5jYW1lcmEub24oXCJwcm9qZWN0aW9uXCIsIChwcm9qZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3luY2hQcm9qZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmF2Q3ViZUNhbWVyYS5wcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGxhc3RBcmVhSWQgPSAtMTtcblxuICAgICAgICBmdW5jdGlvbiBhY3Rpb25Nb3ZlKHBvc1gsIHBvc1kpIHtcbiAgICAgICAgICAgIHZhciB5YXdJbmMgPSAocG9zWCAtIGxhc3RYKSAqIC1zZW5zaXRpdml0eTtcbiAgICAgICAgICAgIHZhciBwaXRjaEluYyA9IChwb3NZIC0gbGFzdFkpICogLXNlbnNpdGl2aXR5O1xuICAgICAgICAgICAgeWF3IC09IHlhd0luYztcbiAgICAgICAgICAgIHBpdGNoIC09IHBpdGNoSW5jO1xuICAgICAgICAgICAgaWYgKG1pblBpdGNoICE9PSB1bmRlZmluZWQgJiYgcGl0Y2ggPCBtaW5QaXRjaCkge1xuICAgICAgICAgICAgICAgIHBpdGNoID0gbWluUGl0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF4UGl0Y2ggIT09IHVuZGVmaW5lZCAmJiBwaXRjaCA+IG1heFBpdGNoKSB7XG4gICAgICAgICAgICAgICAgcGl0Y2ggPSBtYXhQaXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXdlci5jYW1lcmEub3JiaXRZYXcoeWF3SW5jKTtcbiAgICAgICAgICAgIHZpZXdlci5jYW1lcmEub3JiaXRQaXRjaCgtcGl0Y2hJbmMpO1xuICAgICAgICAgICAgbGFzdFggPSBwb3NYO1xuICAgICAgICAgICAgbGFzdFkgPSBwb3NZO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29vcmRzV2l0aGluRWxlbWVudChldmVudCkge1xuICAgICAgICAgICAgdmFyIGNvb3JkcyA9IFswLCAwXTtcbiAgICAgICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgICAgICBjb29yZHNbMF0gPSBldmVudC54O1xuICAgICAgICAgICAgICAgIGNvb3Jkc1sxXSA9IGV2ZW50Lnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbE9mZnNldExlZnQgPSAwO1xuICAgICAgICAgICAgICAgIHZhciB0b3RhbE9mZnNldFRvcCA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsT2Zmc2V0TGVmdCArPSBlbGVtZW50Lm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsT2Zmc2V0VG9wICs9IGVsZW1lbnQub2Zmc2V0VG9wO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvb3Jkc1swXSA9IGV2ZW50LnBhZ2VYIC0gdG90YWxPZmZzZXRMZWZ0O1xuICAgICAgICAgICAgICAgIGNvb3Jkc1sxXSA9IGV2ZW50LnBhZ2VZIC0gdG90YWxPZmZzZXRUb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29vcmRzO1xuICAgICAgICB9XG5cbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGRvd25YID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBkb3duWSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgZG93biA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG92ZXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgdmFyIHlhdyA9IDA7XG4gICAgICAgICAgICB2YXIgcGl0Y2ggPSAwO1xuICAgICAgICAgICAgdmFyIG1pblBpdGNoID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBtYXhQaXRjaCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc2Vuc2l0aXZpdHkgPSAwLjU7XG5cbiAgICAgICAgICAgIHZhciBsYXN0WDtcbiAgICAgICAgICAgIHZhciBsYXN0WTtcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzZWxmLl9uYXZDdWJlQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHNlbGYuX29uTW91c2VFbnRlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgb3ZlciA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICBzZWxmLl9uYXZDdWJlQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHNlbGYuX29uTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgb3ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNlbGYuX25hdkN1YmVDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBzZWxmLl9vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb3duWCA9IGUueDtcbiAgICAgICAgICAgICAgICBkb3duWSA9IGUueTtcbiAgICAgICAgICAgICAgICBsYXN0WCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgICAgICBsYXN0WSA9IGUuY2xpZW50WTtcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzUG9zID0gZ2V0Q29vcmRzV2l0aGluRWxlbWVudChlKTtcbiAgICAgICAgICAgICAgICB2YXIgaGl0ID0gbmF2Q3ViZVNjZW5lLnBpY2soe1xuICAgICAgICAgICAgICAgICAgICBjYW52YXNQb3M6IGNhbnZhc1Bvc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZG93biA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHNlbGYuX29uTW91c2VVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggIT09IDEpIHsvLyBMZWZ0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoZG93blggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzUG9zID0gZ2V0Q29vcmRzV2l0aGluRWxlbWVudChlKTtcbiAgICAgICAgICAgICAgICB2YXIgaGl0ID0gbmF2Q3ViZVNjZW5lLnBpY2soe1xuICAgICAgICAgICAgICAgICAgICBjYW52YXNQb3M6IGNhbnZhc1BvcyxcbiAgICAgICAgICAgICAgICAgICAgcGlja1N1cmZhY2U6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoaXQudXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmVhSWQgPSBzZWxmLl9jdWJlVGV4dHVyZUNhbnZhcy5nZXRBcmVhKGhpdC51dik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJlYUlkID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QXJlYUlkID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuc2V0QXJlYUhpZ2hsaWdodGVkKGxhc3RBcmVhSWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QXJlYUlkID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhSWQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jdWJlVGV4dHVyZUNhbnZhcy5zZXRBcmVhSGlnaGxpZ2h0ZWQoYXJlYUlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFyZWFJZCA9IGFyZWFJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS54IDwgKGRvd25YIC0gMykgfHwgZS54ID4gKGRvd25YICsgMykgfHwgZS55IDwgKGRvd25ZIC0gMykgfHwgZS55ID4gKGRvd25ZICsgMykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlyID0gc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuZ2V0QXJlYURpcihhcmVhSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXAgPSBzZWxmLl9jdWJlVGV4dHVyZUNhbnZhcy5nZXRBcmVhVXAoYXJlYUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZseVRvKGRpciwgdXAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFyZWFJZCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2N1YmVUZXh0dXJlQ2FudmFzLnNldEFyZWFIaWdobGlnaHRlZChsYXN0QXJlYUlkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlcGFpbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFyZWFJZCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGl0ID0gbmF2Q3ViZVNjZW5lLnBpY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNQb3M6IGNhbnZhc1BvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGlja1N1cmZhY2U6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoaXQudXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmVhSWQgPSBzZWxmLl9jdWJlVGV4dHVyZUNhbnZhcy5nZXRBcmVhKGhpdC51dik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJlYUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QXJlYUlkID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuc2V0QXJlYUhpZ2hsaWdodGVkKGxhc3RBcmVhSWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QXJlYUlkID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhSWQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jdWJlVGV4dHVyZUNhbnZhcy5zZXRBcmVhSGlnaGxpZ2h0ZWQoYXJlYUlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFyZWFJZCA9IGFyZWFJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgc2VsZi5fb25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0QXJlYUlkID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuc2V0QXJlYUhpZ2hsaWdodGVkKGxhc3RBcmVhSWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVwYWludCgpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0QXJlYUlkID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlLmJ1dHRvbnMgPT09IDEgJiYgIWRvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZG93bikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zWCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc1kgPSBlLmNsaWVudFk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCI7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbk1vdmUocG9zWCwgcG9zWSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFvdmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhc1BvcyA9IGdldENvb3Jkc1dpdGhpbkVsZW1lbnQoZSk7XG4gICAgICAgICAgICAgICAgdmFyIGhpdCA9IG5hdkN1YmVTY2VuZS5waWNrKHtcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzUG9zOiBjYW52YXNQb3MsXG4gICAgICAgICAgICAgICAgICAgIHBpY2tTdXJmYWNlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGl0LnV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZWFJZCA9IHNlbGYuX2N1YmVUZXh0dXJlQ2FudmFzLmdldEFyZWEoaGl0LnV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhSWQgPT09IGxhc3RBcmVhSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFyZWFJZCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuc2V0QXJlYUhpZ2hsaWdodGVkKGxhc3RBcmVhSWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmVhSWQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2N1YmVUZXh0dXJlQ2FudmFzLnNldEFyZWFIaWdobGlnaHRlZChhcmVhSWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlcGFpbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0QXJlYUlkID0gYXJlYUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcImRlZmF1bHRcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RBcmVhSWQgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3ViZVRleHR1cmVDYW52YXMuc2V0QXJlYUhpZ2hsaWdodGVkKGxhc3RBcmVhSWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlcGFpbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RBcmVhSWQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZmx5VG8gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjZW50ZXIgPSBtYXRoLnZlYzMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpciwgdXAsIG9rKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhYWJiID0gc2VsZi5fZml0VmlzaWJsZSA/IHZpZXdlci5zY2VuZS5nZXRBQUJCKHZpZXdlci5zY2VuZS52aXNpYmxlT2JqZWN0SWRzKSA6IHZpZXdlci5zY2VuZS5hYWJiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlhZyA9IG1hdGguZ2V0QUFCQjNEaWFnKGFhYmIpO1xuICAgICAgICAgICAgICAgICAgICBtYXRoLmdldEFBQkIzQ2VudGVyKGFhYmIsIGNlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXN0ID0gTWF0aC5hYnMoZGlhZyAvIE1hdGgudGFuKDU1LjAgLyAyKSk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdlci5jYW1lcmFDb250cm9sLnBpdm90UG9zID0gY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5fY2FtZXJhRmx5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3ZXIuY2FtZXJhRmxpZ2h0LmZseVRvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29rOiBjZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXllOiBbY2VudGVyWzBdIC0gKGRpc3QgKiBkaXJbMF0pLCBjZW50ZXJbMV0gLSAoZGlzdCAqIGRpclsxXSksIGNlbnRlclsyXSAtIChkaXN0ICogZGlyWzJdKV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXA6IHVwIHx8IFswLCAxLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcnRob1NjYWxlOiBkaWFnICogMS4zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpdEZPVjogc2VsZi5fY2FtZXJhRml0Rk9WLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBzZWxmLl9jYW1lcmFGbHlEdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgb2spO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld2VyLmNhbWVyYUZsaWdodC5qdW1wVG8oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb2s6IGNlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleWU6IFtjZW50ZXJbMF0gLSAoZGlzdCAqIGRpclswXSksIGNlbnRlclsxXSAtIChkaXN0ICogZGlyWzFdKSwgY2VudGVyWzJdIC0gKGRpc3QgKiBkaXJbMl0pXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cDogdXAgfHwgWzAsIDEsIDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ydGhvU2NhbGU6IGRpYWcgKiAxLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZml0Rk9WOiBzZWxmLl9jYW1lcmFGaXRGT1ZcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRWaXNpYmxlKGNmZy52aXNpYmxlKTtcbiAgICAgICAgdGhpcy5zZXRDYW1lcmFGaXRGT1YoY2ZnLmNhbWVyYUZpdEZPVik7XG4gICAgICAgIHRoaXMuc2V0Q2FtZXJhRmx5KGNmZy5jYW1lcmFGbHkpO1xuICAgICAgICB0aGlzLnNldENhbWVyYUZseUR1cmF0aW9uKGNmZy5jYW1lcmFGbHlEdXJhdGlvbik7XG4gICAgICAgIHRoaXMuc2V0Rml0VmlzaWJsZShjZmcuZml0VmlzaWJsZSk7XG4gICAgICAgIHRoaXMuc2V0U3luY2hQcm9qZWN0aW9uKGNmZy5zeW5jaFByb2plY3Rpb24pO1xuICAgIH1cblxuICAgIHNlbmQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwibGFuZ3VhZ2VcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9jdWJlVGV4dHVyZUNhbnZhcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGFpbnQoKTsgLy8gQ3ViZVRleHR1cmVDYW52YXMgZ2V0cyBsYW5ndWFnZSBmcm9tIFZpZXdlclxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3JlcGFpbnQoKSB7XG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5fY3ViZVRleHR1cmVDYW52YXMuZ2V0SW1hZ2UoKTtcbiAgICAgICAgdGhpcy5fY3ViZU1lc2gubWF0ZXJpYWwuZGlmZnVzZU1hcC5pbWFnZSA9IGltYWdlO1xuICAgICAgICB0aGlzLl9jdWJlTWVzaC5tYXRlcmlhbC5lbWlzc2l2ZU1hcC5pbWFnZSA9IGltYWdlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgaWYgdGhlIE5hdkN1YmUgaXMgdmlzaWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmlzaWJsZSBXaGV0aGVyIG9yIG5vdCB0aGUgTmF2Q3ViZSBpcyB2aXNpYmxlLlxuICAgICAqL1xuICAgIHNldFZpc2libGUodmlzaWJsZSA9IHRydWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9uYXZDdWJlQ2FudmFzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3ViZU1lc2gudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgIHRoaXMuX3NoYWRvdy52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgICAgdGhpcy5fbmF2Q3ViZUNhbnZhcy5zdHlsZS52aXNpYmlsaXR5ID0gdmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGlmIHRoZSBOYXZDdWJlIGlzIHZpc2libGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIHdoZW4gdGhlIE5hdkN1YmUgaXMgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBnZXRWaXNpYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX25hdkN1YmVDYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY3ViZU1lc2gudmlzaWJsZTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0aGUgYXhpcywgY29ybmVyIGFuZCBlZGdlLWFsaWduZWQgdmlld3Mgd2lsbCBmaXQgdGhlXG4gICAgICogdmlldyB0byB0aGUgZW50aXJlIHtAbGluayBTY2VuZX0gb3IganVzdCB0byB2aXNpYmxlIG9iamVjdC17QGxpbmsgRW50aXR5fXMuXG4gICAgICpcbiAgICAgKiBFbnRpdHlzIGFyZSB2aXNpYmxlIG9iamVjdHMgd2hlbiB7QGxpbmsgRW50aXR5I2lzT2JqZWN0fSBhbmQge0BsaW5rIEVudGl0eSN2aXNpYmxlfSBhcmUgYm90aCBgYGBgdHJ1ZWBgYGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpdFZpc2libGUgU2V0IGBgYGB0cnVlYGBgYCB0byBmaXQgb25seSB2aXNpYmxlIG9iamVjdC1FbnRpdHlzLlxuICAgICAqL1xuICAgIHNldEZpdFZpc2libGUoZml0VmlzaWJsZSA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuX2ZpdFZpc2libGUgPSBmaXRWaXNpYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciB0aGUgYXhpcywgY29ybmVyIGFuZCBlZGdlLWFsaWduZWQgdmlld3Mgd2lsbCBmaXQgdGhlXG4gICAgICogdmlldyB0byB0aGUgZW50aXJlIHtAbGluayBTY2VuZX0gb3IganVzdCB0byB2aXNpYmxlIG9iamVjdC17QGxpbmsgRW50aXR5fXMuXG4gICAgICpcbiAgICAgKiBFbnRpdHlzIGFyZSB2aXNpYmxlIG9iamVjdHMgd2hlbiB7QGxpbmsgRW50aXR5I2lzT2JqZWN0fSBhbmQge0BsaW5rIEVudGl0eSN2aXNpYmxlfSBhcmUgYm90aCBgYGBgdHJ1ZWBgYGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIHdoZW4gZml0dGluZyBvbmx5IHZpc2libGUgb2JqZWN0LUVudGl0eXMuXG4gICAgICovXG4gICAgZ2V0Rml0VmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpdFZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSB7QGxpbmsgQ2FtZXJhfSBmbGllcyBvciBqdW1wcyB0byBlYWNoIHNlbGVjdGVkIGF4aXMgb3IgZGlhZ29uYWwuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGB0cnVlYGBgYCwgdG8gZmx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjYW1lcmFGbHkgU2V0IGBgYGB0cnVlYGBgYCB0byBmbHksIGVsc2UgYGBgYGZhbHNlYGBgYCB0byBqdW1wLlxuICAgICAqL1xuICAgIHNldENhbWVyYUZseShjYW1lcmFGbHkgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuX2NhbWVyYUZseSA9IGNhbWVyYUZseTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHdoZXRoZXIgdGhlIHtAbGluayBDYW1lcmF9IGZsaWVzIG9yIGp1bXBzIHRvIGVhY2ggc2VsZWN0ZWQgYXhpcyBvciBkaWFnb25hbC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYHRydWVgYGBgLCB0byBmbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyBgYGBgdHJ1ZWBgYGAgdG8gZmx5LCBlbHNlIGBgYGBmYWxzZWBgYGAgdG8ganVtcC5cbiAgICAgKi9cbiAgICBnZXRDYW1lcmFGbHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW1lcmFGbHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBob3cgbXVjaCBvZiB0aGUgZmllbGQtb2YtdmlldywgaW4gZGVncmVlcywgdGhhdCB0aGUge0BsaW5rIFNjZW5lfSBzaG91bGRcbiAgICAgKiBmaWxsIHRoZSBjYW52YXMgd2hlbiBmbHlpbmcgb3IganVtcGluZyB0aGUge0BsaW5rIENhbWVyYX0gdG8gZWFjaCBzZWxlY3RlZCBheGlzIG9yIGRpYWdvbmFsLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgNDVgYGBgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNhbWVyYUZpdEZPViBOZXcgRk9WIHZhbHVlLlxuICAgICAqL1xuICAgIHNldENhbWVyYUZpdEZPVihjYW1lcmFGaXRGT1YgPSA0NSkge1xuICAgICAgICB0aGlzLl9jYW1lcmFGaXRGT1YgPSBjYW1lcmFGaXRGT1Y7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBob3cgbXVjaCBvZiB0aGUgZmllbGQtb2YtdmlldywgaW4gZGVncmVlcywgdGhhdCB0aGUge0BsaW5rIFNjZW5lfSBzaG91bGRcbiAgICAgKiBmaWxsIHRoZSBjYW52YXMgd2hlbiBmbHlpbmcgb3IganVtcGluZyB0aGUge0BsaW5rIENhbWVyYX0gdG8gZWFjaCBzZWxlY3RlZCBheGlzIG9yIGRpYWdvbmFsLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgNDVgYGBgLlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gQ3VycmVudCBGT1YgdmFsdWUuXG4gICAgICovXG4gICAgZ2V0Q2FtZXJhRml0Rk9WKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FtZXJhRml0Rk9WO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gZmx5aW5nIHRoZSB7QGxpbmsgQ2FtZXJhfSB0byBlYWNoIG5ldyBheGlzIG9yIGRpYWdvbmFsLCBzZXRzIGhvdyBsb25nLCBpbiBzZWNvbmRzLCB0aGF0IHRoZSBDYW1lcmEgdGFrZXMgdG8gZ2V0IHRoZXJlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBpcyBgYGBgMC41YGBgYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FtZXJhRmx5RHVyYXRpb24gQ2FtZXJhIGZsaWdodCBkdXJhdGlvbiBpbiBzZWNvbmRzLlxuICAgICAqL1xuICAgIHNldENhbWVyYUZseUR1cmF0aW9uKGNhbWVyYUZseUR1cmF0aW9uID0gMC41KSB7XG4gICAgICAgIHRoaXMuX2NhbWVyYUZseUR1cmF0aW9uID0gY2FtZXJhRmx5RHVyYXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBmbHlpbmcgdGhlIHtAbGluayBDYW1lcmF9IHRvIGVhY2ggbmV3IGF4aXMgb3IgZGlhZ29uYWwsIGdldHMgaG93IGxvbmcsIGluIHNlY29uZHMsIHRoYXQgdGhlIENhbWVyYSB0YWtlcyB0byBnZXQgdGhlcmUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGAwLjVgYGBgLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IENhbWVyYSBmbGlnaHQgZHVyYXRpb24gaW4gc2Vjb25kcy5cbiAgICAgKi9cbiAgICBnZXRDYW1lcmFGbHlEdXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbWVyYUZseUR1cmF0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0aGUgTmF2Q3ViZSBzd2l0Y2hlcyBiZXR3ZWVuIHBlcnNwZWN0aXZlIGFuZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbnMgaW4gc3luY2hyb255IHdpdGhcbiAgICAgKiB0aGUge0BsaW5rIENhbWVyYX0uIFdoZW4gYGBgYGZhbHNlYGBgYCwgdGhlIE5hdkN1YmUgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgd2l0aCBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBzeW5jaFByb2plY3Rpb24gU2V0IGBgYGB0cnVlYGBgYCB0byBrZWVwIE5hdkN1YmUgcHJvamVjdGlvbiBzeW5jaHJvbml6ZWQgd2l0aCB7QGxpbmsgQ2FtZXJhI3Byb2plY3Rpb259LlxuICAgICAqL1xuICAgIHNldFN5bmNoUHJvamVjdGlvbihzeW5jaFByb2plY3Rpb24gPSBmYWxzZSkge1xuICAgICAgICB0aGlzLl9zeW5jaFByb2plY3Rpb24gPSBzeW5jaFByb2plY3Rpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB3aGV0aGVyIHRoZSBOYXZDdWJlIHN3aXRjaGVzIGJldHdlZW4gcGVyc3BlY3RpdmUgYW5kIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9ucyBpbiBzeW5jaHJvbnkgd2l0aFxuICAgICAqIHRoZSB7QGxpbmsgQ2FtZXJhfS4gV2hlbiBgYGBgZmFsc2VgYGBgLCB0aGUgTmF2Q3ViZSB3aWxsIGFsd2F5cyBiZSByZW5kZXJlZCB3aXRoIHBlcnNwZWN0aXZlIHByb2plY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIHdoZW4gTmF2Q3ViZSBwcm9qZWN0aW9uIGlzIHN5bmNocm9uaXplZCB3aXRoIHtAbGluayBDYW1lcmEjcHJvamVjdGlvbn0uXG4gICAgICovXG4gICAgZ2V0U3luY2hQcm9qZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3luY2hQcm9qZWN0aW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgTmF2Q3ViZVBsdWdpbi5cbiAgICAgKlxuICAgICAqIERvZXMgbm90IGRlc3Ryb3kgdGhlIGNhbnZhcyB0aGUgTmF2Q3ViZVBsdWdpbiB3YXMgY29uZmlndXJlZCB3aXRoLlxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX25hdkN1YmVDYW52YXMpIHtcblxuICAgICAgICAgICAgdGhpcy52aWV3ZXIuY2FtZXJhLm9mZih0aGlzLl9vbkNhbWVyYU1hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLnZpZXdlci5jYW1lcmEub2ZmKHRoaXMuX29uQ2FtZXJhV29ybGRBeGlzKTtcbiAgICAgICAgICAgIHRoaXMudmlld2VyLmNhbWVyYS5wZXJzcGVjdGl2ZS5vZmYodGhpcy5fb25DYW1lcmFGT1YpO1xuICAgICAgICAgICAgdGhpcy52aWV3ZXIuY2FtZXJhLm9mZih0aGlzLl9vbkNhbWVyYVByb2plY3Rpb24pO1xuXG4gICAgICAgICAgICB0aGlzLl9uYXZDdWJlQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMuX29uTW91c2VFbnRlcik7XG4gICAgICAgICAgICB0aGlzLl9uYXZDdWJlQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuX29uTW91c2VMZWF2ZSk7XG4gICAgICAgICAgICB0aGlzLl9uYXZDdWJlQ2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fb25Nb3VzZURvd24pO1xuXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuX29uTW91c2VNb3ZlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuX29uTW91c2VVcCk7XG5cbiAgICAgICAgICAgIHRoaXMuX25hdkN1YmVDYW52YXMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fY3ViZVRleHR1cmVDYW52YXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fY3ViZVRleHR1cmVDYW52YXMgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9vbk1vdXNlRW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fb25Nb3VzZUxlYXZlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29uTW91c2VEb3duID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29uTW91c2VNb3ZlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29uTW91c2VVcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9uYXZDdWJlU2NlbmUuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9uYXZDdWJlU2NlbmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9jdWJlTWVzaCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3NoYWRvdyA9IG51bGw7XG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtOYXZDdWJlUGx1Z2lufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/plugins/NavCubePlugin/NavCubePlugin.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/Plugin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/Plugin.js ***!
  \**************************************************************/
/*! exports provided: Plugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Plugin\", function() { return Plugin; });\n/**\n @desc Base class for {@link Viewer} plugin classes.\n */\nclass Plugin {\n\n    /**\n     * Creates this Plugin and installs it into the given {@link Viewer}.\n     *\n     * @param {string} id ID for this plugin, unique among all plugins in the viewer.\n     * @param {Viewer} viewer The viewer.\n     * @param {Object} [cfg] Options\n     */\n    constructor(id, viewer, cfg) {\n\n        /**\n         * ID for this Plugin, unique within its {@link Viewer}.\n         *\n         * @type {string}\n         */\n        this.id = (cfg && cfg.id) ? cfg.id : id;\n\n        /**\n         * The Viewer that contains this Plugin.\n         *\n         * @type {Viewer}\n         */\n        this.viewer = viewer;\n\n        /**\n         * Subscriptions to events fired at this Plugin.\n         * @private\n         */\n        this._eventSubs = {};\n\n        viewer.addPlugin(this);\n    }\n\n    /**\n     Subscribes to an event fired at this Plugin.\n\n     @param {String} event The event\n     @param {Function} callback Callback fired on the event\n     */\n    on(event, callback) {\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = [];\n            this._eventSubs[event] = subs;\n        }\n        subs.push(callback);\n    }\n\n    /**\n     Fires an event at this Plugin.\n\n     @param {String} event The event type name\n     @param {Object} value The event parameters\n     */\n    fire(event, value) {\n        const subs = this._eventSubs[event];\n        if (subs) {\n            for (let i = 0, len = subs.length; i < len; i++) {\n                subs[i](value);\n            }\n        }\n    }\n\n    /**\n     * Logs a message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    log(msg) {\n        console.log(`[xeokit plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Logs a warning message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    warn(msg) {\n        console.warn(`[xeokit plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Logs an error message to the JavaScript developer console, prefixed with the ID of this Plugin.\n     *\n     * @param {String} msg The error message\n     */\n    error(msg) {\n        console.error(`[xeokit plugin ${this.id}]: ${msg}`);\n    }\n\n    /**\n     * Sends a message to this Plugin.\n     *\n     * @private\n     */\n    send(name, value) {\n        //...\n    }\n\n    /**\n     * Destroys this Plugin and removes it from its {@link Viewer}.\n     */\n    destroy() {\n        this.viewer.removePlugin(this);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL1BsdWdpbi5qcz85Yzk2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQSwyREFBMkQsYUFBYTtBQUN4RTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0QsYUFBYTtBQUMvRDtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0Esc0NBQXNDLFFBQVEsS0FBSyxJQUFJO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0EsdUNBQXVDLFFBQVEsS0FBSyxJQUFJO0FBQ3hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0Esd0NBQXdDLFFBQVEsS0FBSyxJQUFJO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL1BsdWdpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuIEBkZXNjIEJhc2UgY2xhc3MgZm9yIHtAbGluayBWaWV3ZXJ9IHBsdWdpbiBjbGFzc2VzLlxuICovXG5jbGFzcyBQbHVnaW4ge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGlzIFBsdWdpbiBhbmQgaW5zdGFsbHMgaXQgaW50byB0aGUgZ2l2ZW4ge0BsaW5rIFZpZXdlcn0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgSUQgZm9yIHRoaXMgcGx1Z2luLCB1bmlxdWUgYW1vbmcgYWxsIHBsdWdpbnMgaW4gdGhlIHZpZXdlci5cbiAgICAgKiBAcGFyYW0ge1ZpZXdlcn0gdmlld2VyIFRoZSB2aWV3ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjZmddIE9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZCwgdmlld2VyLCBjZmcpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSUQgZm9yIHRoaXMgUGx1Z2luLCB1bmlxdWUgd2l0aGluIGl0cyB7QGxpbmsgVmlld2VyfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaWQgPSAoY2ZnICYmIGNmZy5pZCkgPyBjZmcuaWQgOiBpZDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFZpZXdlciB0aGF0IGNvbnRhaW5zIHRoaXMgUGx1Z2luLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7Vmlld2VyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52aWV3ZXIgPSB2aWV3ZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnNjcmlwdGlvbnMgdG8gZXZlbnRzIGZpcmVkIGF0IHRoaXMgUGx1Z2luLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZXZlbnRTdWJzID0ge307XG5cbiAgICAgICAgdmlld2VyLmFkZFBsdWdpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgU3Vic2NyaWJlcyB0byBhbiBldmVudCBmaXJlZCBhdCB0aGlzIFBsdWdpbi5cblxuICAgICBAcGFyYW0ge1N0cmluZ30gZXZlbnQgVGhlIGV2ZW50XG4gICAgIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZpcmVkIG9uIHRoZSBldmVudFxuICAgICAqL1xuICAgIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgc3VicyA9IHRoaXMuX2V2ZW50U3Vic1tldmVudF07XG4gICAgICAgIGlmICghc3Vicykge1xuICAgICAgICAgICAgc3VicyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRTdWJzW2V2ZW50XSA9IHN1YnM7XG4gICAgICAgIH1cbiAgICAgICAgc3Vicy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgRmlyZXMgYW4gZXZlbnQgYXQgdGhpcyBQbHVnaW4uXG5cbiAgICAgQHBhcmFtIHtTdHJpbmd9IGV2ZW50IFRoZSBldmVudCB0eXBlIG5hbWVcbiAgICAgQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBldmVudCBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgZmlyZShldmVudCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3Qgc3VicyA9IHRoaXMuX2V2ZW50U3Vic1tldmVudF07XG4gICAgICAgIGlmIChzdWJzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3Vicy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNbaV0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9ncyBhIG1lc3NhZ2UgdG8gdGhlIEphdmFTY3JpcHQgZGV2ZWxvcGVyIGNvbnNvbGUsIHByZWZpeGVkIHdpdGggdGhlIElEIG9mIHRoaXMgUGx1Z2luLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBUaGUgZXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIGxvZyhtc2cpIHtcbiAgICAgICAgY29uc29sZS5sb2coYFt4ZW9raXQgcGx1Z2luICR7dGhpcy5pZH1dOiAke21zZ31gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGEgd2FybmluZyBtZXNzYWdlIHRvIHRoZSBKYXZhU2NyaXB0IGRldmVsb3BlciBjb25zb2xlLCBwcmVmaXhlZCB3aXRoIHRoZSBJRCBvZiB0aGlzIFBsdWdpbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgVGhlIGVycm9yIG1lc3NhZ2VcbiAgICAgKi9cbiAgICB3YXJuKG1zZykge1xuICAgICAgICBjb25zb2xlLndhcm4oYFt4ZW9raXQgcGx1Z2luICR7dGhpcy5pZH1dOiAke21zZ31gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2dzIGFuIGVycm9yIG1lc3NhZ2UgdG8gdGhlIEphdmFTY3JpcHQgZGV2ZWxvcGVyIGNvbnNvbGUsIHByZWZpeGVkIHdpdGggdGhlIElEIG9mIHRoaXMgUGx1Z2luLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBUaGUgZXJyb3IgbWVzc2FnZVxuICAgICAqL1xuICAgIGVycm9yKG1zZykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBbeGVva2l0IHBsdWdpbiAke3RoaXMuaWR9XTogJHttc2d9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoaXMgUGx1Z2luLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIC8vLi4uXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyBQbHVnaW4gYW5kIHJlbW92ZXMgaXQgZnJvbSBpdHMge0BsaW5rIFZpZXdlcn0uXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy52aWV3ZXIucmVtb3ZlUGx1Z2luKHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtQbHVnaW59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/Plugin.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js ***!
  \***********************************************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n\n\n\n\n/**\n * @desc Base class for all xeokit components.\n *\n * ## Component IDs\n *\n * Every Component has an ID that's unique within the parent {@link Scene}. xeokit generates\n * the IDs automatically by default, however you can also specify them yourself. In the example below, we're creating a\n * scene comprised of {@link Scene}, {@link Material}, {@link ReadableGeometry} and\n * {@link Mesh} components, while letting xeokit generate its own ID for\n * the {@link ReadableGeometry}:\n *\n *````JavaScript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildTorusGeometry} from \"../src/scene/geometry/builders/buildTorusGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n * import {Fresnel} from \"../src/scene/materials/Fresnel.js\";\n *\n * const viewer = new Viewer({\n *        canvasId: \"myCanvas\"\n *    });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildTorusGeometry({\n *          center: [0, 0, 0],\n *          radius: 1.5,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          id: \"myMaterial\",\n *          ambient: [0.9, 0.3, 0.9],\n *          shininess: 30,\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          }),\n *          specularFresnel: new Fresnel(viewer.scene, {\n *              leftColor: [1.0, 1.0, 1.0],\n *              rightColor: [0.0, 0.0, 0.0],\n *              power: 4\n *          })\n *     })\n * });\n *````\n *\n * We can then find those components like this:\n *\n * ````javascript\n * // Find the Material\n * var material = viewer.scene.components[\"myMaterial\"];\n *\n * // Find all PhongMaterials in the Scene\n * var phongMaterials = viewer.scene.types[\"PhongMaterial\"];\n *\n * // Find our Material within the PhongMaterials\n * var materialAgain = phongMaterials[\"myMaterial\"];\n * ````\n *\n * ## Restriction on IDs\n *\n * Auto-generated IDs are of the form ````\"__0\"````, ````\"__1\"````, ````\"__2\"```` ... and so on.\n *\n * Scene maintains a map of these IDs, along with a counter that it increments each time it generates a new ID.\n *\n * If Scene has created the IDs listed above, and we then destroy the ````Component```` with ID ````\"__1\"````,\n * Scene will mark that ID as available, and will reuse it for the next default ID.\n *\n * Therefore, two restrictions your on IDs:\n *\n * * don't use IDs that begin with two underscores, and\n * * don't reuse auto-generated IDs of destroyed Components.\n *\n * ## Logging\n *\n * Components have methods to log ID-prefixed messages to the JavaScript console:\n *\n * ````javascript\n * material.log(\"Everything is fine, situation normal.\");\n * material.warn(\"Wait, whats that red light?\");\n * material.error(\"Aw, snap!\");\n * ````\n *\n * The logged messages will look like this in the console:\n *\n * ````text\n * [LOG]   myMaterial: Everything is fine, situation normal.\n * [WARN]  myMaterial: Wait, whats that red light..\n * [ERROR] myMaterial: Aw, snap!\n * ````\n *\n * ## Destruction\n *\n * Get notification of destruction of Components:\n *\n * ````javascript\n * material.once(\"destroyed\", function() {\n *     this.log(\"Component was destroyed: \" + this.id);\n * });\n * ````\n *\n * Or get notification of destruction of any Component within its {@link Scene}:\n *\n * ````javascript\n * scene.on(\"componentDestroyed\", function(component) {\n *     this.log(\"Component was destroyed: \" + component.id);\n * });\n * ````\n *\n * Then destroy a component like this:\n *\n * ````javascript\n * material.destroy();\n * ````\n */\nclass Component {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Component\";\n    }\n\n    /**\n     * @private\n     */\n    get isComponent() {\n        return true;\n    }\n\n    constructor(owner = null, cfg = {}) {\n\n        /**\n         * The parent {@link Scene} that contains this Component.\n         *\n         * @property scene\n         * @type {Scene}\n         * @final\n         */\n        this.scene = null;\n\n        if (this.type === \"Scene\") {\n            this.scene = this;\n            /**\n             * The viewer that contains this Scene.\n             * @property viewer\n             * @type {Viewer}\n             */\n            this.viewer = cfg.viewer;\n        } else {\n            if (owner.type === \"Scene\") {\n                this.scene = owner;\n            } else if (owner instanceof Component) {\n                this.scene = owner.scene;\n            } else {\n                throw \"Invalid param: owner must be a Component\"\n            }\n            this._owner = owner;\n            this._renderer = this.scene._renderer;\n        }\n\n        this._dontClear = !!cfg.dontClear; // Prevent Scene#clear from destroying this component\n\n        this._renderer = this.scene._renderer;\n\n        /**\n         Arbitrary, user-defined metadata on this component.\n\n         @property metadata\n         @type Object\n         */\n        this.meta = cfg.meta || {};\n\n\n        /**\n         * ID of this Component, unique within the {@link Scene}.\n         *\n         * Components are mapped by this ID in {@link Scene#components}.\n         *\n         * @property id\n         * @type {String|Number}\n         */\n        this.id = cfg.id; // Auto-generated by Scene by default\n\n        /**\n         True as soon as this Component has been destroyed\n\n         @property destroyed\n         @type {Boolean}\n         */\n        this.destroyed = false;\n\n        this._attached = {}; // Attached components with names.\n        this._attachments = null; // Attached components keyed to IDs - lazy-instantiated\n        this._subIdMap = null; // Subscription subId pool\n        this._subIdEvents = null; // Subscription subIds mapped to event names\n        this._eventSubs = null; // Event names mapped to subscribers\n        this._eventSubsNum = null;\n        this._events = null; // Maps names to events\n        this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events\n        this._ownedComponents = null; // // Components created with #create - lazy-instantiated\n\n        if (this !== this.scene) { // Don't add scene to itself\n            this.scene._addComponent(this); // Assigns this component an automatic ID if not yet assigned\n        }\n\n        this._updateScheduled = false; // True when #_update will be called on next tick\n\n        if (owner) {\n            owner._own(this);\n        }\n    }\n\n    // /**\n    //  * Unique ID for this Component within its {@link Scene}.\n    //  *\n    //  * @property\n    //  * @type {String}\n    //  */\n    // get id() {\n    //     return this._id;\n    // }\n\n    /**\n     Indicates that we need to redraw the scene.\n\n     This is called by certain subclasses after they have made some sort of state update that requires the\n     renderer to perform a redraw.\n\n     For example: a {@link Mesh} calls this on itself whenever you update its\n     {@link Mesh#layer} property, which manually controls its render order in\n     relation to other Meshes.\n\n     If this component has a ````castsShadow```` property that's set ````true````, then this will also indicate\n     that the renderer needs to redraw shadow map associated with this component. Components like\n     {@link DirLight} have that property set when they produce light that creates shadows, while\n     components like {@link Mesh\"}}layer{{/crossLink}} have that property set when they cast shadows.\n\n     @protected\n     */\n    glRedraw() {\n        this._renderer.imageDirty();\n        if (this.castsShadow) { // Light source or object\n            this._renderer.shadowsDirty();\n        }\n    }\n\n    /**\n     Indicates that we need to re-sort the renderer's state-ordered drawables list.\n\n     For efficiency, the renderer keeps its list of drawables ordered so that runs of the same state updates can be\n     combined.  This method is called by certain subclasses after they have made some sort of state update that would\n     require re-ordering of the drawables list.\n\n     For example: a {@link DirLight} calls this on itself whenever you update {@link DirLight#dir}.\n\n     @protected\n     */\n    glResort() {\n        this._renderer.needStateSort();\n    }\n\n    /**\n     * The {@link Component} that owns the lifecycle of this Component, if any.\n     *\n     * When that component is destroyed, this component will be automatically destroyed also.\n     *\n     * Will be null if this Component has no owner.\n     *\n     * @property owner\n     * @type {Component}\n     */\n    get owner() {\n        return this._owner;\n    }\n\n    /**\n     * Tests if this component is of the given type, or is a subclass of the given type.\n     * @type {Boolean}\n     */\n    isType(type) {\n        return this.type === type;\n    }\n\n    /**\n     * Fires an event on this component.\n     *\n     * Notifies existing subscribers to the event, optionally retains the event to give to\n     * any subsequent notifications on the event as they are made.\n     *\n     * @param {String} event The event type name\n     * @param {Object} value The event parameters\n     * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers\n     */\n    fire(event, value, forget) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n            this._eventSubsNum = {};\n        }\n        if (forget !== true) {\n            this._events[event] = value || true; // Save notification\n        }\n        const subs = this._eventSubs[event];\n        let sub;\n        if (subs) { // Notify subscriptions\n            for (const subId in subs) {\n                if (subs.hasOwnProperty(subId)) {\n                    sub = subs[subId];\n                    this._eventCallDepth++;\n                    if (this._eventCallDepth < 300) {\n                        sub.callback.call(sub.scope, value);\n                    } else {\n                        this.error(\"fire: potential stack overflow from recursive event '\" + event + \"' - dropping this event\");\n                    }\n                    this._eventCallDepth--;\n                }\n            }\n        }\n    }\n\n    /**\n     * Subscribes to an event on this component.\n     *\n     * The callback is be called with this component as scope.\n     *\n     * @param {String} event The event\n     * @param {Function} callback Called fired on the event\n     * @param {Object} [scope=this] Scope for the callback\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n     */\n    on(event, callback, scope) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._subIdMap) {\n            this._subIdMap = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_2__[\"Map\"](); // Subscription subId pool\n        }\n        if (!this._subIdEvents) {\n            this._subIdEvents = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        if (!this._eventSubsNum) {\n            this._eventSubsNum = {};\n        }\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = {};\n            this._eventSubs[event] = subs;\n            this._eventSubsNum[event] = 1;\n        } else {\n            this._eventSubsNum[event]++;\n        }\n        const subId = this._subIdMap.addItem(); // Create unique subId\n        subs[subId] = {\n            callback: callback,\n            scope: scope || this\n        };\n        this._subIdEvents[subId] = event;\n        const value = this._events[event];\n        if (value !== undefined) { // A publication exists, notify callback immediately\n            callback.call(scope || this, value);\n        }\n        return subId;\n    }\n\n    /**\n     * Cancels an event subscription that was previously made with {@link Component#on} or {@link Component#once}.\n     *\n     * @param {String} subId Subscription ID\n     */\n    off(subId) {\n        if (subId === undefined || subId === null) {\n            return;\n        }\n        if (!this._subIdEvents) {\n            return;\n        }\n        const event = this._subIdEvents[subId];\n        if (event) {\n            delete this._subIdEvents[subId];\n            const subs = this._eventSubs[event];\n            if (subs) {\n                delete subs[subId];\n                this._eventSubsNum[event]--;\n            }\n            this._subIdMap.removeItem(subId); // Release subId\n        }\n    }\n\n    /**\n     * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is subIdd.\n     *\n     * This is equivalent to calling {@link Component#on}, and then calling {@link Component#off} inside the callback function.\n     *\n     * @param {String} event Data event to listen to\n     * @param {Function} callback Called when fresh data is available at the event\n     * @param {Object} [scope=this] Scope for the callback\n     */\n    once(event, callback, scope) {\n        const self = this;\n        const subId = this.on(event,\n            function (value) {\n                self.off(subId);\n                callback.call(scope || this, value);\n            },\n            scope);\n    }\n\n    /**\n     * Returns true if there are any subscribers to the given event on this component.\n     *\n     * @param {String} event The event\n     * @return {Boolean} True if there are any subscribers to the given event on this component.\n     */\n    hasSubs(event) {\n        return (this._eventSubsNum && (this._eventSubsNum[event] > 0));\n    }\n\n    /**\n     * Logs a console debugging message for this component.\n     *\n     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * Also fires the message as a \"log\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    log(message) {\n        message = \"[LOG]\" + this._message(message);\n        window.console.log(message);\n        this.scene.fire(\"log\", message);\n    }\n\n    _message(message) {\n        return \" [\" + this.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(this.id) + \"]: \" + message;\n    }\n\n    /**\n     * Logs a warning for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as a \"warn\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    warn(message) {\n        message = \"[WARN]\" + this._message(message);\n        window.console.warn(message);\n        this.scene.fire(\"warn\", message);\n    }\n\n    /**\n     * Logs an error for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as an \"error\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    error(message) {\n        message = \"[ERROR]\" + this._message(message);\n        window.console.error(message);\n        this.scene.fire(\"error\", message);\n    }\n\n    /**\n     * Adds a child component to this.\n     *\n     * When component not given, attaches the scene's default instance for the given name (if any).\n     * Publishes the new child component on this component, keyed to the given name.\n     *\n     * @param {*} params\n     * @param {String} params.name component name\n     * @param {Component} [params.component] The component\n     * @param {String} [params.type] Optional expected type of base type of the child; when supplied, will\n     * cause an exception if the given child is not the same type or a subtype of this.\n     * @param {Boolean} [params.sceneDefault=false]\n     * @param {Boolean} [params.sceneSingleton=false]\n     * @param {Function} [params.onAttached] Optional callback called when component attached\n     * @param {Function} [params.onAttached.callback] Callback function\n     * @param {Function} [params.onAttached.scope] Optional scope for callback\n     * @param {Function} [params.onDetached] Optional callback called when component is detached\n     * @param {Function} [params.onDetached.callback] Callback function\n     * @param {Function} [params.onDetached.scope] Optional scope for callback\n     * @param {{String:Function}} [params.on] Callbacks to subscribe to properties on component\n     * @param {Boolean} [params.recompiles=true] When true, fires \"dirty\" events on this component\n     * @private\n     */\n    _attach(params) {\n\n        const name = params.name;\n\n        if (!name) {\n            this.error(\"Component 'name' expected\");\n            return;\n        }\n\n        let component = params.component;\n        const sceneDefault = params.sceneDefault;\n        const sceneSingleton = params.sceneSingleton;\n        const type = params.type;\n        const on = params.on;\n        const recompiles = params.recompiles !== false;\n\n        // True when child given as config object, where parent manages its instantiation and destruction\n        let managingLifecycle = false;\n\n        if (component) {\n\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isNumeric(component) || _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isString(component)) {\n\n                // Component ID given\n                // Both numeric and string IDs are supported\n\n                const id = component;\n\n                component = this.scene.components[id];\n\n                if (!component) {\n\n                    // Quote string IDs in errors\n\n                    this.error(\"Component not found: \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(id));\n                    return;\n                }\n            }\n        }\n\n        if (!component) {\n\n            if (sceneSingleton === true) {\n\n                // Using the first instance of the component type we find\n\n                const instances = this.scene.types[type];\n                for (const id2 in instances) {\n                    if (instances.hasOwnProperty) {\n                        component = instances[id2];\n                        break;\n                    }\n                }\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n\n            } else if (sceneDefault === true) {\n\n                // Using a default scene component\n\n                component = this.scene[name];\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n            }\n        }\n\n        if (component) {\n\n            if (component.scene.id !== this.scene.id) {\n                this.error(\"Not in same scene: \" + component.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(component.id));\n                return;\n            }\n\n            if (type) {\n\n                if (!component.isType(type)) {\n                    this.error(\"Expected a \" + type + \" type or subtype: \" + component.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(component.id));\n                    return;\n                }\n            }\n        }\n\n        if (!this._attachments) {\n            this._attachments = {};\n        }\n\n        const oldComponent = this._attached[name];\n        let subs;\n        let i;\n        let len;\n\n        if (oldComponent) {\n\n            if (component && oldComponent.id === component.id) {\n\n                // Reject attempt to reattach same component\n                return;\n            }\n\n            const oldAttachment = this._attachments[oldComponent.id];\n\n            // Unsubscribe from events on old component\n\n            subs = oldAttachment.subs;\n\n            for (i = 0, len = subs.length; i < len; i++) {\n                oldComponent.off(subs[i]);\n            }\n\n            delete this._attached[name];\n            delete this._attachments[oldComponent.id];\n\n            const onDetached = oldAttachment.params.onDetached;\n            if (onDetached) {\n                if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(onDetached)) {\n                    onDetached(oldComponent);\n                } else {\n                    onDetached.scope ? onDetached.callback.call(onDetached.scope, oldComponent) : onDetached.callback(oldComponent);\n                }\n            }\n\n            if (oldAttachment.managingLifecycle) {\n\n                // Note that we just unsubscribed from all events fired by the child\n                // component, so destroying it won't fire events back at us now.\n\n                oldComponent.destroy();\n            }\n        }\n\n        if (component) {\n\n            // Set and publish the new component on this component\n\n            const attachment = {\n                params: params,\n                component: component,\n                subs: [],\n                managingLifecycle: managingLifecycle\n            };\n\n            attachment.subs.push(\n                component.once(\"destroyed\",\n                    function () {\n                        attachment.params.component = null;\n                        this._attach(attachment.params);\n                    },\n                    this));\n\n            if (recompiles) {\n                attachment.subs.push(\n                    component.on(\"dirty\",\n                        function () {\n                            this.fire(\"dirty\", this);\n                        },\n                        this));\n            }\n\n            this._attached[name] = component;\n            this._attachments[component.id] = attachment;\n\n            // Bind destruct listener to new component to remove it\n            // from this component when destroyed\n\n            const onAttached = params.onAttached;\n            if (onAttached) {\n                if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(onAttached)) {\n                    onAttached(component);\n                } else {\n                    onAttached.scope ? onAttached.callback.call(onAttached.scope, component) : onAttached.callback(component);\n                }\n            }\n\n            if (on) {\n\n                let event;\n                let subIdr;\n                let callback;\n                let scope;\n\n                for (event in on) {\n                    if (on.hasOwnProperty(event)) {\n\n                        subIdr = on[event];\n\n                        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(subIdr)) {\n                            callback = subIdr;\n                            scope = null;\n                        } else {\n                            callback = subIdr.callback;\n                            scope = subIdr.scope;\n                        }\n\n                        if (!callback) {\n                            continue;\n                        }\n\n                        attachment.subs.push(component.on(event, callback, scope));\n                    }\n                }\n            }\n        }\n\n        if (recompiles) {\n            this.fire(\"dirty\", this); // FIXME: May trigger spurous mesh recompilations unless able to limit with param?\n        }\n\n        this.fire(name, component); // Component can be null\n\n        return component;\n    }\n\n    _checkComponent(expectedType, component) {\n        if (!component.isComponent) {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (expectedType !== component.type) {\n            this.error(\"Expected a \" + expectedType + \" Component\");\n            return;\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        return component;\n    }\n\n    _checkComponent2(expectedTypes, component) {\n        if (!component.isComponent) {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        for (var i = 0, len = expectedTypes.length; i < len; i++) {\n            if (expectedTypes[i] === component.type) {\n                return component;\n            }\n        }\n        this.error(\"Expected component types: \" + expectedTypes);\n        return null;\n    }\n\n    _own(component) {\n        if (!this._ownedComponents) {\n            this._ownedComponents = {};\n        }\n        if (!this._ownedComponents[component.id]) {\n            this._ownedComponents[component.id] = component;\n        }\n        component.once(\"destroyed\", () => {\n            delete this._ownedComponents[component.id];\n        }, this);\n    }\n\n    /**\n     * Protected method, called by sub-classes to queue a call to _update().\n     * @protected\n     * @param {Number} [priority=1]\n     */\n    _needUpdate(priority) {\n        if (!this._updateScheduled) {\n            this._updateScheduled = true;\n            if (priority === 0) {\n                this._doUpdate();\n            } else {\n                _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].scheduleTask(this._doUpdate, this);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    _doUpdate() {\n        if (this._updateScheduled) {\n            this._updateScheduled = false;\n            if (this._update) {\n                this._update();\n            }\n        }\n    }\n\n    /**\n     * Protected virtual template method, optionally implemented\n     * by sub-classes to perform a scheduled task.\n     *\n     * @protected\n     */\n    _update() {\n    }\n\n    /**\n     * Destroys all {@link Component}s that are owned by this. These are Components that were instantiated with\n     * this Component as their first constructor argument.\n     */\n    clear() {\n        if (this._ownedComponents) {\n            for (var id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    const component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n    }\n\n    /**\n     * Destroys this component.\n     */\n    destroy() {\n\n        if (this.destroyed) {\n            return;\n        }\n\n        /**\n         * Fired when this Component is destroyed.\n         * @event destroyed\n         */\n        this.fire(\"destroyed\", this.destroyed = true); // Must fire before we blow away subscription maps, below\n\n        // Unsubscribe from child components and destroy then\n\n        let id;\n        let attachment;\n        let component;\n        let subs;\n        let i;\n        let len;\n\n        if (this._attachments) {\n            for (id in this._attachments) {\n                if (this._attachments.hasOwnProperty(id)) {\n                    attachment = this._attachments[id];\n                    component = attachment.component;\n                    subs = attachment.subs;\n                    for (i = 0, len = subs.length; i < len; i++) {\n                        component.off(subs[i]);\n                    }\n                    if (attachment.managingLifecycle) {\n                        component.destroy();\n                    }\n                }\n            }\n        }\n\n        if (this._ownedComponents) {\n            for (id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n\n        this.scene._removeComponent(this);\n\n        // Memory leak avoidance\n        this._attached = {};\n        this._attachments = null;\n        this._subIdMap = null;\n        this._subIdEvents = null;\n        this._eventSubs = null;\n        this._events = null;\n        this._eventCallDepth = 0;\n        this._ownedComponents = null;\n        this._updateScheduled = false;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Camera.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Camera.js ***!
  \***************************************************************************/
/*! exports provided: Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Camera\", function() { return Camera; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _Perspective_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Perspective.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Perspective.js\");\n/* harmony import */ var _Ortho_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Ortho.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Ortho.js\");\n/* harmony import */ var _Frustum_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Frustum.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Frustum.js\");\n/* harmony import */ var _CustomProjection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./CustomProjection.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/CustomProjection.js\");\n\n\n\n\n\n\n\n\nconst tempVec3 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempVec3b = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempVec3c = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempVec3d = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempVec3e = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempVec3f = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempMat = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\nconst tempMatb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\nconst eyeLookVec = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst eyeLookVecNorm = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst eyeLookOffset = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst offsetEye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n/**\n * @desc Manages viewing and projection transforms for its {@link Scene}.\n *\n * * One Camera per {@link Scene}\n * * Scene is located at {@link Viewer#scene} and Camera is located at {@link Scene#camera}\n * * Controls viewing and projection transforms\n * * Has methods to pan, zoom and orbit (or first-person rotation)\n * * Dynamically configurable World-space axis\n * * Has {@link Perspective}, {@link Ortho} and {@link Frustum} and {@link CustomProjection}, which you can dynamically switch it between\n * * Switchable gimbal lock\n * * Can be \"flown\" to look at targets using a {@link CameraFlightAnimation}\n * * Can be animated along a path using a {@link CameraPathAnimation}\n *\n * ## Getting the Camera\n *\n * There is exactly one Camera per {@link Scene}:\n *\n * ````javascript\n * import {Viewer} from \"viewer/Viewer.js\";\n *\n * var camera = viewer.scene.camera;\n *\n * ````\n *\n * ## Setting the Camera Position\n *\n * Get and set the Camera's absolute position via {@link Camera#eye}, {@link Camera#look} and {@link Camera#up}:\n *\n * ````javascript\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n * ````\n *\n * ## Camera View and Projection Matrices\n *\n * The Camera's view matrix transforms coordinates from World-space to View-space.\n *\n * Getting the view matrix:\n *\n * ````javascript\n * var viewMatrix = camera.viewMatrix;\n * var viewNormalMatrix = camera.normalMatrix;\n * ````\n *\n * The Camera's view normal matrix transforms normal vectors from World-space to View-space.\n *\n * Getting the view normal matrix:\n *\n * ````javascript\n * var viewNormalMatrix = camera.normalMatrix;\n * ````\n *\n * The Camera fires a ````\"viewMatrix\"```` event whenever the {@link Camera#viewMatrix} and {@link Camera#viewNormalMatrix} updates.\n *\n * Listen for view matrix updates:\n *\n * ````javascript\n * camera.on(\"viewMatrix\", function(matrix) { ... });\n * ````\n *\n * ## Rotating the Camera\n *\n * Orbiting the {@link Camera#look} position:\n *\n * ````javascript\n * camera.orbitYaw(20.0);\n * camera.orbitPitch(10.0);\n * ````\n *\n * First-person rotation, rotates {@link Camera#look} and {@link Camera#up} about {@link Camera#eye}:\n *\n * ````javascript\n * camera.yaw(5.0);\n * camera.pitch(-10.0);\n * ````\n *\n * ## Panning the Camera\n *\n * Panning along the Camera's local axis (ie. left/right, up/down, forward/backward):\n *\n * ````javascript\n * camera.pan([-20, 0, 10]);\n * ````\n *\n * ## Zooming the Camera\n *\n * Zoom to vary distance between {@link Camera#eye} and {@link Camera#look}:\n *\n * ````javascript\n * camera.zoom(-5); // Move five units closer\n * ````\n *\n * Get the current distance between {@link Camera#eye} and {@link Camera#look}:\n *\n * ````javascript\n * var distance = camera.eyeLookDist;\n * ````\n *\n * ## Projection\n *\n * The Camera has a Component to manage each projection type, which are: {@link Perspective}, {@link Ortho}\n * and {@link Frustum} and {@link CustomProjection}.\n *\n * You can configure those components at any time, regardless of which is currently active:\n *\n * The Camera has a {@link Perspective} to manage perspective\n * ````javascript\n *\n * // Set some properties on Perspective\n * camera.perspective.near = 0.4;\n * camera.perspective.fov = 45;\n *\n * // Set some properties on Ortho\n * camera.ortho.near = 0.8;\n * camera.ortho.far = 1000;\n *\n * // Set some properties on Frustum\n * camera.frustum.left = -1.0;\n * camera.frustum.right = 1.0;\n * camera.frustum.far = 1000.0;\n *\n * // Set the matrix property on CustomProjection\n * camera.customProjection.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n *\n * // Switch between the projection types\n * camera.projection = \"perspective\"; // Switch to perspective\n * camera.projection = \"frustum\"; // Switch to frustum\n * camera.projection = \"ortho\"; // Switch to ortho\n * camera.projection = \"customProjection\"; // Switch to custom\n * ````\n *\n * Camera provides the projection matrix for the currently active projection in {@link Camera#projMatrix}.\n *\n * Get the projection matrix:\n *\n * ````javascript\n * var projMatrix = camera.projMatrix;\n * ````\n *\n * Listen for projection matrix updates:\n *\n * ````javascript\n * camera.on(\"projMatrix\", function(matrix) { ... });\n * ````\n *\n * ## Configuring World up direction\n *\n * We can dynamically configure the directions of the World-space coordinate system.\n *\n * Setting the +Y axis as World \"up\", +X as right and -Z as forwards (convention in some modeling software):\n *\n * ````javascript\n * camera.worldAxis = [\n *     1, 0, 0,    // Right\n *     0, 1, 0,    // Up\n *     0, 0,-1     // Forward\n * ];\n * ````\n *\n * Setting the +Z axis as World \"up\", +X as right and -Y as \"up\" (convention in most CAD and BIM viewers):\n *\n * ````javascript\n * camera.worldAxis = [\n *     1, 0, 0, // Right\n *     0, 0, 1, // Up\n *     0,-1, 0  // Forward\n * ];\n * ````\n *\n * The Camera has read-only convenience properties that provide each axis individually:\n *\n * ````javascript\n * var worldRight = camera.worldRight;\n * var worldForward = camera.worldForward;\n * var worldUp = camera.worldUp;\n * ````\n *\n * ### Gimbal locking\n *\n * By default, the Camera locks yaw rotation to pivot about the World-space \"up\" axis. We can dynamically lock and unlock that at any time:\n *\n * ````javascript\n * camera.gimbalLock = false; // Yaw rotation now happens about Camera's local Y-axis\n * camera.gimbalLock = true; // Yaw rotation now happens about World's \"up\" axis\n * ````\n *\n * See: <a href=\"https://en.wikipedia.org/wiki/Gimbal_lock\">https://en.wikipedia.org/wiki/Gimbal_lock</a>\n */\nclass Camera extends _Component_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Camera\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderState\"]({\n            deviceMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            hasDeviceMatrix: false, // True when deviceMatrix set to other than identity\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            normalMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            inverseMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4()\n        });\n\n        this._perspective = new _Perspective_js__WEBPACK_IMPORTED_MODULE_3__[\"Perspective\"](this);\n        this._ortho = new _Ortho_js__WEBPACK_IMPORTED_MODULE_4__[\"Ortho\"](this);\n        this._frustum = new _Frustum_js__WEBPACK_IMPORTED_MODULE_5__[\"Frustum\"](this);\n        this._customProjection = new _CustomProjection_js__WEBPACK_IMPORTED_MODULE_6__[\"CustomProjection\"](this);\n        this._project = this._perspective;\n\n        this._eye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 0, 10.0]);\n        this._look = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 0, 0]);\n        this._up = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 1, 0]);\n\n        this._worldUp = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 1, 0]);\n        this._worldRight = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([1, 0, 0]);\n        this._worldForward = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 0, -1]);\n\n        this.deviceMatrix = cfg.deviceMatrix;\n        this.eye = cfg.eye;\n        this.look = cfg.look;\n        this.up = cfg.up;\n        this.worldAxis = cfg.worldAxis;\n        this.gimbalLock = cfg.gimbalLock;\n        this.constrainPitch = cfg.constrainPitch;\n\n        this.projection = cfg.projection;\n\n        this._perspective.on(\"matrix\", () => {\n            if (this._projectionType === \"perspective\") {\n                this.fire(\"projMatrix\", this._perspective.matrix);\n            }\n        });\n        this._ortho.on(\"matrix\", () => {\n            if (this._projectionType === \"ortho\") {\n                this.fire(\"projMatrix\", this._ortho.matrix);\n            }\n        });\n        this._frustum.on(\"matrix\", () => {\n            if (this._projectionType === \"frustum\") {\n                this.fire(\"projMatrix\", this._frustum.matrix);\n            }\n        });\n        this._customProjection.on(\"matrix\", () => {\n            if (this._projectionType === \"customProjection\") {\n                this.fire(\"projMatrix\", this._customProjection.matrix);\n            }\n        });\n    }\n\n    _update() {\n        const state = this._state;\n        // In ortho mode, build the view matrix with an eye position that's translated\n        // well back from look, so that the front sectionPlane plane doesn't unexpectedly cut\n        // the front off the view (not a problem with perspective, since objects close enough\n        // to be clipped by the front plane are usually too big to see anything of their cross-sections).\n        let eye;\n        if (this.projection === \"ortho\") {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._eye, this._look, eyeLookVec);\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(eyeLookVec, eyeLookVecNorm);\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(eyeLookVecNorm, 1000.0, eyeLookOffset);\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this._look, eyeLookOffset, offsetEye);\n            eye = offsetEye;\n        } else {\n            eye = this._eye;\n        }\n        if (state.hasDeviceMatrix) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].lookAtMat4v(eye, this._look, this._up, tempMatb);\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(state.deviceMatrix, tempMatb, state.matrix);\n            //state.matrix.set(state.deviceMatrix);\n        } else {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].lookAtMat4v(eye, this._look, this._up, state.matrix);\n        }\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].inverseMat4(this._state.matrix, this._state.inverseMatrix);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transposeMat4(this._state.inverseMatrix, this._state.normalMatrix);\n        this.glRedraw();\n        this.fire(\"matrix\", this._state.matrix);\n        this.fire(\"viewMatrix\", this._state.matrix);\n    }\n\n    /**\n     * Rotates {@link Camera#eye} about {@link Camera#look}, around the {@link Camera#up} vector\n     *\n     * @param {Number} angleInc Angle of rotation in degrees\n     */\n    orbitYaw(angleInc) {\n        let lookEyeVec = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._eye, this._look, tempVec3);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rotationMat4v(angleInc * 0.0174532925, this._gimbalLock ? this._worldUp : this._up, tempMat);\n        lookEyeVec = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, lookEyeVec, tempVec3b);\n        this.eye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this._look, lookEyeVec, tempVec3c); // Set eye position as 'look' plus 'eye' vector\n        this.up = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, this._up, tempVec3d); // Rotate 'up' vector\n    }\n\n    /**\n     * Rotates {@link Camera#eye} about {@link Camera#look} around the right axis (orthogonal to {@link Camera#up} and \"look\").\n     *\n     * @param {Number} angleInc Angle of rotation in degrees\n     */\n    orbitPitch(angleInc) {\n        if (this._constrainPitch) {\n            angleInc = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].dotVec3(this._up, this._worldUp) / _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n            if (angleInc < 1) {\n                return;\n            }\n        }\n        let eye2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._eye, this._look, tempVec3);\n        const left = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cross3Vec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(eye2, tempVec3b), _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(this._up, tempVec3c));\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rotationMat4v(angleInc * 0.0174532925, left, tempMat);\n        eye2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, eye2, tempVec3d);\n        this.up = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, this._up, tempVec3e);\n        this.eye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(eye2, this._look, tempVec3f);\n    }\n\n    /**\n     * Rotates {@link Camera#look} about {@link Camera#eye}, around the {@link Camera#up} vector.\n     *\n     * @param {Number} angleInc Angle of rotation in degrees\n     */\n    yaw(angleInc) {\n        let look2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._look, this._eye, tempVec3);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rotationMat4v(angleInc * 0.0174532925, this._gimbalLock ? this._worldUp : this._up, tempMat);\n        look2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, look2, tempVec3b);\n        this.look = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(look2, this._eye, tempVec3c);\n        if (this._gimbalLock) {\n            this.up = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, this._up, tempVec3d);\n        }\n    }\n\n    /**\n     * Rotates {@link Camera#look} about {@link Camera#eye}, around the right axis (orthogonal to {@link Camera#up} and \"look\").\n\n     * @param {Number} angleInc Angle of rotation in degrees\n     */\n    pitch(angleInc) {\n        if (this._constrainPitch) {\n            angleInc = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].dotVec3(this._up, this._worldUp) / _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n            if (angleInc < 1) {\n                return;\n            }\n        }\n        let look2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._look, this._eye, tempVec3);\n        const left = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cross3Vec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(look2, tempVec3b), _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(this._up, tempVec3c));\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rotationMat4v(angleInc * 0.0174532925, left, tempMat);\n        this.up = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, this._up, tempVec3f);\n        look2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformPoint3(tempMat, look2, tempVec3d);\n        this.look = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(look2, this._eye, tempVec3e);\n    }\n\n    /**\n     * Pans the Camera along its local X, Y and Z axis.\n     *\n     * @param pan The pan vector\n     */\n    pan(pan) {\n        const eye2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._eye, this._look, tempVec3);\n        const vec = [0, 0, 0];\n        let v;\n        if (pan[0] !== 0) {\n            const left = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cross3Vec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(eye2, []), _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(this._up, tempVec3b));\n            v = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(left, pan[0]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[1] !== 0) {\n            v = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(this._up, tempVec3c), pan[1]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[2] !== 0) {\n            v = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(eye2, tempVec3d), pan[2]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        this.eye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this._eye, vec, tempVec3e);\n        this.look = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this._look, vec, tempVec3f);\n    }\n\n    /**\n     * Increments/decrements the Camera's zoom factor, which is the distance between {@link Camera#eye} and {@link Camera#look}.\n     *\n     * @param {Number} delta Zoom factor increment.\n     */\n    zoom(delta) {\n        const vec = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._eye, this._look, tempVec3);\n        const lenLook = Math.abs(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].lenVec3(vec, tempVec3b));\n        const newLenLook = Math.abs(lenLook + delta);\n        if (newLenLook < 0.5) {\n            return;\n        }\n        const dir = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(vec, tempVec3c);\n        this.eye = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this._look, _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(dir, newLenLook), tempVec3d);\n    }\n\n    /**\n     * Sets the position of the Camera's eye.\n     *\n     * Default value is ````[0,0,10]````.\n     *\n     * @emits \"eye\" event on change, with the value of this property.\n     * @type {Number[]} New eye position.\n     */\n    set eye(eye) {\n        this._eye.set(eye || [0, 0, 10]);\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"eye\", this._eye);\n    }\n\n    /**\n     * Gets the position of the Camera's eye.\n     *\n     * Default vale is ````[0,0,10]````.\n     *\n     * @type {Number[]} New eye position.\n     */\n    get eye() {\n        return this._eye;\n    }\n\n    /**\n     * Sets the position of this Camera's point-of-interest.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @emits \"look\" event on change, with the value of this property.\n     *\n     * @param {Number[]} look Camera look position.\n     */\n    set look(look) {\n        this._look.set(look || [0, 0, 0]);\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"look\", this._look);\n    }\n\n    /**\n     * Gets the position of this Camera's point-of-interest.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @returns {Number[]} Camera look position.\n     */\n    get look() {\n        return this._look;\n    }\n\n    /**\n     * Sets the direction of this Camera's {@link Camera#up} vector.\n     *\n     * @emits \"up\" event on change, with the value of this property.\n     *\n     * @param {Number[]} up Direction of \"up\".\n     */\n    set up(up) {\n        this._up.set(up || [0, 1, 0]);\n        this._needUpdate(0);\n        this.fire(\"up\", this._up);\n    }\n\n    /**\n     * Gets the direction of this Camera's {@link Camera#up} vector.\n     *\n     * @returns {Number[]} Direction of \"up\".\n     */\n    get up() {\n        return this._up;\n    }\n\n    /**\n     * Sets an optional matrix to premultiply into {@link Camera#matrix} matrix.\n     *\n     * This is intended to be used for stereo rendering with WebVR etc.\n     *\n     * @param {Number[]} matrix The matrix.\n     */\n    set deviceMatrix(matrix) {\n        this._state.deviceMatrix.set(matrix || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        this._state.hasDeviceMatrix = !!matrix;\n        this._needUpdate(0);\n        this.fire(\"deviceMatrix\", this._state.deviceMatrix);\n    }\n\n    /**\n     * Gets an optional matrix to premultiply into {@link Camera#matrix} matrix.\n     *\n     * @returns {Number[]} The matrix.\n     */\n    get deviceMatrix() {\n        return this._state.deviceMatrix;\n    }\n\n    /**\n     * Sets the up, right and forward axis of the World coordinate system.\n     *\n     * Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n     *\n     * Default axis is ````[1, 0, 0, 0, 1, 0, 0, 0, 1]````\n     *\n     * @param {Number[]} axis The new Wworld coordinate axis.\n     */\n    set worldAxis(axis) {\n        axis = axis || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n        if (!this._worldAxis) {\n            this._worldAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(axis);\n        } else {\n            this._worldAxis.set(axis);\n        }\n        this._worldRight[0] = this._worldAxis[0];\n        this._worldRight[1] = this._worldAxis[1];\n        this._worldRight[2] = this._worldAxis[2];\n        this._worldUp[0] = this._worldAxis[3];\n        this._worldUp[1] = this._worldAxis[4];\n        this._worldUp[2] = this._worldAxis[5];\n        this._worldForward[0] = this._worldAxis[6];\n        this._worldForward[1] = this._worldAxis[7];\n        this._worldForward[2] = this._worldAxis[8];\n        this.fire(\"worldAxis\", this._worldAxis);\n    }\n\n    /**\n     * Gets the up, right and forward axis of the World coordinate system.\n     *\n     * Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n     *\n     * Default axis is ````[1, 0, 0, 0, 1, 0, 0, 0, 1]````\n     *\n     * @returns {Number[]} The current World coordinate axis.\n     */\n    get worldAxis() {\n        return this._worldAxis;\n    }\n\n    /**\n     * Gets the direction of World-space \"up\".\n     *\n     * This is set by {@link Camera#worldAxis}.\n     *\n     * Default value is ````[0,1,0]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldUp() {\n        return this._worldUp;\n    }\n\n    /**\n     * Gets if the World-space X-axis is \"up\".\n     * @returns {boolean}\n     */\n    get xUp() {\n        return this._worldUp[0] > this._worldUp[1] && this._worldUp[0] > this._worldUp[2];\n    }\n\n    /**\n     * Gets if the World-space Y-axis is \"up\".\n     * @returns {boolean}\n     */\n    get yUp() {\n        return this._worldUp[1] > this._worldUp[0] && this._worldUp[1] > this._worldUp[2];\n    }\n\n    /**\n     * Gets if the World-space Z-axis is \"up\".\n     * @returns {boolean}\n     */\n    get zUp() {\n        return this._worldUp[2] > this._worldUp[0] && this._worldUp[2] > this._worldUp[1];\n    }\n\n    /**\n     * Gets the direction of World-space \"right\".\n     *\n     * This is set by {@link Camera#worldAxis}.\n     *\n     * Default value is ````[1,0,0]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldRight() {\n        return this._worldRight;\n    }\n\n    /**\n     * Gets the direction of World-space \"forwards\".\n     *\n     * This is set by {@link Camera#worldAxis}.\n     *\n     * Default value is ````[0,0,1]````.\n     *\n     * @returns {Number[]} The \"up\" vector.\n     */\n    get worldForward() {\n        return this._worldForward;\n    }\n\n    /**\n     * Sets whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n     *\n     * Fires a {@link Camera#gimbalLock:event} event on change.\n     *\n     * @params {Boolean} gimbalLock Set true to lock gimbal.\n     */\n    set gimbalLock(value) {\n        this._gimbalLock = value !== false;\n        this.fire(\"gimbalLock\", this._gimbalLock);\n    }\n\n    /**\n     * Gets whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n     *\n     * @returns {Boolean} Returns ````true```` if gimbal is locked.\n     */\n    get gimbalLock() {\n        return this._gimbalLock;\n    }\n\n    /**\n     * Sets whether to prevent camera from being pitched upside down.\n     *\n     * The camera is upside down when the angle between {@link Camera#up} and {@link Camera#worldUp} is less than one degree.\n     *\n     * Fires a {@link Camera#constrainPitch:event} event on change.\n     *\n     * Default value is ````false````.\n     *\n     * @param {Boolean} value Set ````true```` to contrain pitch rotation.\n     */\n    set constrainPitch(value) {\n        this._constrainPitch = !!value;\n        this.fire(\"constrainPitch\", this._constrainPitch);\n    }\n\n    /**\n     * Gets whether to prevent camera from being pitched upside down.\n     *\n     * The camera is upside down when the angle between {@link Camera#up} and {@link Camera#worldUp} is less than one degree.\n     *\n     * Default value is ````false````.\n     *\n     * @returns {Boolean} ````true```` if pitch rotation is currently constrained.\n     get constrainPitch() {\n        return this._constrainPitch;\n    }\n\n     /**\n     * Gets distance from {@link Camera#look} to {@link Camera#eye}.\n     *\n     * @returns {Number} The distance.\n     */\n    get eyeLookDist() {\n        return _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].lenVec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(this._look, this._eye, tempVec3));\n    }\n\n    /**\n     * Gets the Camera's viewing transformation matrix.\n     *\n     * Fires a {@link Camera#matrix:event} event on change.\n     *\n     * @returns {Number[]} The viewing transform matrix.\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     * Gets the Camera's viewing transformation matrix.\n     *\n     * Fires a {@link Camera#matrix:event} event on change.\n     *\n     * @returns {Number[]} The viewing transform matrix.\n     */\n    get viewMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     * The Camera's viewing normal transformation matrix.\n     *\n     * Fires a {@link Camera#matrix:event} event on change.\n     *\n     * @returns {Number[]} The viewing normal transform matrix.\n     */\n    get normalMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.normalMatrix;\n    }\n\n    /**\n     * The Camera's viewing normal transformation matrix.\n     *\n     * Fires a {@link Camera#matrix:event} event on change.\n     *\n     * @returns {Number[]} The viewing normal transform matrix.\n     */\n    get viewNormalMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.normalMatrix;\n    }\n\n    /**\n     * Gets the inverse of the Camera's viewing transform matrix.\n     *\n     * This has the same value as {@link Camera#normalMatrix}.\n     *\n     * @returns {Number[]} The inverse viewing transform matrix.\n     */\n    get inverseViewMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.inverseMatrix;\n    }\n\n    /**\n     * Gets the Camera's projection transformation projMatrix.\n     *\n     * Fires a {@link Camera#projMatrix:event} event on change.\n     *\n     * @returns {Number[]} The projection matrix.\n     */\n    get projMatrix() {\n        return this[this.projection].matrix;\n    }\n\n    /**\n     * Gets the Camera's perspective projection.\n     *\n     * The Camera uses this while {@link Camera#projection} equals ````perspective````.\n     *\n     * @returns {Perspective} The Perspective component.\n     */\n    get perspective() {\n        return this._perspective;\n    }\n\n    /**\n     * Gets the Camera's orthographic projection.\n     *\n     * The Camera uses this while {@link Camera#projection} equals ````ortho````.\n     *\n     * @returns {Ortho} The Ortho component.\n     */\n    get ortho() {\n        return this._ortho;\n    }\n\n    /**\n     * Gets the Camera's frustum projection.\n     *\n     * The Camera uses this while {@link Camera#projection} equals ````frustum````.\n     *\n     * @returns {Frustum} The Ortho component.\n     */\n    get frustum() {\n        return this._frustum;\n    }\n\n    /**\n     * Gets the Camera's custom projection.\n     *\n     * This is used while {@link Camera#projection} equals \"customProjection\".\n     *\n     * @returns {CustomProjection} The custom projection.\n     */\n    get customProjection() {\n        return this._customProjection;\n    }\n\n    /**\n     * Sets the active projection type.\n     *\n     * Accepted values are ````\"perspective\"````, ````\"ortho\"````, ````\"frustum\"```` and ````\"customProjection\"````.\n     *\n     * Default value is ````\"perspective\"````.\n     *\n     * @param {String} value Identifies the active projection type.\n     */\n    set projection(value) {\n        value = value || \"perspective\";\n        if (this._projectionType === value) {\n            return;\n        }\n        if (value === \"perspective\") {\n            this._project = this._perspective;\n        } else if (value === \"ortho\") {\n            this._project = this._ortho;\n        } else if (value === \"frustum\") {\n            this._project = this._frustum;\n        } else if (value === \"customProjection\") {\n            this._project = this._customProjection;\n        } else {\n            this.error(\"Unsupported value for 'projection': \" + value + \" defaulting to 'perspective'\");\n            this._project = this._perspective;\n            value = \"perspective\";\n        }\n        this._project._update();\n        this._projectionType = value;\n        this.glRedraw();\n        this._update(); // Need to rebuild lookat matrix with full eye, look & up\n        this.fire(\"dirty\");\n        this.fire(\"projection\", this._projectionType);\n        this.fire(\"projMatrix\", this._project.matrix);\n    }\n\n    /**\n     * Gets the active projection type.\n     *\n     * Possible values are ````\"perspective\"````, ````\"ortho\"````, ````\"frustum\"```` and ````\"customProjection\"````.\n     *\n     * Default value is ````\"perspective\"````.\n     *\n     * @returns {String} Identifies the active projection type.\n     */\n    get projection() {\n        return this._projectionType;\n    }\n\n    /**\n     * Gets the currently active projection for this Camera.\n     *\n     * The currently active project is selected with {@link Camera#projection}.\n     *\n     * @returns {Perspective|Ortho|Frustum|CustomProjection} The currently active projection is active.\n     */\n    get project() {\n        return this._project;\n    }\n\n    /**\n     * Destroys this Camera.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Camera.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/CustomProjection.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/CustomProjection.js ***!
  \*************************************************************************************/
/*! exports provided: CustomProjection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CustomProjection\", function() { return CustomProjection; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\n\n/**\n * @desc Defines a custom projection for a {@link Camera} as a custom 4x4 matrix..\n *\n * Located at {@link Camera#customProjection}.\n */\nclass CustomProjection extends _Component_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n\n    /**\n     * @private\n     */\n    get type() {\n        return \"CustomProjection\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(camera, cfg = {}) {\n\n        super(camera, cfg);\n\n        /**\n         * The Camera this CustomProjection belongs to.\n         *\n         * @property camera\n         * @type {Camera}\n         * @final\n         */\n        this.camera = camera;\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderState\"]({\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            inverseMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            transposedMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4()\n        });\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = false;\n\n        this.matrix = cfg.matrix;\n    }\n\n    /**\n     * Sets the CustomProjection's projection transform matrix.\n     *\n     * Fires a \"matrix\" event on change.\n\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @param {Number[]} matrix New value for the CustomProjection's matrix.\n     */\n    set matrix(matrix) {\n        this._state.matrix.set(matrix || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n        this.glRedraw();\n        this.fire(\"far\", this._state.matrix);\n    }\n\n    /**\n     * Gets the CustomProjection's projection transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @return {Number[]} New value for the CustomProjection's matrix.\n     */\n    get matrix() {\n        return this._state.matrix;\n    }\n\n    /**\n     * Gets the inverse of {@link CustomProjection#matrix}.\n     *\n     * @returns {Number[]} The inverse of {@link CustomProjection#matrix}.\n     */\n    get inverseMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._inverseMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].inverseMat4(this._state.matrix, this._state.inverseMatrix);\n            this._inverseMatrixDirty = false;\n        }\n        return this._state.inverseMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link CustomProjection#matrix}.\n     *\n     * @returns {Number[]} The transpose of {@link CustomProjection#matrix}.\n     */\n    get transposedMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._transposedMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transposeMat4(this._state.matrix, this._state.transposedMatrix);\n            this._transposedMatrixDirty = false;\n        }\n        return this._state.transposedMatrix;\n    }\n\n    /**\n     * Un-projects the given Canvas-space coordinates, using this CustomProjection.\n     *\n     * @param {Number[]} canvasPos Inputs 2D Canvas-space coordinates.\n     * @param {Number} screenZ Inputs Screen-space Z coordinate.\n     * @param {Number[]} screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param {Number[]} viewPos Outputs un-projected 3D View-space coordinates.\n     * @param {Number[]} worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(canvasPos, screenZ, screenPos, viewPos, worldPos) {\n\n        const canvas = this.scene.canvas.canvas;\n\n        const halfCanvasWidth = canvas.offsetWidth / 2.0;\n        const halfCanvasHeight = canvas.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfCanvasWidth) / halfCanvasWidth;\n        screenPos[1] = (canvasPos[1] - halfCanvasHeight) / halfCanvasHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4v4(this.inverseMatrix, screenPos, viewPos);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2NhbWVyYS9DdXN0b21Qcm9qZWN0aW9uLmpzPzM5MTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFxQztBQUNLO0FBQ1U7O0FBRXBEO0FBQ0EsNENBQTRDLGFBQWE7QUFDekQ7QUFDQSxlQUFlLDhCQUE4QjtBQUM3QztBQUNBLCtCQUErQix1REFBUzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDOztBQUVoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCLGlFQUFXO0FBQ3JDLG9CQUFvQixrREFBSTtBQUN4QiwyQkFBMkIsa0RBQUk7QUFDL0IsOEJBQThCLGtEQUFJO0FBQ2xDLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0EsaUJBQWlCLFNBQVMsaUJBQWlCLDhCQUE4QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtEQUFJO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEJBQThCLDhCQUE4QjtBQUM1RDtBQUNBLGlCQUFpQixTQUFTLG1CQUFtQiw4QkFBOEI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrREFBSTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLGtEQUFJO0FBQ1osUUFBUSxrREFBSTs7QUFFWjtBQUNBOztBQUVBLFFBQVEsa0RBQUk7O0FBRVo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2NhbWVyYS9DdXN0b21Qcm9qZWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttYXRofSBmcm9tICcuLi9tYXRoL21hdGguanMnO1xuaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJy4uL0NvbXBvbmVudC5qcyc7XG5pbXBvcnQge1JlbmRlclN0YXRlfSBmcm9tICcuLi93ZWJnbC9SZW5kZXJTdGF0ZS5qcyc7XG5cbi8qKlxuICogQGRlc2MgRGVmaW5lcyBhIGN1c3RvbSBwcm9qZWN0aW9uIGZvciBhIHtAbGluayBDYW1lcmF9IGFzIGEgY3VzdG9tIDR4NCBtYXRyaXguLlxuICpcbiAqIExvY2F0ZWQgYXQge0BsaW5rIENhbWVyYSNjdXN0b21Qcm9qZWN0aW9ufS5cbiAqL1xuY2xhc3MgQ3VzdG9tUHJvamVjdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJDdXN0b21Qcm9qZWN0aW9uXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjYW1lcmEsIGNmZyA9IHt9KSB7XG5cbiAgICAgICAgc3VwZXIoY2FtZXJhLCBjZmcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgQ2FtZXJhIHRoaXMgQ3VzdG9tUHJvamVjdGlvbiBiZWxvbmdzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcHJvcGVydHkgY2FtZXJhXG4gICAgICAgICAqIEB0eXBlIHtDYW1lcmF9XG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgUmVuZGVyU3RhdGUoe1xuICAgICAgICAgICAgbWF0cml4OiBtYXRoLm1hdDQoKSxcbiAgICAgICAgICAgIGludmVyc2VNYXRyaXg6IG1hdGgubWF0NCgpLFxuICAgICAgICAgICAgdHJhbnNwb3NlZE1hdHJpeDogbWF0aC5tYXQ0KClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5faW52ZXJzZU1hdHJpeERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3NlZE1hdHJpeERpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBjZmcubWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIEN1c3RvbVByb2plY3Rpb24ncyBwcm9qZWN0aW9uIHRyYW5zZm9ybSBtYXRyaXguXG4gICAgICpcbiAgICAgKiBGaXJlcyBhIFwibWF0cml4XCIgZXZlbnQgb24gY2hhbmdlLlxuXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgWzEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDFdYGBgYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IG1hdHJpeCBOZXcgdmFsdWUgZm9yIHRoZSBDdXN0b21Qcm9qZWN0aW9uJ3MgbWF0cml4LlxuICAgICAqL1xuICAgIHNldCBtYXRyaXgobWF0cml4KSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLm1hdHJpeC5zZXQobWF0cml4IHx8IFsxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxXSk7XG4gICAgICAgIHRoaXMuX2ludmVyc2VNYXRyaXhEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9zZWRNYXRyaXhEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2xSZWRyYXcoKTtcbiAgICAgICAgdGhpcy5maXJlKFwiZmFyXCIsIHRoaXMuX3N0YXRlLm1hdHJpeCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgQ3VzdG9tUHJvamVjdGlvbidzIHByb2plY3Rpb24gdHJhbnNmb3JtIG1hdHJpeC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYFsxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxXWBgYGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJbXX0gTmV3IHZhbHVlIGZvciB0aGUgQ3VzdG9tUHJvamVjdGlvbidzIG1hdHJpeC5cbiAgICAgKi9cbiAgICBnZXQgbWF0cml4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUubWF0cml4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGludmVyc2Ugb2Yge0BsaW5rIEN1c3RvbVByb2plY3Rpb24jbWF0cml4fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gVGhlIGludmVyc2Ugb2Yge0BsaW5rIEN1c3RvbVByb2plY3Rpb24jbWF0cml4fS5cbiAgICAgKi9cbiAgICBnZXQgaW52ZXJzZU1hdHJpeCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZVNjaGVkdWxlZCkge1xuICAgICAgICAgICAgdGhpcy5fZG9VcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW52ZXJzZU1hdHJpeERpcnR5KSB7XG4gICAgICAgICAgICBtYXRoLmludmVyc2VNYXQ0KHRoaXMuX3N0YXRlLm1hdHJpeCwgdGhpcy5fc3RhdGUuaW52ZXJzZU1hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLl9pbnZlcnNlTWF0cml4RGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuaW52ZXJzZU1hdHJpeDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0cmFuc3Bvc2Ugb2Yge0BsaW5rIEN1c3RvbVByb2plY3Rpb24jbWF0cml4fS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gVGhlIHRyYW5zcG9zZSBvZiB7QGxpbmsgQ3VzdG9tUHJvamVjdGlvbiNtYXRyaXh9LlxuICAgICAqL1xuICAgIGdldCB0cmFuc3Bvc2VkTWF0cml4KCkge1xuICAgICAgICBpZiAodGhpcy5fdXBkYXRlU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kb1VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90cmFuc3Bvc2VkTWF0cml4RGlydHkpIHtcbiAgICAgICAgICAgIG1hdGgudHJhbnNwb3NlTWF0NCh0aGlzLl9zdGF0ZS5tYXRyaXgsIHRoaXMuX3N0YXRlLnRyYW5zcG9zZWRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3NlZE1hdHJpeERpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLnRyYW5zcG9zZWRNYXRyaXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW4tcHJvamVjdHMgdGhlIGdpdmVuIENhbnZhcy1zcGFjZSBjb29yZGluYXRlcywgdXNpbmcgdGhpcyBDdXN0b21Qcm9qZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gY2FudmFzUG9zIElucHV0cyAyRCBDYW52YXMtc3BhY2UgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcmVlblogSW5wdXRzIFNjcmVlbi1zcGFjZSBaIGNvb3JkaW5hdGUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gc2NyZWVuUG9zIE91dHB1dHMgM0QgU2NyZWVuL0NsaXAtc3BhY2UgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gdmlld1BvcyBPdXRwdXRzIHVuLXByb2plY3RlZCAzRCBWaWV3LXNwYWNlIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHdvcmxkUG9zIE91dHB1dHMgdW4tcHJvamVjdGVkIDNEIFdvcmxkLXNwYWNlIGNvb3JkaW5hdGVzLlxuICAgICAqL1xuICAgIHVucHJvamVjdChjYW52YXNQb3MsIHNjcmVlblosIHNjcmVlblBvcywgdmlld1Bvcywgd29ybGRQb3MpIHtcblxuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLnNjZW5lLmNhbnZhcy5jYW52YXM7XG5cbiAgICAgICAgY29uc3QgaGFsZkNhbnZhc1dpZHRoID0gY2FudmFzLm9mZnNldFdpZHRoIC8gMi4wO1xuICAgICAgICBjb25zdCBoYWxmQ2FudmFzSGVpZ2h0ID0gY2FudmFzLm9mZnNldEhlaWdodCAvIDIuMDtcblxuICAgICAgICBzY3JlZW5Qb3NbMF0gPSAoY2FudmFzUG9zWzBdIC0gaGFsZkNhbnZhc1dpZHRoKSAvIGhhbGZDYW52YXNXaWR0aDtcbiAgICAgICAgc2NyZWVuUG9zWzFdID0gKGNhbnZhc1Bvc1sxXSAtIGhhbGZDYW52YXNIZWlnaHQpIC8gaGFsZkNhbnZhc0hlaWdodDtcbiAgICAgICAgc2NyZWVuUG9zWzJdID0gc2NyZWVuWjtcbiAgICAgICAgc2NyZWVuUG9zWzNdID0gMS4wO1xuXG4gICAgICAgIG1hdGgubXVsTWF0NHY0KHRoaXMuaW52ZXJzZU1hdHJpeCwgc2NyZWVuUG9zLCB2aWV3UG9zKTtcbiAgICAgICAgbWF0aC5tdWxWZWMzU2NhbGFyKHZpZXdQb3MsIDEuMCAvIHZpZXdQb3NbM10pO1xuXG4gICAgICAgIHZpZXdQb3NbM10gPSAxLjA7XG4gICAgICAgIHZpZXdQb3NbMV0gKj0gLTE7XG5cbiAgICAgICAgbWF0aC5tdWxNYXQ0djQodGhpcy5jYW1lcmEuaW52ZXJzZVZpZXdNYXRyaXgsIHZpZXdQb3MsIHdvcmxkUG9zKTtcblxuICAgICAgICByZXR1cm4gd29ybGRQb3M7XG4gICAgfVxuXG4gICAgLyoqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3N0YXRlLmRlc3Ryb3koKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7Q3VzdG9tUHJvamVjdGlvbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/CustomProjection.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Frustum.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Frustum.js ***!
  \****************************************************************************/
/*! exports provided: Frustum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Frustum\", function() { return Frustum; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\n/**\n * @desc Defines its {@link Camera}'s perspective projection as a frustum-shaped view volume.\n *\n * * Located at {@link Camera#frustum}.\n * * Allows to explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful for asymmetrical view volumes, such as for stereo viewing.\n * * {@link Frustum#near} and {@link Frustum#far} specify the distances to the WebGL clipping planes.\n */\nclass Frustum extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Frustum\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(camera, cfg = {}) {\n\n        super(camera, cfg);\n\n        /**\n         * The Camera this Frustum belongs to.\n         *\n         * @property camera\n         * @type {Camera}\n         * @final\n         */\n        this.camera = camera;\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            inverseMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            transposedMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            near: 0.1,\n            far: 10000.0\n        });\n\n        this._left = -1.0;\n        this._right = 1.0;\n        this._bottom = -1.0;\n        this._top = 1.0;\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        // Set component properties\n\n        this.left = cfg.left;\n        this.right = cfg.right;\n        this.bottom = cfg.bottom;\n        this.top = cfg.top;\n        this.near = cfg.near;\n        this.far = cfg.far;\n    }\n\n    _update() {\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].frustumMat4(this._left, this._right, this._bottom, this._top, this._state.near, this._state.far, this._state.matrix);\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        this.glRedraw();\n\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n    /**\n     * Sets the position of the Frustum's left plane on the View-space X-axis.\n     *\n     * Fires a {@link Frustum#left:emits} emits on change.\n     *\n     * @param {Number} value New left frustum plane position.\n     */\n    set left(value) {\n        this._left = (value !== undefined && value !== null) ? value : -1.0;\n        this._needUpdate(0);\n        this.fire(\"left\", this._left);\n    }\n\n    /**\n     * Gets the position of the Frustum's left plane on the View-space X-axis.\n     *\n     * @return {Number} Left frustum plane position.\n     */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * Sets the position of the Frustum's right plane on the View-space X-axis.\n     *\n     * Fires a {@link Frustum#right:emits} emits on change.\n     *\n     * @param {Number} value New right frustum plane position.\n     */\n    set right(value) {\n        this._right = (value !== undefined && value !== null) ? value : 1.0;\n        this._needUpdate(0);\n        this.fire(\"right\", this._right);\n    }\n\n    /**\n     * Gets the position of the Frustum's right plane on the View-space X-axis.\n     *\n     * Fires a {@link Frustum#right:emits} emits on change.\n     *\n     * @return {Number} Right frustum plane position.\n     */\n    get right() {\n        return this._right;\n    }\n\n    /**\n     * Sets the position of the Frustum's top plane on the View-space Y-axis.\n     *\n     * Fires a {@link Frustum#top:emits} emits on change.\n     *\n     * @param {Number} value New top frustum plane position.\n     */\n    set top(value) {\n        this._top = (value !== undefined && value !== null) ? value : 1.0;\n        this._needUpdate(0);\n        this.fire(\"top\", this._top);\n    }\n\n    /**\n     * Gets the position of the Frustum's top plane on the View-space Y-axis.\n     *\n     * Fires a {@link Frustum#top:emits} emits on change.\n     *\n     * @return {Number} Top frustum plane position.\n     */\n    get top() {\n        return this._top;\n    }\n\n    /**\n     * Sets the position of the Frustum's bottom plane on the View-space Y-axis.\n     *\n     * Fires a {@link Frustum#bottom:emits} emits on change.\n     *\n     * @emits {\"bottom\"} event with the value of this property whenever it changes.\n     *\n     * @param {Number} value New bottom frustum plane position.\n     */\n    set bottom(value) {\n        this._bottom = (value !== undefined && value !== null) ? value : -1.0;\n        this._needUpdate(0);\n        this.fire(\"bottom\", this._bottom);\n    }\n\n    /**\n     * Gets the position of the Frustum's bottom plane on the View-space Y-axis.\n     *\n     * Fires a {@link Frustum#bottom:emits} emits on change.\n     *\n     * @return {Number} Bottom frustum plane position.\n     */\n    get bottom() {\n        return this._bottom;\n    }\n\n    /**\n     * Sets the position of the Frustum's near plane on the positive View-space Z-axis.\n     *\n     * Fires a {@link Frustum#near:emits} emits on change.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param {Number} value New Frustum near plane position.\n     */\n    set near(value) {\n        this._state.near = (value !== undefined && value !== null) ? value : 0.1;\n        this._needUpdate(0);\n        this.fire(\"near\", this._state.near);\n    }\n\n    /**\n     * Gets the position of the Frustum's near plane on the positive View-space Z-axis.\n     *\n     * Fires a {@link Frustum#near:emits} emits on change.\n     *\n     * Default value is ````0.1````.\n     *\n     * @return {Number} Near frustum plane position.\n     */\n    get near() {\n        return this._state.near;\n    }\n\n    /**\n     * Sets the position of the Frustum's far plane on the positive View-space Z-axis.\n     *\n     * Fires a {@link Frustum#far:emits} emits on change.\n     *\n     * Default value is ````10000.0````.\n     *\n     * @param {Number} value New far frustum plane position.\n     */\n    set far(value) {\n        this._state.far = (value !== undefined && value !== null) ? value : 10000.0;\n        this._needUpdate(0);\n        this.fire(\"far\", this._state.far);\n    }\n\n    /**\n     * Gets the position of the Frustum's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````10000.0````.\n     *\n     * @return {Number} Far frustum plane position.\n     */\n    get far() {\n        return this._state.far;\n    }\n\n    /**\n     * Gets the Frustum's projection transform matrix.\n     *\n     * Fires a {@link Frustum#matrix:emits} emits on change.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns {Number[]} The Frustum's projection matrix matrix.\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     * Gets the inverse of {@link Frustum#matrix}.\n     *\n     * @returns {Number[]} The inverse orthographic projection matrix.\n     */\n    get inverseMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._inverseMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].inverseMat4(this._state.matrix, this._state.inverseMatrix);\n            this._inverseMatrixDirty = false;\n        }\n        return this._state.inverseMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link Frustum#matrix}.\n     *\n     * @returns {Number[]} The transpose of {@link Frustum#matrix}.\n     */\n    get transposedMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._transposedMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].transposeMat4(this._state.matrix, this._state.transposedMatrix);\n            this._transposedMatrixDirty = false;\n        }\n        return this._state.transposedMatrix;\n    }\n\n    /**\n     * Un-projects the given Canvas-space coordinates, using this Frustum projection.\n     *\n     * @param {Number[]} canvasPos Inputs 2D Canvas-space coordinates.\n     * @param {Number} screenZ Inputs Screen-space Z coordinate.\n     * @param {Number[]} screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param {Number[]} viewPos Outputs un-projected 3D View-space coordinates.\n     * @param {Number[]} worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(canvasPos, screenZ, screenPos, viewPos, worldPos) {\n\n        const canvas = this.scene.canvas.canvas;\n\n        const halfCanvasWidth = canvas.offsetWidth / 2.0;\n        const halfCanvasHeight = canvas.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfCanvasWidth) / halfCanvasWidth;\n        screenPos[1] = (canvasPos[1] - halfCanvasHeight) / halfCanvasHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4v4(this.inverseMatrix, screenPos, viewPos);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        super.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Frustum.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Ortho.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Ortho.js ***!
  \**************************************************************************/
/*! exports provided: Ortho */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ortho\", function() { return Ortho; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\n/**\n * @desc Defines its {@link Camera}'s orthographic projection as a box-shaped view volume.\n *\n * * Located at {@link Camera#ortho}.\n * * Works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are implicitly\n * indicated with a single {@link Ortho#scale} property, which causes the frustum to be symmetrical on X and Y axis, large enough to\n * contain the number of units given by {@link Ortho#scale}.\n * * {@link Ortho#near} and {@link Ortho#far} indicated the distances to the WebGL clipping planes.\n */\nclass Ortho extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Ortho\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(camera, cfg = {}) {\n\n        super(camera, cfg);\n\n        /**\n         * The Camera this Ortho belongs to.\n         *\n         * @property camera\n         * @type {Camera}\n         * @final\n         */\n        this.camera = camera;\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            inverseMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            transposedMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4(),\n            near: 0.1,\n            far: 2000.0\n        });\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        this.scale = cfg.scale;\n        this.near = cfg.near;\n        this.far = cfg.far;\n\n        this._onCanvasBoundary = this.scene.canvas.on(\"boundary\", this._needUpdate, this);\n    }\n\n    _update() {\n\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n\n        const scene = this.scene;\n        const scale = this._scale;\n        const halfSize = 0.5 * scale;\n\n        const boundary = scene.viewport.boundary;\n        const boundaryWidth = boundary[WIDTH_INDEX];\n        const boundaryHeight = boundary[HEIGHT_INDEX];\n        const aspect = boundaryWidth / boundaryHeight;\n\n        let left;\n        let right;\n        let top;\n        let bottom;\n\n        if (boundaryWidth > boundaryHeight) {\n            left = -halfSize;\n            right = halfSize;\n            top = halfSize / aspect;\n            bottom = -halfSize / aspect;\n\n        } else {\n            left = -halfSize * aspect;\n            right = halfSize * aspect;\n            top = halfSize;\n            bottom = -halfSize;\n        }\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].orthoMat4c(left, right, bottom, top, this._state.near, this._state.far, this._state.matrix);\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        this.glRedraw();\n\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n\n    /**\n     * Sets scale factor for this Ortho's extents on X and Y axis.\n     *\n     * Clamps to minimum value of ````0.01```.\n     *\n     * Fires a \"scale\" event on change.\n     *\n     * Default value is ````1.0````\n     * @param {Number} value New scale value.\n     */\n    set scale(value) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (value <= 0) {\n            value = 0.01;\n        }\n        this._scale = value;\n        this._needUpdate(0);\n        this.fire(\"scale\", this._scale);\n    }\n\n    /**\n     * Gets scale factor for this Ortho's extents on X and Y axis.\n     *\n     * Clamps to minimum value of ````0.01```.\n     *\n     * Default value is ````1.0````\n     *\n     * @returns {Number} New Ortho scale value.\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the position of the Ortho's near plane on the positive View-space Z-axis.\n     *\n     * Fires a \"near\" emits on change.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param {Number} value New Ortho near plane position.\n     */\n    set near(value) {\n        const near = (value !== undefined && value !== null) ? value : 0.1;\n        if (this._state.near === near) {\n            return;\n        }\n        this._state.near = near;\n        this._needUpdate(0);\n        this.fire(\"near\", this._state.near);\n    }\n\n    /**\n     * Gets the position of the Ortho's near plane on the positive View-space Z-axis.\n     *\n     * Default value is ````0.1````.\n     *\n     * @returns {Number} New Ortho near plane position.\n     */\n    get near() {\n        return this._state.near;\n    }\n\n    /**\n     * Sets the position of the Ortho's far plane on the positive View-space Z-axis.\n     *\n     * Fires a \"far\" event on change.\n     *\n     * Default value is ````2000.0````.\n     *\n     * @param {Number} value New far ortho plane position.\n     */\n    set far(value) {\n        const far = (value !== undefined && value !== null) ? value : 2000.0;\n        if (this._state.far === far) {\n            return;\n        }\n        this._state.far = far;\n        this._needUpdate(0);\n        this.fire(\"far\", this._state.far);\n    }\n\n    /**\n     * Gets the position of the Ortho's far plane on the positive View-space Z-axis.\n     *\n     * Default value is ````10000.0````.\n     *\n     * @returns {Number} New far ortho plane position.\n     */\n    get far() {\n        return this._state.far;\n    }\n\n    /**\n     * Gets the Ortho's projection transform matrix.\n     *\n     * Fires a \"matrix\" event on change.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns {Number[]} The Ortho's projection matrix.\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     * Gets the inverse of {@link Ortho#matrix}.\n     *\n     * @returns {Number[]} The inverse of {@link Ortho#matrix}.\n     */\n    get inverseMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._inverseMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].inverseMat4(this._state.matrix, this._state.inverseMatrix);\n            this._inverseMatrixDirty = false;\n        }\n        return this._state.inverseMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link Ortho#matrix}.\n     *\n     * @returns {Number[]} The transpose of {@link Ortho#matrix}.\n     */\n    get transposedMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._transposedMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].transposeMat4(this._state.matrix, this._state.transposedMatrix);\n            this._transposedMatrixDirty = false;\n        }\n        return this._state.transposedMatrix;\n    }\n\n    /**\n     * Un-projects the given Canvas-space coordinates, using this Ortho projection.\n     *\n     * @param {Number[]} canvasPos Inputs 2D Canvas-space coordinates.\n     * @param {Number} screenZ Inputs Screen-space Z coordinate.\n     * @param {Number[]} screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param {Number[]} viewPos Outputs un-projected 3D View-space coordinates.\n     * @param {Number[]} worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(canvasPos, screenZ, screenPos, viewPos, worldPos) {\n\n        const canvas = this.scene.canvas.canvas;\n\n        const halfCanvasWidth = canvas.offsetWidth / 2.0;\n        const halfCanvasHeight = canvas.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfCanvasWidth) / halfCanvasWidth;\n        screenPos[1] = (canvasPos[1] - halfCanvasHeight) / halfCanvasHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4v4(this.inverseMatrix, screenPos, viewPos);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        this.scene.canvas.off(this._onCanvasBoundary);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Ortho.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Perspective.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Perspective.js ***!
  \********************************************************************************/
/*! exports provided: Perspective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Perspective\", function() { return Perspective; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\n\n/**\n * @desc Defines its {@link Camera}'s perspective projection using a field-of-view angle.\n *\n * * Located at {@link Camera#perspective}.\n * * Implicitly sets the left, right, top, bottom frustum planes using {@link Perspective#fov}.\n * * {@link Perspective#near} and {@link Perspective#far} specify the distances to the WebGL clipping planes.\n */\nclass Perspective extends _Component_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Perspective\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(camera, cfg = {}) {\n\n        super(camera, cfg);\n\n        /**\n         * The Camera this Perspective belongs to.\n         *\n         * @property camera\n         * @type {Camera}\n         * @final\n         */\n        this.camera = camera;\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderState\"]({\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            inverseMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            transposedMatrix: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4(),\n            near: 0.1,\n            far: 2000.0\n        });\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        this._fov = 60.0;\n\n        // Recompute aspect from change in canvas size\n        this._canvasResized = this.scene.canvas.on(\"boundary\", this._needUpdate, this);\n\n        this.fov = cfg.fov;\n        this.fovAxis = cfg.fovAxis;\n        this.near = cfg.near;\n        this.far = cfg.far;\n    }\n\n    _update() {\n\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n        const boundary = this.scene.viewport.boundary;\n        const aspect = boundary[WIDTH_INDEX] / boundary[HEIGHT_INDEX];\n        const fovAxis = this._fovAxis;\n\n        let fov = this._fov;\n        if (fovAxis === \"x\" || (fovAxis === \"min\" && aspect < 1) || (fovAxis === \"max\" && aspect > 1)) {\n            fov = fov / aspect;\n        }\n        fov = Math.min(fov, 120);\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].perspectiveMat4(fov * (Math.PI / 180.0), aspect, this._state.near, this._state.far, this._state.matrix);\n\n        this._inverseMatrixDirty = true;\n        this._transposedMatrixDirty = true;\n\n        this.glRedraw();\n\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n    /**\n     * Sets the Perspective's field-of-view angle (FOV).\n     *\n     * Fires an \"fov\" event on change.\n\n     * Default value is ````60.0````.\n     *\n     * @param {Number} value New field-of-view.\n     */\n    set fov(value) {\n        value = (value !== undefined && value !== null) ? value : 60.0;\n        if (value === this._fov) {\n            return;\n        }\n        this._fov = value;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"fov\", this._fov);\n    }\n\n    /**\n     * Gets the Perspective's field-of-view angle (FOV).\n     *\n     * Default value is ````60.0````.\n     *\n     * @returns {Number} Current field-of-view.\n     */\n    get fov() {\n        return this._fov;\n    }\n\n    /**\n     * Sets the Perspective's FOV axis.\n     *\n     * Options are ````\"x\"````, ````\"y\"```` or ````\"min\"````, to use the minimum axis.\n     *\n     * Fires an \"fovAxis\" event on change.\n\n     * Default value ````\"min\"````.\n     *\n     * @param {String} value New FOV axis value.\n     */\n    set fovAxis(value) {\n        value = value || \"min\";\n        if (this._fovAxis === value) {\n            return;\n        }\n        if (value !== \"x\" && value !== \"y\" && value !== \"min\") {\n            this.error(\"Unsupported value for 'fovAxis': \" + value + \" - defaulting to 'min'\");\n            value = \"min\";\n        }\n        this._fovAxis = value;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"fovAxis\", this._fovAxis);\n    }\n\n    /**\n     * Gets the Perspective's FOV axis.\n     *\n     * Options are ````\"x\"````, ````\"y\"```` or ````\"min\"````, to use the minimum axis.\n     *\n     * Fires an \"fovAxis\" event on change.\n\n     * Default value is ````\"min\"````.\n     *\n     * @returns {String} The current FOV axis value.\n     */\n    get fovAxis() {\n        return this._fovAxis;\n    }\n\n    /**\n     * Sets the position of the Perspective's near plane on the positive View-space Z-axis.\n     *\n     * Fires a \"near\" event on change.\n     *\n     * Default value is ````0.1````.\n     *\n     * @param {Number} value New Perspective near plane position.\n     */\n    set near(value) {\n        const near = (value !== undefined && value !== null) ? value : 0.1;\n        if (this._state.near === near) {\n            return;\n        }\n        this._state.near = near;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"near\", this._state.near);\n    }\n\n    /**\n     * Gets the position of the Perspective's near plane on the positive View-space Z-axis.\n     *\n     * Fires an \"emits\" emits on change.\n     *\n     * Default value is ````0.1````.\n     *\n     * @returns The Perspective's near plane position.\n     */\n    get near() {\n        return this._state.near;\n    }\n\n    /**\n     * Sets the position of this Perspective's far plane on the positive View-space Z-axis.\n     *\n     * Fires a \"far\" event on change.\n     *\n     * @param {Number} value New Perspective far plane position.\n     */\n    set far(value) {\n        const far = (value !== undefined && value !== null) ? value : 2000.0;\n        if (this._state.far === far) {\n            return;\n        }\n        this._state.far = far;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        this.fire(\"far\", this._state.far);\n    }\n\n    /**\n     * Gets the position of this Perspective's far plane on the positive View-space Z-axis.\n     *\n     * @return {Number} The Perspective's far plane position.\n     */\n    get far() {\n        return this._state.far;\n    }\n\n    /**\n     * Gets the Perspective's projection transform matrix.\n     *\n     * Fires a \"matrix\" event on change.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @returns {Number[]} The Perspective's projection matrix.\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     * Gets the inverse of {@link Perspective#matrix}.\n     *\n     * @returns {Number[]} The inverse of {@link Perspective#matrix}.\n     */\n    get inverseMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._inverseMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].inverseMat4(this._state.matrix, this._state.inverseMatrix);\n            this._inverseMatrixDirty = false;\n        }\n        return this._state.inverseMatrix;\n    }\n\n    /**\n     * Gets the transpose of {@link Perspective#matrix}.\n     *\n     * @returns {Number[]} The transpose of {@link Perspective#matrix}.\n     */\n    get transposedMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        if (this._transposedMatrixDirty) {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transposeMat4(this._state.matrix, this._state.transposedMatrix);\n            this._transposedMatrixDirty = false;\n        }\n        return this._state.transposedMatrix;\n    }\n\n    /**\n     * Un-projects the given Canvas-space coordinates and Screen-space depth, using this Perspective projection.\n     *\n     * @param {Number[]} canvasPos Inputs 2D Canvas-space coordinates.\n     * @param {Number} screenZ Inputs Screen-space Z coordinate.\n     * @param {Number[]} screenPos Outputs 3D Screen/Clip-space coordinates.\n     * @param {Number[]} viewPos Outputs un-projected 3D View-space coordinates.\n     * @param {Number[]} worldPos Outputs un-projected 3D World-space coordinates.\n     */\n    unproject(canvasPos, screenZ, screenPos, viewPos, worldPos) {\n\n        const canvas = this.scene.canvas.canvas;\n\n        const halfCanvasWidth = canvas.offsetWidth / 2.0;\n        const halfCanvasHeight = canvas.offsetHeight / 2.0;\n\n        screenPos[0] = (canvasPos[0] - halfCanvasWidth) / halfCanvasWidth;\n        screenPos[1] = (canvasPos[1] - halfCanvasHeight) / halfCanvasHeight;\n        screenPos[2] = screenZ;\n        screenPos[3] = 1.0;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4v4(this.inverseMatrix, screenPos, viewPos);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(viewPos, 1.0 / viewPos[3]);\n\n        viewPos[3] = 1.0;\n        viewPos[1] *= -1;\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4v4(this.camera.inverseViewMatrix, viewPos, worldPos);\n\n        return worldPos;\n    }\n\n    /** @private\n     *\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        this.scene.canvas.off(this._canvasResized);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Perspective.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Canvas.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Canvas.js ***!
  \***************************************************************************/
/*! exports provided: Canvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Canvas\", function() { return Canvas; });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _Spinner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Spinner.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Spinner.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n\n\n\n\n\nconst WEBGL_CONTEXT_NAMES = [\n    \"webgl\",\n    \"experimental-webgl\",\n    \"webkit-3d\",\n    \"moz-webgl\",\n    \"moz-glweb20\"\n];\n\n/**\n * @desc Manages its {@link Scene}'s HTML canvas.\n *\n * * Provides the HTML canvas element in {@link Canvas#canvas}.\n * * Has a {@link Spinner}, provided at {@link Canvas#spinner}, which manages the loading progress indicator.\n */\nclass Canvas extends _Component_js__WEBPACK_IMPORTED_MODULE_3__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Canvas\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        /**\n         * The HTML canvas.\n         *\n         * @property canvas\n         * @type {HTMLCanvasElement}\n         * @final\n         */\n        this.canvas = cfg.canvas;\n\n        /**\n         * The WebGL rendering context.\n         *\n         * @property gl\n         * @type {WebGLRenderingContext}\n         * @final\n         */\n        this.gl = null;\n\n        /**\n         * True when WebGL 2 support is enabled.\n         *\n         * @property webgl2\n         * @type {Boolean}\n         * @final\n         */\n        this.webgl2 = false; // Will set true in _initWebGL if WebGL is requested and we succeed in getting it.\n\n        /**\n         * Indicates if this Canvas is transparent.\n         *\n         * @property transparent\n         * @type {Boolean}\n         * @default {false}\n         * @final\n         */\n        this.transparent = !!cfg.transparent;\n\n        /**\n         * Attributes for the WebGL context\n         *\n         * @type {{}|*}\n         */\n        this.contextAttr = cfg.contextAttr || {};\n        this.contextAttr.alpha = this.transparent;\n\n        this.contextAttr.preserveDrawingBuffer = !!this.contextAttr.preserveDrawingBuffer;\n        this.contextAttr.stencil = false;\n        this.contextAttr.premultipliedAlpha = (!!this.contextAttr.premultipliedAlpha);  // False by default: https://github.com/xeokit/xeokit-sdk/issues/251\n        this.contextAttr.antialias = (this.contextAttr.antialias !== false);\n\n        // If the canvas uses css styles to specify the sizes make sure the basic\n        // width and height attributes match or the WebGL context will use 300 x 150\n\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n\n        /**\n         * Boundary of the Canvas in absolute browser window coordinates.\n         *\n         * ### Usage:\n         *\n         * ````javascript\n         * var boundary = myScene.canvas.boundary;\n         *\n         * var xmin = boundary[0];\n         * var ymin = boundary[1];\n         * var width = boundary[2];\n         * var height = boundary[3];\n         * ````\n         *\n         * @property boundary\n         * @type {{Number[]}}\n         * @final\n         */\n        this.boundary = [\n            this.canvas.offsetLeft, this.canvas.offsetTop,\n            this.canvas.clientWidth, this.canvas.clientHeight\n        ];\n\n        // Get WebGL context\n\n        this._initWebGL(cfg);\n\n        // Bind context loss and recovery handlers\n\n        const self = this;\n\n        this.canvas.addEventListener(\"webglcontextlost\", this._webglcontextlostListener = function (event) {\n                console.time(\"webglcontextrestored\");\n                self.scene._webglContextLost();\n                /**\n                 * Fired whenever the WebGL context has been lost\n                 * @event webglcontextlost\n                 */\n                self.fire(\"webglcontextlost\");\n                event.preventDefault();\n            },\n            false);\n\n        this.canvas.addEventListener(\"webglcontextrestored\", this._webglcontextrestoredListener = function (event) {\n                self._initWebGL();\n                if (self.gl) {\n                    self.scene._webglContextRestored(self.gl);\n                    /**\n                     * Fired whenever the WebGL context has been restored again after having previously being lost\n                     * @event webglContextRestored\n                     * @param value The WebGL context object\n                     */\n                    self.fire(\"webglcontextrestored\", self.gl);\n                    event.preventDefault();\n                }\n                console.timeEnd(\"webglcontextrestored\");\n            },\n            false);\n\n        // Publish canvas size and position changes on each scene tick\n\n        let lastWindowWidth = null;\n        let lastWindowHeight = null;\n\n        let lastCanvasWidth = null;\n        let lastCanvasHeight = null;\n\n        let lastCanvasOffsetLeft = null;\n        let lastCanvasOffsetTop = null;\n\n        let lastParent = null;\n\n        this._tick = this.scene.on(\"tick\", function () {\n\n            const canvas = self.canvas;\n\n            const newWindowSize = (window.innerWidth !== lastWindowWidth || window.innerHeight !== lastWindowHeight);\n            const newCanvasSize = (canvas.clientWidth !== lastCanvasWidth || canvas.clientHeight !== lastCanvasHeight);\n            const newCanvasPos = (canvas.offsetLeft !== lastCanvasOffsetLeft || canvas.offsetTop !== lastCanvasOffsetTop);\n\n            const parent = canvas.parentElement;\n            const newParent = (parent !== lastParent);\n\n            if (newWindowSize || newCanvasSize || newCanvasPos || newParent) {\n\n                self._spinner._adjustPosition();\n\n                if (newCanvasSize || newCanvasPos) {\n\n                    const newWidth = canvas.clientWidth;\n                    const newHeight = canvas.clientHeight;\n\n                    // TODO: Wasteful to re-count pixel size of each canvas on each canvas' resize\n                    if (newCanvasSize) {\n                        let countPixels = 0;\n                        let scene;\n                        for (const sceneId in _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].scenes) {\n                            if (_core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].scenes.hasOwnProperty(sceneId)) {\n                                scene = _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].scenes[sceneId];\n                                countPixels += scene.canvas.canvas.clientWidth * scene.canvas.canvas.clientHeight;\n                            }\n                        }\n                        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.pixels = countPixels;\n\n                        canvas.width = canvas.clientWidth;\n                        canvas.height = canvas.clientHeight;\n                    }\n\n                    const boundary = self.boundary;\n\n                    boundary[0] = canvas.offsetLeft;\n                    boundary[1] = canvas.offsetTop;\n                    boundary[2] = newWidth;\n                    boundary[3] = newHeight;\n\n                    /**\n                     * Fired whenever this Canvas's {@link Canvas/boundary} property changes.\n                     *\n                     * @event boundary\n                     * @param value The property's new value\n                     */\n                    self.fire(\"boundary\", boundary);\n\n                    lastCanvasWidth = newWidth;\n                    lastCanvasHeight = newHeight;\n                }\n\n                if (newWindowSize) {\n                    lastWindowWidth = window.innerWidth;\n                    lastWindowHeight = window.innerHeight;\n                }\n\n                if (newCanvasPos) {\n                    lastCanvasOffsetLeft = canvas.offsetLeft;\n                    lastCanvasOffsetTop = canvas.offsetTop;\n                }\n\n                lastParent = parent;\n            }\n        });\n\n        this._spinner = new _Spinner_js__WEBPACK_IMPORTED_MODULE_4__[\"Spinner\"](this.scene, {\n            canvas: this.canvas,\n            elementId: cfg.spinnerElementId\n        });\n\n        this.clearColorAmbient = cfg.clearColorAmbient;\n    }\n\n    /**\n     * Creates a default canvas in the DOM.\n     * @private\n     */\n    _createCanvas() {\n\n        const canvasId = \"xeokit-canvas-\" + _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].createUUID();\n        const body = document.getElementsByTagName(\"body\")[0];\n        const div = document.createElement('div');\n\n        const style = div.style;\n        style.height = \"100%\";\n        style.width = \"100%\";\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.background = \"rgba(0,0,0,0);\";\n        style.float = \"left\";\n        style.left = \"0\";\n        style.top = \"0\";\n        style.position = \"absolute\";\n        style.opacity = \"1.0\";\n        style[\"z-index\"] = \"-10000\";\n\n        div.innerHTML += '<canvas id=\"' + canvasId + '\" style=\"width: 100%; height: 100%; float: left; margin: 0; padding: 0;\"></canvas>';\n\n        body.appendChild(div);\n\n        this.canvas = document.getElementById(canvasId);\n    }\n\n    _getElementXY(e) {\n        let x = 0, y = 0;\n        while (e) {\n            x += (e.offsetLeft - e.scrollLeft);\n            y += (e.offsetTop - e.scrollTop);\n            e = e.offsetParent;\n        }\n        return {x: x, y: y};\n    }\n\n    /**\n     * Initialises the WebGL context\n     * @private\n     */\n    _initWebGL() {\n\n        // Default context attribute values\n\n        if (!this.gl) {\n            for (let i = 0; !this.gl && i < WEBGL_CONTEXT_NAMES.length; i++) {\n                try {\n                    this.gl = this.canvas.getContext(WEBGL_CONTEXT_NAMES[i], this.contextAttr);\n                } catch (e) { // Try with next context name\n                }\n            }\n        }\n\n        if (!this.gl) {\n\n            this.error('Failed to get a WebGL context');\n\n            /**\n             * Fired whenever the canvas failed to get a WebGL context, which probably means that WebGL\n             * is either unsupported or has been disabled.\n             * @event webglContextFailed\n             */\n            this.fire(\"webglContextFailed\", true, true);\n        }\n\n        if (this.gl) {\n            // Setup extension (if necessary) and hints for fragment shader derivative functions\n            if (this.webgl2) {\n                this.gl.hint(this.gl.FRAGMENT_SHADER_DERIVATIVE_HINT, this.gl.FASTEST);\n            } else {\n                if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"]) {\n                    const ext = this.gl.getExtension(\"OES_standard_derivatives\");\n                    this.gl.hint(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, this.gl.FASTEST);\n                }\n                if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n                    const ext = this.gl.getExtension('EXT_frag_depth');\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets if the canvas background color is derived from an {@link AmbientLight}.\n     *\n     * This only has effect when the canvas is not transparent. When not enabled, the background color\n     * will be the canvas element's HTML/CSS background color.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set clearColorAmbient(clearColorAmbient) {\n        this._clearColorAmbient = !!clearColorAmbient;\n    }\n\n    /**\n     * Gets if the canvas background color is derived from an {@link AmbientLight}.\n     *\n     * This only has effect when the canvas is not transparent. When not enabled, the background color\n     * will be the canvas element's HTML/CSS background color.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n\n    get clearColorAmbient() {\n        return this._clearColorAmbient;\n    }\n\n    /**\n     * @private\n     * @deprecated\n     */\n    getSnapshot(params) {\n        throw \"Canvas#getSnapshot() has been replaced by Viewer#getSnapshot() - use that method instead.\";\n    }\n\n    /**\n     * Reads colors of pixels from the last rendered frame.\n     *\n     * Call this method like this:\n     *\n     * ````JavaScript\n     *\n     * // Ignore transparent pixels (default is false)\n     * var opaqueOnly = true;\n     *\n     * var colors = new Float32Array(8);\n     *\n     * viewer.scene.canvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);\n     * ````\n     *\n     * Then the r,g,b components of the colors will be set to the colors at those pixels.\n     *\n     * @param {Number[]} pixels\n     * @param {Number[]} colors\n     * @param {Number} size\n     * @param {Boolean} opaqueOnly\n     */\n    readPixels(pixels, colors, size, opaqueOnly) {\n        return this.scene._renderer.readPixels(pixels, colors, size, opaqueOnly);\n    }\n\n    /**\n     * Simulates lost WebGL context.\n     */\n    loseWebGLContext() {\n        if (this.canvas.loseContext) {\n            this.canvas.loseContext();\n        }\n    }\n\n    /**\n     * The busy {@link Spinner} for this Canvas.\n     *\n     * @property spinner\n     * @type Spinner\n     * @final\n     */\n    get spinner() {\n        return this._spinner;\n    }\n\n    destroy() {\n        this.scene.off(this._tick);\n        this._spinner._destroy();\n        // Memory leak avoidance\n        this.canvas.removeEventListener(\"webglcontextlost\", this._webglcontextlostListener);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this._webglcontextrestoredListener);\n        this.gl = null;\n        super.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Canvas.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Spinner.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Spinner.js ***!
  \****************************************************************************/
/*! exports provided: Spinner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Spinner\", function() { return Spinner; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n\n\nconst defaultCSS = \".sk-fading-circle {\\\n        background: transparent;\\\n        margin: 20px auto;\\\n        width: 50px;\\\n        height:50px;\\\n        position: relative;\\\n        }\\\n        .sk-fading-circle .sk-circle {\\\n        width: 120%;\\\n        height: 120%;\\\n        position: absolute;\\\n        left: 0;\\\n        top: 0;\\\n        }\\\n        .sk-fading-circle .sk-circle:before {\\\n        content: '';\\\n        display: block;\\\n        margin: 0 auto;\\\n        width: 15%;\\\n        height: 15%;\\\n        background-color: #ff8800;\\\n        border-radius: 100%;\\\n        -webkit-animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\\\n        animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\\\n        }\\\n        .sk-fading-circle .sk-circle2 {\\\n        -webkit-transform: rotate(30deg);\\\n        -ms-transform: rotate(30deg);\\\n        transform: rotate(30deg);\\\n    }\\\n    .sk-fading-circle .sk-circle3 {\\\n        -webkit-transform: rotate(60deg);\\\n        -ms-transform: rotate(60deg);\\\n        transform: rotate(60deg);\\\n    }\\\n    .sk-fading-circle .sk-circle4 {\\\n        -webkit-transform: rotate(90deg);\\\n        -ms-transform: rotate(90deg);\\\n        transform: rotate(90deg);\\\n    }\\\n    .sk-fading-circle .sk-circle5 {\\\n        -webkit-transform: rotate(120deg);\\\n        -ms-transform: rotate(120deg);\\\n        transform: rotate(120deg);\\\n    }\\\n    .sk-fading-circle .sk-circle6 {\\\n        -webkit-transform: rotate(150deg);\\\n        -ms-transform: rotate(150deg);\\\n        transform: rotate(150deg);\\\n    }\\\n    .sk-fading-circle .sk-circle7 {\\\n        -webkit-transform: rotate(180deg);\\\n        -ms-transform: rotate(180deg);\\\n        transform: rotate(180deg);\\\n    }\\\n    .sk-fading-circle .sk-circle8 {\\\n        -webkit-transform: rotate(210deg);\\\n        -ms-transform: rotate(210deg);\\\n        transform: rotate(210deg);\\\n    }\\\n    .sk-fading-circle .sk-circle9 {\\\n        -webkit-transform: rotate(240deg);\\\n        -ms-transform: rotate(240deg);\\\n        transform: rotate(240deg);\\\n    }\\\n    .sk-fading-circle .sk-circle10 {\\\n        -webkit-transform: rotate(270deg);\\\n        -ms-transform: rotate(270deg);\\\n        transform: rotate(270deg);\\\n    }\\\n    .sk-fading-circle .sk-circle11 {\\\n        -webkit-transform: rotate(300deg);\\\n        -ms-transform: rotate(300deg);\\\n        transform: rotate(300deg);\\\n    }\\\n    .sk-fading-circle .sk-circle12 {\\\n        -webkit-transform: rotate(330deg);\\\n        -ms-transform: rotate(330deg);\\\n        transform: rotate(330deg);\\\n    }\\\n    .sk-fading-circle .sk-circle2:before {\\\n        -webkit-animation-delay: -1.1s;\\\n        animation-delay: -1.1s;\\\n    }\\\n    .sk-fading-circle .sk-circle3:before {\\\n        -webkit-animation-delay: -1s;\\\n        animation-delay: -1s;\\\n    }\\\n    .sk-fading-circle .sk-circle4:before {\\\n        -webkit-animation-delay: -0.9s;\\\n        animation-delay: -0.9s;\\\n    }\\\n    .sk-fading-circle .sk-circle5:before {\\\n        -webkit-animation-delay: -0.8s;\\\n        animation-delay: -0.8s;\\\n    }\\\n    .sk-fading-circle .sk-circle6:before {\\\n        -webkit-animation-delay: -0.7s;\\\n        animation-delay: -0.7s;\\\n    }\\\n    .sk-fading-circle .sk-circle7:before {\\\n        -webkit-animation-delay: -0.6s;\\\n        animation-delay: -0.6s;\\\n    }\\\n    .sk-fading-circle .sk-circle8:before {\\\n        -webkit-animation-delay: -0.5s;\\\n        animation-delay: -0.5s;\\\n    }\\\n    .sk-fading-circle .sk-circle9:before {\\\n        -webkit-animation-delay: -0.4s;\\\n        animation-delay: -0.4s;\\\n    }\\\n    .sk-fading-circle .sk-circle10:before {\\\n        -webkit-animation-delay: -0.3s;\\\n        animation-delay: -0.3s;\\\n    }\\\n    .sk-fading-circle .sk-circle11:before {\\\n        -webkit-animation-delay: -0.2s;\\\n        animation-delay: -0.2s;\\\n    }\\\n    .sk-fading-circle .sk-circle12:before {\\\n        -webkit-animation-delay: -0.1s;\\\n        animation-delay: -0.1s;\\\n    }\\\n    @-webkit-keyframes sk-circleFadeDelay {\\\n        0%, 39%, 100% { opacity: 0; }\\\n        40% { opacity: 1; }\\\n    }\\\n    @keyframes sk-circleFadeDelay {\\\n        0%, 39%, 100% { opacity: 0; }\\\n        40% { opacity: 1; }\\\n    }\";\n\n/**\n * @desc Displays a progress animation at the center of its {@link Canvas} while things are loading or otherwise busy.\n *\n *\n * * Located at {@link Canvas#spinner}.\n * * Automatically shown while things are loading, however may also be shown by application code wanting to indicate busyness.\n * * {@link Spinner#processes} holds the count of active processes. As a process starts, it increments {@link Spinner#processes}, then decrements it on completion or failure.\n * * A Spinner is only visible while {@link Spinner#processes} is greater than zero.\n *\n * ````javascript\n * var spinner = viewer.scene.canvas.spinner;\n *\n * // Increment count of busy processes represented by the spinner;\n * // assuming the count was zero, this now shows the spinner\n * spinner.processes++;\n *\n * // Increment the count again, by some other process; spinner already visible, now requires two decrements\n * // before it becomes invisible again\n * spinner.processes++;\n *\n * // Decrement the count; count still greater than zero, so spinner remains visible\n * spinner.process--;\n *\n * // Decrement the count; count now zero, so spinner becomes invisible\n * spinner.process--;\n * ````\n */\nclass Spinner extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Spinner\";\n    }\n\n    /**\n     @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._canvas = cfg.canvas;\n        this._element = null;\n        this._isCustom = false; // True when the element is custom HTML\n\n        if (cfg.elementId) { // Custom spinner element supplied\n            this._element = document.getElementById(cfg.elementId);\n            if (!this._element) {\n                this.error(\"Can't find given Spinner HTML element: '\" + cfg.elementId + \"' - will automatically create default element\");\n            } else {\n                this._adjustPosition();\n            }\n        }\n\n        if (!this._element) {\n            this._createDefaultSpinner();\n        }\n\n        this.processes = 0;\n    }\n\n    /** @private */\n    _createDefaultSpinner() {\n        this._injectDefaultCSS();\n        const element = document.createElement('div');\n        const style = element.style;\n        style[\"z-index\"] = \"9000\";\n        style.position = \"absolute\";\n        element.innerHTML = '<div class=\"sk-fading-circle\">\\\n                <div class=\"sk-circle1 sk-circle\"></div>\\\n                <div class=\"sk-circle2 sk-circle\"></div>\\\n                <div class=\"sk-circle3 sk-circle\"></div>\\\n                <div class=\"sk-circle4 sk-circle\"></div>\\\n                <div class=\"sk-circle5 sk-circle\"></div>\\\n                <div class=\"sk-circle6 sk-circle\"></div>\\\n                <div class=\"sk-circle7 sk-circle\"></div>\\\n                <div class=\"sk-circle8 sk-circle\"></div>\\\n                <div class=\"sk-circle9 sk-circle\"></div>\\\n                <div class=\"sk-circle10 sk-circle\"></div>\\\n                <div class=\"sk-circle11 sk-circle\"></div>\\\n                <div class=\"sk-circle12 sk-circle\"></div>\\\n                </div>';\n        this._canvas.parentElement.appendChild(element);\n        this._element = element;\n        this._isCustom = false;\n        this._adjustPosition();\n    }\n\n    /**\n     * @private\n     */\n    _injectDefaultCSS() {\n        const elementId = \"xeokit-spinner-css\";\n        if (document.getElementById(elementId)) {\n            return;\n        }\n        const defaultCSSNode = document.createElement('style');\n        defaultCSSNode.innerHTML = defaultCSS;\n        defaultCSSNode.id = elementId;\n        document.body.appendChild(defaultCSSNode);\n    }\n\n    /**\n     * @private\n     */\n    _adjustPosition() { // (Re)positions spinner DIV over the center of the canvas - called by Canvas\n        if (this._isCustom) {\n            return;\n        }\n        const canvas = this._canvas;\n        const element = this._element;\n        const style = element.style;\n        style[\"left\"] = (canvas.offsetLeft + (canvas.clientWidth * 0.5) - (element.clientWidth * 0.5)) + \"px\";\n        style[\"top\"] = (canvas.offsetTop + (canvas.clientHeight * 0.5) - (element.clientHeight * 0.5)) + \"px\";\n    }\n\n    /**\n     * Sets the number of processes this Spinner represents.\n     *\n     * The Spinner is visible while this property is greater than zero.\n     *\n     * Increment this property whenever you commence some process during which you want the Spinner to be visible, then decrement it again when the process is complete.\n     *\n     * Clamps to zero if you attempt to set to to a negative value.\n     *\n     * Fires a {@link Spinner#processes:event} event on change.\n\n     * Default value is ````0````.\n     *\n     * @param {Number} value New processes count.\n     */\n    set processes(value) {\n        value = value || 0;\n        if (this._processes === value) {\n            return;\n        }\n        if (value < 0) {\n            return;\n        }\n        const prevValue = this._processes;\n        this._processes = value;\n        const element = this._element;\n        if (element) {\n            element.style[\"visibility\"] = (this._processes > 0) ? \"visible\" : \"hidden\";\n        }\n        /**\n         Fired whenever this Spinner's {@link Spinner#visible} property changes.\n\n         @event processes\n         @param value The property's new value\n         */\n        this.fire(\"processes\", this._processes);\n        if (this._processes === 0 && this._processes !== prevValue) {\n            /**\n             Fired whenever this Spinner's {@link Spinner#visible} property becomes zero.\n\n             @event zeroProcesses\n             */\n            this.fire(\"zeroProcesses\", this._processes);\n        }\n    }\n\n    /**\n     * Gets the number of processes this Spinner represents.\n     *\n     * The Spinner is visible while this property is greater than zero.\n     *\n     * @returns {Number} Current processes count.\n     */\n    get processes() {\n        return this._processes;\n    }\n\n    _destroy() {\n        if (this._element && (!this._isCustom)) {\n            this._element.parentNode.removeChild(this._element);\n            this._element = null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Spinner.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js":
/*!******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js ***!
  \******************************************************************/
/*! exports provided: core */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"core\", function() { return core; });\n/* harmony import */ var _utils_Queue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Queue.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js\");\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n\n\n\n\n\nconst scenesRenderInfo = {}; // Used for throttling FPS for each Scene\nconst sceneIDMap = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_1__[\"Map\"](); // Ensures unique scene IDs\nconst taskQueue = new _utils_Queue_js__WEBPACK_IMPORTED_MODULE_0__[\"Queue\"](); // Task queue, which is pumped on each frame; tasks are pushed to it with calls to xeokit.schedule\nconst tickEvent = {sceneId: null, time: null, startTime: null, prevTime: null, deltaTime: null};\nconst taskBudget = 10; // Millisecs we're allowed to spend on tasks in each frame\nconst fpsSamples = [];\nconst numFPSSamples = 30;\n\nlet defaultScene = null;// Default singleton Scene, lazy-initialized in getter\nlet lastTime = 0;\nlet elapsedTime;\nlet totalFPS = 0;\n\n/**\n * @private\n */\nfunction Core() {\n\n    /**\n     Semantic version number. The value for this is set by an expression that's concatenated to\n     the end of the built binary by the xeokit build script.\n     @property version\n     @namespace xeokit\n     @type {String}\n     */\n    this.version = \"1.0.0\";\n\n    /**\n     Existing {@link Scene}s , mapped to their IDs\n     @property scenes\n     @namespace xeokit\n     @type {{Scene}}\n     */\n    this.scenes = {};\n\n    this._superTypes = {}; // For each component type, a list of its supertypes, ordered upwards in the hierarchy.\n\n    /**\n     * Registers a scene on xeokit.\n     * This is called within the xeokit.Scene constructor.\n     * @private\n     */\n    this._addScene = function (scene) {\n        if (scene.id) { // User-supplied ID\n            if (core.scenes[scene.id]) {\n                console.error(`[ERROR] Scene ${_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"utils\"].inQuotes(scene.id)} already exists`);\n                return;\n            }\n        } else { // Auto-generated ID\n            scene.id = sceneIDMap.addItem({});\n        }\n        core.scenes[scene.id] = scene;\n        const ticksPerOcclusionTest = scene.ticksPerOcclusionTest;\n        const ticksPerRender = scene.ticksPerRender;\n        scenesRenderInfo[scene.id] = {\n            ticksPerOcclusionTest: ticksPerOcclusionTest,\n            ticksPerRender: ticksPerRender,\n            renderCountdown: ticksPerRender\n        };\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].components.scenes++;\n        scene.once(\"destroyed\", () => { // Unregister destroyed scenes\n            sceneIDMap.removeItem(scene.id);\n            delete core.scenes[scene.id];\n            delete scenesRenderInfo[scene.id];\n            _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].components.scenes--;\n        });\n    };\n\n    /**\n     * @private\n     */\n    this.clear = function () {\n        let scene;\n        for (const id in core.scenes) {\n            if (core.scenes.hasOwnProperty(id)) {\n                scene = core.scenes[id];\n                // Only clear the default Scene\n                // but destroy all the others\n                if (id === \"default.scene\") {\n                    scene.clear();\n                } else {\n                    scene.destroy();\n                    delete core.scenes[scene.id];\n                }\n            }\n        }\n    };\n\n    /**\n     * Schedule a task to run at the next frame.\n     *\n     * Internally, this pushes the task to a FIFO queue. Within each frame interval, xeokit processes the queue\n     * for a certain period of time, popping tasks and running them. After each frame interval, tasks that did not\n     * get a chance to run during the task are left in the queue to be run next time.\n     *\n     * @param {Function} callback Callback that runs the task.\n     * @param {Object} [scope] Scope for the callback.\n     */\n    this.scheduleTask = function (callback, scope) {\n        taskQueue.push(callback);\n        taskQueue.push(scope);\n    };\n\n    this.runTasks = function (until = -1) { // Pops and processes tasks in the queue, until the given number of milliseconds has elapsed.\n        let time = (new Date()).getTime();\n        let callback;\n        let scope;\n        let tasksRun = 0;\n        while (taskQueue.length > 0 && (until < 0 || time < until)) {\n            callback = taskQueue.shift();\n            scope = taskQueue.shift();\n            if (scope) {\n                callback.call(scope);\n            } else {\n                callback();\n            }\n            time = (new Date()).getTime();\n            tasksRun++;\n        }\n        return tasksRun;\n    };\n\n    this.getNumTasks = function () {\n        return taskQueue.length;\n    };\n}\n\n/**\n * @private\n * @type {Core}\n */\nconst core = new Core();\n\n\nconst frame = function () {\n    let time = Date.now();\n    if (lastTime > 0) { // Log FPS stats\n        elapsedTime = time - lastTime;\n        var newFPS = 1000 / elapsedTime; // Moving average of FPS\n        totalFPS += newFPS;\n        fpsSamples.push(newFPS);\n        if (fpsSamples.length >= numFPSSamples) {\n            totalFPS -= fpsSamples.shift();\n        }\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.fps = Math.round(totalFPS / fpsSamples.length);\n    }\n    runTasks(time);\n    fireTickEvents(time);\n    renderScenes();\n    lastTime = time;\n    window.requestAnimationFrame(frame);\n};\n\nfunction runTasks(time) { // Process as many enqueued tasks as we can within the per-frame task budget\n    const tasksRun = core.runTasks(time + taskBudget);\n    const tasksScheduled = core.getNumTasks();\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksRun = tasksRun;\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksScheduled = tasksScheduled;\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksBudget = taskBudget;\n}\n\nfunction fireTickEvents(time) { // Fire tick event on each Scene\n    tickEvent.time = time;\n    for (var id in core.scenes) {\n        if (core.scenes.hasOwnProperty(id)) {\n            var scene = core.scenes[id];\n            tickEvent.sceneId = id;\n            tickEvent.startTime = scene.startTime;\n            tickEvent.deltaTime = tickEvent.prevTime != null ? tickEvent.time - tickEvent.prevTime : 0;\n            /**\n             * Fired on each game loop iteration.\n             *\n             * @event tick\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} startTime The time in seconds since 1970 that this Scene was instantiated.\n             * @param {Number} time The time in seconds since 1970 of this \"tick\" event.\n             * @param {Number} prevTime The time of the previous \"tick\" event from this Scene.\n             * @param {Number} deltaTime The time in seconds since the previous \"tick\" event from this Scene.\n             */\n            scene.fire(\"tick\", tickEvent, true);\n        }\n    }\n    tickEvent.prevTime = time;\n}\n\nfunction renderScenes() {\n    const scenes = core.scenes;\n    const forceRender = false;\n    let scene;\n    let renderInfo;\n    let ticksPerOcclusionTest;\n    let ticksPerRender;\n    let id;\n    for (id in scenes) {\n        if (scenes.hasOwnProperty(id)) {\n\n            scene = scenes[id];\n            renderInfo = scenesRenderInfo[id];\n\n            if (!renderInfo) {\n                renderInfo = scenesRenderInfo[id] = {}; // FIXME\n            }\n\n            ticksPerOcclusionTest = scene.ticksPerOcclusionTest;\n            if (renderInfo.ticksPerOcclusionTest !== ticksPerOcclusionTest) {\n                renderInfo.ticksPerOcclusionTest = ticksPerOcclusionTest;\n                renderInfo.renderCountdown = ticksPerOcclusionTest;\n            }\n            if (--scene.occlusionTestCountdown <= 0) {\n                scene.doOcclusionTest();\n                scene.occlusionTestCountdown = ticksPerOcclusionTest;\n            }\n\n            ticksPerRender = scene.ticksPerRender;\n            if (renderInfo.ticksPerRender !== ticksPerRender) {\n                renderInfo.ticksPerRender = ticksPerRender;\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n            if (--renderInfo.renderCountdown === 0) {\n                scene.render(forceRender);\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n        }\n    }\n}\n\nwindow.requestAnimationFrame(frame);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/Geometry.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/Geometry.js ***!
  \*******************************************************************************/
/*! exports provided: Geometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Geometry\", function() { return Geometry; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n\n\n\n/**\n * @desc Defines a shape for one or more {@link Mesh}es.\n *\n * * {@link ReadableGeometry} is a subclass that stores its data in both browser and GPU memory. Use ReadableGeometry when you need to keep the geometry arrays in browser memory.\n * * {@link VBOGeometry} is a subclass that stores its data solely in GPU memory. Use VBOGeometry when you need a lower memory footprint and don't need to keep the geometry data in browser memory.\n */\nclass Geometry extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /** @private */\n    get type() {\n        return \"Geometry\";\n    }\n\n    /** @private */\n    get isGeometry() {\n        return true;\n    }\n\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n        _stats_js__WEBPACK_IMPORTED_MODULE_1__[\"stats\"].memory.meshes++;\n    }\n\n    destroy() {\n        super.destroy();\n        _stats_js__WEBPACK_IMPORTED_MODULE_1__[\"stats\"].memory.meshes--;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2dlb21ldHJ5L0dlb21ldHJ5LmpzPzZjZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMEM7QUFDUjs7QUFFbEM7QUFDQSwwQ0FBMEMsV0FBVztBQUNyRDtBQUNBLE1BQU0sdUJBQXVCO0FBQzdCLE1BQU0sa0JBQWtCO0FBQ3hCO0FBQ0EsdUJBQXVCLHVEQUFTOztBQUVoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0I7QUFDQSxRQUFRLCtDQUFLO0FBQ2I7O0FBRUE7QUFDQTtBQUNBLFFBQVEsK0NBQUs7QUFDYjtBQUNBOztBQUVrQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9nZW9tZXRyeS9HZW9tZXRyeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50fSBmcm9tICcuLi9Db21wb25lbnQuanMnO1xuaW1wb3J0IHtzdGF0c30gZnJvbSAnLi4vc3RhdHMuanMnO1xuXG4vKipcbiAqIEBkZXNjIERlZmluZXMgYSBzaGFwZSBmb3Igb25lIG9yIG1vcmUge0BsaW5rIE1lc2h9ZXMuXG4gKlxuICogKiB7QGxpbmsgUmVhZGFibGVHZW9tZXRyeX0gaXMgYSBzdWJjbGFzcyB0aGF0IHN0b3JlcyBpdHMgZGF0YSBpbiBib3RoIGJyb3dzZXIgYW5kIEdQVSBtZW1vcnkuIFVzZSBSZWFkYWJsZUdlb21ldHJ5IHdoZW4geW91IG5lZWQgdG8ga2VlcCB0aGUgZ2VvbWV0cnkgYXJyYXlzIGluIGJyb3dzZXIgbWVtb3J5LlxuICogKiB7QGxpbmsgVkJPR2VvbWV0cnl9IGlzIGEgc3ViY2xhc3MgdGhhdCBzdG9yZXMgaXRzIGRhdGEgc29sZWx5IGluIEdQVSBtZW1vcnkuIFVzZSBWQk9HZW9tZXRyeSB3aGVuIHlvdSBuZWVkIGEgbG93ZXIgbWVtb3J5IGZvb3RwcmludCBhbmQgZG9uJ3QgbmVlZCB0byBrZWVwIHRoZSBnZW9tZXRyeSBkYXRhIGluIGJyb3dzZXIgbWVtb3J5LlxuICovXG5jbGFzcyBHZW9tZXRyeSBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiR2VvbWV0cnlcIjtcbiAgICB9XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICBnZXQgaXNHZW9tZXRyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3Iob3duZXIsIGNmZyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBjZmcpO1xuICAgICAgICBzdGF0cy5tZW1vcnkubWVzaGVzKys7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICBzdGF0cy5tZW1vcnkubWVzaGVzLS07XG4gICAgfVxufVxuXG5leHBvcnQge0dlb21ldHJ5fTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/Geometry.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/ReadableGeometry.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/ReadableGeometry.js ***!
  \***************************************************************************************/
/*! exports provided: ReadableGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReadableGeometry\", function() { return ReadableGeometry; });\n/* harmony import */ var _Geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geometry.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/Geometry.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/ArrayBuf.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/* harmony import */ var _math_buildEdgeIndices_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/buildEdgeIndices.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/buildEdgeIndices.js\");\n/* harmony import */ var _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math/geometryCompressionUtils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js\");\n\n\n\n\n\n\n\n\n\nconst memoryStats = _stats_js__WEBPACK_IMPORTED_MODULE_4__[\"stats\"].memory;\nconst bigIndicesSupported = _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst IndexArrayType = bigIndicesSupported ? Uint32Array : Uint16Array;\nconst tempAABB = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].AABB3();\n\n/**\n * @desc A {@link Geometry} that keeps its geometry data in both browser and GPU memory.\n *\n * ReadableGeometry uses more memory than {@link VBOGeometry}, which only stores its geometry data in GPU memory.\n *\n * ## Usage\n *\n * Creating a {@link Mesh} with a ReadableGeometry that defines a single triangle, plus a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_ReadableGeometry)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\"\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n *\n * const viewer = new Viewer({\n *         canvasId: \"myCanvas\"\n *     });\n *\n * const myMesh = new Mesh(viewer.scene, {\n *         geometry: new ReadableGeometry(viewer.scene, {\n *             primitive: \"triangles\",\n *             positions: [0.0, 3, 0.0, -3, -3, 0.0, 3, -3, 0.0],\n *             normals: [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n *             uv: [0.0, 0.0, 0.5, 1.0, 1.0, 0.0],\n *             indices: [0, 1, 2]\n *         }),\n *         material: new PhongMaterial(viewer.scene, {\n *             diffuseMap: new Texture(viewer.scene, {\n *                 src: \"textures/diffuse/uvGrid2.jpg\"\n *             }),\n *             backfaces: true\n *         })\n *     });\n *\n * // Get geometry data from browser memory:\n *\n * const positions = myMesh.geometry.positions; // Flat arrays\n * const normals = myMesh.geometry.normals;\n * const uv = myMesh.geometry.uv;\n * const indices = myMesh.geometry.indices;\n *\n * ````\n */\nclass ReadableGeometry extends _Geometry_js__WEBPACK_IMPORTED_MODULE_0__[\"Geometry\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"ReadableGeometry\";\n    }\n\n    /**\n     * @private\n     * @returns {boolean}\n     */\n    get isReadableGeometry() {\n        return true;\n    }\n\n    /**\n     *\n     @class ReadableGeometry\n     @module xeokit\n     @submodule geometry\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Geometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n     @param [cfg.positions] {Number[]} Positions array.\n     @param [cfg.normals] {Number[]} Vertex normal vectors array.\n     @param [cfg.uv] {Number[]} UVs array.\n     @param [cfg.colors] {Number[]} Vertex colors.\n     @param [cfg.indices] {Number[]} Indices array.\n     @param [cfg.autoVertexNormals=false] {Boolean} Set true to automatically generate normal vectors from the positions and\n     indices, if those are supplied.\n     @param [cfg.compressGeometry=false] {Boolean} Stores positions, colors, normals and UVs in compressGeometry and oct-encoded formats\n     for reduced memory footprint and GPU bus usage.\n     @param [cfg.edgeThreshold=10] {Number} When a {@link Mesh} renders this Geometry as wireframe,\n     this indicates the threshold angle (in degrees) between the face normals of adjacent triangles below which the edge is discarded.\n     @extends Component\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({ // Arrays for emphasis effects are got from xeokit.Geometry friend methods\n            compressGeometry: !!cfg.compressGeometry,\n            primitive: null, // WebGL enum\n            primitiveName: null, // String\n            positions: null,    // Uint16Array when compressGeometry == true, else Float32Array\n            normals: null,      // Uint8Array when compressGeometry == true, else Float32Array\n            colors: null,\n            uv: null,           // Uint8Array when compressGeometry == true, else Float32Array\n            indices: null,\n            positionsDecodeMatrix: null, // Set when compressGeometry == true\n            uvDecodeMatrix: null, // Set when compressGeometry == true\n            positionsBuf: null,\n            normalsBuf: null,\n            colorsbuf: null,\n            uvBuf: null,\n            indicesBuf: null,\n            hash: \"\"\n        });\n\n        this._numTriangles = 0;\n\n        this._edgeThreshold = cfg.edgeThreshold || 10.0;\n\n        // Lazy-generated VBOs\n\n        this._edgeIndicesBuf = null;\n        this._pickTrianglePositionsBuf = null;\n        this._pickTriangleColorsBuf = null;\n\n        // Local-space Boundary3D\n\n        this._aabbDirty = true;\n\n        this._boundingSphere = true;\n        this._aabb = null;\n        this._aabbDirty = true;\n\n        this._obb = null;\n        this._obbDirty = true;\n\n        const state = this._state;\n        const gl = this.scene.canvas.gl;\n\n        // Primitive type\n\n        cfg.primitive = cfg.primitive || \"triangles\";\n        switch (cfg.primitive) {\n            case \"points\":\n                state.primitive = gl.POINTS;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"lines\":\n                state.primitive = gl.LINES;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"line-loop\":\n                state.primitive = gl.LINE_LOOP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"line-strip\":\n                state.primitive = gl.LINE_STRIP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangles\":\n                state.primitive = gl.TRIANGLES;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangle-strip\":\n                state.primitive = gl.TRIANGLE_STRIP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangle-fan\":\n                state.primitive = gl.TRIANGLE_FAN;\n                state.primitiveName = cfg.primitive;\n                break;\n            default:\n                this.error(\"Unsupported value for 'primitive': '\" + cfg.primitive +\n                    \"' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', \" +\n                    \"'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.\");\n                state.primitive = gl.TRIANGLES;\n                state.primitiveName = cfg.primitive;\n        }\n\n        if (cfg.positions) {\n            if (this._state.compressGeometry) {\n                const bounds = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].getPositionsBounds(cfg.positions);\n                const result = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].compressPositions(cfg.positions, bounds.min, bounds.max);\n                state.positions = result.quantized;\n                state.positionsDecodeMatrix = result.decodeMatrix;\n            } else {\n                state.positions = cfg.positions.constructor === Float32Array ? cfg.positions : new Float32Array(cfg.positions);\n            }\n        }\n        if (cfg.colors) {\n            state.colors = cfg.colors.constructor === Float32Array ? cfg.colors : new Float32Array(cfg.colors);\n        }\n        if (cfg.uv) {\n            if (this._state.compressGeometry) {\n                const bounds = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].getUVBounds(cfg.uv);\n                const result = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].compressUVs(cfg.uv, bounds.min, bounds.max);\n                state.uv = result.quantized;\n                state.uvDecodeMatrix = result.decodeMatrix;\n            } else {\n                state.uv = cfg.uv.constructor === Float32Array ? cfg.uv : new Float32Array(cfg.uv);\n            }\n        }\n        if (cfg.normals) {\n            if (this._state.compressGeometry) {\n                state.normals = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].compressNormals(cfg.normals);\n            } else {\n                state.normals = cfg.normals.constructor === Float32Array ? cfg.normals : new Float32Array(cfg.normals);\n            }\n        }\n        if (cfg.indices) {\n            if (!bigIndicesSupported && cfg.indices.constructor === Uint32Array) {\n                this.error(\"This WebGL implementation does not support Uint32Array\");\n                return;\n            }\n            state.indices = (cfg.indices.constructor === Uint32Array || cfg.indices.constructor === Uint16Array) ? cfg.indices : new IndexArrayType(cfg.indices);\n            if (this._state.primitiveName === \"triangles\") {\n                this._numTriangles = (cfg.indices.length / 3);\n            }\n        }\n\n        this._buildHash();\n\n        memoryStats.meshes++;\n\n        this._buildVBOs();\n    }\n\n    _buildVBOs() {\n        const state = this._state;\n        const gl = this.scene.canvas.gl;\n        if (state.indices) {\n            state.indicesBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ELEMENT_ARRAY_BUFFER, state.indices, state.indices.length, 1, gl.STATIC_DRAW);\n            memoryStats.indices += state.indicesBuf.numItems;\n        }\n        if (state.positions) {\n            state.positionsBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, state.positions, state.positions.length, 3, gl.STATIC_DRAW);\n            memoryStats.positions += state.positionsBuf.numItems;\n        }\n        if (state.normals) {\n            let normalized = state.compressGeometry;\n            state.normalsBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, state.normals, state.normals.length, 3, gl.STATIC_DRAW, normalized);\n            memoryStats.normals += state.normalsBuf.numItems;\n        }\n        if (state.colors) {\n            state.colorsBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, state.colors, state.colors.length, 4, gl.STATIC_DRAW);\n            memoryStats.colors += state.colorsBuf.numItems;\n        }\n        if (state.uv) {\n            state.uvBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, state.uv, state.uv.length, 2, gl.STATIC_DRAW);\n            memoryStats.uvs += state.uvBuf.numItems;\n        }\n    }\n\n    _buildHash() {\n        const state = this._state;\n        const hash = [\"/g\"];\n        hash.push(\"/\" + state.primitive + \";\");\n        if (state.positions) {\n            hash.push(\"p\");\n        }\n        if (state.colors) {\n            hash.push(\"c\");\n        }\n        if (state.normals || state.autoVertexNormals) {\n            hash.push(\"n\");\n        }\n        if (state.uv) {\n            hash.push(\"u\");\n        }\n        if (state.compressGeometry) {\n            hash.push(\"cp\");\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n    _getEdgeIndices() {\n        if (!this._edgeIndicesBuf) {\n            this._buildEdgeIndices();\n        }\n        return this._edgeIndicesBuf;\n    }\n\n    _getPickTrianglePositions() {\n        if (!this._pickTrianglePositionsBuf) {\n            this._buildPickTriangleVBOs();\n        }\n        return this._pickTrianglePositionsBuf;\n    }\n\n    _getPickTriangleColors() {\n        if (!this._pickTriangleColorsBuf) {\n            this._buildPickTriangleVBOs();\n        }\n        return this._pickTriangleColorsBuf;\n    }\n\n    _buildEdgeIndices() { // FIXME: Does not adjust indices after other objects are deleted from vertex buffer!!\n        const state = this._state;\n        if (!state.positions || !state.indices) {\n            return;\n        }\n        const gl = this.scene.canvas.gl;\n        const edgeIndices = Object(_math_buildEdgeIndices_js__WEBPACK_IMPORTED_MODULE_6__[\"buildEdgeIndices\"])(state.positions, state.indices, state.positionsDecodeMatrix, this._edgeThreshold);\n        this._edgeIndicesBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ELEMENT_ARRAY_BUFFER, edgeIndices, edgeIndices.length, 1, gl.STATIC_DRAW);\n        memoryStats.indices += this._edgeIndicesBuf.numItems;\n    }\n\n    _buildPickTriangleVBOs() { // Builds positions and indices arrays that allow each triangle to have a unique color\n        const state = this._state;\n        if (!state.positions || !state.indices) {\n            return;\n        }\n        const gl = this.scene.canvas.gl;\n        const arrays = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].buildPickTriangles(state.positions, state.indices, state.compressGeometry);\n        const positions = arrays.positions;\n        const colors = arrays.colors;\n        this._pickTrianglePositionsBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, positions, positions.length, 3, gl.STATIC_DRAW);\n        this._pickTriangleColorsBuf = new _webgl_ArrayBuf_js__WEBPACK_IMPORTED_MODULE_2__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, colors, colors.length, 4, gl.STATIC_DRAW, true);\n        memoryStats.positions += this._pickTrianglePositionsBuf.numItems;\n        memoryStats.colors += this._pickTriangleColorsBuf.numItems;\n    }\n\n    _buildPickVertexVBOs() {\n        // var state = this._state;\n        // if (!state.positions || !state.indices) {\n        //     return;\n        // }\n        // var gl = this.scene.canvas.gl;\n        // var arrays = math.buildPickVertices(state.positions, state.indices, state.compressGeometry);\n        // var pickVertexPositions = arrays.positions;\n        // var pickColors = arrays.colors;\n        // this._pickVertexPositionsBuf = new xeokit.renderer.ArrayBuf(gl, gl.ARRAY_BUFFER, pickVertexPositions, pickVertexPositions.length, 3, gl.STATIC_DRAW);\n        // this._pickVertexColorsBuf = new xeokit.renderer.ArrayBuf(gl, gl.ARRAY_BUFFER, pickColors, pickColors.length, 4, gl.STATIC_DRAW, true);\n        // memoryStats.positions += this._pickVertexPositionsBuf.numItems;\n        // memoryStats.colors += this._pickVertexColorsBuf.numItems;\n    }\n\n    _webglContextLost() {\n        if (this._sceneVertexBufs) {\n            this._sceneVertexBufs.webglContextLost();\n        }\n    }\n\n    _webglContextRestored() {\n        if (this._sceneVertexBufs) {\n            this._sceneVertexBufs.webglContextRestored();\n        }\n        this._buildVBOs();\n        this._edgeIndicesBuf = null;\n        this._pickVertexPositionsBuf = null;\n        this._pickTrianglePositionsBuf = null;\n        this._pickTriangleColorsBuf = null;\n        this._pickVertexPositionsBuf = null;\n        this._pickVertexColorsBuf = null;\n    }\n\n    /**\n     * Gets the Geometry's primitive type.\n\n     Valid types are: 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n\n     @property primitive\n     @default \"triangles\"\n     @type {String}\n     */\n    get primitive() {\n        return this._state.primitiveName;\n    }\n\n    /**\n     Indicates if this Geometry is quantized.\n\n     Compression is an internally-performed optimization which stores positions, colors, normals and UVs\n     in quantized and oct-encoded formats for reduced memory footprint and GPU bus usage.\n\n     Quantized geometry may not be updated.\n\n     @property compressGeometry\n     @default false\n     @type {Boolean}\n     @final\n     */\n    get compressGeometry() {\n        return this._state.compressGeometry;\n    }\n\n    /**\n     The Geometry's vertex positions.\n\n     @property positions\n     @default null\n     @type {Number[]}\n     */\n    get positions() {\n        if (!this._state.positions) {\n            return null;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.positions;\n        }\n        if (!this._decompressedPositions) {\n            this._decompressedPositions = new Float32Array(this._state.positions.length);\n            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].decompressPositions(this._state.positions, this._state.positionsDecodeMatrix, this._decompressedPositions);\n        }\n        return this._decompressedPositions;\n    }\n\n    set positions(newPositions) {\n        const state = this._state;\n        const positions = state.positions;\n        if (!positions) {\n            this.error(\"can't update geometry positions - geometry has no positions\");\n            return;\n        }\n        if (positions.length !== newPositions.length) {\n            this.error(\"can't update geometry positions - new positions are wrong length\");\n            return;\n        }\n        if (this._state.compressGeometry) {\n            const bounds = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].getPositionsBounds(newPositions);\n            const result = _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].compressPositions(newPositions, bounds.min, bounds.max);\n            newPositions = result.quantized; // TODO: Copy in-place\n            state.positionsDecodeMatrix = result.decodeMatrix;\n        }\n        positions.set(newPositions);\n        if (state.positionsBuf) {\n            state.positionsBuf.setData(positions);\n        }\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's vertex normals.\n\n     @property normals\n     @default null\n     @type {Number[]}\n     */\n    get normals() {\n        if (!this._state.normals) {\n            return;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.normals;\n        }\n        if (!this._decompressedNormals) {\n            const lenCompressed = this._state.normals.length;\n            const lenDecompressed = lenCompressed + (lenCompressed / 2); // 2 -> 3\n            this._decompressedNormals = new Float32Array(lenDecompressed);\n            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].decompressNormals(this._state.normals, this._decompressedNormals);\n        }\n        return this._decompressedNormals;\n    }\n\n    set normals(newNormals) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry normals - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const normals = state.normals;\n        if (!normals) {\n            this.error(\"can't update geometry normals - geometry has no normals\");\n            return;\n        }\n        if (normals.length !== newNormals.length) {\n            this.error(\"can't update geometry normals - new normals are wrong length\");\n            return;\n        }\n        normals.set(newNormals);\n        if (state.normalsBuf) {\n            state.normalsBuf.setData(normals);\n        }\n        this.glRedraw();\n    }\n\n\n    /**\n     The Geometry's UV coordinates.\n\n     @property uv\n     @default null\n     @type {Number[]}\n     */\n    get uv() {\n        if (!this._state.uv) {\n            return null;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.uv;\n        }\n        if (!this._decompressedUV) {\n            this._decompressedUV = new Float32Array(this._state.uv.length);\n            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_7__[\"geometryCompressionUtils\"].decompressUVs(this._state.uv, this._state.uvDecodeMatrix, this._decompressedUV);\n        }\n        return this._decompressedUV;\n    }\n\n    set uv(newUV) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry UVs - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const uv = state.uv;\n        if (!uv) {\n            this.error(\"can't update geometry UVs - geometry has no UVs\");\n            return;\n        }\n        if (uv.length !== newUV.length) {\n            this.error(\"can't update geometry UVs - new UVs are wrong length\");\n            return;\n        }\n        uv.set(newUV);\n        if (state.uvBuf) {\n            state.uvBuf.setData(uv);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's vertex colors.\n\n     @property colors\n     @default null\n     @type {Number[]}\n     */\n    get colors() {\n        return this._state.colors;\n    }\n\n    set colors(newColors) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry colors - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const colors = state.colors;\n        if (!colors) {\n            this.error(\"can't update geometry colors - geometry has no colors\");\n            return;\n        }\n        if (colors.length !== newColors.length) {\n            this.error(\"can't update geometry colors - new colors are wrong length\");\n            return;\n        }\n        colors.set(newColors);\n        if (state.colorsBuf) {\n            state.colorsBuf.setData(colors);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's indices.\n\n     If ````xeokit.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]```` is true, then this can be\n     a ````Uint32Array````, otherwise it needs to be a ````Uint16Array````.\n\n     @property indices\n     @default null\n     @type Uint16Array | Uint32Array\n     @final\n     */\n    get indices() {\n        return this._state.indices;\n    }\n\n    /**\n     * Local-space axis-aligned 3D boundary (AABB) of this geometry.\n     *\n     * The AABB is represented by a six-element Float64Array containing the min/max extents of the\n     * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n     *\n     * @property aabb\n     * @final\n     * @type {Number[]}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            if (!this._aabb) {\n                this._aabb = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].AABB3();\n            }\n            _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].positions3ToAABB3(this._state.positions, this._aabb, this._state.positionsDecodeMatrix);\n            this._aabbDirty = false;\n        }\n        return this._aabb;\n    }\n\n    /**\n     * Local-space oriented 3D boundary (OBB) of this geometry.\n     *\n     * The OBB is represented by a 32-element Float64Array containing the eight vertices of the box,\n     * where each vertex is a homogeneous coordinate having [x,y,z,w] elements.\n     *\n     * @property obb\n     * @final\n     * @type {Number[]}\n     */\n    get obb() {\n        if (this._obbDirty) {\n            if (!this._obb) {\n                this._obb = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].OBB3();\n            }\n            _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].positions3ToAABB3(this._state.positions, tempAABB, this._state.positionsDecodeMatrix);\n            _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].AABB3ToOBB3(tempAABB, this._obb);\n            this._obbDirty = false;\n        }\n        return this._obb;\n    }\n\n    /**\n     * Approximate number of triangles in this ReadableGeometry.\n     *\n     * Will be zero if {@link ReadableGeometry#primitive} is not 'triangles', 'triangle-strip' or 'triangle-fan'.\n     *\n     * @type {Number}\n     */\n    get numTriangles() {\n        return this._numTriangles;\n    }\n\n    _setAABBDirty() {\n        if (this._aabbDirty) {\n            return;\n        }\n        this._aabbDirty = true;\n        this._aabbDirty = true;\n        this._obbDirty = true;\n    }\n\n    _getState() {\n        return this._state;\n    }\n\n    /**\n     * Destroys this ReadableGeometry\n     */\n    destroy() {\n        super.destroy();\n        const state = this._state;\n        if (state.indicesBuf) {\n            state.indicesBuf.destroy();\n        }\n        if (state.positionsBuf) {\n            state.positionsBuf.destroy();\n        }\n        if (state.normalsBuf) {\n            state.normalsBuf.destroy();\n        }\n        if (state.uvBuf) {\n            state.uvBuf.destroy();\n        }\n        if (state.colorsBuf) {\n            state.colorsBuf.destroy();\n        }\n        if (this._edgeIndicesBuf) {\n            this._edgeIndicesBuf.destroy();\n        }\n        if (this._pickTrianglePositionsBuf) {\n            this._pickTrianglePositionsBuf.destroy();\n        }\n        if (this._pickTriangleColorsBuf) {\n            this._pickTriangleColorsBuf.destroy();\n        }\n        if (this._pickVertexPositionsBuf) {\n            this._pickVertexPositionsBuf.destroy();\n        }\n        if (this._pickVertexColorsBuf) {\n            this._pickVertexColorsBuf.destroy();\n        }\n        state.destroy();\n        memoryStats.meshes--;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/ReadableGeometry.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildBoxGeometry.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildBoxGeometry.js ***!
  \************************************************************************************************/
/*! exports provided: buildBoxGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildBoxGeometry\", function() { return buildBoxGeometry; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n\n\n/**\n * @desc Creates box-shaped {@link Geometry}.\n *\n * ## Usage\n *\n * In the example below we'll create a {@link Mesh} with a box-shaped {@link ReadableGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildBoxGeometry)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildBoxGeometry} from \"../src/scene/geometry/builders/buildBoxGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n *\n * const viewer = new Viewer({\n *         canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildBoxGeometry({\n *         center: [0,0,0],\n *         xSize: 1,  // Half-size on each axis\n *         ySize: 1,\n *         zSize: 1\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *         diffuseMap: new Texture(viewer.scene, {\n *             src: \"textures/diffuse/uvGrid2.jpg\"\n *         })\n *      })\n * });\n * ````\n *\n * @function buildBoxGeometry\n * @param {*} [cfg] Configs\n * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1.0]  Half-size on the X-axis.\n * @param {Number} [cfg.ySize=1.0]  Half-size on the Y-axis.\n * @param {Number} [cfg.zSize=1.0]  Half-size on the Z-axis.\n * @returns {Object} Configuration for a {@link Geometry} subtype.\n */\nfunction buildBoxGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let ySize = cfg.ySize || 1;\n    if (ySize < 0) {\n        console.error(\"negative ySize not allowed - will invert\");\n        ySize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const xmin = -xSize + centerX;\n    const ymin = -ySize + centerY;\n    const zmin = -zSize + centerZ;\n    const xmax = xSize + centerX;\n    const ymax = ySize + centerY;\n    const zmax = zSize + centerZ;\n\n    return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].apply(cfg, {\n\n        // The vertices - eight for our cube, each\n        // one spanning three array elements for X,Y and Z\n        positions: [\n\n            // v0-v1-v2-v3 front\n            xmax, ymax, zmax,\n            xmin, ymax, zmax,\n            xmin, ymin, zmax,\n            xmax, ymin, zmax,\n\n            // v0-v3-v4-v1 right\n            xmax, ymax, zmax,\n            xmax, ymin, zmax,\n            xmax, ymin, zmin,\n            xmax, ymax, zmin,\n\n            // v0-v1-v6-v1 top\n            xmax, ymax, zmax,\n            xmax, ymax, zmin,\n            xmin, ymax, zmin,\n            xmin, ymax, zmax,\n\n            // v1-v6-v7-v2 left\n            xmin, ymax, zmax,\n            xmin, ymax, zmin,\n            xmin, ymin, zmin,\n            xmin, ymin, zmax,\n\n            // v7-v4-v3-v2 bottom\n            xmin, ymin, zmin,\n            xmax, ymin, zmin,\n            xmax, ymin, zmax,\n            xmin, ymin, zmax,\n\n            // v4-v7-v6-v1 back\n            xmax, ymin, zmin,\n            xmin, ymin, zmin,\n            xmin, ymax, zmin,\n            xmax, ymax, zmin\n        ],\n\n        // Normal vectors, one for each vertex\n        normals: [\n\n            // v0-v1-v2-v3 front\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n\n            // v0-v3-v4-v5 right\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n\n            // v0-v5-v6-v1 top\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n\n            // v1-v6-v7-v2 left\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n\n            // v7-v4-v3-v2 bottom\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n\n            // v4-v7-v6-v5 back\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1\n        ],\n\n        // UV coords\n        uv: [\n\n            // v0-v1-v2-v3 front\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v0-v3-v4-v1 right\n            0, 0,\n            0, 1,\n            1, 1,\n            1, 0,\n\n            // v0-v1-v6-v1 top\n            1, 1,\n            1, 0,\n            0, 0,\n            0, 1,\n\n            // v1-v6-v7-v2 left\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v7-v4-v3-v2 bottom\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0,\n\n            // v4-v7-v6-v1 back\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0\n        ],\n\n        // Indices - these organise the\n        // positions and uv texture coordinates\n        // into geometric primitives in accordance\n        // with the \"primitive\" parameter,\n        // in this case a set of three indices\n        // for each triangle.\n        //\n        // Note that each triangle is specified\n        // in counter-clockwise winding order.\n        //\n        // You can specify them in clockwise\n        // order if you configure the Modes\n        // node's frontFace flag as \"cw\", instead of\n        // the default \"ccw\".\n        indices: [\n            0, 1, 2,\n            0, 2, 3,\n            // front\n            4, 5, 6,\n            4, 6, 7,\n            // right\n            8, 9, 10,\n            8, 10, 11,\n            // top\n            12, 13, 14,\n            12, 14, 15,\n            // left\n            16, 17, 18,\n            16, 18, 19,\n            // bottom\n            20, 21, 22,\n            20, 22, 23\n        ]\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildBoxGeometry.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildCylinderGeometry.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildCylinderGeometry.js ***!
  \*****************************************************************************************************/
/*! exports provided: buildCylinderGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildCylinderGeometry\", function() { return buildCylinderGeometry; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n\n\n/**\n * @desc Creates a cylinder-shaped {@link Geometry}.\n *\n * ## Usage\n *\n * Creating a {@link Mesh} with a cylinder-shaped {@link ReadableGeometry} :\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildCylinderGeometry)]\n *\n * ````javascript\n *\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildCylinderGeometry} from \"../src/scene/geometry/builders/buildCylinderGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n *  });\n *\n * viewer.camera.eye = [0, 0, 5];\n * viewer.camera.look = [0, 0, 0];\n * viewer.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildCylinderGeometry({\n *          center: [0,0,0],\n *          radiusTop: 2.0,\n *          radiusBottom: 2.0,\n *          height: 5.0,\n *          radialSegments: 20,\n *          heightSegments: 1,\n *          openEnded: false\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *         diffuseMap: new Texture(viewer.scene, {\n *             src: \"textures/diffuse/uvGrid2.jpg\"\n *         })\n *      })\n * });\n * ````\n *\n * @function buildCylinderGeometry\n * @param {*} [cfg] Configs\n * @param {String} [cfg.id] Optional ID for the {@link Geometry}, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.radiusTop=1]  Radius of top.\n * @param {Number} [cfg.radiusBottom=1]  Radius of bottom.\n * @param {Number} [cfg.height=1] Height.\n * @param {Number} [cfg.radialSegments=60]  Number of horizontal segments.\n * @param {Number} [cfg.heightSegments=1]  Number of vertical segments.\n * @param {Boolean} [cfg.openEnded=false]  Whether or not the cylinder has solid caps on the ends.\n * @returns {Object} Configuration for a {@link Geometry} subtype.\n */\nfunction buildCylinderGeometry(cfg = {}) {\n\n    let radiusTop = cfg.radiusTop || 1;\n    if (radiusTop < 0) {\n        console.error(\"negative radiusTop not allowed - will invert\");\n        radiusTop *= -1;\n    }\n\n    let radiusBottom = cfg.radiusBottom || 1;\n    if (radiusBottom < 0) {\n        console.error(\"negative radiusBottom not allowed - will invert\");\n        radiusBottom *= -1;\n    }\n\n    let height = cfg.height || 1;\n    if (height < 0) {\n        console.error(\"negative height not allowed - will invert\");\n        height *= -1;\n    }\n\n    let radialSegments = cfg.radialSegments || 32;\n    if (radialSegments < 0) {\n        console.error(\"negative radialSegments not allowed - will invert\");\n        radialSegments *= -1;\n    }\n    if (radialSegments < 3) {\n        radialSegments = 3;\n    }\n\n    let heightSegments = cfg.heightSegments || 1;\n    if (heightSegments < 0) {\n        console.error(\"negative heightSegments not allowed - will invert\");\n        heightSegments *= -1;\n    }\n    if (heightSegments < 1) {\n        heightSegments = 1;\n    }\n\n    const openEnded = !!cfg.openEnded;\n\n    let center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const heightHalf = height / 2;\n    const heightLength = height / heightSegments;\n    const radialAngle = (2.0 * Math.PI / radialSegments);\n    const radialLength = 1.0 / radialSegments;\n    //var nextRadius = this._radiusBottom;\n    const radiusChange = (radiusTop - radiusBottom) / heightSegments;\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let h;\n    let i;\n\n    let x;\n    let z;\n\n    let currentRadius;\n    let currentHeight;\n\n    let first;\n    let second;\n\n    let startIndex;\n    let tu;\n    let tv;\n\n    // create vertices\n    const normalY = (90.0 - (Math.atan(height / (radiusBottom - radiusTop))) * 180 / Math.PI) / 90.0;\n\n    for (h = 0; h <= heightSegments; h++) {\n        currentRadius = radiusTop - h * radiusChange;\n        currentHeight = heightHalf - h * heightLength;\n\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            normals.push(currentRadius * x);\n            normals.push(normalY); //todo\n            normals.push(currentRadius * z);\n\n            uvs.push((i * radialLength));\n            uvs.push(h * 1 / heightSegments);\n\n            positions.push((currentRadius * x) + centerX);\n            positions.push((currentHeight) + centerY);\n            positions.push((currentRadius * z) + centerZ);\n        }\n    }\n\n    // create faces\n    for (h = 0; h < heightSegments; h++) {\n        for (i = 0; i <= radialSegments; i++) {\n\n            first = h * (radialSegments + 1) + i;\n            second = first + radialSegments;\n\n            indices.push(first);\n            indices.push(second);\n            indices.push(second + 1);\n\n            indices.push(first);\n            indices.push(second + 1);\n            indices.push(first + 1);\n        }\n    }\n\n    // create top cap\n    if (!openEnded && radiusTop > 0) {\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusTop * x);\n            normals.push(1.0);\n            normals.push(radiusTop * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusTop * x) + centerX);\n            positions.push((heightHalf) + centerY);\n            positions.push((radiusTop * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(first);\n            indices.push(first + 1);\n            indices.push(center);\n        }\n    }\n\n    // create bottom cap\n    if (!openEnded && radiusBottom > 0) {\n\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(-1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(0 - heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusBottom * x);\n            normals.push(-1.0);\n            normals.push(radiusBottom * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusBottom * x) + centerX);\n            positions.push((0 - heightHalf) + centerY);\n            positions.push((radiusBottom * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(center);\n            indices.push(first + 1);\n            indices.push(first);\n        }\n    }\n\n    return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].apply(cfg, {\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        indices: indices\n    });\n}\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildCylinderGeometry.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/input/Input.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/input/Input.js ***!
  \*************************************************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return Input; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n/**\n * @desc Meditates mouse, touch and keyboard events for various interaction controls.\n *\n * Ordinarily, you would only use this component as a utility to help manage input events and state for your\n * own custom input handlers.\n *\n * * Located at {@link Scene#input}\n * * Used by (at least) {@link CameraControl}\n *\n * ## Usage\n *\n * Subscribing to mouse events on the canvas:\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * const input = viewer.scene.input;\n *\n * const onMouseDown = input.on(\"mousedown\", (canvasCoords) => {\n *       console.log(\"Mouse down at: x=\" + canvasCoords[0] + \", y=\" + coords[1]);\n * });\n *\n * const onMouseUp = input.on(\"mouseup\", (canvasCoords) => {\n *       console.log(\"Mouse up at: x=\" + canvasCoords[0] + \", y=\" + canvasCoords[1]);\n * });\n *\n * const onMouseClicked = input.on(\"mouseclicked\", (canvasCoords) => {\n *      console.log(\"Mouse clicked at: x=\" + canvasCoords[0] + \", y=\" + canvasCoords[1]);\n * });\n *\n * const onDblClick = input.on(\"dblclick\", (canvasCoords) => {\n *       console.log(\"Double-click at: x=\" + canvasCoords[0] + \", y=\" + canvasCoords[1]);\n * });\n * ````\n *\n * Subscribing to keyboard events on the canvas:\n *\n * ````javascript\n * const onKeyDown = input.on(\"keydown\", (keyCode) => {\n *      switch (keyCode) {\n *          case this.KEY_A:\n *              console.log(\"The 'A' key is down\");\n *              break;\n *\n *          case this.KEY_B:\n *              console.log(\"The 'B' key is down\");\n *              break;\n *\n *          case this.KEY_C:\n *              console.log(\"The 'C' key is down\");\n *              break;\n *\n *          default:\n *              console.log(\"Some other key is down\");\n *      }\n * });\n *\n * const onKeyUp = input.on(\"keyup\", (keyCode) => {\n *      switch (keyCode) {\n *          case this.KEY_A:\n *              console.log(\"The 'A' key is up\");\n *              break;\n *\n *          case this.KEY_B:\n *              console.log(\"The 'B' key is up\");\n *              break;\n *\n *          case this.KEY_C:\n *              console.log(\"The 'C' key is up\");\n *              break;\n *\n *          default:\n *              console.log(\"Some other key is up\");\n *      }\n *  });\n * ````\n *\n * Checking if keys are down:\n *\n * ````javascript\n * const isCtrlDown = input.ctrlDown;\n * const isAltDown = input.altDown;\n * const shiftDown = input.shiftDown;\n * //...\n *\n * const isAKeyDown = input.keyDown[input.KEY_A];\n * const isBKeyDown = input.keyDown[input.KEY_B];\n * const isShiftKeyDown = input.keyDown[input.KEY_SHIFT];\n * //...\n *\n * ````\n * Unsubscribing from events:\n *\n * ````javascript\n * input.off(onMouseDown);\n * input.off(onMouseUp);\n * //...\n * ````\n *\n * ## Disabling all events\n *\n * Event handling is enabled by default.\n *\n * To disable all events:\n *\n * ````javascript\n * myViewer.scene.input.setEnabled(false);\n * ````\n * To enable all events again:\n *\n * ````javascript\n * myViewer.scene.input.setEnabled(true);\n * ````\n *\n * ## Disabling keyboard input\n *\n * When the mouse is over the canvas, the canvas will consume keyboard events. Therefore, sometimes we need\n * to disable keyboard control, so that other UI elements can get those events.\n *\n * To disable keyboard events:\n *\n * ````javascript\n * myViewer.scene.input.setKeyboardEnabled(false);\n * ````\n *\n * To enable keyboard events again:\n *\n * ````javascript\n * myViewer.scene.input.setKeyboardEnabled(true)\n * ````\n */\nclass Input extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        /**\n         * Code for the BACKSPACE key.\n         * @property KEY_BACKSPACE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_BACKSPACE = 8;\n\n        /**\n         * Code for the TAB key.\n         * @property KEY_TAB\n         * @final\n         * @type {Number}\n         */\n        this.KEY_TAB = 9;\n\n        /**\n         * Code for the ENTER key.\n         * @property KEY_ENTER\n         * @final\n         * @type {Number}\n         */\n        this.KEY_ENTER = 13;\n\n        /**\n         * Code for the SHIFT key.\n         * @property KEY_SHIFT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SHIFT = 16;\n\n        /**\n         * Code for the CTRL key.\n         * @property KEY_CTRL\n         * @final\n         * @type {Number}\n         */\n        this.KEY_CTRL = 17;\n\n        /**\n         * Code for the ALT key.\n         * @property KEY_ALT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_ALT = 18;\n\n        /**\n         * Code for the PAUSE_BREAK key.\n         * @property KEY_PAUSE_BREAK\n         * @final\n         * @type {Number}\n         */\n        this.KEY_PAUSE_BREAK = 19;\n\n        /**\n         * Code for the CAPS_LOCK key.\n         * @property KEY_CAPS_LOCK\n         * @final\n         * @type {Number}\n         */\n        this.KEY_CAPS_LOCK = 20;\n\n        /**\n         * Code for the ESCAPE key.\n         * @property KEY_ESCAPE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_ESCAPE = 27;\n\n        /**\n         * Code for the PAGE_UP key.\n         * @property KEY_PAGE_UP\n         * @final\n         * @type {Number}\n         */\n        this.KEY_PAGE_UP = 33;\n\n        /**\n         * Code for the PAGE_DOWN key.\n         * @property KEY_PAGE_DOWN\n         * @final\n         * @type {Number}\n         */\n        this.KEY_PAGE_DOWN = 34;\n\n        /**\n         * Code for the END key.\n         * @property KEY_END\n         * @final\n         * @type {Number}\n         */\n        this.KEY_END = 35;\n\n        /**\n         * Code for the HOME key.\n         * @property KEY_HOME\n         * @final\n         * @type {Number}\n         */\n        this.KEY_HOME = 36;\n\n        /**\n         * Code for the LEFT_ARROW key.\n         * @property KEY_LEFT_ARROW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_LEFT_ARROW = 37;\n\n        /**\n         * Code for the UP_ARROW key.\n         * @property KEY_UP_ARROW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_UP_ARROW = 38;\n\n        /**\n         * Code for the RIGHT_ARROW key.\n         * @property KEY_RIGHT_ARROW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_RIGHT_ARROW = 39;\n\n        /**\n         * Code for the DOWN_ARROW key.\n         * @property KEY_DOWN_ARROW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_DOWN_ARROW = 40;\n\n        /**\n         * Code for the INSERT key.\n         * @property KEY_INSERT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_INSERT = 45;\n\n        /**\n         * Code for the DELETE key.\n         * @property KEY_DELETE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_DELETE = 46;\n\n        /**\n         * Code for the 0 key.\n         * @property KEY_NUM_0\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_0 = 48;\n\n        /**\n         * Code for the 1 key.\n         * @property KEY_NUM_1\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_1 = 49;\n\n        /**\n         * Code for the 2 key.\n         * @property KEY_NUM_2\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_2 = 50;\n\n        /**\n         * Code for the 3 key.\n         * @property KEY_NUM_3\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_3 = 51;\n\n        /**\n         * Code for the 4 key.\n         * @property KEY_NUM_4\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_4 = 52;\n\n        /**\n         * Code for the 5 key.\n         * @property KEY_NUM_5\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_5 = 53;\n\n        /**\n         * Code for the 6 key.\n         * @property KEY_NUM_6\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_6 = 54;\n\n        /**\n         * Code for the 7 key.\n         * @property KEY_NUM_7\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_7 = 55;\n\n        /**\n         * Code for the 8 key.\n         * @property KEY_NUM_8\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_8 = 56;\n\n        /**\n         * Code for the 9 key.\n         * @property KEY_NUM_9\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_9 = 57;\n\n        /**\n         * Code for the A key.\n         * @property KEY_A\n         * @final\n         * @type {Number}\n         */\n        this.KEY_A = 65;\n\n        /**\n         * Code for the B key.\n         * @property KEY_B\n         * @final\n         * @type {Number}\n         */\n        this.KEY_B = 66;\n\n        /**\n         * Code for the C key.\n         * @property KEY_C\n         * @final\n         * @type {Number}\n         */\n        this.KEY_C = 67;\n\n        /**\n         * Code for the D key.\n         * @property KEY_D\n         * @final\n         * @type {Number}\n         */\n        this.KEY_D = 68;\n\n        /**\n         * Code for the E key.\n         * @property KEY_E\n         * @final\n         * @type {Number}\n         */\n        this.KEY_E = 69;\n\n        /**\n         * Code for the F key.\n         * @property KEY_F\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F = 70;\n\n        /**\n         * Code for the G key.\n         * @property KEY_G\n         * @final\n         * @type {Number}\n         */\n        this.KEY_G = 71;\n\n        /**\n         * Code for the H key.\n         * @property KEY_H\n         * @final\n         * @type {Number}\n         */\n        this.KEY_H = 72;\n\n        /**\n         * Code for the I key.\n         * @property KEY_I\n         * @final\n         * @type {Number}\n         */\n        this.KEY_I = 73;\n\n        /**\n         * Code for the J key.\n         * @property KEY_J\n         * @final\n         * @type {Number}\n         */\n        this.KEY_J = 74;\n\n        /**\n         * Code for the K key.\n         * @property KEY_K\n         * @final\n         * @type {Number}\n         */\n        this.KEY_K = 75;\n\n        /**\n         * Code for the L key.\n         * @property KEY_L\n         * @final\n         * @type {Number}\n         */\n        this.KEY_L = 76;\n\n        /**\n         * Code for the M key.\n         * @property KEY_M\n         * @final\n         * @type {Number}\n         */\n        this.KEY_M = 77;\n\n        /**\n         * Code for the N key.\n         * @property KEY_N\n         * @final\n         * @type {Number}\n         */\n        this.KEY_N = 78;\n\n        /**\n         * Code for the O key.\n         * @property KEY_O\n         * @final\n         * @type {Number}\n         */\n        this.KEY_O = 79;\n\n        /**\n         * Code for the P key.\n         * @property KEY_P\n         * @final\n         * @type {Number}\n         */\n        this.KEY_P = 80;\n\n        /**\n         * Code for the Q key.\n         * @property KEY_Q\n         * @final\n         * @type {Number}\n         */\n        this.KEY_Q = 81;\n\n        /**\n         * Code for the R key.\n         * @property KEY_R\n         * @final\n         * @type {Number}\n         */\n        this.KEY_R = 82;\n\n        /**\n         * Code for the S key.\n         * @property KEY_S\n         * @final\n         * @type {Number}\n         */\n        this.KEY_S = 83;\n\n        /**\n         * Code for the T key.\n         * @property KEY_T\n         * @final\n         * @type {Number}\n         */\n        this.KEY_T = 84;\n\n        /**\n         * Code for the U key.\n         * @property KEY_U\n         * @final\n         * @type {Number}\n         */\n        this.KEY_U = 85;\n\n        /**\n         * Code for the V key.\n         * @property KEY_V\n         * @final\n         * @type {Number}\n         */\n        this.KEY_V = 86;\n\n        /**\n         * Code for the W key.\n         * @property KEY_W\n         * @final\n         * @type {Number}\n         */\n        this.KEY_W = 87;\n\n        /**\n         * Code for the X key.\n         * @property KEY_X\n         * @final\n         * @type {Number}\n         */\n        this.KEY_X = 88;\n\n        /**\n         * Code for the Y key.\n         * @property KEY_Y\n         * @final\n         * @type {Number}\n         */\n        this.KEY_Y = 89;\n\n        /**\n         * Code for the Z key.\n         * @property KEY_Z\n         * @final\n         * @type {Number}\n         */\n        this.KEY_Z = 90;\n\n        /**\n         * Code for the LEFT_WINDOW key.\n         * @property KEY_LEFT_WINDOW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_LEFT_WINDOW = 91;\n\n        /**\n         * Code for the RIGHT_WINDOW key.\n         * @property KEY_RIGHT_WINDOW\n         * @final\n         * @type {Number}\n         */\n        this.KEY_RIGHT_WINDOW = 92;\n\n        /**\n         * Code for the SELECT key.\n         * @property KEY_SELECT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SELECT_KEY = 93;\n\n        /**\n         * Code for the number pad 0 key.\n         * @property KEY_NUMPAD_0\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_0 = 96;\n\n        /**\n         * Code for the number pad 1 key.\n         * @property KEY_NUMPAD_1\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_1 = 97;\n\n        /**\n         * Code for the number pad 2 key.\n         * @property KEY_NUMPAD 2\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_2 = 98;\n\n        /**\n         * Code for the number pad 3 key.\n         * @property KEY_NUMPAD_3\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_3 = 99;\n\n        /**\n         * Code for the number pad 4 key.\n         * @property KEY_NUMPAD_4\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_4 = 100;\n\n        /**\n         * Code for the number pad 5 key.\n         * @property KEY_NUMPAD_5\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_5 = 101;\n\n        /**\n         * Code for the number pad 6 key.\n         * @property KEY_NUMPAD_6\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_6 = 102;\n\n        /**\n         * Code for the number pad 7 key.\n         * @property KEY_NUMPAD_7\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_7 = 103;\n\n        /**\n         * Code for the number pad 8 key.\n         * @property KEY_NUMPAD_8\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_8 = 104;\n\n        /**\n         * Code for the number pad 9 key.\n         * @property KEY_NUMPAD_9\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUMPAD_9 = 105;\n\n        /**\n         * Code for the MULTIPLY key.\n         * @property KEY_MULTIPLY\n         * @final\n         * @type {Number}\n         */\n        this.KEY_MULTIPLY = 106;\n\n        /**\n         * Code for the ADD key.\n         * @property KEY_ADD\n         * @final\n         * @type {Number}\n         */\n        this.KEY_ADD = 107;\n\n        /**\n         * Code for the SUBTRACT key.\n         * @property KEY_SUBTRACT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SUBTRACT = 109;\n\n        /**\n         * Code for the DECIMAL POINT key.\n         * @property KEY_DECIMAL_POINT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_DECIMAL_POINT = 110;\n\n        /**\n         * Code for the DIVIDE key.\n         * @property KEY_DIVIDE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_DIVIDE = 111;\n\n        /**\n         * Code for the F1 key.\n         * @property KEY_F1\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F1 = 112;\n\n        /**\n         * Code for the F2 key.\n         * @property KEY_F2\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F2 = 113;\n\n        /**\n         * Code for the F3 key.\n         * @property KEY_F3\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F3 = 114;\n\n        /**\n         * Code for the F4 key.\n         * @property KEY_F4\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F4 = 115;\n\n        /**\n         * Code for the F5 key.\n         * @property KEY_F5\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F5 = 116;\n\n        /**\n         * Code for the F6 key.\n         * @property KEY_F6\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F6 = 117;\n\n        /**\n         * Code for the F7 key.\n         * @property KEY_F7\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F7 = 118;\n\n        /**\n         * Code for the F8 key.\n         * @property KEY_F8\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F8 = 119;\n\n        /**\n         * Code for the F9 key.\n         * @property KEY_F9\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F9 = 120;\n\n        /**\n         * Code for the F10 key.\n         * @property KEY_F10\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F10 = 121;\n\n        /**\n         * Code for the F11 key.\n         * @property KEY_F11\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F11 = 122;\n\n        /**\n         * Code for the F12 key.\n         * @property KEY_F12\n         * @final\n         * @type {Number}\n         */\n        this.KEY_F12 = 123;\n\n        /**\n         * Code for the NUM_LOCK key.\n         * @property KEY_NUM_LOCK\n         * @final\n         * @type {Number}\n         */\n        this.KEY_NUM_LOCK = 144;\n\n        /**\n         * Code for the SCROLL_LOCK key.\n         * @property KEY_SCROLL_LOCK\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SCROLL_LOCK = 145;\n\n        /**\n         * Code for the SEMI_COLON key.\n         * @property KEY_SEMI_COLON\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SEMI_COLON = 186;\n\n        /**\n         * Code for the EQUAL_SIGN key.\n         * @property KEY_EQUAL_SIGN\n         * @final\n         * @type {Number}\n         */\n        this.KEY_EQUAL_SIGN = 187;\n\n        /**\n         * Code for the COMMA key.\n         * @property KEY_COMMA\n         * @final\n         * @type {Number}\n         */\n        this.KEY_COMMA = 188;\n\n        /**\n         * Code for the DASH key.\n         * @property KEY_DASH\n         * @final\n         * @type {Number}\n         */\n        this.KEY_DASH = 189;\n\n        /**\n         * Code for the PERIOD key.\n         * @property KEY_PERIOD\n         * @final\n         * @type {Number}\n         */\n        this.KEY_PERIOD = 190;\n\n        /**\n         * Code for the FORWARD_SLASH key.\n         * @property KEY_FORWARD_SLASH\n         * @final\n         * @type {Number}\n         */\n        this.KEY_FORWARD_SLASH = 191;\n\n        /**\n         * Code for the GRAVE_ACCENT key.\n         * @property KEY_GRAVE_ACCENT\n         * @final\n         * @type {Number}\n         */\n        this.KEY_GRAVE_ACCENT = 192;\n\n        /**\n         * Code for the OPEN_BRACKET key.\n         * @property KEY_OPEN_BRACKET\n         * @final\n         * @type {Number}\n         */\n        this.KEY_OPEN_BRACKET = 219;\n\n        /**\n         * Code for the BACK_SLASH key.\n         * @property KEY_BACK_SLASH\n         * @final\n         * @type {Number}\n         */\n        this.KEY_BACK_SLASH = 220;\n\n        /**\n         * Code for the CLOSE_BRACKET key.\n         * @property KEY_CLOSE_BRACKET\n         * @final\n         * @type {Number}\n         */\n        this.KEY_CLOSE_BRACKET = 221;\n\n        /**\n         * Code for the SINGLE_QUOTE key.\n         * @property KEY_SINGLE_QUOTE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SINGLE_QUOTE = 222;\n\n        /**\n         * Code for the SPACE key.\n         * @property KEY_SPACE\n         * @final\n         * @type {Number}\n         */\n        this.KEY_SPACE = 32;\n\n        /**\n         * The canvas element that mouse and keyboards are bound to.\n         *\n         * @final\n         * @type {HTMLCanvasElement}\n         */\n        this.element = cfg.element;\n\n        /** True whenever ALT key is down.\n         *\n         * @type {boolean}\n         */\n        this.altDown = false;\n\n        /** True whenever CTRL key is down.\n         *\n         * @type {boolean}\n         */\n        this.ctrlDown = false;\n\n        /** True whenever left mouse button is down.\n         *\n         * @type {boolean}\n         */\n        this.mouseDownLeft = false;\n\n        /**\n         * True whenever middle mouse button is down.\n         *\n         * @type {boolean}\n         */\n        this.mouseDownMiddle = false;\n\n        /**\n         * True whenever the right mouse button is down.\n         *\n         * @type {boolean}\n         */\n        this.mouseDownRight = false;\n\n        /**\n         * Flag for each key that's down.\n         *\n         * @type {boolean[]}\n         */\n        this.keyDown = [];\n\n        /** True while input enabled\n         *\n         * @type {boolean}\n         */\n        this.enabled = true;\n\n        /** True while keyboard input is enabled.\n         *\n         * Default value is ````true````.\n         *\n         * {@link CameraControl} will not respond to keyboard events while this is ````false````.\n         *\n         * @type {boolean}\n         */\n        this.keyboardEnabled = true;\n\n        /** True while the mouse is over the canvas.\n         *\n         * @type {boolean}\n         */\n        this.mouseover = false;\n\n        /**\n         * Current mouse position within the canvas.\n         * @type {Number[]}\n         */\n        this.mouseCanvasPos = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec2();\n\n        this._bindEvents();\n    }\n\n    _bindEvents() {\n\n        if (this._eventsBound) {\n            return;\n        }\n\n        document.addEventListener(\"keydown\", this._keyDownListener = (e) => {\n            if (!this.enabled || (!this.keyboardEnabled)) {\n                return;\n            }\n            if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n                if (e.keyCode === this.KEY_CTRL) {\n                    this.ctrlDown = true;\n                } else if (e.keyCode === this.KEY_ALT) {\n                    this.altDown = true;\n                } else if (e.keyCode === this.KEY_SHIFT) {\n                    this.shiftDown = true;\n                }\n                this.keyDown[e.keyCode] = true;\n                this.fire(\"keydown\", e.keyCode, true);\n            }\n        }, false);\n\n        document.addEventListener(\"keyup\", this._keyUpListener = (e) => {\n            if (!this.enabled || (!this.keyboardEnabled)) {\n                return;\n            }\n            if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n                if (e.keyCode === this.KEY_CTRL) {\n                    this.ctrlDown = false;\n                } else if (e.keyCode === this.KEY_ALT) {\n                    this.altDown = false;\n                } else if (e.keyCode === this.KEY_SHIFT) {\n                    this.shiftDown = false;\n                }\n                this.keyDown[e.keyCode] = false;\n                this.fire(\"keyup\", e.keyCode, true);\n            }\n        });\n\n        this.element.addEventListener(\"mouseenter\", this._mouseEnterListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            this.mouseover = true;\n            this._getMouseCanvasPos(e);\n            this.fire(\"mouseenter\", this.mouseCanvasPos, true);\n        });\n\n        this.element.addEventListener(\"mouseleave\", this._mouseLeaveListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            this.mouseover = false;\n            this._getMouseCanvasPos(e);\n            this.fire(\"mouseleave\", this.mouseCanvasPos, true);\n        });\n\n        this.element.addEventListener(\"mousedown\", this._mouseDownListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            switch (e.which) {\n                case 1:// Left button\n                    this.mouseDownLeft = true;\n                    break;\n                case 2:// Middle/both buttons\n                    this.mouseDownMiddle = true;\n                    break;\n                case 3:// Right button\n                    this.mouseDownRight = true;\n                    break;\n                default:\n                    break;\n            }\n            this._getMouseCanvasPos(e);\n            this.element.focus();\n            this.fire(\"mousedown\", this.mouseCanvasPos, true);\n            if (this.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        document.addEventListener(\"mouseup\", this._mouseUpListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            switch (e.which) {\n                case 1:// Left button\n                    this.mouseDownLeft = false;\n                    break;\n                case 2:// Middle/both buttons\n                    this.mouseDownMiddle = false;\n                    break;\n                case 3:// Right button\n                    this.mouseDownRight = false;\n                    break;\n                default:\n                    break;\n            }\n            this.fire(\"mouseup\", this.mouseCanvasPos, true);\n            // if (this.mouseover) {\n            //     e.preventDefault();\n            // }\n        }, true);\n\n        document.addEventListener(\"click\", this._clickListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            switch (e.which) {\n                case 1:// Left button\n                    this.mouseDownLeft = false;\n                    this.mouseDownRight = false;\n                    break;\n                case 2:// Middle/both buttons\n                    this.mouseDownMiddle = false;\n                    break;\n                case 3:// Right button\n                    this.mouseDownLeft = false;\n                    this.mouseDownRight = false;\n                    break;\n                default:\n                    break;\n            }\n            this._getMouseCanvasPos(e);\n            this.fire(\"click\", this.mouseCanvasPos, true);\n            if (this.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        document.addEventListener(\"dblclick\", this._dblClickListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            switch (e.which) {\n                case 1:// Left button\n                    this.mouseDownLeft = false;\n                    this.mouseDownRight = false;\n                    break;\n                case 2:// Middle/both buttons\n                    this.mouseDownMiddle = false;\n                    break;\n                case 3:// Right button\n                    this.mouseDownLeft = false;\n                    this.mouseDownRight = false;\n                    break;\n                default:\n                    break;\n            }\n            this._getMouseCanvasPos(e);\n            this.fire(\"dblclick\", this.mouseCanvasPos, true);\n            if (this.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        this.element.addEventListener(\"mousemove\", this._mouseMoveListener = (e) => {\n            if (!this.enabled) {\n                return;\n            }\n            this._getMouseCanvasPos(e);\n            this.fire(\"mousemove\", this.mouseCanvasPos, true);\n            if (this.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        this.element.addEventListener(\"wheel\", this._mouseWheelListener = (e, d) => {\n            if (!this.enabled) {\n                return;\n            }\n            const delta = Math.max(-1, Math.min(1, -e.deltaY * 40));\n            this.fire(\"mousewheel\", delta, true);\n        }, {passive: true});\n\n        // mouseclicked\n\n        {\n            let downX;\n            let downY;\n            // Tolerance between down and up positions for a mouse click\n            const tolerance = 2;\n            this.on(\"mousedown\", (params) => {\n                downX = params[0];\n                downY = params[1];\n            });\n            this.on(\"mouseup\", (params) => {\n                if (downX >= (params[0] - tolerance) &&\n                    downX <= (params[0] + tolerance) &&\n                    downY >= (params[1] - tolerance) &&\n                    downY <= (params[1] + tolerance)) {\n                    this.fire(\"mouseclicked\", params, true);\n                }\n            });\n        }\n\n        // VR\n\n        {\n\n            const orientationAngleLookup = {\n                'landscape-primary': 90,\n                'landscape-secondary': -90,\n                'portrait-secondary': 180,\n                'portrait-primary': 0\n            };\n\n            let orientation;\n            let orientationAngle;\n            const acceleration = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n            const accelerationIncludingGravity = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3();\n\n            const orientationChangeEvent = {\n                orientation: null,\n                orientationAngle: 0\n            };\n\n            const deviceMotionEvent = {\n                orientationAngle: 0,\n                acceleration: null,\n                accelerationIncludingGravity: accelerationIncludingGravity,\n                rotationRate: _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3(),\n                interval: 0\n            };\n\n            const deviceOrientationEvent = {\n                alpha: 0,\n                beta: 0,\n                gamma: 0,\n                absolute: false\n            };\n\n            if (window.OrientationChangeEvent) {\n                window.addEventListener('orientationchange', this._orientationchangedListener = () => {\n\n                        orientation = window.screen.orientation || window.screen.mozOrientation || window.msOrientation || null;\n                        orientationAngle = orientation ? (orientationAngleLookup[orientation] || 0) : 0;\n\n                        orientationChangeEvent.orientation = orientation;\n                        orientationChangeEvent.orientationAngle = orientationAngle;\n\n                        /**\n                         * Fired when the orientation of the device has changed.\n                         *\n                         * @event orientationchange\n                         * @param orientation The orientation: \"landscape-primary\", \"landscape-secondary\", \"portrait-secondary\" or \"portrait-primary\"\n                         * @param orientationAngle The orientation angle in degrees: 90 for landscape-primary, -90 for landscape-secondary, 180 for portrait-secondary or 0 for portrait-primary.\n                         */\n                        this.fire(\"orientationchange\", orientationChangeEvent);\n                    },\n                    false);\n            }\n\n            if (window.DeviceMotionEvent) {\n                window.addEventListener('devicemotion', this._deviceMotionListener = (e) => {\n\n                        deviceMotionEvent.interval = e.interval;\n                        deviceMotionEvent.orientationAngle = orientationAngle;\n\n                        const accel = e.acceleration;\n\n                        if (accel) {\n                            acceleration[0] = accel.x;\n                            acceleration[1] = accel.y;\n                            acceleration[2] = accel.z;\n                            deviceMotionEvent.acceleration = acceleration;\n                        } else {\n                            deviceMotionEvent.acceleration = null;\n                        }\n\n                        const accelGrav = e.accelerationIncludingGravity;\n\n                        if (accelGrav) {\n                            accelerationIncludingGravity[0] = accelGrav.x;\n                            accelerationIncludingGravity[1] = accelGrav.y;\n                            accelerationIncludingGravity[2] = accelGrav.z;\n                            deviceMotionEvent.accelerationIncludingGravity = accelerationIncludingGravity;\n                        } else {\n                            deviceMotionEvent.accelerationIncludingGravity = null;\n                        }\n\n                        deviceMotionEvent.rotationRate = e.rotationRate;\n\n                        /**\n                         * Fires on a regular interval and returns data about the rotation\n                         * (in degrees per second) and acceleration (in meters per second squared) of the device, at that moment in\n                         * time. Some devices do not have the hardware to exclude the effect of gravity.\n                         *\n                         * @event devicemotion\n                         * @param Float32Array acceleration The acceleration of the device, in meters per second squared, as a 3-element vector. This value has taken into account the effect of gravity and removed it from the figures. This value may not exist if the hardware doesn't know how to remove gravity from the acceleration data.\n                         * @param Float32Array accelerationIncludingGravity The acceleration of the device, in meters per second squared, as a 3-element vector. This value includes the effect of gravity, and may be the only value available on devices that don't have a gyroscope to allow them to properly remove gravity from the data.\n                         * @param, Number interval The interval, in milliseconds, at which this event is fired. The next event will be fired in approximately this amount of time.\n                         * @param  Float32Array rotationRate The rates of rotation of the device about each axis, in degrees per second.\n                         */\n                        this.fire(\"devicemotion\", deviceMotionEvent);\n                    },\n                    false);\n            }\n\n            if (window.DeviceOrientationEvent) {\n                window.addEventListener(\"deviceorientation\", this._deviceOrientListener = (e) => {\n\n                        deviceOrientationEvent.gamma = e.gamma;\n                        deviceOrientationEvent.beta = e.beta;\n                        deviceOrientationEvent.alpha = e.alpha;\n                        deviceOrientationEvent.absolute = e.absolute;\n\n                        /**\n                         * Fired when fresh data is available from an orientation sensor about the current orientation\n                         * of the device as compared to the Earth coordinate frame. This data is gathered from a\n                         * magnetometer inside the device. See\n                         * <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Orientation_and_motion_data_explained\">Orientation and motion data explained</a> for more info.\n                         *\n                         * @event deviceorientation\n                         * @param Number alpha The current orientation of the device around the Z axis in degrees; that is, how far the device is rotated around a line perpendicular to the device.\n                         * @param Number beta The current orientation of the device around the X axis in degrees; that is, how far the device is tipped forward or backward.\n                         * @param Number gamma The current orientation of the device around the Y axis in degrees; that is, how far the device is turned left or right.\n                         * @param Boolean absolute This value is true if the orientation is provided as a difference between the device coordinate frame and the Earth coordinate frame; if the device can't detect the Earth coordinate frame, this value is false.\n                         */\n                        this.fire(\"deviceorientation\", deviceOrientationEvent);\n                    },\n                    false);\n            }\n        }\n        this._eventsBound = true;\n    }\n\n    _unbindEvents() {\n        if (!this._eventsBound) {\n            return;\n        }\n        document.removeEventListener(\"keydown\", this._keyDownListener);\n        document.removeEventListener(\"keyup\", this._keyUpListener);\n        this.element.removeEventListener(\"mouseenter\", this._mouseEnterListener);\n        this.element.removeEventListener(\"mouseleave\", this._mouseLeaveListener);\n        this.element.removeEventListener(\"mousedown\", this._mouseDownListener);\n        document.removeEventListener(\"mouseup\", this._mouseDownListener);\n        document.removeEventListener(\"click\", this._clickListener);\n        document.removeEventListener(\"dblclick\", this._dblClickListener);\n        this.element.removeEventListener(\"mousemove\", this._mouseMoveListener);\n        this.element.removeEventListener(\"wheel\", this._mouseWheelListener);\n        if (window.OrientationChangeEvent) {\n            window.removeEventListener('orientationchange', this._orientationchangedListener);\n        }\n        if (window.DeviceMotionEvent) {\n            window.removeEventListener('devicemotion', this._deviceMotionListener);\n        }\n        if (window.DeviceOrientationEvent) {\n            window.removeEventListener(\"deviceorientation\", this._deviceOrientListener);\n        }\n        this._eventsBound = false;\n    }\n\n    _getMouseCanvasPos(event) {\n        if (!event) {\n            event = window.event;\n            this.mouseCanvasPos[0] = event.x;\n            this.mouseCanvasPos[1] = event.y;\n        } else {\n            let element = event.target;\n            let totalOffsetLeft = 0;\n            let totalOffsetTop = 0;\n            while (element.offsetParent) {\n                totalOffsetLeft += element.offsetLeft;\n                totalOffsetTop += element.offsetTop;\n                element = element.offsetParent;\n            }\n            this.mouseCanvasPos[0] = event.pageX - totalOffsetLeft;\n            this.mouseCanvasPos[1] = event.pageY - totalOffsetTop;\n        }\n    }\n\n    /**\n     * Sets whether input handlers are enabled.\n     *\n     * Default value is ````true````.\n     *\n     * @param {Boolean} enable Indicates if input handlers are enabled.\n     */\n    setEnabled(enable) {\n        if (this.enabled !== enable) {\n            this.fire(\"enabled\", this.enabled = enable);\n        }\n    }\n\n    /**\n     * Gets whether input handlers are enabled.\n     *\n     * Default value is ````true````.\n     *\n     * @returns {Boolean} Indicates if input handlers are enabled.\n     */\n    getEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Sets whether or not keyboard input is enabled.\n     *\n     * Default value is ````true````.\n     *\n     * {@link CameraControl} will not respond to keyboard events while this is set ````false````.\n     *\n     * @param {Boolean} value Indicates whether keyboard input is enabled.\n     */\n    setKeyboardEnabled(value) {\n        this.keyboardEnabled = value;\n    }\n\n    /**\n     * Gets whether keyboard input is enabled.\n     *\n     * Default value is ````true````.\n     *\n     * {@link CameraControl} will not respond to keyboard events while this is set ````false````.\n     *\n     * @returns {Boolean} Returns whether keyboard input is enabled.\n     */\n    getKeyboardEnabled() {\n        return this.keyboardEnabled;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n        this._unbindEvents();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2lucHV0L0lucHV0LmpzP2MyNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMEM7QUFDTDs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdURBQVM7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjs7QUFFL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsOEJBQThCLGtEQUFJOztBQUVsQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxHQUFHLGNBQWM7O0FBRTFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsa0RBQUk7QUFDckMsaURBQWlELGtEQUFJOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrREFBSTtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtIQUFrSDtBQUNsSCxpSEFBaUg7QUFDakgsa0hBQWtIO0FBQ2xILHdMQUF3TDtBQUN4TDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9CQUFvQjtBQUM1QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvQkFBb0I7QUFDNUI7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2lucHV0L0lucHV0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJy4uL0NvbXBvbmVudC5qcyc7XG5pbXBvcnQge21hdGh9IGZyb20gJy4uL21hdGgvbWF0aC5qcyc7XG5cbi8qKlxuICogQGRlc2MgTWVkaXRhdGVzIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgZXZlbnRzIGZvciB2YXJpb3VzIGludGVyYWN0aW9uIGNvbnRyb2xzLlxuICpcbiAqIE9yZGluYXJpbHksIHlvdSB3b3VsZCBvbmx5IHVzZSB0aGlzIGNvbXBvbmVudCBhcyBhIHV0aWxpdHkgdG8gaGVscCBtYW5hZ2UgaW5wdXQgZXZlbnRzIGFuZCBzdGF0ZSBmb3IgeW91clxuICogb3duIGN1c3RvbSBpbnB1dCBoYW5kbGVycy5cbiAqXG4gKiAqIExvY2F0ZWQgYXQge0BsaW5rIFNjZW5lI2lucHV0fVxuICogKiBVc2VkIGJ5IChhdCBsZWFzdCkge0BsaW5rIENhbWVyYUNvbnRyb2x9XG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiBTdWJzY3JpYmluZyB0byBtb3VzZSBldmVudHMgb24gdGhlIGNhbnZhczpcbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHtWaWV3ZXJ9IGZyb20gXCIuLi9zcmMvdmlld2VyL1ZpZXdlci5qc1wiO1xuICpcbiAqIGNvbnN0IHZpZXdlciA9IG5ldyBWaWV3ZXIoe1xuICogICAgICBjYW52YXNJZDogXCJteUNhbnZhc1wiXG4gKiB9KTtcbiAqXG4gKiBjb25zdCBpbnB1dCA9IHZpZXdlci5zY2VuZS5pbnB1dDtcbiAqXG4gKiBjb25zdCBvbk1vdXNlRG93biA9IGlucHV0Lm9uKFwibW91c2Vkb3duXCIsIChjYW52YXNDb29yZHMpID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiTW91c2UgZG93biBhdDogeD1cIiArIGNhbnZhc0Nvb3Jkc1swXSArIFwiLCB5PVwiICsgY29vcmRzWzFdKTtcbiAqIH0pO1xuICpcbiAqIGNvbnN0IG9uTW91c2VVcCA9IGlucHV0Lm9uKFwibW91c2V1cFwiLCAoY2FudmFzQ29vcmRzKSA9PiB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhcIk1vdXNlIHVwIGF0OiB4PVwiICsgY2FudmFzQ29vcmRzWzBdICsgXCIsIHk9XCIgKyBjYW52YXNDb29yZHNbMV0pO1xuICogfSk7XG4gKlxuICogY29uc3Qgb25Nb3VzZUNsaWNrZWQgPSBpbnB1dC5vbihcIm1vdXNlY2xpY2tlZFwiLCAoY2FudmFzQ29vcmRzKSA9PiB7XG4gKiAgICAgIGNvbnNvbGUubG9nKFwiTW91c2UgY2xpY2tlZCBhdDogeD1cIiArIGNhbnZhc0Nvb3Jkc1swXSArIFwiLCB5PVwiICsgY2FudmFzQ29vcmRzWzFdKTtcbiAqIH0pO1xuICpcbiAqIGNvbnN0IG9uRGJsQ2xpY2sgPSBpbnB1dC5vbihcImRibGNsaWNrXCIsIChjYW52YXNDb29yZHMpID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiRG91YmxlLWNsaWNrIGF0OiB4PVwiICsgY2FudmFzQ29vcmRzWzBdICsgXCIsIHk9XCIgKyBjYW52YXNDb29yZHNbMV0pO1xuICogfSk7XG4gKiBgYGBgXG4gKlxuICogU3Vic2NyaWJpbmcgdG8ga2V5Ym9hcmQgZXZlbnRzIG9uIHRoZSBjYW52YXM6XG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IG9uS2V5RG93biA9IGlucHV0Lm9uKFwia2V5ZG93blwiLCAoa2V5Q29kZSkgPT4ge1xuICogICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAqICAgICAgICAgIGNhc2UgdGhpcy5LRVlfQTpcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSAnQScga2V5IGlzIGRvd25cIik7XG4gKiAgICAgICAgICAgICAgYnJlYWs7XG4gKlxuICogICAgICAgICAgY2FzZSB0aGlzLktFWV9COlxuICogICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhlICdCJyBrZXkgaXMgZG93blwiKTtcbiAqICAgICAgICAgICAgICBicmVhaztcbiAqXG4gKiAgICAgICAgICBjYXNlIHRoaXMuS0VZX0M6XG4gKiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaGUgJ0MnIGtleSBpcyBkb3duXCIpO1xuICogICAgICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgIGRlZmF1bHQ6XG4gKiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21lIG90aGVyIGtleSBpcyBkb3duXCIpO1xuICogICAgICB9XG4gKiB9KTtcbiAqXG4gKiBjb25zdCBvbktleVVwID0gaW5wdXQub24oXCJrZXl1cFwiLCAoa2V5Q29kZSkgPT4ge1xuICogICAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAqICAgICAgICAgIGNhc2UgdGhpcy5LRVlfQTpcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSAnQScga2V5IGlzIHVwXCIpO1xuICogICAgICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgIGNhc2UgdGhpcy5LRVlfQjpcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSAnQicga2V5IGlzIHVwXCIpO1xuICogICAgICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgIGNhc2UgdGhpcy5LRVlfQzpcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSAnQycga2V5IGlzIHVwXCIpO1xuICogICAgICAgICAgICAgIGJyZWFrO1xuICpcbiAqICAgICAgICAgIGRlZmF1bHQ6XG4gKiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21lIG90aGVyIGtleSBpcyB1cFwiKTtcbiAqICAgICAgfVxuICogIH0pO1xuICogYGBgYFxuICpcbiAqIENoZWNraW5nIGlmIGtleXMgYXJlIGRvd246XG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IGlzQ3RybERvd24gPSBpbnB1dC5jdHJsRG93bjtcbiAqIGNvbnN0IGlzQWx0RG93biA9IGlucHV0LmFsdERvd247XG4gKiBjb25zdCBzaGlmdERvd24gPSBpbnB1dC5zaGlmdERvd247XG4gKiAvLy4uLlxuICpcbiAqIGNvbnN0IGlzQUtleURvd24gPSBpbnB1dC5rZXlEb3duW2lucHV0LktFWV9BXTtcbiAqIGNvbnN0IGlzQktleURvd24gPSBpbnB1dC5rZXlEb3duW2lucHV0LktFWV9CXTtcbiAqIGNvbnN0IGlzU2hpZnRLZXlEb3duID0gaW5wdXQua2V5RG93bltpbnB1dC5LRVlfU0hJRlRdO1xuICogLy8uLi5cbiAqXG4gKiBgYGBgXG4gKiBVbnN1YnNjcmliaW5nIGZyb20gZXZlbnRzOlxuICpcbiAqIGBgYGBqYXZhc2NyaXB0XG4gKiBpbnB1dC5vZmYob25Nb3VzZURvd24pO1xuICogaW5wdXQub2ZmKG9uTW91c2VVcCk7XG4gKiAvLy4uLlxuICogYGBgYFxuICpcbiAqICMjIERpc2FibGluZyBhbGwgZXZlbnRzXG4gKlxuICogRXZlbnQgaGFuZGxpbmcgaXMgZW5hYmxlZCBieSBkZWZhdWx0LlxuICpcbiAqIFRvIGRpc2FibGUgYWxsIGV2ZW50czpcbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogbXlWaWV3ZXIuc2NlbmUuaW5wdXQuc2V0RW5hYmxlZChmYWxzZSk7XG4gKiBgYGBgXG4gKiBUbyBlbmFibGUgYWxsIGV2ZW50cyBhZ2FpbjpcbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogbXlWaWV3ZXIuc2NlbmUuaW5wdXQuc2V0RW5hYmxlZCh0cnVlKTtcbiAqIGBgYGBcbiAqXG4gKiAjIyBEaXNhYmxpbmcga2V5Ym9hcmQgaW5wdXRcbiAqXG4gKiBXaGVuIHRoZSBtb3VzZSBpcyBvdmVyIHRoZSBjYW52YXMsIHRoZSBjYW52YXMgd2lsbCBjb25zdW1lIGtleWJvYXJkIGV2ZW50cy4gVGhlcmVmb3JlLCBzb21ldGltZXMgd2UgbmVlZFxuICogdG8gZGlzYWJsZSBrZXlib2FyZCBjb250cm9sLCBzbyB0aGF0IG90aGVyIFVJIGVsZW1lbnRzIGNhbiBnZXQgdGhvc2UgZXZlbnRzLlxuICpcbiAqIFRvIGRpc2FibGUga2V5Ym9hcmQgZXZlbnRzOlxuICpcbiAqIGBgYGBqYXZhc2NyaXB0XG4gKiBteVZpZXdlci5zY2VuZS5pbnB1dC5zZXRLZXlib2FyZEVuYWJsZWQoZmFsc2UpO1xuICogYGBgYFxuICpcbiAqIFRvIGVuYWJsZSBrZXlib2FyZCBldmVudHMgYWdhaW46XG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIG15Vmlld2VyLnNjZW5lLmlucHV0LnNldEtleWJvYXJkRW5hYmxlZCh0cnVlKVxuICogYGBgYFxuICovXG5jbGFzcyBJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBjZmcgPSB7fSkge1xuXG4gICAgICAgIHN1cGVyKG93bmVyLCBjZmcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgQkFDS1NQQUNFIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9CQUNLU1BBQ0VcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9CQUNLU1BBQ0UgPSA4O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgVEFCIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9UQUJcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9UQUIgPSA5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRU5URVIga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0VOVEVSXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRU5URVIgPSAxMztcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFNISUZUIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9TSElGVFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1NISUZUID0gMTY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBDVFJMIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9DVFJMXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfQ1RSTCA9IDE3O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgQUxUIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9BTFRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9BTFQgPSAxODtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFBBVVNFX0JSRUFLIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9QQVVTRV9CUkVBS1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1BBVVNFX0JSRUFLID0gMTk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBDQVBTX0xPQ0sga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0NBUFNfTE9DS1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0NBUFNfTE9DSyA9IDIwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRVNDQVBFIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9FU0NBUEVcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9FU0NBUEUgPSAyNztcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFBBR0VfVVAga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1BBR0VfVVBcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9QQUdFX1VQID0gMzM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBQQUdFX0RPV04ga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1BBR0VfRE9XTlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1BBR0VfRE9XTiA9IDM0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRU5EIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9FTkRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9FTkQgPSAzNTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEhPTUUga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0hPTUVcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9IT01FID0gMzY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBMRUZUX0FSUk9XIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9MRUZUX0FSUk9XXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfTEVGVF9BUlJPVyA9IDM3O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgVVBfQVJST1cga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1VQX0FSUk9XXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfVVBfQVJST1cgPSAzODtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFJJR0hUX0FSUk9XIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9SSUdIVF9BUlJPV1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1JJR0hUX0FSUk9XID0gMzk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBET1dOX0FSUk9XIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9ET1dOX0FSUk9XXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRE9XTl9BUlJPVyA9IDQwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgSU5TRVJUIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9JTlNFUlRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9JTlNFUlQgPSA0NTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIERFTEVURSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfREVMRVRFXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfREVMRVRFID0gNDY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSAwIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fMFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV8wID0gNDg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSAxIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fMVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV8xID0gNDk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSAyIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fMlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV8yID0gNTA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSAzIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fM1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV8zID0gNTE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA0IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fNFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV80ID0gNTI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA1IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fNVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV81ID0gNTM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA2IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fNlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV82ID0gNTQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA3IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fN1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV83ID0gNTU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA4IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fOFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV84ID0gNTY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSA5IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1fOVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTV85ID0gNTc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBBIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9BXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfQSA9IDY1O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgQiBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfQlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0IgPSA2NjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEMga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0NcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9DID0gNjc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBEIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9EXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRCA9IDY4O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfRVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0UgPSA2OTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEYga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0ZcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GID0gNzA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBHIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9HXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRyA9IDcxO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgSCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfSFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0ggPSA3MjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEkga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0lcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9JID0gNzM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBKIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9KXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfSiA9IDc0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgSyBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfS1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0sgPSA3NTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEwga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0xcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9MID0gNzY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBNIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9NXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfTSA9IDc3O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgTiBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX04gPSA3ODtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIE8ga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX09cbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9PID0gNzk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBQIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9QXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfUCA9IDgwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgUSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfUVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1EgPSA4MTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFIga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1JcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9SID0gODI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBTIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9TXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfUyA9IDgzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgVCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfVFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1QgPSA4NDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFUga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1VcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9VID0gODU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBWIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9WXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfViA9IDg2O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgVyBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfV1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1cgPSA4NztcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFgga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1hcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9YID0gODg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBZIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9ZXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfWSA9IDg5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgWiBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfWlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1ogPSA5MDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIExFRlRfV0lORE9XIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9MRUZUX1dJTkRPV1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0xFRlRfV0lORE9XID0gOTE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBSSUdIVF9XSU5ET1cga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1JJR0hUX1dJTkRPV1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1JJR0hUX1dJTkRPVyA9IDkyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgU0VMRUNUIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9TRUxFQ1RcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9TRUxFQ1RfS0VZID0gOTM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBudW1iZXIgcGFkIDAga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX05VTVBBRF8wXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfTlVNUEFEXzAgPSA5NjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgMSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzFcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfMSA9IDk3O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgbnVtYmVyIHBhZCAyIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9OVU1QQUQgMlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX05VTVBBRF8yID0gOTg7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBudW1iZXIgcGFkIDMga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX05VTVBBRF8zXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfTlVNUEFEXzMgPSA5OTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgNCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfNCA9IDEwMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgNSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzVcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfNSA9IDEwMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgNiBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzZcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfNiA9IDEwMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgNyBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzdcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfNyA9IDEwMztcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgOCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzhcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfOCA9IDEwNDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIG51bWJlciBwYWQgOSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNUEFEXzlcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1QQURfOSA9IDEwNTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIE1VTFRJUExZIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9NVUxUSVBMWVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX01VTFRJUExZID0gMTA2O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgQUREIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9BRERcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9BREQgPSAxMDc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBTVUJUUkFDVCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfU1VCVFJBQ1RcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9TVUJUUkFDVCA9IDEwOTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIERFQ0lNQUwgUE9JTlQga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0RFQ0lNQUxfUE9JTlRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9ERUNJTUFMX1BPSU5UID0gMTEwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRElWSURFIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9ESVZJREVcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9ESVZJREUgPSAxMTE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBGMSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfRjFcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GMSA9IDExMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEYyIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9GMlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0YyID0gMTEzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRjMga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0YzXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRjMgPSAxMTQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBGNCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfRjRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GNCA9IDExNTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEY1IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9GNVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0Y1ID0gMTE2O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRjYga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0Y2XG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRjYgPSAxMTc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBGNyBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfRjdcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GNyA9IDExODtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEY4IGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9GOFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0Y4ID0gMTE5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRjkga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0Y5XG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRjkgPSAxMjA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBGMTAga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0YxMFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0YxMCA9IDEyMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEYxMSBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfRjExXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRjExID0gMTIyO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgRjEyIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9GMTJcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GMTIgPSAxMjM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBOVU1fTE9DSyBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfTlVNX0xPQ0tcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9OVU1fTE9DSyA9IDE0NDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFNDUk9MTF9MT0NLIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9TQ1JPTExfTE9DS1xuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1NDUk9MTF9MT0NLID0gMTQ1O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgU0VNSV9DT0xPTiBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfU0VNSV9DT0xPTlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1NFTUlfQ09MT04gPSAxODY7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBFUVVBTF9TSUdOIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9FUVVBTF9TSUdOXG4gICAgICAgICAqIEBmaW5hbFxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5LRVlfRVFVQUxfU0lHTiA9IDE4NztcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIENPTU1BIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9DT01NQVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0NPTU1BID0gMTg4O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgREFTSCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfREFTSFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0RBU0ggPSAxODk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBQRVJJT0Qga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1BFUklPRFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1BFUklPRCA9IDE5MDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEZPUldBUkRfU0xBU0gga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0ZPUldBUkRfU0xBU0hcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9GT1JXQVJEX1NMQVNIID0gMTkxO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgR1JBVkVfQUNDRU5UIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9HUkFWRV9BQ0NFTlRcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9HUkFWRV9BQ0NFTlQgPSAxOTI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBPUEVOX0JSQUNLRVQga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX09QRU5fQlJBQ0tFVFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX09QRU5fQlJBQ0tFVCA9IDIxOTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIEJBQ0tfU0xBU0gga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX0JBQ0tfU0xBU0hcbiAgICAgICAgICogQGZpbmFsXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLktFWV9CQUNLX1NMQVNIID0gMjIwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2RlIGZvciB0aGUgQ0xPU0VfQlJBQ0tFVCBrZXkuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBLRVlfQ0xPU0VfQlJBQ0tFVFxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX0NMT1NFX0JSQUNLRVQgPSAyMjE7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvZGUgZm9yIHRoZSBTSU5HTEVfUVVPVEUga2V5LlxuICAgICAgICAgKiBAcHJvcGVydHkgS0VZX1NJTkdMRV9RVU9URVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1NJTkdMRV9RVU9URSA9IDIyMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29kZSBmb3IgdGhlIFNQQUNFIGtleS5cbiAgICAgICAgICogQHByb3BlcnR5IEtFWV9TUEFDRVxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge051bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuS0VZX1NQQUNFID0gMzI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjYW52YXMgZWxlbWVudCB0aGF0IG1vdXNlIGFuZCBrZXlib2FyZHMgYXJlIGJvdW5kIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZmluYWxcbiAgICAgICAgICogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gY2ZnLmVsZW1lbnQ7XG5cbiAgICAgICAgLyoqIFRydWUgd2hlbmV2ZXIgQUxUIGtleSBpcyBkb3duLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWx0RG93biA9IGZhbHNlO1xuXG4gICAgICAgIC8qKiBUcnVlIHdoZW5ldmVyIENUUkwga2V5IGlzIGRvd24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jdHJsRG93biA9IGZhbHNlO1xuXG4gICAgICAgIC8qKiBUcnVlIHdoZW5ldmVyIGxlZnQgbW91c2UgYnV0dG9uIGlzIGRvd24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3VzZURvd25MZWZ0ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgd2hlbmV2ZXIgbWlkZGxlIG1vdXNlIGJ1dHRvbiBpcyBkb3duLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW91c2VEb3duTWlkZGxlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRydWUgd2hlbmV2ZXIgdGhlIHJpZ2h0IG1vdXNlIGJ1dHRvbiBpcyBkb3duLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubW91c2VEb3duUmlnaHQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBmb3IgZWFjaCBrZXkgdGhhdCdzIGRvd24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFuW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleURvd24gPSBbXTtcblxuICAgICAgICAvKiogVHJ1ZSB3aGlsZSBpbnB1dCBlbmFibGVkXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICAvKiogVHJ1ZSB3aGlsZSBrZXlib2FyZCBpbnB1dCBpcyBlbmFibGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBgYGB0cnVlYGBgYC5cbiAgICAgICAgICpcbiAgICAgICAgICoge0BsaW5rIENhbWVyYUNvbnRyb2x9IHdpbGwgbm90IHJlc3BvbmQgdG8ga2V5Ym9hcmQgZXZlbnRzIHdoaWxlIHRoaXMgaXMgYGBgYGZhbHNlYGBgYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleWJvYXJkRW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgLyoqIFRydWUgd2hpbGUgdGhlIG1vdXNlIGlzIG92ZXIgdGhlIGNhbnZhcy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdXNlb3ZlciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW50IG1vdXNlIHBvc2l0aW9uIHdpdGhpbiB0aGUgY2FudmFzLlxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1vdXNlQ2FudmFzUG9zID0gbWF0aC52ZWMyKCk7XG5cbiAgICAgICAgdGhpcy5fYmluZEV2ZW50cygpO1xuICAgIH1cblxuICAgIF9iaW5kRXZlbnRzKCkge1xuXG4gICAgICAgIGlmICh0aGlzLl9ldmVudHNCb3VuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5fa2V5RG93bkxpc3RlbmVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lbmFibGVkIHx8ICghdGhpcy5rZXlib2FyZEVuYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiSU5QVVRcIiAmJiBlLnRhcmdldC50YWdOYW1lICE9PSBcIlRFWFRBUkVBXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSB0aGlzLktFWV9DVFJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3RybERvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSB0aGlzLktFWV9BTFQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHREb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gdGhpcy5LRVlfU0hJRlQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGlmdERvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmtleURvd25bZS5rZXlDb2RlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwia2V5ZG93blwiLCBlLmtleUNvZGUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMuX2tleVVwTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQgfHwgKCF0aGlzLmtleWJvYXJkRW5hYmxlZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQudGFnTmFtZSAhPT0gXCJJTlBVVFwiICYmIGUudGFyZ2V0LnRhZ05hbWUgIT09IFwiVEVYVEFSRUFcIikge1xuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IHRoaXMuS0VZX0NUUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHJsRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSB0aGlzLktFWV9BTFQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHREb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IHRoaXMuS0VZX1NISUZUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hpZnREb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMua2V5RG93bltlLmtleUNvZGVdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwia2V5dXBcIiwgZS5rZXlDb2RlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMuX21vdXNlRW50ZXJMaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW91c2VvdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2dldE1vdXNlQ2FudmFzUG9zKGUpO1xuICAgICAgICAgICAgdGhpcy5maXJlKFwibW91c2VlbnRlclwiLCB0aGlzLm1vdXNlQ2FudmFzUG9zLCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuX21vdXNlTGVhdmVMaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW91c2VvdmVyID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9nZXRNb3VzZUNhbnZhc1BvcyhlKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZShcIm1vdXNlbGVhdmVcIiwgdGhpcy5tb3VzZUNhbnZhc1BvcywgdHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX21vdXNlRG93bkxpc3RlbmVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOi8vIExlZnQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTGVmdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjovLyBNaWRkbGUvYm90aCBidXR0b25zXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTWlkZGxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOi8vIFJpZ2h0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93blJpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9nZXRNb3VzZUNhbnZhc1BvcyhlKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgdGhpcy5maXJlKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2VDYW52YXNQb3MsIHRydWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMubW91c2VvdmVyKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9tb3VzZVVwTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6Ly8gTGVmdCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZURvd25MZWZ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjovLyBNaWRkbGUvYm90aCBidXR0b25zXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTWlkZGxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzovLyBSaWdodCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZURvd25SaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlyZShcIm1vdXNldXBcIiwgdGhpcy5tb3VzZUNhbnZhc1BvcywgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBpZiAodGhpcy5tb3VzZW92ZXIpIHtcbiAgICAgICAgICAgIC8vICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9jbGlja0xpc3RlbmVyID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOi8vIExlZnQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTGVmdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93blJpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjovLyBNaWRkbGUvYm90aCBidXR0b25zXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTWlkZGxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzovLyBSaWdodCBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZURvd25MZWZ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9nZXRNb3VzZUNhbnZhc1BvcyhlKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZShcImNsaWNrXCIsIHRoaXMubW91c2VDYW52YXNQb3MsIHRydWUpO1xuICAgICAgICAgICAgaWYgKHRoaXMubW91c2VvdmVyKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZGJsY2xpY2tcIiwgdGhpcy5fZGJsQ2xpY2tMaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZS53aGljaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTovLyBMZWZ0IGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93bkxlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZURvd25SaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6Ly8gTWlkZGxlL2JvdGggYnV0dG9uc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93bk1pZGRsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6Ly8gUmlnaHQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duTGVmdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93blJpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZ2V0TW91c2VDYW52YXNQb3MoZSk7XG4gICAgICAgICAgICB0aGlzLmZpcmUoXCJkYmxjbGlja1wiLCB0aGlzLm1vdXNlQ2FudmFzUG9zLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vdXNlb3Zlcikge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9nZXRNb3VzZUNhbnZhc1BvcyhlKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZShcIm1vdXNlbW92ZVwiLCB0aGlzLm1vdXNlQ2FudmFzUG9zLCB0cnVlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vdXNlb3Zlcikge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3aGVlbFwiLCB0aGlzLl9tb3VzZVdoZWVsTGlzdGVuZXIgPSAoZSwgZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCAtZS5kZWx0YVkgKiA0MCkpO1xuICAgICAgICAgICAgdGhpcy5maXJlKFwibW91c2V3aGVlbFwiLCBkZWx0YSwgdHJ1ZSk7XG4gICAgICAgIH0sIHtwYXNzaXZlOiB0cnVlfSk7XG5cbiAgICAgICAgLy8gbW91c2VjbGlja2VkXG5cbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGRvd25YO1xuICAgICAgICAgICAgbGV0IGRvd25ZO1xuICAgICAgICAgICAgLy8gVG9sZXJhbmNlIGJldHdlZW4gZG93biBhbmQgdXAgcG9zaXRpb25zIGZvciBhIG1vdXNlIGNsaWNrXG4gICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSAyO1xuICAgICAgICAgICAgdGhpcy5vbihcIm1vdXNlZG93blwiLCAocGFyYW1zKSA9PiB7XG4gICAgICAgICAgICAgICAgZG93blggPSBwYXJhbXNbMF07XG4gICAgICAgICAgICAgICAgZG93blkgPSBwYXJhbXNbMV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub24oXCJtb3VzZXVwXCIsIChwYXJhbXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZG93blggPj0gKHBhcmFtc1swXSAtIHRvbGVyYW5jZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZG93blggPD0gKHBhcmFtc1swXSArIHRvbGVyYW5jZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZG93blkgPj0gKHBhcmFtc1sxXSAtIHRvbGVyYW5jZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZG93blkgPD0gKHBhcmFtc1sxXSArIHRvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwibW91c2VjbGlja2VkXCIsIHBhcmFtcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWUlxuXG4gICAgICAgIHtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25BbmdsZUxvb2t1cCA9IHtcbiAgICAgICAgICAgICAgICAnbGFuZHNjYXBlLXByaW1hcnknOiA5MCxcbiAgICAgICAgICAgICAgICAnbGFuZHNjYXBlLXNlY29uZGFyeSc6IC05MCxcbiAgICAgICAgICAgICAgICAncG9ydHJhaXQtc2Vjb25kYXJ5JzogMTgwLFxuICAgICAgICAgICAgICAgICdwb3J0cmFpdC1wcmltYXJ5JzogMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uQW5nbGU7XG4gICAgICAgICAgICBjb25zdCBhY2NlbGVyYXRpb24gPSBtYXRoLnZlYzMoKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkgPSBtYXRoLnZlYzMoKTtcblxuICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2VFdmVudCA9IHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbkFuZ2xlOiAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBkZXZpY2VNb3Rpb25FdmVudCA9IHtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbkFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgIGFjY2VsZXJhdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5OiBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uUmF0ZTogbWF0aC52ZWMzKCksXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWw6IDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGRldmljZU9yaWVudGF0aW9uRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgYWxwaGE6IDAsXG4gICAgICAgICAgICAgICAgYmV0YTogMCxcbiAgICAgICAgICAgICAgICBnYW1tYTogMCxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZTogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICh3aW5kb3cuT3JpZW50YXRpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMuX29yaWVudGF0aW9uY2hhbmdlZExpc3RlbmVyID0gKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9IHdpbmRvdy5zY3JlZW4ub3JpZW50YXRpb24gfHwgd2luZG93LnNjcmVlbi5tb3pPcmllbnRhdGlvbiB8fCB3aW5kb3cubXNPcmllbnRhdGlvbiB8fCBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25BbmdsZSA9IG9yaWVudGF0aW9uID8gKG9yaWVudGF0aW9uQW5nbGVMb29rdXBbb3JpZW50YXRpb25dIHx8IDApIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VFdmVudC5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25DaGFuZ2VFdmVudC5vcmllbnRhdGlvbkFuZ2xlID0gb3JpZW50YXRpb25BbmdsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBGaXJlZCB3aGVuIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgZGV2aWNlIGhhcyBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBvcmllbnRhdGlvbmNoYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIG9yaWVudGF0aW9uIFRoZSBvcmllbnRhdGlvbjogXCJsYW5kc2NhcGUtcHJpbWFyeVwiLCBcImxhbmRzY2FwZS1zZWNvbmRhcnlcIiwgXCJwb3J0cmFpdC1zZWNvbmRhcnlcIiBvciBcInBvcnRyYWl0LXByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIG9yaWVudGF0aW9uQW5nbGUgVGhlIG9yaWVudGF0aW9uIGFuZ2xlIGluIGRlZ3JlZXM6IDkwIGZvciBsYW5kc2NhcGUtcHJpbWFyeSwgLTkwIGZvciBsYW5kc2NhcGUtc2Vjb25kYXJ5LCAxODAgZm9yIHBvcnRyYWl0LXNlY29uZGFyeSBvciAwIGZvciBwb3J0cmFpdC1wcmltYXJ5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJvcmllbnRhdGlvbmNoYW5nZVwiLCBvcmllbnRhdGlvbkNoYW5nZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod2luZG93LkRldmljZU1vdGlvbkV2ZW50KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW1vdGlvbicsIHRoaXMuX2RldmljZU1vdGlvbkxpc3RlbmVyID0gKGUpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlTW90aW9uRXZlbnQuaW50ZXJ2YWwgPSBlLmludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlTW90aW9uRXZlbnQub3JpZW50YXRpb25BbmdsZSA9IG9yaWVudGF0aW9uQW5nbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2VsID0gZS5hY2NlbGVyYXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY2NlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VsZXJhdGlvblswXSA9IGFjY2VsLng7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZWxlcmF0aW9uWzFdID0gYWNjZWwueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb25bMl0gPSBhY2NlbC56O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZU1vdGlvbkV2ZW50LmFjY2VsZXJhdGlvbiA9IGFjY2VsZXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlTW90aW9uRXZlbnQuYWNjZWxlcmF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjZWxHcmF2ID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWNjZWxHcmF2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eVswXSA9IGFjY2VsR3Jhdi54O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHlbMV0gPSBhY2NlbEdyYXYueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5WzJdID0gYWNjZWxHcmF2Lno7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlTW90aW9uRXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSA9IGFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZU1vdGlvbkV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VNb3Rpb25FdmVudC5yb3RhdGlvblJhdGUgPSBlLnJvdGF0aW9uUmF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBGaXJlcyBvbiBhIHJlZ3VsYXIgaW50ZXJ2YWwgYW5kIHJldHVybnMgZGF0YSBhYm91dCB0aGUgcm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIChpbiBkZWdyZWVzIHBlciBzZWNvbmQpIGFuZCBhY2NlbGVyYXRpb24gKGluIG1ldGVycyBwZXIgc2Vjb25kIHNxdWFyZWQpIG9mIHRoZSBkZXZpY2UsIGF0IHRoYXQgbW9tZW50IGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiB0aW1lLiBTb21lIGRldmljZXMgZG8gbm90IGhhdmUgdGhlIGhhcmR3YXJlIHRvIGV4Y2x1ZGUgdGhlIGVmZmVjdCBvZiBncmF2aXR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBkZXZpY2Vtb3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBGbG9hdDMyQXJyYXkgYWNjZWxlcmF0aW9uIFRoZSBhY2NlbGVyYXRpb24gb2YgdGhlIGRldmljZSwgaW4gbWV0ZXJzIHBlciBzZWNvbmQgc3F1YXJlZCwgYXMgYSAzLWVsZW1lbnQgdmVjdG9yLiBUaGlzIHZhbHVlIGhhcyB0YWtlbiBpbnRvIGFjY291bnQgdGhlIGVmZmVjdCBvZiBncmF2aXR5IGFuZCByZW1vdmVkIGl0IGZyb20gdGhlIGZpZ3VyZXMuIFRoaXMgdmFsdWUgbWF5IG5vdCBleGlzdCBpZiB0aGUgaGFyZHdhcmUgZG9lc24ndCBrbm93IGhvdyB0byByZW1vdmUgZ3Jhdml0eSBmcm9tIHRoZSBhY2NlbGVyYXRpb24gZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBGbG9hdDMyQXJyYXkgYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSBUaGUgYWNjZWxlcmF0aW9uIG9mIHRoZSBkZXZpY2UsIGluIG1ldGVycyBwZXIgc2Vjb25kIHNxdWFyZWQsIGFzIGEgMy1lbGVtZW50IHZlY3Rvci4gVGhpcyB2YWx1ZSBpbmNsdWRlcyB0aGUgZWZmZWN0IG9mIGdyYXZpdHksIGFuZCBtYXkgYmUgdGhlIG9ubHkgdmFsdWUgYXZhaWxhYmxlIG9uIGRldmljZXMgdGhhdCBkb24ndCBoYXZlIGEgZ3lyb3Njb3BlIHRvIGFsbG93IHRoZW0gdG8gcHJvcGVybHkgcmVtb3ZlIGdyYXZpdHkgZnJvbSB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSwgTnVtYmVyIGludGVydmFsIFRoZSBpbnRlcnZhbCwgaW4gbWlsbGlzZWNvbmRzLCBhdCB3aGljaCB0aGlzIGV2ZW50IGlzIGZpcmVkLiBUaGUgbmV4dCBldmVudCB3aWxsIGJlIGZpcmVkIGluIGFwcHJveGltYXRlbHkgdGhpcyBhbW91bnQgb2YgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSAgRmxvYXQzMkFycmF5IHJvdGF0aW9uUmF0ZSBUaGUgcmF0ZXMgb2Ygcm90YXRpb24gb2YgdGhlIGRldmljZSBhYm91dCBlYWNoIGF4aXMsIGluIGRlZ3JlZXMgcGVyIHNlY29uZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZGV2aWNlbW90aW9uXCIsIGRldmljZU1vdGlvbkV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod2luZG93LkRldmljZU9yaWVudGF0aW9uRXZlbnQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZW9yaWVudGF0aW9uXCIsIHRoaXMuX2RldmljZU9yaWVudExpc3RlbmVyID0gKGUpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlT3JpZW50YXRpb25FdmVudC5nYW1tYSA9IGUuZ2FtbWE7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VPcmllbnRhdGlvbkV2ZW50LmJldGEgPSBlLmJldGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VPcmllbnRhdGlvbkV2ZW50LmFscGhhID0gZS5hbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZU9yaWVudGF0aW9uRXZlbnQuYWJzb2x1dGUgPSBlLmFic29sdXRlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEZpcmVkIHdoZW4gZnJlc2ggZGF0YSBpcyBhdmFpbGFibGUgZnJvbSBhbiBvcmllbnRhdGlvbiBzZW5zb3IgYWJvdXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIG9mIHRoZSBkZXZpY2UgYXMgY29tcGFyZWQgdG8gdGhlIEVhcnRoIGNvb3JkaW5hdGUgZnJhbWUuIFRoaXMgZGF0YSBpcyBnYXRoZXJlZCBmcm9tIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIG1hZ25ldG9tZXRlciBpbnNpZGUgdGhlIGRldmljZS4gU2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvRXZlbnRzL09yaWVudGF0aW9uX2FuZF9tb3Rpb25fZGF0YV9leHBsYWluZWRcIj5PcmllbnRhdGlvbiBhbmQgbW90aW9uIGRhdGEgZXhwbGFpbmVkPC9hPiBmb3IgbW9yZSBpbmZvLlxuICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBldmVudCBkZXZpY2VvcmllbnRhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIE51bWJlciBhbHBoYSBUaGUgY3VycmVudCBvcmllbnRhdGlvbiBvZiB0aGUgZGV2aWNlIGFyb3VuZCB0aGUgWiBheGlzIGluIGRlZ3JlZXM7IHRoYXQgaXMsIGhvdyBmYXIgdGhlIGRldmljZSBpcyByb3RhdGVkIGFyb3VuZCBhIGxpbmUgcGVycGVuZGljdWxhciB0byB0aGUgZGV2aWNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIE51bWJlciBiZXRhIFRoZSBjdXJyZW50IG9yaWVudGF0aW9uIG9mIHRoZSBkZXZpY2UgYXJvdW5kIHRoZSBYIGF4aXMgaW4gZGVncmVlczsgdGhhdCBpcywgaG93IGZhciB0aGUgZGV2aWNlIGlzIHRpcHBlZCBmb3J3YXJkIG9yIGJhY2t3YXJkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIE51bWJlciBnYW1tYSBUaGUgY3VycmVudCBvcmllbnRhdGlvbiBvZiB0aGUgZGV2aWNlIGFyb3VuZCB0aGUgWSBheGlzIGluIGRlZ3JlZXM7IHRoYXQgaXMsIGhvdyBmYXIgdGhlIGRldmljZSBpcyB0dXJuZWQgbGVmdCBvciByaWdodC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSBCb29sZWFuIGFic29sdXRlIFRoaXMgdmFsdWUgaXMgdHJ1ZSBpZiB0aGUgb3JpZW50YXRpb24gaXMgcHJvdmlkZWQgYXMgYSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGRldmljZSBjb29yZGluYXRlIGZyYW1lIGFuZCB0aGUgRWFydGggY29vcmRpbmF0ZSBmcmFtZTsgaWYgdGhlIGRldmljZSBjYW4ndCBkZXRlY3QgdGhlIEVhcnRoIGNvb3JkaW5hdGUgZnJhbWUsIHRoaXMgdmFsdWUgaXMgZmFsc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImRldmljZW9yaWVudGF0aW9uXCIsIGRldmljZU9yaWVudGF0aW9uRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZXZlbnRzQm91bmQgPSB0cnVlO1xuICAgIH1cblxuICAgIF91bmJpbmRFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZXZlbnRzQm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9rZXlEb3duTGlzdGVuZXIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgdGhpcy5fa2V5VXBMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLl9tb3VzZUVudGVyTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5fbW91c2VMZWF2ZUxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fbW91c2VEb3duTGlzdGVuZXIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLl9tb3VzZURvd25MaXN0ZW5lcik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9jbGlja0xpc3RlbmVyKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIHRoaXMuX2RibENsaWNrTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgdGhpcy5fbW91c2VXaGVlbExpc3RlbmVyKTtcbiAgICAgICAgaWYgKHdpbmRvdy5PcmllbnRhdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLl9vcmllbnRhdGlvbmNoYW5nZWRMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbmRvdy5EZXZpY2VNb3Rpb25FdmVudCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RldmljZW1vdGlvbicsIHRoaXMuX2RldmljZU1vdGlvbkxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93LkRldmljZU9yaWVudGF0aW9uRXZlbnQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGV2aWNlb3JpZW50YXRpb25cIiwgdGhpcy5fZGV2aWNlT3JpZW50TGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2V2ZW50c0JvdW5kID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX2dldE1vdXNlQ2FudmFzUG9zKGV2ZW50KSB7XG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50ID0gd2luZG93LmV2ZW50O1xuICAgICAgICAgICAgdGhpcy5tb3VzZUNhbnZhc1Bvc1swXSA9IGV2ZW50Lng7XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ2FudmFzUG9zWzFdID0gZXZlbnQueTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgbGV0IHRvdGFsT2Zmc2V0TGVmdCA9IDA7XG4gICAgICAgICAgICBsZXQgdG90YWxPZmZzZXRUb3AgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdG90YWxPZmZzZXRMZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgICAgICB0b3RhbE9mZnNldFRvcCArPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ2FudmFzUG9zWzBdID0gZXZlbnQucGFnZVggLSB0b3RhbE9mZnNldExlZnQ7XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ2FudmFzUG9zWzFdID0gZXZlbnQucGFnZVkgLSB0b3RhbE9mZnNldFRvcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciBpbnB1dCBoYW5kbGVycyBhcmUgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYHRydWVgYGBgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBlbmFibGUgSW5kaWNhdGVzIGlmIGlucHV0IGhhbmRsZXJzIGFyZSBlbmFibGVkLlxuICAgICAqL1xuICAgIHNldEVuYWJsZWQoZW5hYmxlKSB7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQgIT09IGVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5maXJlKFwiZW5hYmxlZFwiLCB0aGlzLmVuYWJsZWQgPSBlbmFibGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB3aGV0aGVyIGlucHV0IGhhbmRsZXJzIGFyZSBlbmFibGVkLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgdHJ1ZWBgYGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gSW5kaWNhdGVzIGlmIGlucHV0IGhhbmRsZXJzIGFyZSBlbmFibGVkLlxuICAgICAqL1xuICAgIGdldEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBrZXlib2FyZCBpbnB1dCBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgdHJ1ZWBgYGAuXG4gICAgICpcbiAgICAgKiB7QGxpbmsgQ2FtZXJhQ29udHJvbH0gd2lsbCBub3QgcmVzcG9uZCB0byBrZXlib2FyZCBldmVudHMgd2hpbGUgdGhpcyBpcyBzZXQgYGBgYGZhbHNlYGBgYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgSW5kaWNhdGVzIHdoZXRoZXIga2V5Ym9hcmQgaW5wdXQgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzZXRLZXlib2FyZEVuYWJsZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5rZXlib2FyZEVuYWJsZWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHdoZXRoZXIga2V5Ym9hcmQgaW5wdXQgaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYHRydWVgYGBgLlxuICAgICAqXG4gICAgICoge0BsaW5rIENhbWVyYUNvbnRyb2x9IHdpbGwgbm90IHJlc3BvbmQgdG8ga2V5Ym9hcmQgZXZlbnRzIHdoaWxlIHRoaXMgaXMgc2V0IGBgYGBmYWxzZWBgYGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gUmV0dXJucyB3aGV0aGVyIGtleWJvYXJkIGlucHV0IGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgZ2V0S2V5Ym9hcmRFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5rZXlib2FyZEVuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3VuYmluZEV2ZW50cygpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtJbnB1dH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/input/Input.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/libs/canvas2image.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/libs/canvas2image.js ***!
  \*******************************************************************************/
/*! exports provided: Canvas2Image */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Canvas2Image\", function() { return Canvas2Image; });\n/*\n * Canvas2Image v0.1\n * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com\n * MIT License [http://www.opensource.org/licenses/mit-license.php]\n *\n * Modified by @xeolabs to permit vertical flipping, so that snapshot can be taken from WebGL frame buffers,\n * which vertically flip image data as part of the way that WebGL renders textures.\n */\n\n/**\n * @private\n */\nconst Canvas2Image = (function () {\n    // check if we have canvas support\n    const oCanvas = document.createElement(\"canvas\"), sc = String.fromCharCode, strDownloadMime = \"image/octet-stream\",\n        bReplaceDownloadMime = false;\n\n    // no canvas, bail out.\n    if (!oCanvas.getContext) {\n        return {\n            saveAsBMP: function () {\n            },\n            saveAsPNG: function () {\n            },\n            saveAsJPEG: function () {\n            }\n        }\n    }\n\n    const bHasImageData = !!(oCanvas.getContext(\"2d\").getImageData), bHasDataURL = !!(oCanvas.toDataURL),\n        bHasBase64 = !!(window.btoa);\n\n    // ok, we're good\n    const readCanvasData = function (oCanvas) {\n        const iWidth = parseInt(oCanvas.width), iHeight = parseInt(oCanvas.height);\n        return oCanvas.getContext(\"2d\").getImageData(0, 0, iWidth, iHeight);\n    };\n\n    // base64 encodes either a string or an array of charcodes\n    const encodeData = function (data) {\n        let i, aData, strData = \"\";\n\n        if (typeof data == \"string\") {\n            strData = data;\n        } else {\n            aData = data;\n            for (i = 0; i < aData.length; i++) {\n                strData += sc(aData[i]);\n            }\n        }\n        return btoa(strData);\n    };\n\n    // creates a base64 encoded string containing BMP data takes an imagedata object as argument\n    const createBMP = function (oData) {\n        let strHeader = '';\n        const iWidth = oData.width;\n        const iHeight = oData.height;\n\n        strHeader += 'BM';\n\n        let iFileSize = iWidth * iHeight * 4 + 54; // total header size = 54 bytes\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 54, 0, 0, 0); // data offset\n        strHeader += sc(40, 0, 0, 0); // info header size\n\n        let iImageWidth = iWidth;\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n\n        let iImageHeight = iHeight;\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n\n        strHeader += sc(1, 0, 32, 0); // num of planes & num of bits per pixel\n        strHeader += sc(0, 0, 0, 0); // compression = none\n\n        let iDataSize = iWidth * iHeight * 4;\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // these bytes are not used\n\n        const aImgData = oData.data;\n        let strPixelData = \"\";\n        let c;\n        let x;\n        let y = iHeight;\n        let iOffsetX;\n        let iOffsetY;\n        let strPixelRow;\n\n        do {\n            iOffsetY = iWidth * (y - 1) * 4;\n            strPixelRow = \"\";\n            for (x = 0; x < iWidth; x++) {\n                iOffsetX = 4 * x;\n                strPixelRow += sc(\n                    aImgData[iOffsetY + iOffsetX + 2], // B\n                    aImgData[iOffsetY + iOffsetX + 1], // G\n                    aImgData[iOffsetY + iOffsetX],     // R\n                    aImgData[iOffsetY + iOffsetX + 3]  // A\n                );\n            }\n            strPixelData += strPixelRow;\n        } while (--y);\n\n        return encodeData(strHeader + strPixelData);\n    };\n\n    // sends the generated file to the client\n    const saveFile = function (strData) {\n        if (!window.open(strData)) {\n            document.location.href = strData;\n        }\n    };\n\n    const makeDataURI = function (strData, strMime) {\n        return \"data:\" + strMime + \";base64,\" + strData;\n    };\n\n    // generates a <img> object containing the imagedata\n    const makeImageObject = function (strSource) {\n        const oImgElement = document.createElement(\"img\");\n        oImgElement.src = strSource;\n        return oImgElement;\n    };\n\n    const scaleCanvas = function (oCanvas, iWidth, iHeight, flipy) {\n        if (iWidth && iHeight) {\n            const oSaveCanvas = document.createElement(\"canvas\");\n            oSaveCanvas.width = iWidth;\n            oSaveCanvas.height = iHeight;\n            oSaveCanvas.style.width = iWidth + \"px\";\n            oSaveCanvas.style.height = iHeight + \"px\";\n            const oSaveCtx = oSaveCanvas.getContext(\"2d\");\n            if (flipy) {\n                oSaveCtx.save();\n                oSaveCtx.scale(1.0, -1.0);\n                oSaveCtx.imageSmoothingEnabled = true;\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, -iHeight);\n                oSaveCtx.restore();\n            } else {\n                oSaveCtx.imageSmoothingEnabled = true;\n                oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iHeight);\n            }\n            return oSaveCanvas;\n        }\n        return oCanvas;\n    };\n\n    return {\n        saveAsPNG: function (oCanvas, bReturnImg, iWidth, iHeight, flipy) {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/png\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsJPEG: function (oCanvas, bReturnImg, iWidth, iHeight, flipy) {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/jpeg\";\n            const strData = oScaledCanvas.toDataURL(strMime);\n            // check if browser actually supports jpeg by looking for the mime type in the data uri. if not, return false\n            if (strData.indexOf(strMime) != 5) return false;\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsBMP: function (oCanvas, bReturnImg, iWidth, iHeight, flipy) {\n            if (!(bHasDataURL && bHasImageData && bHasBase64)) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight, flipy);\n            const strMime = \"image/bmp\";\n            const oData = readCanvasData(oScaledCanvas), strImgData = createBMP(oData);\n            if (bReturnImg) {\n                return makeImageObject(makeDataURI(strImgData, strMime));\n            } else {\n                saveFile(makeDataURI(strImgData, strMime));\n            }\n            return true;\n        }\n    };\n})();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/libs/canvas2image.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js ***!
  \*********************************************************************************/
/*! exports provided: AmbientLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AmbientLight\", function() { return AmbientLight; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Light_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Light.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/Light.js\");\n\n\n\n/**\n * @desc An ambient light source of fixed color and intensity that illuminates all {@link Mesh}es equally.\n *\n * * {@link AmbientLight#color} multiplies by {@link PhongMaterial#ambient} at each position of each {@link ReadableGeometry} surface.\n * * {@link AmbientLight#color} multiplies by {@link LambertMaterial#color} uniformly across each triangle of each {@link ReadableGeometry} (ie. flat shaded).\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n *\n * ## Usage\n *\n * In the example below we'll destroy the {@link Scene}'s default light sources then create an AmbientLight and a couple of {@link @DirLight}s:\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#lights_AmbientLight)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildTorusGeometry} from \"../src/scene/geometry/builders/buildTorusGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n * import {AmbientLight} from \"../src/scene/lights/AmbientLight.js\";\n *\n * // Create a Viewer and arrange the camera\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * // Replace the Scene's default lights with a single custom AmbientLight\n *\n * viewer.scene.clearLights();\n *\n * new AmbientLight(viewer.scene, {\n *      color: [0.0, 0.3, 0.7],\n *      intensity: 1.0\n * });\n *\n * new DirLight(viewer.scene, {\n *      id: \"keyLight\",\n *      dir: [0.8, -0.6, -0.8],\n *      color: [1.0, 0.3, 0.3],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n * new DirLight(viewer.scene, {\n *      id: \"fillLight\",\n *      dir: [-0.8, -0.4, -0.4],\n *      color: [0.3, 1.0, 0.3],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n * new DirLight(viewer.scene, {\n *      id: \"rimLight\",\n *      dir: [0.2, -0.8, 0.8],\n *      color: [0.6, 0.6, 0.6],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n * // Create a mesh with torus shape and PhongMaterial\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildSphereGeometry({\n *          center: [0, 0, 0],\n *          radius: 1.5,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          ambient: [1.0, 1.0, 1.0],\n *          shininess: 30,\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n *\n * // Adjust the color of our AmbientLight\n *\n * var ambientLight = viewer.scene.lights[\"myAmbientLight\"];\n * ambientLight.color = [1.0, 0.8, 0.8];\n *````\n */\nclass AmbientLight extends _Light_js__WEBPACK_IMPORTED_MODULE_1__[\"Light\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"AmbientLight\";\n    }\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this AmbientLight as well.\n     * @param {*} [cfg] AmbientLight configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number[]} [cfg.color=[0.7, 0.7, 0.8]]  The color of this AmbientLight.\n     * @param {Number} [cfg.intensity=[1.0]]  The intensity of this AmbientLight, as a factor in range ````[0..1]````.\n     */\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n        this._state = {\n            type: \"ambient\",\n            color: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0.7, 0.7, 0.7]),\n            intensity: 1.0\n        };\n        this.color = cfg.color;\n        this.intensity = cfg.intensity;\n        this.scene._lightCreated(this);\n    }\n\n    /**\n     * Sets the RGB color of this AmbientLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @param {Number[]} color The AmbientLight's RGB color.\n     */\n    set color(color) {\n        this._state.color.set(color || [0.7, 0.7, 0.8]);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB color of this AmbientLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @returns {Number[]} The AmbientLight's RGB color.\n     */\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     * Sets the intensity of this AmbientLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @param {Number} intensity The AmbientLight's intensity.\n     */\n    set intensity(intensity) {\n        this._state.intensity = intensity !== undefined ? intensity : 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the intensity of this AmbientLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @returns {Number} The AmbientLight's intensity.\n     */\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    /**\n     * Destroys this AmbientLight.\n     */\n    destroy() {\n\n        super.destroy();\n\n        this.scene._lightDestroyed(this);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2xpZ2h0cy9BbWJpZW50TGlnaHQuanM/MDAxOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFxQztBQUNKOztBQUVqQztBQUNBLG9GQUFvRixXQUFXO0FBQy9GO0FBQ0EsTUFBTSx5QkFBeUIsZ0JBQWdCLDRCQUE0QiwyQkFBMkIsdUJBQXVCO0FBQzdILE1BQU0seUJBQXlCLGdCQUFnQiw0QkFBNEIseUNBQXlDLHVCQUF1QjtBQUMzSSxNQUFNLG1CQUFtQixJQUFJLGVBQWUsT0FBTyxpQkFBaUIsMkJBQTJCLG1CQUFtQixLQUFLLG1CQUFtQjtBQUMxSTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsWUFBWSxzRUFBc0UsZ0JBQWdCO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsS0FBSztBQUNoQixXQUFXLG1CQUFtQjtBQUM5QixXQUFXLGlCQUFpQjtBQUM1QixXQUFXLGNBQWM7QUFDekIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwrQ0FBSzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLE9BQU8sa0VBQWtFLFlBQVk7QUFDcEcsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsT0FBTztBQUN0QjtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQUk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRXNCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2xpZ2h0cy9BbWJpZW50TGlnaHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge21hdGh9IGZyb20gJy4uL21hdGgvbWF0aC5qcyc7XG5pbXBvcnQge0xpZ2h0fSBmcm9tICcuL0xpZ2h0LmpzJztcblxuLyoqXG4gKiBAZGVzYyBBbiBhbWJpZW50IGxpZ2h0IHNvdXJjZSBvZiBmaXhlZCBjb2xvciBhbmQgaW50ZW5zaXR5IHRoYXQgaWxsdW1pbmF0ZXMgYWxsIHtAbGluayBNZXNofWVzIGVxdWFsbHkuXG4gKlxuICogKiB7QGxpbmsgQW1iaWVudExpZ2h0I2NvbG9yfSBtdWx0aXBsaWVzIGJ5IHtAbGluayBQaG9uZ01hdGVyaWFsI2FtYmllbnR9IGF0IGVhY2ggcG9zaXRpb24gb2YgZWFjaCB7QGxpbmsgUmVhZGFibGVHZW9tZXRyeX0gc3VyZmFjZS5cbiAqICoge0BsaW5rIEFtYmllbnRMaWdodCNjb2xvcn0gbXVsdGlwbGllcyBieSB7QGxpbmsgTGFtYmVydE1hdGVyaWFsI2NvbG9yfSB1bmlmb3JtbHkgYWNyb3NzIGVhY2ggdHJpYW5nbGUgb2YgZWFjaCB7QGxpbmsgUmVhZGFibGVHZW9tZXRyeX0gKGllLiBmbGF0IHNoYWRlZCkuXG4gKiAqIHtAbGluayBBbWJpZW50TGlnaHR9cywge0BsaW5rIERpckxpZ2h0fXMgYW5kIHtAbGluayBQb2ludExpZ2h0fXMgYXJlIHJlZ2lzdGVyZWQgYnkgdGhlaXIge0BsaW5rIENvbXBvbmVudCNpZH0gb24ge0BsaW5rIFNjZW5lI2xpZ2h0c30uXG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyB3ZSdsbCBkZXN0cm95IHRoZSB7QGxpbmsgU2NlbmV9J3MgZGVmYXVsdCBsaWdodCBzb3VyY2VzIHRoZW4gY3JlYXRlIGFuIEFtYmllbnRMaWdodCBhbmQgYSBjb3VwbGUgb2Yge0BsaW5rIEBEaXJMaWdodH1zOlxuICpcbiAqIFtbUnVuIHRoaXMgZXhhbXBsZV0oaHR0cDovL3hlb2tpdC5naXRodWIuaW8veGVva2l0LXNkay9leGFtcGxlcy8jbGlnaHRzX0FtYmllbnRMaWdodCldXG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIGltcG9ydCB7Vmlld2VyfSBmcm9tIFwiLi4vc3JjL3ZpZXdlci9WaWV3ZXIuanNcIjtcbiAqIGltcG9ydCB7TWVzaH0gZnJvbSBcIi4uL3NyYy9zY2VuZS9tZXNoL01lc2guanNcIjtcbiAqIGltcG9ydCB7YnVpbGRUb3J1c0dlb21ldHJ5fSBmcm9tIFwiLi4vc3JjL3NjZW5lL2dlb21ldHJ5L2J1aWxkZXJzL2J1aWxkVG9ydXNHZW9tZXRyeS5qc1wiO1xuICogaW1wb3J0IHtSZWFkYWJsZUdlb21ldHJ5fSBmcm9tIFwiLi4vc3JjL3NjZW5lL2dlb21ldHJ5L1JlYWRhYmxlR2VvbWV0cnkuanNcIjtcbiAqIGltcG9ydCB7UGhvbmdNYXRlcmlhbH0gZnJvbSBcIi4uL3NyYy9zY2VuZS9tYXRlcmlhbHMvUGhvbmdNYXRlcmlhbC5qc1wiO1xuICogaW1wb3J0IHtUZXh0dXJlfSBmcm9tIFwiLi4vc3JjL3NjZW5lL21hdGVyaWFscy9UZXh0dXJlLmpzXCI7XG4gKiBpbXBvcnQge0FtYmllbnRMaWdodH0gZnJvbSBcIi4uL3NyYy9zY2VuZS9saWdodHMvQW1iaWVudExpZ2h0LmpzXCI7XG4gKlxuICogLy8gQ3JlYXRlIGEgVmlld2VyIGFuZCBhcnJhbmdlIHRoZSBjYW1lcmFcbiAqXG4gKiBjb25zdCB2aWV3ZXIgPSBuZXcgVmlld2VyKHtcbiAqICAgICBjYW52YXNJZDogXCJteUNhbnZhc1wiXG4gKiB9KTtcbiAqXG4gKiB2aWV3ZXIuc2NlbmUuY2FtZXJhLmV5ZSA9IFswLCAwLCA1XTtcbiAqIHZpZXdlci5zY2VuZS5jYW1lcmEubG9vayA9IFswLCAwLCAwXTtcbiAqIHZpZXdlci5zY2VuZS5jYW1lcmEudXAgPSBbMCwgMSwgMF07XG4gKlxuICogLy8gUmVwbGFjZSB0aGUgU2NlbmUncyBkZWZhdWx0IGxpZ2h0cyB3aXRoIGEgc2luZ2xlIGN1c3RvbSBBbWJpZW50TGlnaHRcbiAqXG4gKiB2aWV3ZXIuc2NlbmUuY2xlYXJMaWdodHMoKTtcbiAqXG4gKiBuZXcgQW1iaWVudExpZ2h0KHZpZXdlci5zY2VuZSwge1xuICogICAgICBjb2xvcjogWzAuMCwgMC4zLCAwLjddLFxuICogICAgICBpbnRlbnNpdHk6IDEuMFxuICogfSk7XG4gKlxuICogbmV3IERpckxpZ2h0KHZpZXdlci5zY2VuZSwge1xuICogICAgICBpZDogXCJrZXlMaWdodFwiLFxuICogICAgICBkaXI6IFswLjgsIC0wLjYsIC0wLjhdLFxuICogICAgICBjb2xvcjogWzEuMCwgMC4zLCAwLjNdLFxuICogICAgICBpbnRlbnNpdHk6IDEuMCxcbiAqICAgICAgc3BhY2U6IFwidmlld1wiXG4gKiB9KTtcbiAqXG4gKiBuZXcgRGlyTGlnaHQodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgIGlkOiBcImZpbGxMaWdodFwiLFxuICogICAgICBkaXI6IFstMC44LCAtMC40LCAtMC40XSxcbiAqICAgICAgY29sb3I6IFswLjMsIDEuMCwgMC4zXSxcbiAqICAgICAgaW50ZW5zaXR5OiAxLjAsXG4gKiAgICAgIHNwYWNlOiBcInZpZXdcIlxuICogfSk7XG4gKlxuICogbmV3IERpckxpZ2h0KHZpZXdlci5zY2VuZSwge1xuICogICAgICBpZDogXCJyaW1MaWdodFwiLFxuICogICAgICBkaXI6IFswLjIsIC0wLjgsIDAuOF0sXG4gKiAgICAgIGNvbG9yOiBbMC42LCAwLjYsIDAuNl0sXG4gKiAgICAgIGludGVuc2l0eTogMS4wLFxuICogICAgICBzcGFjZTogXCJ2aWV3XCJcbiAqIH0pO1xuICpcbiAqIC8vIENyZWF0ZSBhIG1lc2ggd2l0aCB0b3J1cyBzaGFwZSBhbmQgUGhvbmdNYXRlcmlhbFxuICpcbiAqIG5ldyBNZXNoKHZpZXdlci5zY2VuZSwge1xuICogICAgICBnZW9tZXRyeTogbmV3IFJlYWRhYmxlR2VvbWV0cnkodmlld2VyLnNjZW5lLCBidWlsZFNwaGVyZUdlb21ldHJ5KHtcbiAqICAgICAgICAgIGNlbnRlcjogWzAsIDAsIDBdLFxuICogICAgICAgICAgcmFkaXVzOiAxLjUsXG4gKiAgICAgICAgICB0dWJlOiAwLjUsXG4gKiAgICAgICAgICByYWRpYWxTZWdtZW50czogMzIsXG4gKiAgICAgICAgICB0dWJlU2VnbWVudHM6IDI0LFxuICogICAgICAgICAgYXJjOiBNYXRoLlBJICogMi4wXG4gKiAgICAgIH0pLFxuICogICAgICBtYXRlcmlhbDogbmV3IFBob25nTWF0ZXJpYWwodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgICAgICBhbWJpZW50OiBbMS4wLCAxLjAsIDEuMF0sXG4gKiAgICAgICAgICBzaGluaW5lc3M6IDMwLFxuICogICAgICAgICAgZGlmZnVzZU1hcDogbmV3IFRleHR1cmUodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgICAgICAgICAgc3JjOiBcInRleHR1cmVzL2RpZmZ1c2UvdXZHcmlkMi5qcGdcIlxuICogICAgICAgICAgfSlcbiAqICAgICAgfSlcbiAqIH0pO1xuICpcbiAqIC8vIEFkanVzdCB0aGUgY29sb3Igb2Ygb3VyIEFtYmllbnRMaWdodFxuICpcbiAqIHZhciBhbWJpZW50TGlnaHQgPSB2aWV3ZXIuc2NlbmUubGlnaHRzW1wibXlBbWJpZW50TGlnaHRcIl07XG4gKiBhbWJpZW50TGlnaHQuY29sb3IgPSBbMS4wLCAwLjgsIDAuOF07XG4gKmBgYGBcbiAqL1xuY2xhc3MgQW1iaWVudExpZ2h0IGV4dGVuZHMgTGlnaHQge1xuXG4gICAgLyoqXG4gICAgIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0IHR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcIkFtYmllbnRMaWdodFwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciBPd25lciBjb21wb25lbnQuIFdoZW4gZGVzdHJveWVkLCB0aGUgb3duZXIgd2lsbCBkZXN0cm95IHRoaXMgQW1iaWVudExpZ2h0IGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHsqfSBbY2ZnXSBBbWJpZW50TGlnaHQgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2ZnLmlkXSBPcHRpb25hbCBJRCwgdW5pcXVlIGFtb25nIGFsbCBjb21wb25lbnRzIGluIHRoZSBwYXJlbnQge0BsaW5rIFNjZW5lfSwgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbiBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IFtjZmcuY29sb3I9WzAuNywgMC43LCAwLjhdXSAgVGhlIGNvbG9yIG9mIHRoaXMgQW1iaWVudExpZ2h0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY2ZnLmludGVuc2l0eT1bMS4wXV0gIFRoZSBpbnRlbnNpdHkgb2YgdGhpcyBBbWJpZW50TGlnaHQsIGFzIGEgZmFjdG9yIGluIHJhbmdlIGBgYGBbMC4uMV1gYGBgLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBjZmcgPSB7fSkge1xuICAgICAgICBzdXBlcihvd25lciwgY2ZnKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICAgICAgICB0eXBlOiBcImFtYmllbnRcIixcbiAgICAgICAgICAgIGNvbG9yOiBtYXRoLnZlYzMoWzAuNywgMC43LCAwLjddKSxcbiAgICAgICAgICAgIGludGVuc2l0eTogMS4wXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY29sb3IgPSBjZmcuY29sb3I7XG4gICAgICAgIHRoaXMuaW50ZW5zaXR5ID0gY2ZnLmludGVuc2l0eTtcbiAgICAgICAgdGhpcy5zY2VuZS5fbGlnaHRDcmVhdGVkKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFJHQiBjb2xvciBvZiB0aGlzIEFtYmllbnRMaWdodC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYFswLjcsIDAuNywgMC44XWBgYGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBjb2xvciBUaGUgQW1iaWVudExpZ2h0J3MgUkdCIGNvbG9yLlxuICAgICAqL1xuICAgIHNldCBjb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLl9zdGF0ZS5jb2xvci5zZXQoY29sb3IgfHwgWzAuNywgMC43LCAwLjhdKTtcbiAgICAgICAgdGhpcy5nbFJlZHJhdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFJHQiBjb2xvciBvZiB0aGlzIEFtYmllbnRMaWdodC5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYFswLjcsIDAuNywgMC44XWBgYGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyW119IFRoZSBBbWJpZW50TGlnaHQncyBSR0IgY29sb3IuXG4gICAgICovXG4gICAgZ2V0IGNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuY29sb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW50ZW5zaXR5IG9mIHRoaXMgQW1iaWVudExpZ2h0LlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgMS4wYGBgYCBmb3IgbWF4aW11bSBpbnRlbnNpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW50ZW5zaXR5IFRoZSBBbWJpZW50TGlnaHQncyBpbnRlbnNpdHkuXG4gICAgICovXG4gICAgc2V0IGludGVuc2l0eShpbnRlbnNpdHkpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuaW50ZW5zaXR5ID0gaW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgPyBpbnRlbnNpdHkgOiAxLjA7XG4gICAgICAgIHRoaXMuZ2xSZWRyYXcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbnRlbnNpdHkgb2YgdGhpcyBBbWJpZW50TGlnaHQuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBgYGAxLjBgYGBgIGZvciBtYXhpbXVtIGludGVuc2l0eS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBBbWJpZW50TGlnaHQncyBpbnRlbnNpdHkuXG4gICAgICovXG4gICAgZ2V0IGludGVuc2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmludGVuc2l0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGlzIEFtYmllbnRMaWdodC5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLnNjZW5lLl9saWdodERlc3Ryb3llZCh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7QW1iaWVudExpZ2h0fTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js ***!
  \*****************************************************************************/
/*! exports provided: DirLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DirLight\", function() { return DirLight; });\n/* harmony import */ var _Light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Light.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/Light.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _webgl_RenderBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderBuffer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\n\n/**\n * @desc A directional light source that illuminates all {@link Mesh}es equally from a given direction.\n *\n * * Has an emission direction vector in {@link DirLight#dir}, but no position.\n * * Defined in either *World* or *View* coordinate space. When in World-space, {@link DirLight#dir} is relative to the\n * World coordinate system, and will appear to move as the {@link Camera} moves. When in View-space, {@link DirLight#dir} is\n * relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n *\n * ## Usage\n *\n * In the example below we'll replace the {@link Scene}'s default light sources with three View-space DirLights.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#lights_DirLight_view)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildSphereGeometry} from \"../src/scene/geometry/builders/buildSphereGeometry.js\";\n * import {buildPlaneGeometry} from \"../src/scene/geometry/builders/buildPlaneGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n * import {DirLight} from \"../src/scene/lights/DirLight.js\";\n *\n * // Create a Viewer and arrange the camera\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * // Replace the Scene's default lights with three custom view-space DirLights\n *\n * viewer.scene.clearLights();\n *\n * new DirLight(viewer.scene, {\n *      id: \"keyLight\",\n *      dir: [0.8, -0.6, -0.8],\n *      color: [1.0, 0.3, 0.3],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n * new DirLight(viewer.scene, {\n *      id: \"fillLight\",\n *      dir: [-0.8, -0.4, -0.4],\n *      color: [0.3, 1.0, 0.3],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n * new DirLight(viewer.scene, {\n *      id: \"rimLight\",\n *      dir: [0.2, -0.8, 0.8],\n *      color: [0.6, 0.6, 0.6],\n *      intensity: 1.0,\n *      space: \"view\"\n * });\n *\n *\n * // Create a sphere and ground plane\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildSphereGeometry({\n *          radius: 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          diffuse: [0.7, 0.7, 0.7],\n *          specular: [1.0, 1.0, 1.0],\n *          emissive: [0, 0, 0],\n *          alpha: 1.0,\n *          ambient: [1, 1, 0],\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n *  });\n *\n * new Mesh(viewer.scene, {\n *      geometry: buildPlaneGeometry(ReadableGeometry, viewer.scene, {\n *          xSize: 30,\n *          zSize: 30\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          }),\n *          backfaces: true\n *      }),\n *      position: [0, -2.1, 0]\n * });\n * ````\n */\nclass DirLight extends _Light_js__WEBPACK_IMPORTED_MODULE_0__[\"Light\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"DirLight\";\n    }\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this DirLight as well.\n     * @param {*} [cfg] The DirLight configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number[]} [cfg.dir=[1.0, 1.0, 1.0]]  A unit vector indicating the direction that the light is shining,  given in either World or View space, depending on the value of the ````space```` parameter.\n     * @param {Number[]} [cfg.color=[0.7, 0.7, 0.8 ]] The color of this DirLight.\n     * @param {Number} [cfg.intensity=1.0] The intensity of this DirLight, as a factor in range ````[0..1]````.\n     * @param {String} [cfg.space=\"view\"] The coordinate system the DirLight is defined in - ````\"view\"```` or ````\"space\"````.\n     * @param {Boolean} [cfg.castsShadow=false] Flag which indicates if this DirLight casts a castsShadow.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._shadowRenderBuf = null;\n        this._shadowViewMatrix = null;\n        this._shadowProjMatrix = null;\n        this._shadowViewMatrixDirty = true;\n        this._shadowProjMatrixDirty = true;\n\n        const camera = this.scene.camera;\n        const canvas = this.scene.canvas;\n\n        this._onCameraViewMatrix = camera.on(\"viewMatrix\", () => {\n            this._shadowViewMatrixDirty = true;\n        });\n\n        this._onCameraProjMatrix = camera.on(\"projMatrix\", () => {\n            this._shadowProjMatrixDirty = true;\n        });\n\n        this._onCanvasBoundary = canvas.on(\"boundary\", () => {\n            this._shadowProjMatrixDirty = true;\n        });\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n\n            type: \"dir\",\n            dir: _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3([1.0, 1.0, 1.0]),\n            color: _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3([0.7, 0.7, 0.8]),\n            intensity: 1.0,\n            space: cfg.space || \"view\",\n            castsShadow: false,\n\n            getShadowViewMatrix: () => {\n                if (this._shadowViewMatrixDirty) {\n                    if (!this._shadowViewMatrix) {\n                        this._shadowViewMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].identityMat4();\n                    }\n                    const camera = this.scene.camera;\n                    const dir = this._state.dir;\n                    const look = camera.look;\n                    const eye = [look[0] - dir[0], look[1] - dir[1], look[2] - dir[2]];\n                    const up = [0, 1, 0];\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].lookAtMat4v(eye, look, up, this._shadowViewMatrix);\n                    this._shadowViewMatrixDirty = false;\n                }\n                return this._shadowViewMatrix;\n            },\n\n            getShadowProjMatrix: () => {\n                if (this._shadowProjMatrixDirty) { // TODO: Set when canvas resizes\n                    if (!this._shadowProjMatrix) {\n                        this._shadowProjMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].identityMat4();\n                    }\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].orthoMat4c(-40, 40, -40, 40, -40.0, 80, this._shadowProjMatrix);  // left, right, bottom, top, near, far, dest\n                    this._shadowProjMatrixDirty = false;\n                }\n                return this._shadowProjMatrix;\n            },\n\n            getShadowRenderBuf: () => {\n                if (!this._shadowRenderBuf) {\n                    this._shadowRenderBuf = new _webgl_RenderBuffer_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderBuffer\"](this.scene.canvas.canvas, this.scene.canvas.gl, {size: [1024, 1024]}); // Super old mobile devices have a limit of 1024x1024 textures\n                }\n                return this._shadowRenderBuf;\n            }\n        });\n\n        this.dir = cfg.dir;\n        this.color = cfg.color;\n        this.intensity = cfg.intensity;\n        this.castsShadow = cfg.castsShadow;\n\n        this.scene._lightCreated(this);\n    }\n\n    /**\n     * Sets the direction in which the DirLight is shining.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @param {Number[]} value The direction vector.\n     */\n    set dir(value) {\n        this._state.dir.set(value || [1.0, 1.0, 1.0]);\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the direction in which the DirLight is shining.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @returns {Number[]} The direction vector.\n     */\n    get dir() {\n        return this._state.dir;\n    }\n\n    /**\n     * Sets the RGB color of this DirLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @param {Number[]} color The DirLight's RGB color.\n     */\n    set color(color) {\n        this._state.color.set(color || [0.7, 0.7, 0.8]);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB color of this DirLight.\n     *\n     * Default value is ````[0.7, 0.7, 0.8]````.\n     *\n     * @returns {Number[]} The DirLight's RGB color.\n     */\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     * Sets the intensity of this DirLight.\n     *\n     * Default intensity is ````1.0```` for maximum intensity.\n     *\n     * @param {Number} intensity The DirLight's intensity\n     */\n    set intensity(intensity) {\n        intensity = intensity !== undefined ? intensity : 1.0;\n        this._state.intensity = intensity;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the intensity of this DirLight.\n     *\n     * Default value is ````1.0```` for maximum intensity.\n     *\n     * @returns {Number} The DirLight's intensity.\n     */\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    /**\n     * Sets if this DirLight casts a shadow.\n     *\n     * Default value is ````false````.\n     *\n     * @param {Boolean} castsShadow Set ````true```` to cast shadows.\n     */\n    set castsShadow(castsShadow) {\n        castsShadow = !!castsShadow;\n        if (this._state.castsShadow === castsShadow) {\n            return;\n        }\n        this._state.castsShadow = castsShadow;\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this DirLight casts a shadow.\n     *\n     * Default value is ````false````.\n     *\n     * @returns {Boolean} ````true```` if this DirLight casts shadows.\n     */\n    get castsShadow() {\n        return this._state.castsShadow;\n    }\n\n    /**\n     * Destroys this DirLight.\n     */\n    destroy() {\n\n        const camera = this.scene.camera;\n        const canvas = this.scene.canvas;\n        camera.off(this._onCameraViewMatrix);\n        camera.off(this._onCameraProjMatrix);\n        canvas.off(this._onCanvasBoundary);\n\n        super.destroy();\n        this._state.destroy();\n        if (this._shadowRenderBuf) {\n            this._shadowRenderBuf.destroy();\n        }\n        this.scene._lightDestroyed(this);\n        this.glRedraw();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/Light.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/Light.js ***!
  \**************************************************************************/
/*! exports provided: Light */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Light\", function() { return Light; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n\n\n/**\n * @desc A dynamic light source within a {@link Scene}.\n *\n * These are registered by {@link Light#id} in {@link Scene#lights}.\n */\nclass Light extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Light\";\n    }\n\n    /**\n     * @private\n     */\n    get isLight() {\n        return true;\n    }\n\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2xpZ2h0cy9MaWdodC5qcz85ZGEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUEwQzs7QUFFMUM7QUFDQSwwQ0FBMEMsWUFBWTtBQUN0RDtBQUNBLDRCQUE0QixlQUFlLEtBQUssbUJBQW1CO0FBQ25FO0FBQ0Esb0JBQW9CLHVEQUFTOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRWUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvbGlnaHRzL0xpZ2h0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJy4uL0NvbXBvbmVudC5qcyc7XG5cbi8qKlxuICogQGRlc2MgQSBkeW5hbWljIGxpZ2h0IHNvdXJjZSB3aXRoaW4gYSB7QGxpbmsgU2NlbmV9LlxuICpcbiAqIFRoZXNlIGFyZSByZWdpc3RlcmVkIGJ5IHtAbGluayBMaWdodCNpZH0gaW4ge0BsaW5rIFNjZW5lI2xpZ2h0c30uXG4gKi9cbmNsYXNzIExpZ2h0IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIC8qKlxuICAgICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJMaWdodFwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0IGlzTGlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBjZmcgPSB7fSkge1xuICAgICAgICBzdXBlcihvd25lciwgY2ZnKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7TGlnaHR9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/Light.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EdgeMaterial.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EdgeMaterial.js ***!
  \************************************************************************************/
/*! exports provided: EdgeMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EdgeMaterial\", function() { return EdgeMaterial; });\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\nconst PRESETS = {\n    \"default\": {\n        edgeColor: [0.0, 0.0, 0.0],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultWhiteBG\": {\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultLightBG\": {\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultDarkBG\": {\n        edgeColor: [0.5, 0.5, 0.5],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    }\n};\n\n/**\n * @desc Configures the appearance of {@link Entity}s when their edges are emphasised.\n *\n * * Emphasise edges of an {@link Entity} by setting {@link Entity#edges} ````true````.\n * * When {@link Entity}s are within the subtree of a root {@link Entity}, then setting {@link Entity#edges} on the root\n * will collectively set that property on all sub-{@link Entity}s.\n * * EdgeMaterial provides several presets. Select a preset by setting {@link EdgeMaterial#preset} to the ID of a preset in {@link EdgeMaterial#presets}.\n * * By default, a {@link Mesh} uses the default EdgeMaterial in {@link Scene#edgeMaterial}, but you can assign each {@link Mesh#edgeMaterial} to a custom EdgeMaterial if required.\n *\n * ## Usage\n *\n * In the example below, we'll create a {@link Mesh} with its own EdgeMaterial and set {@link Mesh#edges} ````true```` to emphasise its edges.\n *\n * Recall that {@link Mesh} is a concrete subtype of the abstract {@link Entity} base class.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#materials_EdgeMaterial)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildSphereGeometry} from \"../src/scene/geometry/builders/buildSphereGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {EdgeMaterial} from \"../src/scene/materials/EdgeMaterial.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\",\n *      transparent: true\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *\n *      geometry: new ReadableGeometry(viewer.scene, buildSphereGeometry({\n *          radius: 1.5,\n *          heightSegments: 24,\n *          widthSegments: 16,\n *          edgeThreshold: 2 // Default is 10\n *      })),\n *\n *      material: new PhongMaterial(viewer.scene, {\n *          diffuse: [0.4, 0.4, 1.0],\n *          ambient: [0.9, 0.3, 0.9],\n *          shininess: 30,\n *          alpha: 0.5,\n *          alphaMode: \"blend\"\n *      }),\n *\n *      edgeMaterial: new EdgeMaterial(viewer.scene, {\n *          edgeColor: [0.0, 0.0, 1.0]\n *          edgeAlpha: 1.0,\n *          edgeWidth: 2\n *      }),\n *\n *      edges: true\n * });\n * ````\n *\n * Note the ````edgeThreshold```` configuration for the {@link ReadableGeometry} on our {@link Mesh}.  EdgeMaterial configures\n * a wireframe representation of the {@link ReadableGeometry}, which will have inner edges (those edges between\n * adjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\n * this particular {@link ReadableGeometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\n * is not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\n * as needed for particular Geometries.\n *\n * Here's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\n * to customize the effect.\n *\n * ````javascript\n * new Mesh({\n *     geometry: new ReadableGeometry(viewer.scene, buildSphereGeometry({\n *          radius: 1.5,\n *          heightSegments: 24,\n *          widthSegments: 16,\n *          edgeThreshold: 2 // Default is 10\n *      })),\n *     material: new PhongMaterial(viewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     edges: true\n * });\n *\n * var edgeMaterial = viewer.scene.edgeMaterial;\n *\n * edgeMaterial.edgeColor = [0.2, 1.0, 0.2];\n * edgeMaterial.edgeAlpha = 1.0;\n * edgeMaterial.edgeWidth = 2;\n * ````\n *\n *  ## Presets\n *\n * Let's switch the {@link Scene#edgeMaterial} to one of the presets in {@link EdgeMaterial#presets}:\n *\n * ````javascript\n * viewer.edgeMaterial.preset = EdgeMaterial.presets[\"sepia\"];\n * ````\n *\n * We can also create an EdgeMaterial from a preset, while overriding properties of the preset as required:\n *\n * ````javascript\n * var myEdgeMaterial = new EdgeMaterial(viewer.scene, {\n *      preset: \"sepia\",\n *      edgeColor = [1.0, 0.5, 0.5]\n * });\n * ````\n */\nclass EdgeMaterial extends _Material_js__WEBPACK_IMPORTED_MODULE_0__[\"Material\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"EdgeMaterial\";\n    }\n\n    /**\n     * Gets available EdgeMaterial presets.\n     *\n     * @type {Object}\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] The EdgeMaterial configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number[]} [cfg.edgeColor=[0.2,0.2,0.2]] RGB edge color.\n     * @param {Number} [cfg.edgeAlpha=1.0] Edge transparency. A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     * @param {Number} [cfg.edgeWidth=1] Edge width in pixels.\n     * @param {String} [cfg.preset] Selects a preset EdgeMaterial configuration - see {@link EdgeMaterial#presets}.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            type: \"EdgeMaterial\",\n            edges: null,\n            edgeColor: null,\n            edgeAlpha: null,\n            edgeWidth: null\n        });\n\n        this._preset = \"default\";\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.edgeColor) {\n                this.edgeColor = cfg.edgeColor;\n            }\n            if (cfg.edgeAlpha !== undefined) {\n                this.edgeAlpha = cfg.edgeAlpha;\n            }\n            if (cfg.edgeWidth !== undefined) {\n                this.edgeWidth = cfg.edgeWidth;\n            }\n        } else {\n            this.edgeColor = cfg.edgeColor;\n            this.edgeAlpha = cfg.edgeAlpha;\n            this.edgeWidth = cfg.edgeWidth;\n        }\n        this.edges = (cfg.edges !== false);\n    }\n\n\n    /**\n     * Sets if edges are visible.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    set edges(value) {\n        value = value !== false;\n        if (this._state.edges === value) {\n            return;\n        }\n        this._state.edges = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if edges are visible.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     * Sets RGB edge color.\n     *\n     * Default value is ````[0.2, 0.2, 0.2]````.\n     *\n     * @type {Number[]}\n     */\n    set edgeColor(value) {\n        let edgeColor = this._state.edgeColor;\n        if (!edgeColor) {\n            edgeColor = this._state.edgeColor = new Float32Array(3);\n        } else if (value && edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            edgeColor[0] = value[0];\n            edgeColor[1] = value[1];\n            edgeColor[2] = value[2];\n        } else {\n            edgeColor[0] = 0.2;\n            edgeColor[1] = 0.2;\n            edgeColor[2] = 0.2;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets RGB edge color.\n     *\n     * Default value is ````[0.2, 0.2, 0.2]````.\n     *\n     * @type {Number[]}\n     */\n    get edgeColor() {\n        return this._state.edgeColor;\n    }\n\n    /**\n     * Sets edge transparency.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    set edgeAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.edgeAlpha === value) {\n            return;\n        }\n        this._state.edgeAlpha = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets edge transparency.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    get edgeAlpha() {\n        return this._state.edgeAlpha;\n    }\n\n    /**\n     * Sets edge width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    set edgeWidth(value) {\n        this._state.edgeWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets edge width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    get edgeWidth() {\n        return this._state.edgeWidth;\n    }\n\n    /**\n     * Selects a preset EdgeMaterial configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.edgeColor = preset.edgeColor;\n        this.edgeAlpha = preset.edgeAlpha;\n        this.edgeWidth = preset.edgeWidth;\n        this._preset = value;\n    }\n\n    /**\n     * The current preset EdgeMaterial configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    get preset() {\n        return this._preset;\n    }\n\n    /**\n     * Destroys this EdgeMaterial.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EdgeMaterial.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EmphasisMaterial.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EmphasisMaterial.js ***!
  \****************************************************************************************/
/*! exports provided: EmphasisMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisMaterial\", function() { return EmphasisMaterial; });\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\nconst PRESETS = {\n    \"default\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"defaultWhiteBG\": {\n        fill: true,\n        fillColor: [1, 1, 1],\n        fillAlpha: 0.6,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultLightBG\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"defaultDarkBG\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.5, 0.5, 0.5],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"phosphorous\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 0.4,\n        edges: true,\n        edgeColor: [0.9, 0.9, 0.9],\n        edgeAlpha: 0.5,\n        edgeWidth: 2\n    },\n    \"sunset\": {\n        fill: true,\n        fillColor: [0.9, 0.9, 0.6],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.9, 0.9, 0.9],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"vectorscope\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 0.7,\n        edges: true,\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1,\n        edgeWidth: 2\n    },\n    \"battlezone\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 1.0,\n        edges: true,\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1,\n        edgeWidth: 3\n    },\n    \"sepia\": {\n        fill: true,\n        fillColor: [0.970588207244873, 0.7965892553329468, 0.6660899519920349],\n        fillAlpha: 0.4,\n        edges: true,\n        edgeColor: [0.529411792755127, 0.4577854573726654, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"yellowHighlight\": {\n        fill: true,\n        fillColor: [1.0, 1.0, 0.0],\n        fillAlpha: 0.5,\n        edges: true,\n        edgeColor: [0.529411792755127, 0.4577854573726654, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"greenSelected\": {\n        fill: true,\n        fillColor: [0.0, 1.0, 0.0],\n        fillAlpha: 0.5,\n        edges: true,\n        edgeColor: [0.4577854573726654, 0.529411792755127, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"gamegrid\": {\n        fill: true,\n        fillColor: [0.2, 0.2, 0.7],\n        fillAlpha: 0.9,\n        edges: true,\n        edgeColor: [0.4, 0.4, 1.6],\n        edgeAlpha: 0.8,\n        edgeWidth: 3\n    }\n};\n\n/**\n * Configures the appearance of {@link Entity}s when they are xrayed, highlighted or selected.\n *\n * * XRay an {@link Entity} by setting {@link Entity#xrayed} ````true````.\n * * Highlight an {@link Entity} by setting {@link Entity#highlighted} ````true````.\n * * Select an {@link Entity} by setting {@link Entity#selected} ````true````.\n * * When {@link Entity}s are within the subtree of a root {@link Entity}, then setting {@link Entity#xrayed}, {@link Entity#highlighted} or {@link Entity#selected}\n * on the root will collectively set those properties on all sub-{@link Entity}s.\n * * EmphasisMaterial provides several presets. Select a preset by setting {@link EmphasisMaterial#preset} to the ID of a preset in {@link EmphasisMaterial#presets}.\n * * By default, a {@link Mesh} uses the default EmphasisMaterials in {@link Scene#xrayMaterial}, {@link Scene#highlightMaterial} and {@link Scene#selectedMaterial}\n * but you can assign each {@link Mesh#xrayMaterial}, {@link Mesh#highlightMaterial} or {@link Mesh#selectedMaterial} to a custom EmphasisMaterial, if required.\n *\n * ## Usage\n *\n * In the example below, we'll create a {@link Mesh} with its own XRayMaterial and set {@link Mesh#xrayed} ````true```` to xray it.\n *\n * Recall that {@link Mesh} is a concrete subtype of the abstract {@link Entity} base class.\n *\n * ````javascript\n * new Mesh(viewer.scene, {\n *     geometry: new BoxGeometry(viewer.scene, {\n *         edgeThreshold: 1\n *     }),\n *     material: new PhongMaterial(viewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     xrayMaterial: new EmphasisMaterial(viewer.scene, {\n *         fill: true,\n *         fillColor: [0, 0, 0],\n *         fillAlpha: 0.7,\n *         edges: true,\n *         edgeColor: [0.2, 1.0, 0.2],\n *         edgeAlpha: 1.0,\n *         edgeWidth: 2\n *     }),\n *     xrayed: true\n * });\n * ````\n *\n * Note the ````edgeThreshold```` configuration for the {@link ReadableGeometry} on our {@link Mesh}.  EmphasisMaterial configures\n * a wireframe representation of the {@link ReadableGeometry} for the selected emphasis mode, which will have inner edges (those edges between\n * adjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\n * this particular {@link ReadableGeometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\n * is not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\n * as needed for particular Geometries.\n *\n * Here's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\n * to customize the effect.\n *\n * ````javascript\n * new Mesh({\n *     geometry: new TeapotGeometry(viewer.scene, {\n *         edgeThreshold: 5\n *     }),\n *     material: new PhongMaterial(viewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     xrayed: true\n * });\n *\n * var xrayMaterial = viewer.scene.xrayMaterial;\n *\n * xrayMaterial.fillColor = [0.2, 1.0, 0.2];\n * xrayMaterial.fillAlpha = 1.0;\n * ````\n *\n * ## Presets\n *\n * Let's switch the {@link Scene#xrayMaterial} to one of the presets in {@link EmphasisMaterial#presets}:\n *\n * ````javascript\n * viewer.xrayMaterial.preset = EmphasisMaterial.presets[\"sepia\"];\n * ````\n *\n * We can also create an EmphasisMaterial from a preset, while overriding properties of the preset as required:\n *\n * ````javascript\n * var myEmphasisMaterial = new EMphasisMaterial(viewer.scene, {\n *      preset: \"sepia\",\n *      fillColor = [1.0, 0.5, 0.5]\n * });\n * ````\n */\nclass EmphasisMaterial extends _Material_js__WEBPACK_IMPORTED_MODULE_0__[\"Material\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"EmphasisMaterial\";\n    }\n\n    /**\n     * Gets available EmphasisMaterial presets.\n     *\n     * @type {Object}\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] The EmphasisMaterial configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Boolean} [cfg.fill=true] Indicates if xray surfaces are filled with color.\n     * @param {Number[]} [cfg.fillColor=[0.4,0.4,0.4]] EmphasisMaterial fill color.\n     * @param  {Number} [cfg.fillAlpha=0.2] Transparency of filled xray faces. A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     * @param {Boolean} [cfg.edges=true] Indicates if xray edges are visible.\n     * @param {Number[]} [cfg.edgeColor=[0.2,0.2,0.2]]  RGB color of xray edges.\n     * @param {Number} [cfg.edgeAlpha=0.5] Transparency of xray edges. A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     * @param {Number} [cfg.edgeWidth=1] Width of xray edges, in pixels.\n     * @param {String} [cfg.preset] Selects a preset EmphasisMaterial configuration - see {@link EmphasisMaterial#presets}.\n     * @param {Boolean} [cfg.backfaces=false] Whether to render geometry backfaces when emphasising.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            type: \"EmphasisMaterial\",\n            fill: null,\n            fillColor: null,\n            fillAlpha: null,\n            edges: null,\n            edgeColor: null,\n            edgeAlpha: null,\n            edgeWidth: null,\n            backfaces: true\n        });\n\n        this._preset = \"default\";\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.fill !== undefined) {\n                this.fill = cfg.fill;\n            }\n            if (cfg.fillColor) {\n                this.fillColor = cfg.fillColor;\n            }\n            if (cfg.fillAlpha !== undefined) {\n                this.fillAlpha = cfg.fillAlpha;\n            }\n            if (cfg.edges !== undefined) {\n                this.edges = cfg.edges;\n            }\n            if (cfg.edgeColor) {\n                this.edgeColor = cfg.edgeColor;\n            }\n            if (cfg.edgeAlpha !== undefined) {\n                this.edgeAlpha = cfg.edgeAlpha;\n            }\n            if (cfg.edgeWidth !== undefined) {\n                this.edgeWidth = cfg.edgeWidth;\n            }\n            if (cfg.backfaces !== undefined) {\n                this.backfaces = cfg.backfaces;\n            }\n        } else {\n            this.fill = cfg.fill;\n            this.fillColor = cfg.fillColor;\n            this.fillAlpha = cfg.fillAlpha;\n            this.edges = cfg.edges;\n            this.edgeColor = cfg.edgeColor;\n            this.edgeAlpha = cfg.edgeAlpha;\n            this.edgeWidth = cfg.edgeWidth;\n            this.backfaces = cfg.backfaces;\n        }\n    }\n\n    /**\n     * Sets if surfaces are filled with color.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    set fill(value) {\n        value = value !== false;\n        if (this._state.fill === value) {\n            return;\n        }\n        this._state.fill = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if surfaces are filled with color.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    get fill() {\n        return this._state.fill;\n    }\n\n    /**\n     * Sets the RGB color of filled faces.\n     *\n     * Default is ````[0.4, 0.4, 0.4]````.\n     *\n     * @type {Number[]}\n     */\n    set fillColor(value) {\n        let fillColor = this._state.fillColor;\n        if (!fillColor) {\n            fillColor = this._state.fillColor = new Float32Array(3);\n        } else if (value && fillColor[0] === value[0] && fillColor[1] === value[1] && fillColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            fillColor[0] = value[0];\n            fillColor[1] = value[1];\n            fillColor[2] = value[2];\n        } else {\n            fillColor[0] = 0.4;\n            fillColor[1] = 0.4;\n            fillColor[2] = 0.4;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB color of filled faces.\n     *\n     * Default is ````[0.4, 0.4, 0.4]````.\n     *\n     * @type {Number[]}\n     */\n    get fillColor() {\n        return this._state.fillColor;\n    }\n\n    /**\n     * Sets the transparency of filled faces.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     *\n     * @type {Number}\n     */\n    set fillAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 0.2;\n        if (this._state.fillAlpha === value) {\n            return;\n        }\n        this._state.fillAlpha = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the transparency of filled faces.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     *\n     * @type {Number}\n     */\n    get fillAlpha() {\n        return this._state.fillAlpha;\n    }\n\n    /**\n     * Sets if edges are visible.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    set edges(value) {\n        value = value !== false;\n        if (this._state.edges === value) {\n            return;\n        }\n        this._state.edges = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if edges are visible.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     * Sets the RGB color of edges.\n     *\n     * Default is ```` [0.2, 0.2, 0.2]````.\n     *\n     * @type {Number[]}\n     */\n    set edgeColor(value) {\n        let edgeColor = this._state.edgeColor;\n        if (!edgeColor) {\n            edgeColor = this._state.edgeColor = new Float32Array(3);\n        } else if (value && edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            edgeColor[0] = value[0];\n            edgeColor[1] = value[1];\n            edgeColor[2] = value[2];\n        } else {\n            edgeColor[0] = 0.2;\n            edgeColor[1] = 0.2;\n            edgeColor[2] = 0.2;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB color of edges.\n     *\n     * Default is ```` [0.2, 0.2, 0.2]````.\n     *\n     * @type {Number[]}\n     */\n    get edgeColor() {\n        return this._state.edgeColor;\n    }\n\n    /**\n     * Sets the transparency of edges.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     *\n     * @type {Number}\n     */\n    set edgeAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 0.5;\n        if (this._state.edgeAlpha === value) {\n            return;\n        }\n        this._state.edgeAlpha = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the transparency of edges.\n     *\n     * A value of ````0.0```` indicates fully transparent, ````1.0```` is fully opaque.\n     *\n     * Default is ````0.2````.\n     *\n     * @type {Number}\n     */\n    get edgeAlpha() {\n        return this._state.edgeAlpha;\n    }\n\n    /**\n     * Sets edge width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    set edgeWidth(value) {\n        this._state.edgeWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets edge width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    get edgeWidth() {\n        return this._state.edgeWidth;\n    }\n\n    /**\n     * Sets whether to render backfaces when {@link EmphasisMaterial#fill} is ````true````..\n     *\n     * Default is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether to render backfaces when {@link EmphasisMaterial#fill} is ````true````..\n     *\n     * Default is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     * Selects a preset EmphasisMaterial configuration.\n     *\n     * Default value is \"default\".\n     *\n     * @type {String}\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.fill = preset.fill;\n        this.fillColor = preset.fillColor;\n        this.fillAlpha = preset.fillAlpha;\n        this.edges = preset.edges;\n        this.edgeColor = preset.edgeColor;\n        this.edgeAlpha = preset.edgeAlpha;\n        this.edgeWidth = preset.edgeWidth;\n        this._preset = value;\n    }\n\n    /**\n     * Gets the current preset EmphasisMaterial configuration.\n     *\n     * Default value is \"default\".\n     *\n     * @type {String}\n     */\n    get preset() {\n        return this._preset;\n    }\n\n    /**\n     * Destroys this EmphasisMaterial.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGVyaWFscy9FbXBoYXNpc01hdGVyaWFsLmpzPzdiYjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUM7QUFDYTs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLGFBQWE7QUFDOUM7QUFDQSxjQUFjLGFBQWEsYUFBYSxvQkFBb0I7QUFDNUQsbUJBQW1CLGFBQWEsYUFBYSx5QkFBeUI7QUFDdEUsZ0JBQWdCLGFBQWEsYUFBYSxzQkFBc0I7QUFDaEUsV0FBVyxhQUFhLG9DQUFvQyxhQUFhLGdCQUFnQixvQkFBb0IsR0FBRyx5QkFBeUIsS0FBSztBQUM5SSxrRUFBa0UsYUFBYTtBQUMvRSw0RUFBNEUsOEJBQThCLDJCQUEyQiwrQkFBK0I7QUFDcEssb0JBQW9CLFdBQVcsd0NBQXdDLHlCQUF5QixHQUFHLDhCQUE4QixNQUFNO0FBQ3ZJLDRCQUE0Qix3QkFBd0IsR0FBRyw2QkFBNkIsS0FBSyw0QkFBNEI7QUFDckg7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFdBQVcsb0NBQW9DLGtCQUFrQjtBQUMxRztBQUNBLGdCQUFnQixXQUFXLHdDQUF3QyxhQUFhO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSx5REFBeUQsdUJBQXVCLFNBQVMsV0FBVztBQUNwRyxzQ0FBc0MsdUJBQXVCO0FBQzdEO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxxRUFBcUUseUJBQXlCO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5QkFBeUIsMkJBQTJCLCtCQUErQjtBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSwrQkFBK0IscURBQVE7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLEVBQUU7QUFDakIsZUFBZSxPQUFPLGtFQUFrRSxZQUFZO0FBQ3BHLGVBQWUsUUFBUTtBQUN2QixlQUFlLFNBQVM7QUFDeEIsZ0JBQWdCLE9BQU87QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsU0FBUztBQUN4QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTyxxRUFBcUUsK0JBQStCO0FBQzFILGVBQWUsUUFBUTtBQUN2QjtBQUNBLCtCQUErQjs7QUFFL0I7O0FBRUEsMEJBQTBCLGlFQUFXO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQThDLDRCQUE0QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQThDLDRCQUE0QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tYXRlcmlhbHMvRW1waGFzaXNNYXRlcmlhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWF0ZXJpYWx9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHtSZW5kZXJTdGF0ZX0gZnJvbSAnLi4vd2ViZ2wvUmVuZGVyU3RhdGUuanMnO1xuXG5jb25zdCBQUkVTRVRTID0ge1xuICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGZpbGxDb2xvcjogWzAuNCwgMC40LCAwLjRdLFxuICAgICAgICBmaWxsQWxwaGE6IDAuMixcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuMiwgMC4yLCAwLjJdLFxuICAgICAgICBlZGdlQWxwaGE6IDAuNSxcbiAgICAgICAgZWRnZVdpZHRoOiAxXG4gICAgfSxcbiAgICBcImRlZmF1bHRXaGl0ZUJHXCI6IHtcbiAgICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgICAgZmlsbENvbG9yOiBbMSwgMSwgMV0sXG4gICAgICAgIGZpbGxBbHBoYTogMC42LFxuICAgICAgICBlZGdlQ29sb3I6IFswLjIsIDAuMiwgMC4yXSxcbiAgICAgICAgZWRnZUFscGhhOiAxLjAsXG4gICAgICAgIGVkZ2VXaWR0aDogMVxuICAgIH0sXG4gICAgXCJkZWZhdWx0TGlnaHRCR1wiOiB7XG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGZpbGxDb2xvcjogWzAuNCwgMC40LCAwLjRdLFxuICAgICAgICBmaWxsQWxwaGE6IDAuMixcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuMiwgMC4yLCAwLjJdLFxuICAgICAgICBlZGdlQWxwaGE6IDAuNSxcbiAgICAgICAgZWRnZVdpZHRoOiAxXG4gICAgfSxcbiAgICBcImRlZmF1bHREYXJrQkdcIjoge1xuICAgICAgICBmaWxsOiB0cnVlLFxuICAgICAgICBmaWxsQ29sb3I6IFswLjQsIDAuNCwgMC40XSxcbiAgICAgICAgZmlsbEFscGhhOiAwLjIsXG4gICAgICAgIGVkZ2VzOiB0cnVlLFxuICAgICAgICBlZGdlQ29sb3I6IFswLjUsIDAuNSwgMC41XSxcbiAgICAgICAgZWRnZUFscGhhOiAwLjUsXG4gICAgICAgIGVkZ2VXaWR0aDogMVxuICAgIH0sXG4gICAgXCJwaG9zcGhvcm91c1wiOiB7XG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGZpbGxDb2xvcjogWzAuMCwgMC4wLCAwLjBdLFxuICAgICAgICBmaWxsQWxwaGE6IDAuNCxcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuOSwgMC45LCAwLjldLFxuICAgICAgICBlZGdlQWxwaGE6IDAuNSxcbiAgICAgICAgZWRnZVdpZHRoOiAyXG4gICAgfSxcbiAgICBcInN1bnNldFwiOiB7XG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGZpbGxDb2xvcjogWzAuOSwgMC45LCAwLjZdLFxuICAgICAgICBmaWxsQWxwaGE6IDAuMixcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuOSwgMC45LCAwLjldLFxuICAgICAgICBlZGdlQWxwaGE6IDAuNSxcbiAgICAgICAgZWRnZVdpZHRoOiAxXG4gICAgfSxcbiAgICBcInZlY3RvcnNjb3BlXCI6IHtcbiAgICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgICAgZmlsbENvbG9yOiBbMC4wLCAwLjAsIDAuMF0sXG4gICAgICAgIGZpbGxBbHBoYTogMC43LFxuICAgICAgICBlZGdlczogdHJ1ZSxcbiAgICAgICAgZWRnZUNvbG9yOiBbMC4yLCAxLjAsIDAuMl0sXG4gICAgICAgIGVkZ2VBbHBoYTogMSxcbiAgICAgICAgZWRnZVdpZHRoOiAyXG4gICAgfSxcbiAgICBcImJhdHRsZXpvbmVcIjoge1xuICAgICAgICBmaWxsOiB0cnVlLFxuICAgICAgICBmaWxsQ29sb3I6IFswLjAsIDAuMCwgMC4wXSxcbiAgICAgICAgZmlsbEFscGhhOiAxLjAsXG4gICAgICAgIGVkZ2VzOiB0cnVlLFxuICAgICAgICBlZGdlQ29sb3I6IFswLjIsIDEuMCwgMC4yXSxcbiAgICAgICAgZWRnZUFscGhhOiAxLFxuICAgICAgICBlZGdlV2lkdGg6IDNcbiAgICB9LFxuICAgIFwic2VwaWFcIjoge1xuICAgICAgICBmaWxsOiB0cnVlLFxuICAgICAgICBmaWxsQ29sb3I6IFswLjk3MDU4ODIwNzI0NDg3MywgMC43OTY1ODkyNTUzMzI5NDY4LCAwLjY2NjA4OTk1MTk5MjAzNDldLFxuICAgICAgICBmaWxsQWxwaGE6IDAuNCxcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuNTI5NDExNzkyNzU1MTI3LCAwLjQ1Nzc4NTQ1NzM3MjY2NTQsIDAuNDEwMDM0NTk2OTIwMDEzNF0sXG4gICAgICAgIGVkZ2VBbHBoYTogMS4wLFxuICAgICAgICBlZGdlV2lkdGg6IDFcbiAgICB9LFxuICAgIFwieWVsbG93SGlnaGxpZ2h0XCI6IHtcbiAgICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgICAgZmlsbENvbG9yOiBbMS4wLCAxLjAsIDAuMF0sXG4gICAgICAgIGZpbGxBbHBoYTogMC41LFxuICAgICAgICBlZGdlczogdHJ1ZSxcbiAgICAgICAgZWRnZUNvbG9yOiBbMC41Mjk0MTE3OTI3NTUxMjcsIDAuNDU3Nzg1NDU3MzcyNjY1NCwgMC40MTAwMzQ1OTY5MjAwMTM0XSxcbiAgICAgICAgZWRnZUFscGhhOiAxLjAsXG4gICAgICAgIGVkZ2VXaWR0aDogMVxuICAgIH0sXG4gICAgXCJncmVlblNlbGVjdGVkXCI6IHtcbiAgICAgICAgZmlsbDogdHJ1ZSxcbiAgICAgICAgZmlsbENvbG9yOiBbMC4wLCAxLjAsIDAuMF0sXG4gICAgICAgIGZpbGxBbHBoYTogMC41LFxuICAgICAgICBlZGdlczogdHJ1ZSxcbiAgICAgICAgZWRnZUNvbG9yOiBbMC40NTc3ODU0NTczNzI2NjU0LCAwLjUyOTQxMTc5Mjc1NTEyNywgMC40MTAwMzQ1OTY5MjAwMTM0XSxcbiAgICAgICAgZWRnZUFscGhhOiAxLjAsXG4gICAgICAgIGVkZ2VXaWR0aDogMVxuICAgIH0sXG4gICAgXCJnYW1lZ3JpZFwiOiB7XG4gICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgIGZpbGxDb2xvcjogWzAuMiwgMC4yLCAwLjddLFxuICAgICAgICBmaWxsQWxwaGE6IDAuOSxcbiAgICAgICAgZWRnZXM6IHRydWUsXG4gICAgICAgIGVkZ2VDb2xvcjogWzAuNCwgMC40LCAxLjZdLFxuICAgICAgICBlZGdlQWxwaGE6IDAuOCxcbiAgICAgICAgZWRnZVdpZHRoOiAzXG4gICAgfVxufTtcblxuLyoqXG4gKiBDb25maWd1cmVzIHRoZSBhcHBlYXJhbmNlIG9mIHtAbGluayBFbnRpdHl9cyB3aGVuIHRoZXkgYXJlIHhyYXllZCwgaGlnaGxpZ2h0ZWQgb3Igc2VsZWN0ZWQuXG4gKlxuICogKiBYUmF5IGFuIHtAbGluayBFbnRpdHl9IGJ5IHNldHRpbmcge0BsaW5rIEVudGl0eSN4cmF5ZWR9IGBgYGB0cnVlYGBgYC5cbiAqICogSGlnaGxpZ2h0IGFuIHtAbGluayBFbnRpdHl9IGJ5IHNldHRpbmcge0BsaW5rIEVudGl0eSNoaWdobGlnaHRlZH0gYGBgYHRydWVgYGBgLlxuICogKiBTZWxlY3QgYW4ge0BsaW5rIEVudGl0eX0gYnkgc2V0dGluZyB7QGxpbmsgRW50aXR5I3NlbGVjdGVkfSBgYGBgdHJ1ZWBgYGAuXG4gKiAqIFdoZW4ge0BsaW5rIEVudGl0eX1zIGFyZSB3aXRoaW4gdGhlIHN1YnRyZWUgb2YgYSByb290IHtAbGluayBFbnRpdHl9LCB0aGVuIHNldHRpbmcge0BsaW5rIEVudGl0eSN4cmF5ZWR9LCB7QGxpbmsgRW50aXR5I2hpZ2hsaWdodGVkfSBvciB7QGxpbmsgRW50aXR5I3NlbGVjdGVkfVxuICogb24gdGhlIHJvb3Qgd2lsbCBjb2xsZWN0aXZlbHkgc2V0IHRob3NlIHByb3BlcnRpZXMgb24gYWxsIHN1Yi17QGxpbmsgRW50aXR5fXMuXG4gKiAqIEVtcGhhc2lzTWF0ZXJpYWwgcHJvdmlkZXMgc2V2ZXJhbCBwcmVzZXRzLiBTZWxlY3QgYSBwcmVzZXQgYnkgc2V0dGluZyB7QGxpbmsgRW1waGFzaXNNYXRlcmlhbCNwcmVzZXR9IHRvIHRoZSBJRCBvZiBhIHByZXNldCBpbiB7QGxpbmsgRW1waGFzaXNNYXRlcmlhbCNwcmVzZXRzfS5cbiAqICogQnkgZGVmYXVsdCwgYSB7QGxpbmsgTWVzaH0gdXNlcyB0aGUgZGVmYXVsdCBFbXBoYXNpc01hdGVyaWFscyBpbiB7QGxpbmsgU2NlbmUjeHJheU1hdGVyaWFsfSwge0BsaW5rIFNjZW5lI2hpZ2hsaWdodE1hdGVyaWFsfSBhbmQge0BsaW5rIFNjZW5lI3NlbGVjdGVkTWF0ZXJpYWx9XG4gKiBidXQgeW91IGNhbiBhc3NpZ24gZWFjaCB7QGxpbmsgTWVzaCN4cmF5TWF0ZXJpYWx9LCB7QGxpbmsgTWVzaCNoaWdobGlnaHRNYXRlcmlhbH0gb3Ige0BsaW5rIE1lc2gjc2VsZWN0ZWRNYXRlcmlhbH0gdG8gYSBjdXN0b20gRW1waGFzaXNNYXRlcmlhbCwgaWYgcmVxdWlyZWQuXG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdywgd2UnbGwgY3JlYXRlIGEge0BsaW5rIE1lc2h9IHdpdGggaXRzIG93biBYUmF5TWF0ZXJpYWwgYW5kIHNldCB7QGxpbmsgTWVzaCN4cmF5ZWR9IGBgYGB0cnVlYGBgYCB0byB4cmF5IGl0LlxuICpcbiAqIFJlY2FsbCB0aGF0IHtAbGluayBNZXNofSBpcyBhIGNvbmNyZXRlIHN1YnR5cGUgb2YgdGhlIGFic3RyYWN0IHtAbGluayBFbnRpdHl9IGJhc2UgY2xhc3MuXG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIG5ldyBNZXNoKHZpZXdlci5zY2VuZSwge1xuICogICAgIGdlb21ldHJ5OiBuZXcgQm94R2VvbWV0cnkodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgICAgIGVkZ2VUaHJlc2hvbGQ6IDFcbiAqICAgICB9KSxcbiAqICAgICBtYXRlcmlhbDogbmV3IFBob25nTWF0ZXJpYWwodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgICAgIGRpZmZ1c2U6IFswLjIsIDAuMiwgMS4wXVxuICogICAgIH0pLFxuICogICAgIHhyYXlNYXRlcmlhbDogbmV3IEVtcGhhc2lzTWF0ZXJpYWwodmlld2VyLnNjZW5lLCB7XG4gKiAgICAgICAgIGZpbGw6IHRydWUsXG4gKiAgICAgICAgIGZpbGxDb2xvcjogWzAsIDAsIDBdLFxuICogICAgICAgICBmaWxsQWxwaGE6IDAuNyxcbiAqICAgICAgICAgZWRnZXM6IHRydWUsXG4gKiAgICAgICAgIGVkZ2VDb2xvcjogWzAuMiwgMS4wLCAwLjJdLFxuICogICAgICAgICBlZGdlQWxwaGE6IDEuMCxcbiAqICAgICAgICAgZWRnZVdpZHRoOiAyXG4gKiAgICAgfSksXG4gKiAgICAgeHJheWVkOiB0cnVlXG4gKiB9KTtcbiAqIGBgYGBcbiAqXG4gKiBOb3RlIHRoZSBgYGBgZWRnZVRocmVzaG9sZGBgYGAgY29uZmlndXJhdGlvbiBmb3IgdGhlIHtAbGluayBSZWFkYWJsZUdlb21ldHJ5fSBvbiBvdXIge0BsaW5rIE1lc2h9LiAgRW1waGFzaXNNYXRlcmlhbCBjb25maWd1cmVzXG4gKiBhIHdpcmVmcmFtZSByZXByZXNlbnRhdGlvbiBvZiB0aGUge0BsaW5rIFJlYWRhYmxlR2VvbWV0cnl9IGZvciB0aGUgc2VsZWN0ZWQgZW1waGFzaXMgbW9kZSwgd2hpY2ggd2lsbCBoYXZlIGlubmVyIGVkZ2VzICh0aG9zZSBlZGdlcyBiZXR3ZWVuXG4gKiBhZGphY2VudCBjby1wbGFuYXIgdHJpYW5nbGVzKSByZW1vdmVkIGZvciB2aXN1YWwgY2xhcml0eS4gVGhlIGBgYGBlZGdlVGhyZXNob2xkYGBgYCBpbmRpY2F0ZXMgdGhhdCwgZm9yXG4gKiB0aGlzIHBhcnRpY3VsYXIge0BsaW5rIFJlYWRhYmxlR2VvbWV0cnl9LCBhbiBpbm5lciBlZGdlIGlzIG9uZSB3aGVyZSB0aGUgYW5nbGUgYmV0d2VlbiB0aGUgc3VyZmFjZSBub3JtYWxzIG9mIGFkamFjZW50IHRyaWFuZ2xlc1xuICogaXMgbm90IGdyZWF0ZXIgdGhhbiBgYGBgNWBgYGAgZGVncmVlcy4gVGhhdCdzIHNldCB0byBgYGBgMmBgYGAgYnkgZGVmYXVsdCwgYnV0IHdlIGNhbiBvdmVycmlkZSBpdCB0byB0d2VhayB0aGUgZWZmZWN0XG4gKiBhcyBuZWVkZWQgZm9yIHBhcnRpY3VsYXIgR2VvbWV0cmllcy5cbiAqXG4gKiBIZXJlJ3MgdGhlIGV4YW1wbGUgYWdhaW4sIHRoaXMgdGltZSBpbXBsaWNpdGx5IGRlZmF1bHRpbmcgdG8gdGhlIHtAbGluayBTY2VuZSNlZGdlTWF0ZXJpYWx9LiBXZSdsbCBhbHNvIG1vZGlmeSB0aGF0IEVkZ2VNYXRlcmlhbFxuICogdG8gY3VzdG9taXplIHRoZSBlZmZlY3QuXG4gKlxuICogYGBgYGphdmFzY3JpcHRcbiAqIG5ldyBNZXNoKHtcbiAqICAgICBnZW9tZXRyeTogbmV3IFRlYXBvdEdlb21ldHJ5KHZpZXdlci5zY2VuZSwge1xuICogICAgICAgICBlZGdlVGhyZXNob2xkOiA1XG4gKiAgICAgfSksXG4gKiAgICAgbWF0ZXJpYWw6IG5ldyBQaG9uZ01hdGVyaWFsKHZpZXdlci5zY2VuZSwge1xuICogICAgICAgICBkaWZmdXNlOiBbMC4yLCAwLjIsIDEuMF1cbiAqICAgICB9KSxcbiAqICAgICB4cmF5ZWQ6IHRydWVcbiAqIH0pO1xuICpcbiAqIHZhciB4cmF5TWF0ZXJpYWwgPSB2aWV3ZXIuc2NlbmUueHJheU1hdGVyaWFsO1xuICpcbiAqIHhyYXlNYXRlcmlhbC5maWxsQ29sb3IgPSBbMC4yLCAxLjAsIDAuMl07XG4gKiB4cmF5TWF0ZXJpYWwuZmlsbEFscGhhID0gMS4wO1xuICogYGBgYFxuICpcbiAqICMjIFByZXNldHNcbiAqXG4gKiBMZXQncyBzd2l0Y2ggdGhlIHtAbGluayBTY2VuZSN4cmF5TWF0ZXJpYWx9IHRvIG9uZSBvZiB0aGUgcHJlc2V0cyBpbiB7QGxpbmsgRW1waGFzaXNNYXRlcmlhbCNwcmVzZXRzfTpcbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogdmlld2VyLnhyYXlNYXRlcmlhbC5wcmVzZXQgPSBFbXBoYXNpc01hdGVyaWFsLnByZXNldHNbXCJzZXBpYVwiXTtcbiAqIGBgYGBcbiAqXG4gKiBXZSBjYW4gYWxzbyBjcmVhdGUgYW4gRW1waGFzaXNNYXRlcmlhbCBmcm9tIGEgcHJlc2V0LCB3aGlsZSBvdmVycmlkaW5nIHByb3BlcnRpZXMgb2YgdGhlIHByZXNldCBhcyByZXF1aXJlZDpcbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogdmFyIG15RW1waGFzaXNNYXRlcmlhbCA9IG5ldyBFTXBoYXNpc01hdGVyaWFsKHZpZXdlci5zY2VuZSwge1xuICogICAgICBwcmVzZXQ6IFwic2VwaWFcIixcbiAqICAgICAgZmlsbENvbG9yID0gWzEuMCwgMC41LCAwLjVdXG4gKiB9KTtcbiAqIGBgYGBcbiAqL1xuY2xhc3MgRW1waGFzaXNNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcblxuICAgIC8qKlxuICAgICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gXCJFbXBoYXNpc01hdGVyaWFsXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhdmFpbGFibGUgRW1waGFzaXNNYXRlcmlhbCBwcmVzZXRzLlxuICAgICAqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBnZXQgcHJlc2V0cygpIHtcbiAgICAgICAgcmV0dXJuIFBSRVNFVFM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBvd25lciBPd25lciBjb21wb25lbnQuIFdoZW4gZGVzdHJveWVkLCB0aGUgb3duZXIgd2lsbCBkZXN0cm95IHRoaXMgY29tcG9uZW50IGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHsqfSBbY2ZnXSBUaGUgRW1waGFzaXNNYXRlcmlhbCBjb25maWd1cmF0aW9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjZmcuaWRdIE9wdGlvbmFsIElELCB1bmlxdWUgYW1vbmcgYWxsIGNvbXBvbmVudHMgaW4gdGhlIHBhcmVudCB7QGxpbmsgU2NlbmV9LCBnZW5lcmF0ZWQgYXV0b21hdGljYWxseSB3aGVuIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2ZnLmZpbGw9dHJ1ZV0gSW5kaWNhdGVzIGlmIHhyYXkgc3VyZmFjZXMgYXJlIGZpbGxlZCB3aXRoIGNvbG9yLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IFtjZmcuZmlsbENvbG9yPVswLjQsMC40LDAuNF1dIEVtcGhhc2lzTWF0ZXJpYWwgZmlsbCBjb2xvci5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtjZmcuZmlsbEFscGhhPTAuMl0gVHJhbnNwYXJlbmN5IG9mIGZpbGxlZCB4cmF5IGZhY2VzLiBBIHZhbHVlIG9mIGBgYGAwLjBgYGBgIGluZGljYXRlcyBmdWxseSB0cmFuc3BhcmVudCwgYGBgYDEuMGBgYGAgaXMgZnVsbHkgb3BhcXVlLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NmZy5lZGdlcz10cnVlXSBJbmRpY2F0ZXMgaWYgeHJheSBlZGdlcyBhcmUgdmlzaWJsZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBbY2ZnLmVkZ2VDb2xvcj1bMC4yLDAuMiwwLjJdXSAgUkdCIGNvbG9yIG9mIHhyYXkgZWRnZXMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjZmcuZWRnZUFscGhhPTAuNV0gVHJhbnNwYXJlbmN5IG9mIHhyYXkgZWRnZXMuIEEgdmFsdWUgb2YgYGBgYDAuMGBgYGAgaW5kaWNhdGVzIGZ1bGx5IHRyYW5zcGFyZW50LCBgYGBgMS4wYGBgYCBpcyBmdWxseSBvcGFxdWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjZmcuZWRnZVdpZHRoPTFdIFdpZHRoIG9mIHhyYXkgZWRnZXMsIGluIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NmZy5wcmVzZXRdIFNlbGVjdHMgYSBwcmVzZXQgRW1waGFzaXNNYXRlcmlhbCBjb25maWd1cmF0aW9uIC0gc2VlIHtAbGluayBFbXBoYXNpc01hdGVyaWFsI3ByZXNldHN9LlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NmZy5iYWNrZmFjZXM9ZmFsc2VdIFdoZXRoZXIgdG8gcmVuZGVyIGdlb21ldHJ5IGJhY2tmYWNlcyB3aGVuIGVtcGhhc2lzaW5nLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBjZmcgPSB7fSkge1xuXG4gICAgICAgIHN1cGVyKG93bmVyLCBjZmcpO1xuXG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFJlbmRlclN0YXRlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiRW1waGFzaXNNYXRlcmlhbFwiLFxuICAgICAgICAgICAgZmlsbDogbnVsbCxcbiAgICAgICAgICAgIGZpbGxDb2xvcjogbnVsbCxcbiAgICAgICAgICAgIGZpbGxBbHBoYTogbnVsbCxcbiAgICAgICAgICAgIGVkZ2VzOiBudWxsLFxuICAgICAgICAgICAgZWRnZUNvbG9yOiBudWxsLFxuICAgICAgICAgICAgZWRnZUFscGhhOiBudWxsLFxuICAgICAgICAgICAgZWRnZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgYmFja2ZhY2VzOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3ByZXNldCA9IFwiZGVmYXVsdFwiO1xuXG4gICAgICAgIGlmIChjZmcucHJlc2V0KSB7IC8vIEFwcGx5IHByZXNldCB0aGVuIG92ZXJyaWRlIHdpdGggY29uZmlncyB3aGVyZSBwcm92aWRlZFxuICAgICAgICAgICAgdGhpcy5wcmVzZXQgPSBjZmcucHJlc2V0O1xuICAgICAgICAgICAgaWYgKGNmZy5maWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGwgPSBjZmcuZmlsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjZmcuZmlsbENvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxsQ29sb3IgPSBjZmcuZmlsbENvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNmZy5maWxsQWxwaGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsbEFscGhhID0gY2ZnLmZpbGxBbHBoYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjZmcuZWRnZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRnZXMgPSBjZmcuZWRnZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2ZnLmVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRnZUNvbG9yID0gY2ZnLmVkZ2VDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjZmcuZWRnZUFscGhhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVkZ2VBbHBoYSA9IGNmZy5lZGdlQWxwaGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2ZnLmVkZ2VXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGdlV2lkdGggPSBjZmcuZWRnZVdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNmZy5iYWNrZmFjZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmFja2ZhY2VzID0gY2ZnLmJhY2tmYWNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbCA9IGNmZy5maWxsO1xuICAgICAgICAgICAgdGhpcy5maWxsQ29sb3IgPSBjZmcuZmlsbENvbG9yO1xuICAgICAgICAgICAgdGhpcy5maWxsQWxwaGEgPSBjZmcuZmlsbEFscGhhO1xuICAgICAgICAgICAgdGhpcy5lZGdlcyA9IGNmZy5lZGdlcztcbiAgICAgICAgICAgIHRoaXMuZWRnZUNvbG9yID0gY2ZnLmVkZ2VDb2xvcjtcbiAgICAgICAgICAgIHRoaXMuZWRnZUFscGhhID0gY2ZnLmVkZ2VBbHBoYTtcbiAgICAgICAgICAgIHRoaXMuZWRnZVdpZHRoID0gY2ZnLmVkZ2VXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuYmFja2ZhY2VzID0gY2ZnLmJhY2tmYWNlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgaWYgc3VyZmFjZXMgYXJlIGZpbGxlZCB3aXRoIGNvbG9yLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBpcyBgYGBgdHJ1ZWBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzZXQgZmlsbCh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmZpbGwgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUuZmlsbCA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsUmVkcmF3KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBpZiBzdXJmYWNlcyBhcmUgZmlsbGVkIHdpdGggY29sb3IuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGB0cnVlYGBgYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGdldCBmaWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUuZmlsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBSR0IgY29sb3Igb2YgZmlsbGVkIGZhY2VzLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBpcyBgYGBgWzAuNCwgMC40LCAwLjRdYGBgYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJbXX1cbiAgICAgKi9cbiAgICBzZXQgZmlsbENvbG9yKHZhbHVlKSB7XG4gICAgICAgIGxldCBmaWxsQ29sb3IgPSB0aGlzLl9zdGF0ZS5maWxsQ29sb3I7XG4gICAgICAgIGlmICghZmlsbENvbG9yKSB7XG4gICAgICAgICAgICBmaWxsQ29sb3IgPSB0aGlzLl9zdGF0ZS5maWxsQ29sb3IgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICYmIGZpbGxDb2xvclswXSA9PT0gdmFsdWVbMF0gJiYgZmlsbENvbG9yWzFdID09PSB2YWx1ZVsxXSAmJiBmaWxsQ29sb3JbMl0gPT09IHZhbHVlWzJdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBmaWxsQ29sb3JbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgICAgIGZpbGxDb2xvclsxXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgZmlsbENvbG9yWzJdID0gdmFsdWVbMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxsQ29sb3JbMF0gPSAwLjQ7XG4gICAgICAgICAgICBmaWxsQ29sb3JbMV0gPSAwLjQ7XG4gICAgICAgICAgICBmaWxsQ29sb3JbMl0gPSAwLjQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nbFJlZHJhdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFJHQiBjb2xvciBvZiBmaWxsZWQgZmFjZXMuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGBbMC40LCAwLjQsIDAuNF1gYGBgLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCBmaWxsQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5maWxsQ29sb3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdHJhbnNwYXJlbmN5IG9mIGZpbGxlZCBmYWNlcy5cbiAgICAgKlxuICAgICAqIEEgdmFsdWUgb2YgYGBgYDAuMGBgYGAgaW5kaWNhdGVzIGZ1bGx5IHRyYW5zcGFyZW50LCBgYGBgMS4wYGBgYCBpcyBmdWxseSBvcGFxdWUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGAwLjJgYGBgLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBzZXQgZmlsbEFscGhhKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpID8gdmFsdWUgOiAwLjI7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZS5maWxsQWxwaGEgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUuZmlsbEFscGhhID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZ2xSZWRyYXcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0cmFuc3BhcmVuY3kgb2YgZmlsbGVkIGZhY2VzLlxuICAgICAqXG4gICAgICogQSB2YWx1ZSBvZiBgYGBgMC4wYGBgYCBpbmRpY2F0ZXMgZnVsbHkgdHJhbnNwYXJlbnQsIGBgYGAxLjBgYGBgIGlzIGZ1bGx5IG9wYXF1ZS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYDAuMmBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBmaWxsQWxwaGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5maWxsQWxwaGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBpZiBlZGdlcyBhcmUgdmlzaWJsZS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYHRydWVgYGBgLlxuICAgICAqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgc2V0IGVkZ2VzKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgIT09IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUuZWRnZXMgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUuZWRnZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbFJlZHJhdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgaWYgZWRnZXMgYXJlIHZpc2libGUuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGB0cnVlYGBgYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGdldCBlZGdlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmVkZ2VzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFJHQiBjb2xvciBvZiBlZGdlcy5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYCBbMC4yLCAwLjIsIDAuMl1gYGBgLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIHNldCBlZGdlQ29sb3IodmFsdWUpIHtcbiAgICAgICAgbGV0IGVkZ2VDb2xvciA9IHRoaXMuX3N0YXRlLmVkZ2VDb2xvcjtcbiAgICAgICAgaWYgKCFlZGdlQ29sb3IpIHtcbiAgICAgICAgICAgIGVkZ2VDb2xvciA9IHRoaXMuX3N0YXRlLmVkZ2VDb2xvciA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgZWRnZUNvbG9yWzBdID09PSB2YWx1ZVswXSAmJiBlZGdlQ29sb3JbMV0gPT09IHZhbHVlWzFdICYmIGVkZ2VDb2xvclsyXSA9PT0gdmFsdWVbMl0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGVkZ2VDb2xvclswXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgZWRnZUNvbG9yWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICBlZGdlQ29sb3JbMl0gPSB2YWx1ZVsyXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVkZ2VDb2xvclswXSA9IDAuMjtcbiAgICAgICAgICAgIGVkZ2VDb2xvclsxXSA9IDAuMjtcbiAgICAgICAgICAgIGVkZ2VDb2xvclsyXSA9IDAuMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdsUmVkcmF3KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgUkdCIGNvbG9yIG9mIGVkZ2VzLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBpcyBgYGBgIFswLjIsIDAuMiwgMC4yXWBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAgICovXG4gICAgZ2V0IGVkZ2VDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmVkZ2VDb2xvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0cmFuc3BhcmVuY3kgb2YgZWRnZXMuXG4gICAgICpcbiAgICAgKiBBIHZhbHVlIG9mIGBgYGAwLjBgYGBgIGluZGljYXRlcyBmdWxseSB0cmFuc3BhcmVudCwgYGBgYDEuMGBgYGAgaXMgZnVsbHkgb3BhcXVlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBpcyBgYGBgMC4yYGBgYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgc2V0IGVkZ2VBbHBoYSh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSA/IHZhbHVlIDogMC41O1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUuZWRnZUFscGhhID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlLmVkZ2VBbHBoYSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmdsUmVkcmF3KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdHJhbnNwYXJlbmN5IG9mIGVkZ2VzLlxuICAgICAqXG4gICAgICogQSB2YWx1ZSBvZiBgYGBgMC4wYGBgYCBpbmRpY2F0ZXMgZnVsbHkgdHJhbnNwYXJlbnQsIGBgYGAxLjBgYGBgIGlzIGZ1bGx5IG9wYXF1ZS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYDAuMmBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldCBlZGdlQWxwaGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5lZGdlQWxwaGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBlZGdlIHdpZHRoLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IFdlYkdMIGltcGxlbWVudGF0aW9ucyBiYXNlZCBvbiBEaXJlY3RYIFsyMDE5XS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGBgYDEuMGBgYGAgcGl4ZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBzZXQgZWRnZVdpZHRoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLmVkZ2VXaWR0aCA9IHZhbHVlIHx8IDEuMDtcbiAgICAgICAgdGhpcy5nbFJlZHJhdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgZWRnZSB3aWR0aC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBieSBXZWJHTCBpbXBsZW1lbnRhdGlvbnMgYmFzZWQgb24gRGlyZWN0WCBbMjAxOV0uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBgYGAxLjBgYGBgIHBpeGVscy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGVkZ2VXaWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmVkZ2VXaWR0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHdoZXRoZXIgdG8gcmVuZGVyIGJhY2tmYWNlcyB3aGVuIHtAbGluayBFbXBoYXNpc01hdGVyaWFsI2ZpbGx9IGlzIGBgYGB0cnVlYGBgYC4uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGlzIGBgYGBmYWxzZWBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzZXQgYmFja2ZhY2VzKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gISF2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmJhY2tmYWNlcyA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZS5iYWNrZmFjZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5nbFJlZHJhdygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgd2hldGhlciB0byByZW5kZXIgYmFja2ZhY2VzIHdoZW4ge0BsaW5rIEVtcGhhc2lzTWF0ZXJpYWwjZmlsbH0gaXMgYGBgYHRydWVgYGBgLi5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgaXMgYGBgYGZhbHNlYGBgYC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIGdldCBiYWNrZmFjZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZS5iYWNrZmFjZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBhIHByZXNldCBFbXBoYXNpc01hdGVyaWFsIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIFwiZGVmYXVsdFwiLlxuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBzZXQgcHJlc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgfHwgXCJkZWZhdWx0XCI7XG4gICAgICAgIGlmICh0aGlzLl9wcmVzZXQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlc2V0ID0gUFJFU0VUU1t2YWx1ZV07XG4gICAgICAgIGlmICghcHJlc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKFwidW5zdXBwb3J0ZWQgcHJlc2V0OiAnXCIgKyB2YWx1ZSArIFwiJyAtIHN1cHBvcnRlZCB2YWx1ZXMgYXJlIFwiICsgT2JqZWN0LmtleXMoUFJFU0VUUykuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbGwgPSBwcmVzZXQuZmlsbDtcbiAgICAgICAgdGhpcy5maWxsQ29sb3IgPSBwcmVzZXQuZmlsbENvbG9yO1xuICAgICAgICB0aGlzLmZpbGxBbHBoYSA9IHByZXNldC5maWxsQWxwaGE7XG4gICAgICAgIHRoaXMuZWRnZXMgPSBwcmVzZXQuZWRnZXM7XG4gICAgICAgIHRoaXMuZWRnZUNvbG9yID0gcHJlc2V0LmVkZ2VDb2xvcjtcbiAgICAgICAgdGhpcy5lZGdlQWxwaGEgPSBwcmVzZXQuZWRnZUFscGhhO1xuICAgICAgICB0aGlzLmVkZ2VXaWR0aCA9IHByZXNldC5lZGdlV2lkdGg7XG4gICAgICAgIHRoaXMuX3ByZXNldCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcHJlc2V0IEVtcGhhc2lzTWF0ZXJpYWwgY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgXCJkZWZhdWx0XCIuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldCBwcmVzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVzZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgdGhpcyBFbXBoYXNpc01hdGVyaWFsLlxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fc3RhdGUuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtFbXBoYXNpc01hdGVyaWFsfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EmphasisMaterial.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/LinesMaterial.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/LinesMaterial.js ***!
  \*************************************************************************************/
/*! exports provided: LinesMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinesMaterial\", function() { return LinesMaterial; });\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\nconst PRESETS = {\n    \"default\": {\n        lineWidth: 1\n    },\n    \"thick\": {\n        lineWidth: 2\n    },\n    \"thicker\": {\n        lineWidth: 4\n    }\n};\n\n/**\n * @desc Configures the shape of \"lines\" geometry primitives.\n *\n * * Located at {@link Scene#linesMaterial}.\n * * Globally configures \"lines\" primitives for all {@link PerformanceModel}s.\n *\n * ## Usage\n *\n * In the example below, we'll customize the {@link Scene}'s global ````LinesMaterial````, then use\n * an {@link XKTLoaderPlugin} to load a model containing line segments.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#materials_LinesMaterial)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {XKTLoaderPlugin} from \"../src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\",\n *     transparent: true\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * viewer.scene.linesMaterial.lineWidth = 3;\n *\n * const xktLoader = new XKTLoaderPlugin(viewer);\n *\n * const model = xktLoader.load({\n *      id: \"myModel\",\n *      src: \"./models/xkt/duplex/duplex.xkt\",\n *      metaModelSrc: \"./metaModels/duplex/metaModel.json\"\n * });\n * ````\n */\nclass LinesMaterial extends _Material_js__WEBPACK_IMPORTED_MODULE_0__[\"Material\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"LinesMaterial\";\n    }\n\n    /**\n     * Gets available LinesMaterial presets.\n     *\n     * @type {Object}\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] The LinesMaterial configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number} [cfg.lineWidth=1] Line width in pixels.\n     * @param {String} [cfg.preset] Selects a preset LinesMaterial configuration - see {@link LinesMaterial#presets}.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            type: \"LinesMaterial\",\n            lineWidth: null\n        });\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.lineWidth !== undefined) {\n                this.lineWidth = cfg.lineWidth;\n            }\n        } else {\n            this._preset = \"default\";\n            this.lineWidth = cfg.lineWidth;\n        }\n    }\n\n    /**\n     * Sets line width.\n     *\n     * Default value is ````1```` pixels.\n     *\n     * @type {Number}\n     */\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the line width.\n     *\n     * Default value is ````1```` pixels.\n     *\n     * @type {Number}\n     */\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     * Selects a preset LinesMaterial configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.lineWidth = preset.lineWidth;\n        this._preset = value;\n    }\n\n    /**\n     * The current preset LinesMaterial configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    get preset() {\n        return this._preset;\n    }\n\n    /**\n     * @private\n     * @return {string}\n     */\n    get hash() {\n        return [\"\" + this.lineWidth].join((\";\"));\n    }\n\n    /**\n     * Destroys this LinesMaterial.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGVyaWFscy9MaW5lc01hdGVyaWFsLmpzP2M5NTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBdUM7QUFDYTs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBCQUEwQjtBQUMzQyxxREFBcUQsdUJBQXVCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFELE9BQU8sc0JBQXNCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSw0QkFBNEIscURBQVE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLEVBQUU7QUFDakIsZUFBZSxPQUFPLGtFQUFrRSxZQUFZO0FBQ3BHLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU8sa0VBQWtFLDRCQUE0QjtBQUNwSDtBQUNBLCtCQUErQjs7QUFFL0I7O0FBRUEsMEJBQTBCLGlFQUFXO0FBQ3JDO0FBQ0E7QUFDQSxTQUFTOztBQUVULHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tYXRlcmlhbHMvTGluZXNNYXRlcmlhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWF0ZXJpYWx9IGZyb20gJy4vTWF0ZXJpYWwuanMnO1xuaW1wb3J0IHtSZW5kZXJTdGF0ZX0gZnJvbSAnLi4vd2ViZ2wvUmVuZGVyU3RhdGUuanMnO1xuXG5jb25zdCBQUkVTRVRTID0ge1xuICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgIGxpbmVXaWR0aDogMVxuICAgIH0sXG4gICAgXCJ0aGlja1wiOiB7XG4gICAgICAgIGxpbmVXaWR0aDogMlxuICAgIH0sXG4gICAgXCJ0aGlja2VyXCI6IHtcbiAgICAgICAgbGluZVdpZHRoOiA0XG4gICAgfVxufTtcblxuLyoqXG4gKiBAZGVzYyBDb25maWd1cmVzIHRoZSBzaGFwZSBvZiBcImxpbmVzXCIgZ2VvbWV0cnkgcHJpbWl0aXZlcy5cbiAqXG4gKiAqIExvY2F0ZWQgYXQge0BsaW5rIFNjZW5lI2xpbmVzTWF0ZXJpYWx9LlxuICogKiBHbG9iYWxseSBjb25maWd1cmVzIFwibGluZXNcIiBwcmltaXRpdmVzIGZvciBhbGwge0BsaW5rIFBlcmZvcm1hbmNlTW9kZWx9cy5cbiAqXG4gKiAjIyBVc2FnZVxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93LCB3ZSdsbCBjdXN0b21pemUgdGhlIHtAbGluayBTY2VuZX0ncyBnbG9iYWwgYGBgYExpbmVzTWF0ZXJpYWxgYGBgLCB0aGVuIHVzZVxuICogYW4ge0BsaW5rIFhLVExvYWRlclBsdWdpbn0gdG8gbG9hZCBhIG1vZGVsIGNvbnRhaW5pbmcgbGluZSBzZWdtZW50cy5cbiAqXG4gKiBbW1J1biB0aGlzIGV4YW1wbGVdKGh0dHA6Ly94ZW9raXQuZ2l0aHViLmlvL3hlb2tpdC1zZGsvZXhhbXBsZXMvI21hdGVyaWFsc19MaW5lc01hdGVyaWFsKV1cbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHtWaWV3ZXJ9IGZyb20gXCIuLi9zcmMvdmlld2VyL1ZpZXdlci5qc1wiO1xuICogaW1wb3J0IHtYS1RMb2FkZXJQbHVnaW59IGZyb20gXCIuLi9zcmMvcGx1Z2lucy9YS1RMb2FkZXJQbHVnaW4vWEtUTG9hZGVyUGx1Z2luLmpzXCI7XG4gKlxuICogY29uc3Qgdmlld2VyID0gbmV3IFZpZXdlcih7XG4gKiAgICAgY2FudmFzSWQ6IFwibXlDYW52YXNcIixcbiAqICAgICB0cmFuc3BhcmVudDogdHJ1ZVxuICogfSk7XG4gKlxuICogdmlld2VyLnNjZW5lLmNhbWVyYS5leWUgPSBbMCwgMCwgNV07XG4gKiB2aWV3ZXIuc2NlbmUuY2FtZXJhLmxvb2sgPSBbMCwgMCwgMF07XG4gKiB2aWV3ZXIuc2NlbmUuY2FtZXJhLnVwID0gWzAsIDEsIDBdO1xuICpcbiAqIHZpZXdlci5zY2VuZS5saW5lc01hdGVyaWFsLmxpbmVXaWR0aCA9IDM7XG4gKlxuICogY29uc3QgeGt0TG9hZGVyID0gbmV3IFhLVExvYWRlclBsdWdpbih2aWV3ZXIpO1xuICpcbiAqIGNvbnN0IG1vZGVsID0geGt0TG9hZGVyLmxvYWQoe1xuICogICAgICBpZDogXCJteU1vZGVsXCIsXG4gKiAgICAgIHNyYzogXCIuL21vZGVscy94a3QvZHVwbGV4L2R1cGxleC54a3RcIixcbiAqICAgICAgbWV0YU1vZGVsU3JjOiBcIi4vbWV0YU1vZGVscy9kdXBsZXgvbWV0YU1vZGVsLmpzb25cIlxuICogfSk7XG4gKiBgYGBgXG4gKi9cbmNsYXNzIExpbmVzTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG5cbiAgICAvKipcbiAgICAgQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTGluZXNNYXRlcmlhbFwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYXZhaWxhYmxlIExpbmVzTWF0ZXJpYWwgcHJlc2V0cy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2V0IHByZXNldHMoKSB7XG4gICAgICAgIHJldHVybiBQUkVTRVRTO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gb3duZXIgT3duZXIgY29tcG9uZW50LiBXaGVuIGRlc3Ryb3llZCwgdGhlIG93bmVyIHdpbGwgZGVzdHJveSB0aGlzIGNvbXBvbmVudCBhcyB3ZWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gW2NmZ10gVGhlIExpbmVzTWF0ZXJpYWwgY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY2ZnLmlkXSBPcHRpb25hbCBJRCwgdW5pcXVlIGFtb25nIGFsbCBjb21wb25lbnRzIGluIHRoZSBwYXJlbnQge0BsaW5rIFNjZW5lfSwgZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbiBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbY2ZnLmxpbmVXaWR0aD0xXSBMaW5lIHdpZHRoIGluIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NmZy5wcmVzZXRdIFNlbGVjdHMgYSBwcmVzZXQgTGluZXNNYXRlcmlhbCBjb25maWd1cmF0aW9uIC0gc2VlIHtAbGluayBMaW5lc01hdGVyaWFsI3ByZXNldHN9LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG93bmVyLCBjZmcgPSB7fSkge1xuXG4gICAgICAgIHN1cGVyKG93bmVyLCBjZmcpO1xuXG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFJlbmRlclN0YXRlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiTGluZXNNYXRlcmlhbFwiLFxuICAgICAgICAgICAgbGluZVdpZHRoOiBudWxsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjZmcucHJlc2V0KSB7IC8vIEFwcGx5IHByZXNldCB0aGVuIG92ZXJyaWRlIHdpdGggY29uZmlncyB3aGVyZSBwcm92aWRlZFxuICAgICAgICAgICAgdGhpcy5wcmVzZXQgPSBjZmcucHJlc2V0O1xuICAgICAgICAgICAgaWYgKGNmZy5saW5lV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGluZVdpZHRoID0gY2ZnLmxpbmVXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXNldCA9IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgdGhpcy5saW5lV2lkdGggPSBjZmcubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBsaW5lIHdpZHRoLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgMWBgYGAgcGl4ZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBzZXQgbGluZVdpZHRoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLmxpbmVXaWR0aCA9IHZhbHVlIHx8IDE7XG4gICAgICAgIHRoaXMuZ2xSZWRyYXcoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaW5lIHdpZHRoLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgMWBgYGAgcGl4ZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgbGluZVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUubGluZVdpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgYSBwcmVzZXQgTGluZXNNYXRlcmlhbCBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgYGBgXCJkZWZhdWx0XCJgYGBgLlxuICAgICAqXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICBzZXQgcHJlc2V0KHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgfHwgXCJkZWZhdWx0XCI7XG4gICAgICAgIGlmICh0aGlzLl9wcmVzZXQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlc2V0ID0gUFJFU0VUU1t2YWx1ZV07XG4gICAgICAgIGlmICghcHJlc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmVycm9yKFwidW5zdXBwb3J0ZWQgcHJlc2V0OiAnXCIgKyB2YWx1ZSArIFwiJyAtIHN1cHBvcnRlZCB2YWx1ZXMgYXJlIFwiICsgT2JqZWN0LmtleXMoUFJFU0VUUykuam9pbihcIiwgXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IHByZXNldC5saW5lV2lkdGg7XG4gICAgICAgIHRoaXMuX3ByZXNldCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHByZXNldCBMaW5lc01hdGVyaWFsIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGBgYGBcImRlZmF1bHRcImBgYGAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldCBwcmVzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVzZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IGhhc2goKSB7XG4gICAgICAgIHJldHVybiBbXCJcIiArIHRoaXMubGluZVdpZHRoXS5qb2luKChcIjtcIikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoaXMgTGluZXNNYXRlcmlhbC5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX3N0YXRlLmRlc3Ryb3koKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7TGluZXNNYXRlcmlhbH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/LinesMaterial.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js ***!
  \********************************************************************************/
/*! exports provided: Material */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Material\", function() { return Material; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/**\n * @desc A **Material** defines the surface appearance of attached {@link Mesh}es.\n *\n * Material is the base class for:\n *\n * * {@link MetallicMaterial} - physically-based material for metallic surfaces. Use this one for things made of metal.\n * * {@link SpecularMaterial} - physically-based material for non-metallic (dielectric) surfaces. Use this one for insulators, such as ceramics, plastics, wood etc.\n * * {@link PhongMaterial} - material for classic Blinn-Phong shading. This is less demanding of graphics hardware than the physically-based materials.\n * * {@link LambertMaterial} - material for fast, flat-shaded CAD rendering without textures. Use this for navigating huge CAD or BIM models interactively. This material gives the best rendering performance and uses the least memory.\n * * {@link EmphasisMaterial} - defines the appearance of Meshes when \"xrayed\" or \"highlighted\".\n * * {@link EdgeMaterial} - defines the appearance of Meshes when edges are emphasized.\n *\n * A {@link Scene} is allowed to contain a mixture of these material types.\n *\n */\n\n\n\nclass Material extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Material\";\n    }\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        _stats_js__WEBPACK_IMPORTED_MODULE_1__[\"stats\"].memory.materials++;\n    }\n\n    destroy() {\n        super.destroy();\n        _stats_js__WEBPACK_IMPORTED_MODULE_1__[\"stats\"].memory.materials--;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGVyaWFscy9NYXRlcmlhbC5qcz9kZjI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxvRUFBb0UsV0FBVztBQUMvRTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHVCQUF1QjtBQUM3QixNQUFNLHVCQUF1QjtBQUM3QixNQUFNLG9CQUFvQjtBQUMxQixNQUFNLHNCQUFzQjtBQUM1QixNQUFNLHVCQUF1QjtBQUM3QixNQUFNLG1CQUFtQjtBQUN6QjtBQUNBLE1BQU0sWUFBWTtBQUNsQjtBQUNBO0FBQzBDO0FBQ1I7O0FBRWxDLHVCQUF1Qix1REFBUzs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QjtBQUM3QjtBQUNBLFFBQVEsK0NBQUs7QUFDYjs7QUFFQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBSztBQUNiO0FBQ0E7O0FBRWtCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGVyaWFscy9NYXRlcmlhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlc2MgQSAqKk1hdGVyaWFsKiogZGVmaW5lcyB0aGUgc3VyZmFjZSBhcHBlYXJhbmNlIG9mIGF0dGFjaGVkIHtAbGluayBNZXNofWVzLlxuICpcbiAqIE1hdGVyaWFsIGlzIHRoZSBiYXNlIGNsYXNzIGZvcjpcbiAqXG4gKiAqIHtAbGluayBNZXRhbGxpY01hdGVyaWFsfSAtIHBoeXNpY2FsbHktYmFzZWQgbWF0ZXJpYWwgZm9yIG1ldGFsbGljIHN1cmZhY2VzLiBVc2UgdGhpcyBvbmUgZm9yIHRoaW5ncyBtYWRlIG9mIG1ldGFsLlxuICogKiB7QGxpbmsgU3BlY3VsYXJNYXRlcmlhbH0gLSBwaHlzaWNhbGx5LWJhc2VkIG1hdGVyaWFsIGZvciBub24tbWV0YWxsaWMgKGRpZWxlY3RyaWMpIHN1cmZhY2VzLiBVc2UgdGhpcyBvbmUgZm9yIGluc3VsYXRvcnMsIHN1Y2ggYXMgY2VyYW1pY3MsIHBsYXN0aWNzLCB3b29kIGV0Yy5cbiAqICoge0BsaW5rIFBob25nTWF0ZXJpYWx9IC0gbWF0ZXJpYWwgZm9yIGNsYXNzaWMgQmxpbm4tUGhvbmcgc2hhZGluZy4gVGhpcyBpcyBsZXNzIGRlbWFuZGluZyBvZiBncmFwaGljcyBoYXJkd2FyZSB0aGFuIHRoZSBwaHlzaWNhbGx5LWJhc2VkIG1hdGVyaWFscy5cbiAqICoge0BsaW5rIExhbWJlcnRNYXRlcmlhbH0gLSBtYXRlcmlhbCBmb3IgZmFzdCwgZmxhdC1zaGFkZWQgQ0FEIHJlbmRlcmluZyB3aXRob3V0IHRleHR1cmVzLiBVc2UgdGhpcyBmb3IgbmF2aWdhdGluZyBodWdlIENBRCBvciBCSU0gbW9kZWxzIGludGVyYWN0aXZlbHkuIFRoaXMgbWF0ZXJpYWwgZ2l2ZXMgdGhlIGJlc3QgcmVuZGVyaW5nIHBlcmZvcm1hbmNlIGFuZCB1c2VzIHRoZSBsZWFzdCBtZW1vcnkuXG4gKiAqIHtAbGluayBFbXBoYXNpc01hdGVyaWFsfSAtIGRlZmluZXMgdGhlIGFwcGVhcmFuY2Ugb2YgTWVzaGVzIHdoZW4gXCJ4cmF5ZWRcIiBvciBcImhpZ2hsaWdodGVkXCIuXG4gKiAqIHtAbGluayBFZGdlTWF0ZXJpYWx9IC0gZGVmaW5lcyB0aGUgYXBwZWFyYW5jZSBvZiBNZXNoZXMgd2hlbiBlZGdlcyBhcmUgZW1waGFzaXplZC5cbiAqXG4gKiBBIHtAbGluayBTY2VuZX0gaXMgYWxsb3dlZCB0byBjb250YWluIGEgbWl4dHVyZSBvZiB0aGVzZSBtYXRlcmlhbCB0eXBlcy5cbiAqXG4gKi9cbmltcG9ydCB7Q29tcG9uZW50fSBmcm9tICcuLi9Db21wb25lbnQuanMnO1xuaW1wb3J0IHtzdGF0c30gZnJvbSAnLi4vc3RhdHMuanMnO1xuXG5jbGFzcyBNYXRlcmlhbCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICAvKipcbiAgICAgQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXQgdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTWF0ZXJpYWxcIjtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihvd25lciwgY2ZnPXt9KSB7XG4gICAgICAgIHN1cGVyKG93bmVyLCBjZmcpO1xuICAgICAgICBzdGF0cy5tZW1vcnkubWF0ZXJpYWxzKys7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICBzdGF0cy5tZW1vcnkubWF0ZXJpYWxzLS07XG4gICAgfVxufVxuXG5leHBvcnQge01hdGVyaWFsfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PhongMaterial.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PhongMaterial.js ***!
  \*************************************************************************************/
/*! exports provided: PhongMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PhongMaterial\", function() { return PhongMaterial; });\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\nconst alphaModes = {\"opaque\": 0, \"mask\": 1, \"blend\": 2};\nconst alphaModeNames = [\"opaque\", \"mask\", \"blend\"];\n\n/**\n * @desc Configures the normal rendered appearance of {@link Mesh}es using the non-physically-correct Blinn-Phong shading model.\n *\n * * Useful for non-realistic objects like gizmos.\n * * {@link SpecularMaterial} is best for insulators, such as wood, ceramics and plastic.\n * * {@link MetallicMaterial} is best for conductive materials, such as metal.\n * * {@link LambertMaterial} is appropriate for high-detail models that need to render as efficiently as possible.\n *\n * ## Usage\n *\n * In the example below, we'll create a {@link Mesh} with a PhongMaterial with a diffuse {@link Texture} and a specular {@link Fresnel}, using a {@link buildTorusGeometry} to create the {@link Geometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#materials_PhongMaterial)]\n *\n *  ```` javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildTorusGeometry} from \"../src/scene/geometry/builders/buildTorusGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n * import {Fresnel} from \"../src/scene/materials/Fresnel.js\";\n *\n * const viewer = new Viewer({\n *        canvasId: \"myCanvas\"\n *    });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildTorusGeometry({\n *          center: [0, 0, 0],\n *          radius: 1.5,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          ambient: [0.9, 0.3, 0.9],\n *          shininess: 30,\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          }),\n *          specularFresnel: new Fresnel(viewer.scene, {\n *              leftColor: [1.0, 1.0, 1.0],\n *              rightColor: [0.0, 0.0, 0.0],\n *              power: 4\n *          })\n *     })\n * });\n * ````\n *\n * ## PhongMaterial Properties\n *\n *  The following table summarizes PhongMaterial properties:\n *\n * | Property | Type | Range | Default Value | Space | Description |\n * |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n * | {@link PhongMaterial#ambient} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n * | {@link PhongMaterial#diffuse} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n * | {@link PhongMaterial#specular} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular light reflected by the material. |\n * | {@link PhongMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n * | {@link PhongMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n * | {@link PhongMaterial#shininess} | Number | [0, 128] | 80 | linear | Determines the size and sharpness of specular highlights. |\n * | {@link PhongMaterial#reflectivity} | Number | [0, 1] | 1 | linear | Determines the amount of reflectivity. |\n * | {@link PhongMaterial#diffuseMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link PhongMaterial#diffuse}. If the fourth component (A) is present, it multiplies by {@link PhongMaterial#alpha}. |\n * | {@link PhongMaterial#specularMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link PhongMaterial#specular}. If the fourth component (A) is present, it multiplies by {@link PhongMaterial#alpha}. |\n * | {@link PhongMaterial#emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link PhongMaterial#emissive}. |\n * | {@link PhongMaterial#alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link PhongMaterial#alpha}. |\n * | {@link PhongMaterial#occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by {@link PhongMaterial#ambient}, {@link PhongMaterial#diffuse} and {@link PhongMaterial#specular}. |\n * | {@link PhongMaterial#normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n * | {@link PhongMaterial#diffuseFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial#diffuse}. |\n * | {@link PhongMaterial#specularFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial#specular}. |\n * | {@link PhongMaterial#emissiveFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial#emissive}. |\n * | {@link PhongMaterial#reflectivityFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial#reflectivity}. |\n * | {@link PhongMaterial#alphaFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial#alpha}. |\n * | {@link PhongMaterial#lineWidth} | Number | [0..100] | 1 |  | Line width in pixels. |\n * | {@link PhongMaterial#pointSize} | Number | [0..100] | 1 |  | Point size in pixels. |\n * | {@link PhongMaterial#alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n * | {@link PhongMaterial#alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n * | {@link PhongMaterial#backfaces} | Boolean |  | false |  | Whether to render geometry backfaces. |\n * | {@link PhongMaterial#frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for geometry frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n */\nclass PhongMaterial extends _Material_js__WEBPACK_IMPORTED_MODULE_0__[\"Material\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"PhongMaterial\";\n    }\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] The PhongMaterial configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number[]} [cfg.ambient=[1.0, 1.0, 1.0 ]]  PhongMaterial ambient color.\n     * @param {Number[]} [cfg.diffuse=[ 1.0, 1.0, 1.0 ]] PhongMaterial diffuse color.\n     * @param {Number[]} [cfg.specular=[ 1.0, 1.0, 1.0 ]]  PhongMaterial specular color.\n     * @param {Number[]} [cfg.emissive=[ 0.0, 0.0, 0.0 ]] PhongMaterial emissive color.\n     * @param {Number} [cfg.alpha=1] Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque.\n     * @param {Number} [cfg.shininess=80] Scalar in range 0-128 that determines the size and sharpness of specular highlights.\n     * @param {Number} [cfg.reflectivity=1] Scalar in range 0-1 that controls how much {@link ReflectionMap} is reflected.\n     * @param {Number} [cfg.lineWidth=1] Scalar that controls the width of lines.\n     * @param {Number} [cfg.pointSize=1] Scalar that controls the size of points.\n     * @param {Texture} [cfg.ambientMap=null] A ambient map {@link Texture}, which will multiply by the diffuse property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.diffuseMap=null] A diffuse map {@link Texture}, which will override the effect of the diffuse property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.specularMap=null] A specular map {@link Texture}, which will override the effect of the specular property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.emissiveMap=undefined] An emissive map {@link Texture}, which will override the effect of the emissive property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.normalMap=undefined] A normal map {@link Texture}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.alphaMap=undefined] An alpha map {@link Texture}, which will override the effect of the alpha property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.reflectivityMap=undefined] A reflectivity control map {@link Texture}, which will override the effect of the reflectivity property. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Texture} [cfg.occlusionMap=null] An occlusion map {@link Texture}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Fresnel} [cfg.diffuseFresnel=undefined] A diffuse {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Fresnel} [cfg.specularFresnel=undefined] A specular {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Fresnel} [cfg.emissiveFresnel=undefined] An emissive {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Fresnel} [cfg.alphaFresnel=undefined] An alpha {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {Fresnel} [cfg.reflectivityFresnel=undefined] A reflectivity {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n     * @param {String} [cfg.alphaMode=\"opaque\"] The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\". See the {@link PhongMaterial#alphaMode} property for more info.\n     * @param {Number} [cfg.alphaCutoff=0.5] The alpha cutoff value. See the {@link PhongMaterial#alphaCutoff} property for more info.\n     * @param {Boolean} [cfg.backfaces=false] Whether to render geometry backfaces.\n     * @param {Boolean} [cfg.frontface=\"ccw\"] The winding order for geometry front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            type: \"PhongMaterial\",\n            ambient: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([1.0, 1.0, 1.0]),\n            diffuse: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([1.0, 1.0, 1.0]),\n            specular: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([1.0, 1.0, 1.0]),\n            emissive: _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([0.0, 0.0, 0.0]),\n            alpha: null,\n            shininess: null,\n            reflectivity: null,\n            alphaMode: null,\n            alphaCutoff: null,\n            lineWidth: null,\n            pointSize: null,\n            backfaces: null,\n            frontface: null, // Boolean for speed; true == \"ccw\", false == \"cw\"\n            hash: null\n        });\n\n        this.ambient = cfg.ambient;\n        this.diffuse = cfg.diffuse;\n        this.specular = cfg.specular;\n        this.emissive = cfg.emissive;\n        this.alpha = cfg.alpha;\n        this.shininess = cfg.shininess;\n        this.reflectivity = cfg.reflectivity;\n        this.lineWidth = cfg.lineWidth;\n        this.pointSize = cfg.pointSize;\n\n        if (cfg.ambientMap) {\n            this._ambientMap = this._checkComponent(\"Texture\", cfg.ambientMap);\n        }\n        if (cfg.diffuseMap) {\n            this._diffuseMap = this._checkComponent(\"Texture\", cfg.diffuseMap);\n        }\n        if (cfg.specularMap) {\n            this._specularMap = this._checkComponent(\"Texture\", cfg.specularMap);\n        }\n        if (cfg.emissiveMap) {\n            this._emissiveMap = this._checkComponent(\"Texture\", cfg.emissiveMap);\n        }\n        if (cfg.alphaMap) {\n            this._alphaMap = this._checkComponent(\"Texture\", cfg.alphaMap);\n        }\n        if (cfg.reflectivityMap) {\n            this._reflectivityMap = this._checkComponent(\"Texture\", cfg.reflectivityMap);\n        }\n        if (cfg.normalMap) {\n            this._normalMap = this._checkComponent(\"Texture\", cfg.normalMap);\n        }\n        if (cfg.occlusionMap) {\n            this._occlusionMap = this._checkComponent(\"Texture\", cfg.occlusionMap);\n        }\n        if (cfg.diffuseFresnel) {\n            this._diffuseFresnel = this._checkComponent(\"Fresnel\", cfg.diffuseFresnel);\n        }\n        if (cfg.specularFresnel) {\n            this._specularFresnel = this._checkComponent(\"Fresnel\", cfg.specularFresnel);\n        }\n        if (cfg.emissiveFresnel) {\n            this._emissiveFresnel = this._checkComponent(\"Fresnel\", cfg.emissiveFresnel);\n        }\n        if (cfg.alphaFresnel) {\n            this._alphaFresnel = this._checkComponent(\"Fresnel\", cfg.alphaFresnel);\n        }\n        if (cfg.reflectivityFresnel) {\n            this._reflectivityFresnel = this._checkComponent(\"Fresnel\", cfg.reflectivityFresnel);\n        }\n\n        this.alphaMode = cfg.alphaMode;\n        this.alphaCutoff = cfg.alphaCutoff;\n        this.backfaces = cfg.backfaces;\n        this.frontface = cfg.frontface;\n\n        this._makeHash();\n    }\n\n    _makeHash() {\n        const state = this._state;\n        const hash = [\"/p\"]; // 'P' for Phong\n        if (this._normalMap) {\n            hash.push(\"/nm\");\n            if (this._normalMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._ambientMap) {\n            hash.push(\"/am\");\n            if (this._ambientMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._ambientMap.encoding);\n        }\n        if (this._diffuseMap) {\n            hash.push(\"/dm\");\n            if (this._diffuseMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._diffuseMap.encoding);\n        }\n        if (this._specularMap) {\n            hash.push(\"/sm\");\n            if (this._specularMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._emissiveMap) {\n            hash.push(\"/em\");\n            if (this._emissiveMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._emissiveMap.encoding);\n        }\n        if (this._alphaMap) {\n            hash.push(\"/opm\");\n            if (this._alphaMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._reflectivityMap) {\n            hash.push(\"/rm\");\n            if (this._reflectivityMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._occlusionMap) {\n            hash.push(\"/ocm\");\n            if (this._occlusionMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._diffuseFresnel) {\n            hash.push(\"/df\");\n        }\n        if (this._specularFresnel) {\n            hash.push(\"/sf\");\n        }\n        if (this._emissiveFresnel) {\n            hash.push(\"/ef\");\n        }\n        if (this._alphaFresnel) {\n            hash.push(\"/of\");\n        }\n        if (this._reflectivityFresnel) {\n            hash.push(\"/rf\");\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n    /**\n     * Sets the PhongMaterial's ambient color.\n     *\n     * Default value is ````[0.3, 0.3, 0.3]````.\n     *\n     * @type {Number[]}\n     */\n    set ambient(value) {\n        let ambient = this._state.ambient;\n        if (!ambient) {\n            ambient = this._state.ambient = new Float32Array(3);\n        } else if (value && ambient[0] === value[0] && ambient[1] === value[1] && ambient[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            ambient[0] = value[0];\n            ambient[1] = value[1];\n            ambient[2] = value[2];\n        } else {\n            ambient[0] = .2;\n            ambient[1] = .2;\n            ambient[2] = .2;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's ambient color.\n     *\n     * Default value is ````[0.3, 0.3, 0.3]````.\n     *\n     * @type {Number[]}\n     */\n    get ambient() {\n        return this._state.ambient;\n    }\n\n    /**\n     * Sets the PhongMaterial's diffuse color.\n     *\n     * Multiplies by {@link PhongMaterial#diffuseMap}.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @type {Number[]}\n     */\n    set diffuse(value) {\n        let diffuse = this._state.diffuse;\n        if (!diffuse) {\n            diffuse = this._state.diffuse = new Float32Array(3);\n        } else if (value && diffuse[0] === value[0] && diffuse[1] === value[1] && diffuse[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            diffuse[0] = value[0];\n            diffuse[1] = value[1];\n            diffuse[2] = value[2];\n        } else {\n            diffuse[0] = 1;\n            diffuse[1] = 1;\n            diffuse[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Sets the PhongMaterial's diffuse color.\n     *\n     * Multiplies by {@link PhongMaterial#diffuseMap}.\n     *\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     *\n     * @type {Number[]}\n     */\n    get diffuse() {\n        return this._state.diffuse;\n    }\n\n    /**\n     * Sets the PhongMaterial's specular color.\n     *\n     * Multiplies by {@link PhongMaterial#specularMap}.\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     * @type {Number[]}\n     */\n    set specular(value) {\n        let specular = this._state.specular;\n        if (!specular) {\n            specular = this._state.specular = new Float32Array(3);\n        } else if (value && specular[0] === value[0] && specular[1] === value[1] && specular[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            specular[0] = value[0];\n            specular[1] = value[1];\n            specular[2] = value[2];\n        } else {\n            specular[0] = 1;\n            specular[1] = 1;\n            specular[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's specular color.\n     *\n     * Multiplies by {@link PhongMaterial#specularMap}.\n     * Default value is ````[1.0, 1.0, 1.0]````.\n     * @type {Number[]}\n     */\n    get specular() {\n        return this._state.specular;\n    }\n\n    /**\n     * Sets the PhongMaterial's emissive color.\n     *\n     * Multiplies by {@link PhongMaterial#emissiveMap}.\n     *\n     * Default value is ````[0.0, 0.0, 0.0]````.\n     * @type {Number[]}\n     */\n    set emissive(value) {\n        let emissive = this._state.emissive;\n        if (!emissive) {\n            emissive = this._state.emissive = new Float32Array(3);\n        } else if (value && emissive[0] === value[0] && emissive[1] === value[1] && emissive[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            emissive[0] = value[0];\n            emissive[1] = value[1];\n            emissive[2] = value[2];\n        } else {\n            emissive[0] = 0;\n            emissive[1] = 0;\n            emissive[2] = 0;\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's emissive color.\n     *\n     * Multiplies by {@link PhongMaterial#emissiveMap}.\n     *\n     * Default value is ````[0.0, 0.0, 0.0]````.\n     * @type {Number[]}\n     */\n    get emissive() {\n        return this._state.emissive;\n    }\n\n    /**\n     * Sets the PhongMaterial alpha.\n     *\n     * This is a factor in the range [0..1] indicating how transparent the PhongMaterial is.\n     *\n     * A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n     *\n     * Multiplies by {@link PhongMaterial#alphaMap}.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial alpha.\n     *\n     * This is a factor in the range [0..1] indicating how transparent the PhongMaterial is.\n     *\n     * A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n     *\n     * Multiplies by {@link PhongMaterial#alphaMap}.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     * Sets the PhongMaterial shininess.\n     *\n     * This is a factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.\n     *\n     * Larger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never\n     * desirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp\n     * highlight.\n     *\n     * Default value is ```` 80.0````.\n     *\n     * @type {Number}\n     */\n    set shininess(value) {\n        this._state.shininess = value !== undefined ? value : 80;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial shininess.\n     *\n     * This is a factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.\n     *\n     * Larger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never\n     * desirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp\n     * highlight.\n     *\n     * Default value is ```` 80.0````.\n     *\n     * @type {Number}\n     */\n    get shininess() {\n        return this._state.shininess;\n    }\n\n    /**\n     * Sets the PhongMaterial's line width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's line width.\n     *\n     * This is not supported by WebGL implementations based on DirectX [2019].\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     * Sets the PhongMaterial's point size.\n     *\n     * Default value is 1.0.\n     *\n     * @type {Number}\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's point size.\n     *\n     * Default value is 1.0.\n     *\n     * @type {Number}\n     */\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n    /**\n     * Sets how much {@link ReflectionMap} is reflected by this PhongMaterial.\n     *\n     * This is a scalar in range ````[0-1]````. Default value is ````1.0````.\n     *\n     * The surface will be non-reflective when this is ````0````, and completely mirror-like when it is ````1.0````.\n     *\n     * Multiplies by {@link PhongMaterial#reflectivityMap}.\n     *\n     * @type {Number}\n     */\n    set reflectivity(value) {\n        this._state.reflectivity = value !== undefined ? value : 1.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets how much {@link ReflectionMap} is reflected by this PhongMaterial.\n     *\n     * This is a scalar in range ````[0-1]````. Default value is ````1.0````.\n     *\n     * The surface will be non-reflective when this is ````0````, and completely mirror-like when it is ````1.0````.\n     *\n     * Multiplies by {@link PhongMaterial#reflectivityMap}.\n     *\n     * @type {Number}\n     */\n    get reflectivity() {\n        return this._state.reflectivity;\n    }\n\n    /**\n     * Gets the PhongMaterials's normal map {@link Texture}.\n     *\n     * @type {Texture}\n     */\n    get normalMap() {\n        return this._normalMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's ambient {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#ambient}.\n     *\n     * @type {Texture}\n     */\n    get ambientMap() {\n        return this._ambientMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's diffuse {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#diffuse}.\n     *\n     * @type {Texture}\n     */\n    get diffuseMap() {\n        return this._diffuseMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's specular {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#specular}.\n     *\n     * @type {Texture}\n     */\n    get specularMap() {\n        return this._specularMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's emissive {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#emissive}.\n     *\n     * @type {Texture}\n     */\n    get emissiveMap() {\n        return this._emissiveMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's alpha {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#alpha}.\n     *\n     * @type {Texture}\n     */\n    get alphaMap() {\n        return this._alphaMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's reflectivity {@link Texture}.\n     *\n     * Multiplies by {@link PhongMaterial#reflectivity}.\n     *\n     * @type {Texture}\n     */\n    get reflectivityMap() {\n        return this._reflectivityMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's ambient occlusion {@link Texture}.\n     *\n     * @type {Texture}\n     */\n    get occlusionMap() {\n        return this._occlusionMap;\n    }\n\n    /**\n     * Gets the PhongMaterials's diffuse {@link Fresnel}.\n     *\n     * Applies to {@link PhongMaterial#diffuse}.\n     *\n     * @type {Fresnel}\n     */\n    get diffuseFresnel() {\n        return this._diffuseFresnel;\n    }\n\n    /**\n     * Gets the PhongMaterials's specular {@link Fresnel}.\n     *\n     * Applies to {@link PhongMaterial#specular}.\n     *\n     * @type {Fresnel}\n     */\n    get specularFresnel() {\n        return this._specularFresnel;\n    }\n\n    /**\n     * Gets the PhongMaterials's emissive {@link Fresnel}.\n     *\n     * Applies to {@link PhongMaterial#emissive}.\n     *\n     * @type {Fresnel}\n     */\n    get emissiveFresnel() {\n        return this._emissiveFresnel;\n    }\n\n    /**\n     * Gets the PhongMaterials's alpha {@link Fresnel}.\n     *\n     * Applies to {@link PhongMaterial#alpha}.\n     *\n     * @type {Fresnel}\n     */\n    get alphaFresnel() {\n        return this._alphaFresnel;\n    }\n\n    /**\n     * Gets the PhongMaterials's reflectivity {@link Fresnel}.\n     *\n     * Applies to {@link PhongMaterial#reflectivity}.\n     *\n     * @type {Fresnel}\n     */\n    get reflectivityFresnel() {\n        return this._reflectivityFresnel;\n    }\n\n    /**\n     * Sets the PhongMaterial's alpha rendering mode.\n     *\n     * This governs how alpha is treated. Alpha is the combined result of {@link PhongMaterial#alpha} and {@link PhongMaterial#alphaMap}.\n     *\n     * Supported values are:\n     *\n     * * \"opaque\" - The alpha value is ignored and the rendered output is fully opaque (default).\n     * * \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n     * * \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).\n     *\n     *@type {String}\n     */\n    set alphaMode(alphaMode) {\n        alphaMode = alphaMode || \"opaque\";\n        let value = alphaModes[alphaMode];\n        if (value === undefined) {\n            this.error(\"Unsupported value for 'alphaMode': \" + alphaMode + \" - defaulting to 'opaque'\");\n            value = \"opaque\";\n        }\n        if (this._state.alphaMode === value) {\n            return;\n        }\n        this._state.alphaMode = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the PhongMaterial's alpha rendering mode.\n     *\n     *@type {String}\n     */\n    get alphaMode() {\n        return alphaModeNames[this._state.alphaMode];\n    }\n\n    /**\n     * Sets the PhongMaterial's alpha cutoff value.\n     *\n     * This specifies the cutoff threshold when {@link PhongMaterial#alphaMode} equals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\n     * opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire material as fully transparent. This value is ignored for other modes.\n     *\n     * Alpha is the combined result of {@link PhongMaterial#alpha} and {@link PhongMaterial#alphaMap}.\n     *\n     * Default value is ````0.5````.\n     *\n     * @type {Number}\n     */\n    set alphaCutoff(alphaCutoff) {\n        if (alphaCutoff === null || alphaCutoff === undefined) {\n            alphaCutoff = 0.5;\n        }\n        if (this._state.alphaCutoff === alphaCutoff) {\n            return;\n        }\n        this._state.alphaCutoff = alphaCutoff;\n    }\n\n    /**\n     * Gets the PhongMaterial's alpha cutoff value.\n     *\n     * @type {Number}\n     */\n    get alphaCutoff() {\n        return this._state.alphaCutoff;\n    }\n\n    /**\n     * Sets whether backfaces are visible on attached {@link Mesh}es.\n     *\n     * The backfaces will belong to {@link Geometry} compoents that are also attached to the {@link Mesh}es.\n     *\n     * Default is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether backfaces are visible on attached {@link Mesh}es.\n     *\n     * Default is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     * Sets the winding direction of geometry front faces.\n     *\n     * Default is ````\"ccw\"````.\n     * @type {String}\n     */\n    set frontface(value) {\n        value = value !== \"cw\";\n        if (this._state.frontface === value) {\n            return;\n        }\n        this._state.frontface = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the winding direction of front faces on attached {@link Mesh}es.\n     *\n     * Default is ````\"ccw\"````.\n     * @type {String}\n     */\n    get frontface() {\n        return this._state.frontface ? \"ccw\" : \"cw\";\n    }\n\n    /**\n     * Destroys this PhongMaterial.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PhongMaterial.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PointsMaterial.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PointsMaterial.js ***!
  \**************************************************************************************/
/*! exports provided: PointsMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PointsMaterial\", function() { return PointsMaterial; });\n/* harmony import */ var _Material_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Material.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n\n\n\nconst PRESETS = {\n    \"default\": {\n        pointSize: 4,\n        roundPoints: true,\n        perspectivePoints: true\n    },\n    \"square\": {\n        pointSize: 4,\n        roundPoints: false,\n        perspectivePoints: true\n    },\n    \"round\": {\n        pointSize: 4,\n        roundPoints: true,\n        perspectivePoints: true\n    }\n};\n\n/**\n * @desc Configures the size and shape of \"points\" geometry primitives.\n *\n * * Located at {@link Scene#pointsMaterial}.\n * * Supports round and square points.\n * * Optional perspective point scaling.\n * * Globally configures \"points\" primitives for all {@link PerformanceModel}s.\n *\n * ## Usage\n *\n * In the example below, we'll customize the {@link Scene}'s global ````PointsMaterial````, then use\n * an {@link XKTLoaderPlugin} to load a model containing a point cloud.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#materials_PointsMaterial)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {XKTLoaderPlugin} from \"../src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\",\n *     transparent: true\n * });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * viewer.scene.pointsMaterial.pointSize = 2;\n * viewer.scene.pointsMaterial.roundPoints = true;\n * viewer.scene.pointsMaterial.perspectivePoints = true;\n * viewer.scene.pointsMaterial.minPerspectivePointSize = 1;\n * viewer.scene.pointsMaterial.maxPerspectivePointSize = 6;\n *\n * const xktLoader = new XKTLoaderPlugin(viewer);\n *\n * const model = xktLoader.load({\n *      id: \"myModel\",\n *      src: \"./models/xkt/duplex/duplex.xkt\",\n *      metaModelSrc: \"./metaModels/duplex/metaModel.json\"\n * });\n * ````\n */\nclass PointsMaterial extends _Material_js__WEBPACK_IMPORTED_MODULE_0__[\"Material\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"PointsMaterial\";\n    }\n\n    /**\n     * Gets available PointsMaterial presets.\n     *\n     * @type {Object}\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] The PointsMaterial configuration\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     * @param {Number} [cfg.pointSize=2] Point size in pixels.\n     * @param {Boolean} [cfg.roundPoints=true] Whether points are round (````true````) or square (````false````).\n     * @param {Boolean} [cfg.perspectivePoints=true] Whether apparent point size reduces with distance when {@link Camera#projection} is set to \"perspective\".\n     * @param {Number} [cfg.minPerspectivePointSize=1] When ````perspectivePoints```` is ````true````, this is the minimum rendered size of each point in pixels.\n     * @param {Number} [cfg.maxPerspectivePointSize=6] When ````perspectivePoints```` is ````true````, this is the maximum rendered size of each point in pixels.\n     * @param {String} [cfg.preset] Selects a preset PointsMaterial configuration - see {@link PointsMaterial#presets}.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            type: \"PointsMaterial\",\n            pointSize: null,\n            roundPoints: null,\n            perspectivePoints: null,\n            minPerspectivePointSize: null,\n            maxPerspectivePointSize: null\n        });\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.pointSize !== undefined) {\n                this.pointSize = cfg.pointSize;\n            }\n            if (cfg.roundPoints !== undefined) {\n                this.roundPoints = cfg.roundPoints;\n            }\n            if (cfg.perspectivePoints !== undefined) {\n                this.perspectivePoints = cfg.perspectivePoints;\n            }\n            if (cfg.minPerspectivePointSize !== undefined) {\n                this.minPerspectivePointSize = cfg.minPerspectivePointSize;\n            }\n            if (cfg.maxPerspectivePointSize !== undefined) {\n                this.maxPerspectivePointSize = cfg.minPerspectivePointSize;\n            }\n        } else {\n            this._preset = \"default\";\n            this.pointSize = cfg.pointSize;\n            this.roundPoints = cfg.roundPoints;\n            this.perspectivePoints = cfg.perspectivePoints;\n            this.minPerspectivePointSize = cfg.minPerspectivePointSize;\n            this.maxPerspectivePointSize = cfg.maxPerspectivePointSize;\n        }\n    }\n\n    /**\n     * Sets point size.\n     *\n     * Default value is ````2.0```` pixels.\n     *\n     * @type {Number}\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 2.0;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets point size.\n     *\n     * Default value is ````2.0```` pixels.\n     *\n     * @type {Number}\n     */\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n\n    /**\n     * Sets if points are round or square.\n     *\n     * Default is ````true```` to set points round.\n     *\n     * @type {Boolean}\n     */\n    set roundPoints(value) {\n        value = (value !== false);\n        if (this._state.roundPoints === value) {\n            return;\n        }\n        this._state.roundPoints = value;\n        this.scene._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if points are round or square.\n     *\n     * Default is ````true```` to set points round.\n     *\n     * @type {Boolean}\n     */\n    get roundPoints() {\n        return this._state.roundPoints;\n    }\n\n    /**\n     * Sets if rendered point size reduces with distance when {@link Camera#projection} is set to ````\"perspective\"````.\n     *\n     * Default is ````true````.\n     *\n     * @type {Boolean}\n     */\n    set perspectivePoints(value) {\n        value = (value !== false);\n        if (this._state.perspectivePoints === value) {\n            return;\n        }\n        this._state.perspectivePoints = value;\n        this.scene._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if rendered point size reduces with distance when {@link Camera#projection} is set to \"perspective\".\n     *\n     * Default is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get perspectivePoints() {\n        return this._state.perspectivePoints;\n    }\n\n    /**\n     * Sets the minimum rendered size of points when {@link PointsMaterial#perspectivePoints} is ````true````.\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    set minPerspectivePointSize(value) {\n        this._state.minPerspectivePointSize = value || 1.0;\n        this.scene._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the minimum rendered size of points when {@link PointsMaterial#perspectivePoints} is ````true````.\n     *\n     * Default value is ````1.0```` pixels.\n     *\n     * @type {Number}\n     */\n    get minPerspectivePointSize() {\n        return this._state.minPerspectivePointSize;\n    }\n\n    /**\n     * Sets the maximum rendered size of points when {@link PointsMaterial#perspectivePoints} is ````true````.\n     *\n     * Default value is ````6```` pixels.\n     *\n     * @type {Number}\n     */\n    set maxPerspectivePointSize(value) {\n        this._state.maxPerspectivePointSize = value || 6;\n        this.scene._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the maximum rendered size of points when {@link PointsMaterial#perspectivePoints} is ````true````.\n     *\n     * Default value is ````6```` pixels.\n     *\n     * @type {Number}\n     */\n    get maxPerspectivePointSize() {\n        return this._state.maxPerspectivePointSize;\n    }\n\n    /**\n     * Selects a preset ````PointsMaterial```` configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.pointSize = preset.pointSize;\n        this.roundPoints = preset.roundPoints;\n        this.perspectivePoints = preset.perspectivePoints;\n        this.minPerspectivePointSize = preset.minPerspectivePointSize;\n        this.maxPerspectivePointSize = preset.maxPerspectivePointSize;\n        this._preset = value;\n    }\n\n    /**\n     * The current preset ````PointsMaterial```` configuration.\n     *\n     * Default value is ````\"default\"````.\n     *\n     * @type {String}\n     */\n    get preset() {\n        return this._preset;\n    }\n\n    /**\n     * @private\n     * @return {string}\n     */\n    get hash() {\n        return [\n            this.pointSize,\n            this.roundPoints,\n            this.perspectivePoints,\n            this.minPerspectivePointSize,\n            this.maxPerspectivePointSize\n        ].join((\";\"));\n    }\n\n    /**\n     * Destroys this ````PointsMaterial````.\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PointsMaterial.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Texture.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Texture.js ***!
  \*******************************************************************************/
/*! exports provided: Texture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _webgl_Texture2D_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/Texture2D.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Texture2D.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n\n\n\n\n\n\nfunction ensureImageSizePowerOfTwo(image) {\n    if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(image.width);\n        canvas.height = nextHighestPowerOfTwo(image.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image,\n            0, 0, image.width, image.height,\n            0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction isPowerOfTwo(x) {\n    return (x & (x - 1)) === 0;\n}\n\nfunction nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\n/**\n * @desc A 2D texture map.\n *\n * * Textures are attached to {@link Material}s, which are attached to {@link Mesh}es.\n * * To create a Texture from an image file, set {@link Texture#src} to the image file path.\n * * To create a Texture from an HTMLImageElement, set the Texture's {@link Texture#image} to the HTMLImageElement.\n *\n * ## Usage\n *\n * In this example we have a Mesh with a {@link PhongMaterial} which applies diffuse {@link Texture}, and a {@link buildTorusGeometry} which builds a {@link ReadableGeometry}.\n *\n * Note that xeokit will ignore {@link PhongMaterial#diffuse} and {@link PhongMaterial#specular}, since we override those\n * with {@link PhongMaterial#diffuseMap} and {@link PhongMaterial#specularMap}. The {@link Texture} pixel colors directly\n * provide the diffuse and specular components for each fragment across the {@link ReadableGeometry} surface.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#materials_Texture)]\n *\n * ```` javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildTorusGeometry} from \"../src/scene/geometry/builders/buildTorusGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * viewer.camera.eye = [0, 0, 5];\n * viewer.camera.look = [0, 0, 0];\n * viewer.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildTorusGeometry({\n *          center: [0, 0, 0],\n *          radius: 1.5,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          ambient: [0.9, 0.3, 0.9],\n *          shininess: 30,\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n *````\n */\nclass Texture extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Texture\";\n    }\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this Texture as well.\n     * @param {*} [cfg] Configs\n     * @param {String} [cfg.id] Optional ID for this Texture, unique among all components in the parent scene, generated automatically when omitted.\n     * @param {String} [cfg.src=null] Path to image file to load into this Texture. See the {@link Texture#src} property for more info.\n     * @param {HTMLImageElement} [cfg.image=null] HTML Image object to load into this Texture. See the {@link Texture#image} property for more info.\n     * @param {String} [cfg.minFilter=\"linearMipmapLinear\"] How the texture is sampled when a texel covers less than one pixel. See the {@link Texture#minFilter} property for more info.\n     * @param {String} [cfg.magFilter=\"linear\"] How the texture is sampled when a texel covers more than one pixel. See the {@link Texture#magFilter} property for more info.\n     * @param {String} [cfg.wrapS=\"repeat\"] Wrap parameter for texture coordinate *S*. See the {@link Texture#wrapS} property for more info.\n     * @param {String} [cfg.wrapT=\"repeat\"] Wrap parameter for texture coordinate *S*. See the {@link Texture#wrapT} property for more info.\n     * @param {Boolean} [cfg.flipY=false] Flips this Texture's source data along its vertical axis when true.\n     * @param {Number[]} [cfg.translate=[0,0]] 2D translation vector that will be added to texture's *S* and *T* coordinates.\n     * @param {Number[]} [cfg.scale=[1,1]] 2D scaling vector that will be applied to texture's *S* and *T* coordinates.\n     * @param {Number} [cfg.rotate=0] Rotation, in degrees, that will be applied to texture's *S* and *T* coordinates.\n     * @param  {String} [cfg.encoding=\"linear\"] Encoding format.  See the {@link Texture#encoding} property for more info.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            texture: new _webgl_Texture2D_js__WEBPACK_IMPORTED_MODULE_2__[\"Texture2D\"](this.scene.canvas.gl),\n            matrix: _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].identityMat4(),\n            hasMatrix: (cfg.translate && (cfg.translate[0] !== 0 || cfg.translate[1] !== 0)) || (!!cfg.rotate) || (cfg.scale && (cfg.scale[0] !== 0 || cfg.scale[1] !== 0)),\n            minFilter: this._checkMinFilter(cfg.minFilter),\n            magFilter: this._checkMagFilter(cfg.magFilter),\n            wrapS: this._checkWrapS(cfg.wrapS),\n            wrapT: this._checkWrapT(cfg.wrapT),\n            flipY: this._checkFlipY(cfg.flipY),\n            encoding: this._checkEncoding(cfg.encoding)\n        });\n\n        // Data source\n\n        this._src = null;\n        this._image = null;\n\n        // Transformation\n\n        this._translate = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec2([0, 0]);\n        this._scale = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec2([1, 1]);\n        this._rotate = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec2([0, 0]);\n\n        this._matrixDirty = false;\n\n        // Transform\n\n        this.translate = cfg.translate;\n        this.scale = cfg.scale;\n        this.rotate = cfg.rotate;\n\n        // Data source\n\n        if (cfg.src) {\n            this.src = cfg.src; // Image file\n        } else if (cfg.image) {\n            this.image = cfg.image; // Image object\n        }\n\n        _stats_js__WEBPACK_IMPORTED_MODULE_4__[\"stats\"].memory.textures++;\n    }\n\n    _checkMinFilter(value) {\n        value = value || \"linearMipmapLinear\";\n        if (value !== \"linear\" &&\n            value !== \"linearMipmapNearest\" &&\n            value !== \"linearMipmapLinear\" &&\n            value !== \"nearestMipmapLinear\" &&\n            value !== \"nearestMipmapNearest\") {\n            this.error(\"Unsupported value for 'minFilter': '\" + value +\n                \"' - supported values are 'linear', 'linearMipmapNearest', 'nearestMipmapNearest', \" +\n                \"'nearestMipmapLinear' and 'linearMipmapLinear'. Defaulting to 'linearMipmapLinear'.\");\n            value = \"linearMipmapLinear\";\n        }\n        return value;\n    }\n\n    _checkMagFilter(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"nearest\") {\n            this.error(\"Unsupported value for 'magFilter': '\" + value +\n                \"' - supported values are 'linear' and 'nearest'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _checkFilter(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"nearest\") {\n            this.error(\"Unsupported value for 'magFilter': '\" + value +\n                \"' - supported values are 'linear' and 'nearest'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _checkWrapS(value) {\n        value = value || \"repeat\";\n        if (value !== \"clampToEdge\" && value !== \"mirroredRepeat\" && value !== \"repeat\") {\n            this.error(\"Unsupported value for 'wrapS': '\" + value +\n                \"' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.\");\n            value = \"repeat\";\n        }\n        return value;\n    }\n\n    _checkWrapT(value) {\n        value = value || \"repeat\";\n        if (value !== \"clampToEdge\" && value !== \"mirroredRepeat\" && value !== \"repeat\") {\n            this.error(\"Unsupported value for 'wrapT': '\" + value +\n                \"' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.\");\n            value = \"repeat\";\n        }\n        return value;\n    }\n\n    _checkFlipY(value) {\n        return !!value;\n    }\n\n    _checkEncoding(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"sRGB\" && value !== \"gamma\") {\n            this.error(\"Unsupported value for 'encoding': '\" + value + \"' - supported values are 'linear', 'sRGB', 'gamma'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _webglContextRestored() {\n        this._state.texture = new _webgl_Texture2D_js__WEBPACK_IMPORTED_MODULE_2__[\"Texture2D\"](this.scene.canvas.gl);\n        if (this._image) {\n            this.image = this._image;\n        } else if (this._src) {\n            this.src = this._src;\n        }\n    }\n\n    _update() {\n        const state = this._state;\n        if (this._matrixDirty) {\n            let matrix;\n            let t;\n            if (this._translate[0] !== 0 || this._translate[1] !== 0) {\n                matrix = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].translationMat4v([this._translate[0], this._translate[1], 0], this._state.matrix);\n            }\n            if (this._scale[0] !== 1 || this._scale[1] !== 1) {\n                t = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].scalingMat4v([this._scale[0], this._scale[1], 1]);\n                matrix = matrix ? _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].mulMat4(matrix, t) : t;\n            }\n            if (this._rotate !== 0) {\n                t = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].rotationMat4v(this._rotate * 0.0174532925, [0, 0, 1]);\n                matrix = matrix ? _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].mulMat4(matrix, t) : t;\n            }\n            if (matrix) {\n                state.matrix = matrix;\n            }\n            this._matrixDirty = false;\n        }\n        this.glRedraw();\n    }\n\n\n    /**\n     * Sets an HTML DOM Image object to source this Texture from.\n     *\n     * Sets {@link Texture#src} null.\n     *\n     * @type {HTMLImageElement}\n     */\n    set image(value) {\n        this._image = ensureImageSizePowerOfTwo(value);\n        this._image.crossOrigin = \"Anonymous\";\n        this._state.texture.setImage(this._image, this._state);\n        this._state.texture.setProps(this._state); // Generate mipmaps\n        this._src = null;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets HTML DOM Image object this Texture is sourced from, if any.\n     *\n     * Returns null if not set.\n     *\n     * @type {HTMLImageElement}\n     */\n    get image() {\n        return this._image;\n    }\n\n    /**\n     * Sets path to an image file to source this Texture from.\n     *\n     * Sets {@link Texture#image} null.\n     *\n     * @type {String}\n     */\n    set src(src) {\n        this.scene.loading++;\n        this.scene.canvas.spinner.processes++;\n        const self = this;\n        let image = new Image();\n        image.onload = function () {\n            image = ensureImageSizePowerOfTwo(image);\n            //self._image = image; // For faster WebGL context restore - memory inefficient?\n            self._state.texture.setImage(image, self._state);\n            self._state.texture.setProps(self._state); // Generate mipmaps\n            self.scene.loading--;\n            self.scene.canvas.spinner.processes--;\n            self.glRedraw();\n        };\n        image.src = src;\n        this._src = src;\n        this._image = null;\n    }\n\n    /**\n     * Gets path to the image file this Texture from, if any.\n     *\n     * Returns null if not set.\n     *\n     * @type {String}\n     */\n    get src() {\n        return this._src;\n    }\n\n    /**\n     * Sets the 2D translation vector added to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````[0, 0]````.\n     *\n     * @type {Number[]}\n     */\n    set translate(value) {\n        this._translate.set(value || [0, 0]);\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    /**\n     * Gets the 2D translation vector added to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````[0, 0]````.\n     *\n     * @type {Number[]}\n     */\n    get translate() {\n        return this._translate;\n    }\n\n    /**\n     * Sets the 2D scaling vector that will be applied to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````[1, 1]````.\n     *\n     * @type {Number[]}\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1]);\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    /**\n     * Gets the 2D scaling vector that will be applied to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````[1, 1]````.\n     *\n     * @type {Number[]}\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the rotation angles, in degrees, that will be applied to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````0````.\n     *\n     * @type {Number}\n     */\n    set rotate(value) {\n        value = value || 0;\n        if (this._rotate === value) {\n            return;\n        }\n        this._rotate = value;\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    /**\n     * Gets the rotation angles, in degrees, that will be applied to this Texture's *S* and *T* UV coordinates.\n     *\n     * Default value is ````0````.\n     *\n     * @type {Number}\n     */\n    get rotate() {\n        return this._rotate;\n    }\n\n    /**\n     * Gets how this Texture is sampled when a texel covers less than one pixel.\n     *\n     * Options are:\n     *\n     * * \"nearest\" - Uses the value of the texture element that is nearest\n     * (in Manhattan distance) to the center of the pixel being textured.\n     *\n     * * \"linear\" - Uses the weighted average of the four texture elements that are\n     * closest to the center of the pixel being textured.\n     *\n     * * \"nearestMipmapNearest\" - Chooses the mipmap that most closely matches the\n     * size of the pixel being textured and uses the \"nearest\" criterion (the texture\n     * element nearest to the center of the pixel) to produce a texture value.\n     *\n     * * \"linearMipmapNearest\" - Chooses the mipmap that most closely matches the size of\n     * the pixel being textured and uses the \"linear\" criterion (a weighted average of the\n     * four texture elements that are closest to the center of the pixel) to produce a\n     * texture value.\n     *\n     * * \"nearestMipmapLinear\" - Chooses the two mipmaps that most closely\n     * match the size of the pixel being textured and uses the \"nearest\" criterion\n     * (the texture element nearest to the center of the pixel) to produce a texture\n     * value from each mipmap. The final texture value is a weighted average of those two\n     * values.\n     *\n     * * \"linearMipmapLinear\" - (default) - Chooses the two mipmaps that most closely match the size\n     * of the pixel being textured and uses the \"linear\" criterion (a weighted average\n     * of the four texture elements that are closest to the center of the pixel) to\n     * produce a texture value from each mipmap. The final texture value is a weighted\n     * average of those two values.\n     *\n     * Default value is \"linearMipmapLinear\".\n     *\n     *  @type {String}\n     */\n    get minFilter() {\n        return this._state.minFilter;\n    }\n\n    /**\n     * Gets how this Texture is sampled when a texel covers more than one pixel.\n     *\n     * * \"nearest\" - Uses the value of the texture element that is nearest\n     * (in Manhattan distance) to the center of the pixel being textured.\n     * * \"linear\" - (default) - Uses the weighted average of the four texture elements that are\n     * closest to the center of the pixel being textured.\n     *\n     * Default value is \"linearMipmapLinear\".\n     *\n     * @type {String}\n     */\n    get magFilter() {\n        return this._state.magFilter;\n    }\n\n    /**\n     * Gets the wrap parameter for this Texture's *S* coordinate.\n     *\n     * Values can be:\n     *\n     * * \"clampToEdge\" -  causes *S* coordinates to be clamped to the size of the texture.\n     * * \"mirroredRepeat\" - causes the *S* coordinate to be set to the fractional part of the texture coordinate\n     * if the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is\n     * set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.\n     * * \"repeat\" - (default) - causes the integer part of the *S* coordinate to be ignored; xeokit uses only the\n     * fractional part, thereby creating a repeating pattern.\n     *\n     * Default value is \"repeat\".\n     *\n     * @type {String}\n     */\n    get wrapS() {\n        return this._state.wrapS;\n    }\n\n    /**\n     * Gets the wrap parameter for this Texture's *T* coordinate.\n     *\n     * Values can be:\n     *\n     * * \"clampToEdge\" -  causes *S* coordinates to be clamped to the size of the texture.\n     *  * \"mirroredRepeat\" - causes the *S* coordinate to be set to the fractional part of the texture coordinate\n     * if the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is\n     * set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.\n     * * \"repeat\" - (default) - causes the integer part of the *S* coordinate to be ignored; xeokit uses only the\n     * fractional part, thereby creating a repeating pattern.\n     *\n     * Default value is \"repeat\".\n     *\n     * @type {String}\n     */\n    get wrapT() {\n        return this._state.wrapT;\n    }\n\n    /**\n     * Gets if this Texture's source data is flipped along its vertical axis.\n     *\n     * @type {Boolean}\n     */\n    get flipY() {\n        return this._state.flipY;\n    }\n\n    /**\n     * Gets the Texture's encoding format.\n     *\n     * @type {String}\n     */\n    get encoding() {\n        return this._state.encoding;\n    }\n\n    /**\n     * Destroys this Texture\n     */\n    destroy() {\n        super.destroy();\n        if (this._state.texture) {\n            this._state.texture.destroy();\n        }\n        this._state.destroy();\n        _stats_js__WEBPACK_IMPORTED_MODULE_4__[\"stats\"].memory.textures--;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/Texture.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/buildEdgeIndices.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/buildEdgeIndices.js ***!
  \***********************************************************************************/
/*! exports provided: buildEdgeIndices */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildEdgeIndices\", function() { return buildEdgeIndices; });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n/**\n * @private\n */\nvar buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n// TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const b = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const c = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const cb = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const ab = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const cross = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normal = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].decompressPosition(compa, positionsDecodeMatrix, a);\n                _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].decompressPosition(compb, positionsDecodeMatrix, b);\n                _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(c, b, cb);\n            _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].subVec3(a, b, ab);\n            _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cross3Vec3(cb, ab, cross);\n            _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + \",\" + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                dot = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].dotVec3(normal1, normal2);\n                if (dot > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/buildEdgeIndices.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js ***!
  \*******************************************************************************************/
/*! exports provided: geometryCompressionUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"geometryCompressionUtils\", function() { return geometryCompressionUtils; });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/**\n * Private geometry compression and decompression utilities.\n */\n\n\n\n/**\n * @private\n * @param array\n * @returns {{min: Float32Array, max: Float32Array}}\n */\nfunction getPositionsBounds(array) {\n    const min = new Float32Array(3);\n    const max = new Float32Array(3);\n    let i, j;\n    for (i = 0; i < 3; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 3) {\n        for (j = 0; j < 3; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\nconst createPositionsDecodeMatrix = (function () {\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    return function (aabb, positionsDecodeMatrix) {\n        positionsDecodeMatrix = positionsDecodeMatrix || _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        const maxInt = 65535;\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat4v(aabb, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(translate, scale, positionsDecodeMatrix);\n        return positionsDecodeMatrix;\n    };\n})();\n\n/**\n * @private\n */\nvar compressPositions = (function () { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        var multiplier = new Float32Array([\n            max[0] !== min[0] ? 65535 / (max[0] - min[0]) : 0,\n            max[1] !== min[1] ? 65535 / (max[1] - min[1]) : 0,\n            max[2] !== min[2] ? 65535 / (max[2] - min[2]) : 0\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 3) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n            quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n        }\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat4v(min, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat4v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535,\n            (max[2] - min[2]) / 65535\n        ], scale);\n        const decodeMat = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(translate, scale, _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4());\n        return {\n            quantized: quantized,\n            decodeMatrix: decodeMat\n        };\n    };\n})();\n\nfunction decompressPosition(position, decodeMatrix, dest) {\n    dest[0] = position[0] * decodeMatrix[0] + decodeMatrix[12];\n    dest[1] = position[1] * decodeMatrix[5] + decodeMatrix[13];\n    dest[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    return dest;\n}\n\nfunction decompressAABB(aabb, decodeMatrix, dest=aabb) {\n    dest[0] = aabb[0] * decodeMatrix[0] + decodeMatrix[12];\n    dest[1] = aabb[1] * decodeMatrix[5] + decodeMatrix[13];\n    dest[2] = aabb[2] * decodeMatrix[10] + decodeMatrix[14];\n    dest[3] = aabb[3] * decodeMatrix[0] + decodeMatrix[12];\n    dest[4] = aabb[4] * decodeMatrix[5] + decodeMatrix[13];\n    dest[5] = aabb[5] * decodeMatrix[10] + decodeMatrix[14];\n    return dest;\n}\n\n/**\n * @private\n */\nfunction decompressPositions(positions, decodeMatrix, dest = new Float32Array(positions.length)) {\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        dest[i + 0] = positions[i + 0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[i + 1] = positions[i + 1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[i + 2] = positions[i + 2] * decodeMatrix[10] + decodeMatrix[14];\n    }\n    return dest;\n}\n\n//--------------- UVs --------------------------------------------------------------------------------------------------\n\n/**\n * @private\n * @param array\n * @returns {{min: Float32Array, max: Float32Array}}\n */\nfunction getUVBounds(array) {\n    const min = new Float32Array(2);\n    const max = new Float32Array(2);\n    let i, j;\n    for (i = 0; i < 2; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 2) {\n        for (j = 0; j < 2; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\n/**\n * @private\n */\nvar compressUVs = (function () {\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat3();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat3();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 2) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        }\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat3v(min, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat3v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535\n        ], scale);\n        const decodeMat = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat3(translate, scale, _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3());\n        return {\n            quantized: quantized,\n            decodeMatrix: decodeMat\n        };\n    };\n})();\n\n\n//--------------- Normals ----------------------------------------------------------------------------------------------\n\n/**\n * @private\n */\nfunction compressNormals(array) { // http://jcgt.org/published/0003/02/01/\n\n    // Note: three elements for each encoded normal, in which the last element in each triplet is redundant.\n    // This is to work around a mysterious WebGL issue where 2-element normals just wouldn't work in the shader :/\n\n    const encoded = new Int8Array(array.length);\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < array.length; i += 3) {\n        // Test various combinations of ceil and floor\n        // to minimize rounding errors\n        best = oct = octEncodeVec3(array, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(array, i, dec);\n        oct = octEncodeVec3(array, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        encoded[i] = best[0];\n        encoded[i + 1] = best[1];\n    }\n    return encoded;\n}\n\n/**\n * @private\n */\nfunction octEncodeVec3(array, i, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\n/**\n * Decode an oct-encoded normal\n */\nfunction octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n * @private\n */\nfunction dot(array, i, vec3) {\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\n/**\n * @private\n */\nfunction decompressUV(uv, decodeMatrix, dest) {\n    dest[0] = uv[0] * decodeMatrix[0] + decodeMatrix[6];\n    dest[1] = uv[1] * decodeMatrix[4] + decodeMatrix[7];\n}\n\n/**\n * @private\n */\nfunction decompressUVs(uvs, decodeMatrix, dest = new Float32Array(uvs.length)) {\n    for (let i = 0, len = uvs.length; i < len; i += 3) {\n        dest[i + 0] = uvs[i + 0] * decodeMatrix[0] + decodeMatrix[6];\n        dest[i + 1] = uvs[i + 1] * decodeMatrix[4] + decodeMatrix[7];\n    }\n    return dest;\n}\n\n/**\n * @private\n */\nfunction decompressNormal(oct, result) {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n * @private\n */\nfunction decompressNormals(octs, result) {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n * @private\n */\nconst geometryCompressionUtils = {\n\n    getPositionsBounds: getPositionsBounds,\n    createPositionsDecodeMatrix: createPositionsDecodeMatrix,\n    compressPositions: compressPositions,\n    decompressPositions: decompressPositions,\n    decompressPosition: decompressPosition,\n    decompressAABB: decompressAABB,\n\n    getUVBounds: getUVBounds,\n    compressUVs: compressUVs,\n    decompressUVs: decompressUVs,\n    decompressUV: decompressUV,\n\n    compressNormals: compressNormals,\n    decompressNormals: decompressNormals,\n    decompressNormal: decompressNormal\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js ***!
  \***********************************************************************/
/*! exports provided: math */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"math\", function() { return math; });\n// Some temporary vars to help avoid garbage collection\n\nconst doublePrecision = true;\nconst FloatArrayType = doublePrecision ? Float64Array : Float32Array;\n\nconst tempMat1 = new FloatArrayType(16);\nconst tempMat2 = new FloatArrayType(16);\nconst tempVec4 = new FloatArrayType(4);\n\n\n/**\n * @private\n */\nconst math = {\n\n    MIN_DOUBLE: -Number.MAX_SAFE_INTEGER,\n    MAX_DOUBLE: Number.MAX_SAFE_INTEGER,\n\n    /**\n     * The number of radiians in a degree (0.0174532925).\n     * @property DEGTORAD\n     * @type {Number}\n     */\n    DEGTORAD: 0.0174532925,\n\n    /**\n     * The number of degrees in a radian.\n     * @property RADTODEG\n     * @type {Number}\n     */\n    RADTODEG: 57.295779513,\n\n    unglobalizeObjectId(modelId, globalId) {\n        const idx = globalId.indexOf(\"#\");\n        return (idx === modelId.length && globalId.startsWith(modelId)) ? globalId.substring(idx + 1) : globalId;\n    },\n\n    globalizeObjectId(modelId, objectId) {\n        return (modelId + \"#\" + objectId)\n    },\n\n    /**\n     * Returns a new, uninitialized two-element vector.\n     * @method vec2\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec2(values) {\n        return new FloatArrayType(values || 2);\n    },\n\n    /**\n     * Returns a new, uninitialized three-element vector.\n     * @method vec3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec3(values) {\n        return new FloatArrayType(values || 3);\n    },\n\n    /**\n     * Returns a new, uninitialized four-element vector.\n     * @method vec4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec4(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3x3 matrix.\n     * @method mat3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat3(values) {\n        return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a 3x3 matrix to 4x4\n     * @method mat3ToMat4\n     * @param mat3 3x3 matrix.\n     * @param mat4 4x4 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat3ToMat4(mat3, mat4 = new FloatArrayType(16)) {\n        mat4[0] = mat3[0];\n        mat4[1] = mat3[1];\n        mat4[2] = mat3[2];\n        mat4[3] = 0;\n        mat4[4] = mat3[3];\n        mat4[5] = mat3[4];\n        mat4[6] = mat3[5];\n        mat4[7] = 0;\n        mat4[8] = mat3[6];\n        mat4[9] = mat3[7];\n        mat4[10] = mat3[8];\n        mat4[11] = 0;\n        mat4[12] = 0;\n        mat4[13] = 0;\n        mat4[14] = 0;\n        mat4[15] = 1;\n        return mat4;\n    },\n\n    /**\n     * Returns a new, uninitialized 4x4 matrix.\n     * @method mat4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat4(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /**\n     * Converts a 4x4 matrix to 3x3\n     * @method mat4ToMat3\n     * @param mat4 4x4 matrix.\n     * @param mat3 3x3 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat4ToMat3(mat4, mat3) { // TODO\n        //return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a list of double-precision values to a list of high-part floats and a list of low-part floats.\n     * @param doubleVals\n     * @param floatValsHigh\n     * @param floatValsLow\n     */\n    doublesToFloats(doubleVals, floatValsHigh, floatValsLow) {\n        const floatPair = new Float32Array(2);\n        for (let i = 0, len = doubleVals.length; i < len; i++) {\n            math.splitDouble(doubleVals[i], floatPair);\n            floatValsHigh[i] = floatPair[0];\n            floatValsLow[i] = floatPair[1];\n        }\n    },\n\n    /**\n     * Splits a double value into two floats.\n     * @param value\n     * @param floatPair\n     */\n    splitDouble(value, floatPair) {\n        const hi = Float32Array.from([value])[0];\n        const low = value - hi;\n        floatPair[0] = hi;\n        floatPair[1] = low;\n    },\n\n    /**\n     * Returns a new UUID.\n     * @method createUUID\n     * @static\n     * @return string The new UUID\n     */\n    createUUID: ((() => {\n        const self = {};\n        const lut = [];\n        for (let i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n        }\n        return () => {\n            const d0 = Math.random() * 0xffffffff | 0;\n            const d1 = Math.random() * 0xffffffff | 0;\n            const d2 = Math.random() * 0xffffffff | 0;\n            const d3 = Math.random() * 0xffffffff | 0;\n            return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n        };\n    }))(),\n\n    /**\n     * Clamps a value to the given range.\n     * @param {Number} value Value to clamp.\n     * @param {Number} min Lower bound.\n     * @param {Number} max Upper bound.\n     * @returns {Number} Clamped result.\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n\n    /**\n     * Floating-point modulus\n     * @method fmod\n     * @static\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {*}\n     */\n    fmod(a, b) {\n        if (a < b) {\n            console.error(\"math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring\");\n            return a;\n        }\n        while (b <= a) {\n            a -= b;\n        }\n        return a;\n    },\n\n    /**\n     * Returns true if the two 3-element vectors are the same.\n     * @param v1\n     * @param v2\n     * @returns {boolean}\n     */\n    compareVec3(v1, v2) {\n        return (v1[0] === v2[0] && v1[1] === v2[1] && v1[2] === v2[2]);\n    },\n\n    /**\n     * Negates a three-element vector.\n     * @method negateVec3\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec3(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        return dest;\n    },\n\n    /**\n     * Negates a four-element vector.\n     * @method negateVec4\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec4(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        dest[3] = -v[3];\n        return dest;\n    },\n\n    /**\n     * Adds one four-element vector to another.\n     * @method addVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        dest[3] = u[3] + v[3];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a four-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        dest[3] = v[3] + s;\n        return dest;\n    },\n\n    /**\n     * Adds one three-element vector to another.\n     * @method addVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a three-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        return dest;\n    },\n\n    /**\n     * Subtracts one four-element vector from another.\n     * @method subVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        dest[3] = u[3] - v[3];\n        return dest;\n    },\n\n    /**\n     * Subtracts one three-element vector from another.\n     * @method subVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        return dest;\n    },\n\n    /**\n     * Subtracts one two-element vector from another.\n     * @method subVec2\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec2(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        return dest;\n    },\n\n    /**\n     * Get the geometric mean of the vectors.\n     * @method geometricMeanVec2\n     * @static\n     * @param {...Array(Number)} vectors Vec2 to mean\n     * @return {Array(Number)} The geometric mean vec2\n     */\n    geometricMeanVec2(...vectors) {\n        const geometricMean = new FloatArrayType(vectors[0]);\n        for (let i = 1; i < vectors.length; i++) {\n            geometricMean[0] += vectors[i][0];\n            geometricMean[1] += vectors[i][1];\n        }\n        geometricMean[0] /= vectors.length;\n        geometricMean[1] /= vectors.length;\n        return geometricMean;\n    },\n\n    /**\n     * Subtracts a scalar value from each element of a four-element vector.\n     * @method subVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] - s;\n        dest[1] = v[1] - s;\n        dest[2] = v[2] - s;\n        dest[3] = v[3] - s;\n        return dest;\n    },\n\n    /**\n     * Sets each element of a 4-element vector to a scalar value minus the value of that element.\n     * @method subScalarVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subScalarVec4(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s - v[0];\n        dest[1] = s - v[1];\n        dest[2] = s - v[2];\n        dest[3] = s - v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies one three-element vector by another.\n     * @method mulVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    mulVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] * v[0];\n        dest[1] = u[1] * v[1];\n        dest[2] = u[2] * v[2];\n        dest[3] = u[3] * v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a four-element vector by a scalar.\n     * @method mulVec34calar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        dest[3] = v[3] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a three-element vector by a scalar.\n     * @method mulVec3Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a two-element vector by a scalar.\n     * @method mulVec2Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec2Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        return dest;\n    },\n\n    /**\n     * Divides one three-element vector by another.\n     * @method divVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides one four-element vector by another.\n     * @method divVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        dest[3] = u[3] / v[3];\n        return dest;\n    },\n\n    /**\n     * Divides a scalar by a three-element vector, returning a new vector.\n     * @method divScalarVec3\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec3(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides a three-element vector by a scalar.\n     * @method divVec3Scalar\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        return dest;\n    },\n\n    /**\n     * Divides a four-element vector by a scalar.\n     * @method divVec4Scalar\n     * @static\n     * @param v vec4\n     * @param s scalar\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        dest[3] = v[3] / s;\n        return dest;\n    },\n\n\n    /**\n     * Divides a scalar by a four-element vector, returning a new vector.\n     * @method divScalarVec4\n     * @static\n     * @param s scalar\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec4(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        dest[3] = s / v[3];\n        return dest;\n    },\n\n    /**\n     * Returns the dot product of two four-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec4(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);\n    },\n\n    /**\n     * Returns the cross product of two four-element vectors.\n     * @method cross3Vec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec4(u, v) {\n        const u0 = u[0];\n        const u1 = u[1];\n        const u2 = u[2];\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    },\n\n    /**\n     * Returns the cross product of two three-element vectors.\n     * @method cross3Vec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        const x = u[0];\n        const y = u[1];\n        const z = u[2];\n        const x2 = v[0];\n        const y2 = v[1];\n        const z2 = v[2];\n        dest[0] = y * z2 - z * y2;\n        dest[1] = z * x2 - x * z2;\n        dest[2] = x * y2 - y * x2;\n        return dest;\n    },\n\n\n    sqLenVec4(v) { // TODO\n        return math.dotVec4(v, v);\n    },\n\n    /**\n     * Returns the length of a four-element vector.\n     * @method lenVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec4(v) {\n        return Math.sqrt(math.sqLenVec4(v));\n    },\n\n    /**\n     * Returns the dot product of two three-element vectors.\n     * @method dotVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec3(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);\n    },\n\n    /**\n     * Returns the dot product of two two-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec2(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]);\n    },\n\n\n    sqLenVec3(v) {\n        return math.dotVec3(v, v);\n    },\n\n\n    sqLenVec2(v) {\n        return math.dotVec2(v, v);\n    },\n\n    /**\n     * Returns the length of a three-element vector.\n     * @method lenVec3\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec3(v) {\n        return Math.sqrt(math.sqLenVec3(v));\n    },\n\n    distVec3: ((() => {\n        const vec = new FloatArrayType(3);\n        return (v, w) => math.lenVec3(math.subVec3(v, w, vec));\n    }))(),\n\n    /**\n     * Returns the length of a two-element vector.\n     * @method lenVec2\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec2(v) {\n        return Math.sqrt(math.sqLenVec2(v));\n    },\n\n    distVec2: ((() => {\n        const vec = new FloatArrayType(2);\n        return (v, w) => math.lenVec2(math.subVec2(v, w, vec));\n    }))(),\n\n    /**\n     * @method rcpVec3\n     * @static\n     * @param v vec3\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    rcpVec3(v, dest) {\n        return math.divScalarVec3(1.0, v, dest);\n    },\n\n    /**\n     * Normalizes a four-element vector\n     * @method normalizeVec4\n     * @static\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    normalizeVec4(v, dest) {\n        const f = 1.0 / math.lenVec4(v);\n        return math.mulVec4Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a three-element vector\n     * @method normalizeVec4\n     * @static\n     */\n    normalizeVec3(v, dest) {\n        const f = 1.0 / math.lenVec3(v);\n        return math.mulVec3Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a two-element vector\n     * @method normalizeVec2\n     * @static\n     */\n    normalizeVec2(v, dest) {\n        const f = 1.0 / math.lenVec2(v);\n        return math.mulVec2Scalar(v, f, dest);\n    },\n\n    /**\n     * Gets the angle between two vectors\n     * @method angleVec3\n     * @param v\n     * @param w\n     * @returns {number}\n     */\n    angleVec3(v, w) {\n        let theta = math.dotVec3(v, w) / (Math.sqrt(math.sqLenVec3(v) * math.sqLenVec3(w)));\n        theta = theta < -1 ? -1 : (theta > 1 ? 1 : theta);  // Clamp to handle numerical problems\n        return Math.acos(theta);\n    },\n\n    /**\n     * Creates a three-element vector from the rotation part of a sixteen-element matrix.\n     * @param m\n     * @param dest\n     */\n    vec3FromMat4Scale: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (m, dest) => {\n\n            tempVec3[0] = m[0];\n            tempVec3[1] = m[1];\n            tempVec3[2] = m[2];\n\n            dest[0] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[4];\n            tempVec3[1] = m[5];\n            tempVec3[2] = m[6];\n\n            dest[1] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[8];\n            tempVec3[1] = m[9];\n            tempVec3[2] = m[10];\n\n            dest[2] = math.lenVec3(tempVec3);\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Converts an n-element vector to a JSON-serializable\n     * array with values rounded to two decimal places.\n     */\n    vecToArray: ((() => {\n        function trunc(v) {\n            return Math.round(v * 100000) / 100000\n        }\n\n        return v => {\n            v = Array.prototype.slice.call(v);\n            for (let i = 0, len = v.length; i < len; i++) {\n                v[i] = trunc(v[i]);\n            }\n            return v;\n        };\n    }))(),\n\n    /**\n     * Converts a 3-element vector from an array to an object of the form ````{x:999, y:999, z:999}````.\n     * @param arr\n     * @returns {{x: *, y: *, z: *}}\n     */\n    xyzArrayToObject(arr) {\n        return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n    },\n\n    /**\n     * Converts a 3-element vector object of the form ````{x:999, y:999, z:999}```` to an array.\n     * @param xyz\n     * @param  [arry]\n     * @returns {*[]}\n     */\n    xyzObjectToArray(xyz, arry) {\n        arry = arry || new FloatArrayType(3);\n        arry[0] = xyz.x;\n        arry[1] = xyz.y;\n        arry[2] = xyz.z;\n        return arry;\n    },\n\n    /**\n     * Duplicates a 4x4 identity matrix.\n     * @method dupMat4\n     * @static\n     */\n    dupMat4(m) {\n        return m.slice(0, 16);\n    },\n\n    /**\n     * Extracts a 3x3 matrix from a 4x4 matrix.\n     * @method mat4To3\n     * @static\n     */\n    mat4To3(m) {\n        return [\n            m[0], m[1], m[2],\n            m[4], m[5], m[6],\n            m[8], m[9], m[10]\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to the given scalar value.\n     * @method m4s\n     * @static\n     */\n    m4s(s) {\n        return [\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to zero.\n     * @method setMat4ToZeroes\n     * @static\n     */\n    setMat4ToZeroes() {\n        return math.m4s(0.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    setMat4ToOnes() {\n        return math.m4s(1.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    diagonalMat4v(v) {\n        return new FloatArrayType([\n            v[0], 0.0, 0.0, 0.0,\n            0.0, v[1], 0.0, 0.0,\n            0.0, 0.0, v[2], 0.0,\n            0.0, 0.0, 0.0, v[3]\n        ]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given vector.\n     * @method diagonalMat4c\n     * @static\n     */\n    diagonalMat4c(x, y, z, w) {\n        return math.diagonalMat4v([x, y, z, w]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given scalar.\n     * @method diagonalMat4s\n     * @static\n     */\n    diagonalMat4s(s) {\n        return math.diagonalMat4c(s, s, s, s);\n    },\n\n    /**\n     * Returns a 4x4 identity matrix.\n     * @method identityMat4\n     * @static\n     */\n    identityMat4(mat = new FloatArrayType(16)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n        mat[3] = 0.0;\n\n        mat[4] = 0.0;\n        mat[5] = 1.0;\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n\n        mat[8] = 0.0;\n        mat[9] = 0.0;\n        mat[10] = 1.0;\n        mat[11] = 0.0;\n\n        mat[12] = 0.0;\n        mat[13] = 0.0;\n        mat[14] = 0.0;\n        mat[15] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Returns a 3x3 identity matrix.\n     * @method identityMat3\n     * @static\n     */\n    identityMat3(mat = new FloatArrayType(9)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n\n        mat[3] = 0.0;\n        mat[4] = 1.0;\n        mat[5] = 0.0;\n\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n        mat[8] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Tests if the given 4x4 matrix is the identity matrix.\n     * @method isIdentityMat4\n     * @static\n     */\n    isIdentityMat4(m) {\n        if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||\n            m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||\n            m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||\n            m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Negates the given 4x4 matrix.\n     * @method negateMat4\n     * @static\n     */\n    negateMat4(m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = -m[0];\n        dest[1] = -m[1];\n        dest[2] = -m[2];\n        dest[3] = -m[3];\n        dest[4] = -m[4];\n        dest[5] = -m[5];\n        dest[6] = -m[6];\n        dest[7] = -m[7];\n        dest[8] = -m[8];\n        dest[9] = -m[9];\n        dest[10] = -m[10];\n        dest[11] = -m[11];\n        dest[12] = -m[12];\n        dest[13] = -m[13];\n        dest[14] = -m[14];\n        dest[15] = -m[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given 4x4 matrices together.\n     * @method addMat4\n     * @static\n     */\n    addMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] + b[0];\n        dest[1] = a[1] + b[1];\n        dest[2] = a[2] + b[2];\n        dest[3] = a[3] + b[3];\n        dest[4] = a[4] + b[4];\n        dest[5] = a[5] + b[5];\n        dest[6] = a[6] + b[6];\n        dest[7] = a[7] + b[7];\n        dest[8] = a[8] + b[8];\n        dest[9] = a[9] + b[9];\n        dest[10] = a[10] + b[10];\n        dest[11] = a[11] + b[11];\n        dest[12] = a[12] + b[12];\n        dest[13] = a[13] + b[13];\n        dest[14] = a[14] + b[14];\n        dest[15] = a[15] + b[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addMat4Scalar\n     * @static\n     */\n    addMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] + s;\n        dest[1] = m[1] + s;\n        dest[2] = m[2] + s;\n        dest[3] = m[3] + s;\n        dest[4] = m[4] + s;\n        dest[5] = m[5] + s;\n        dest[6] = m[6] + s;\n        dest[7] = m[7] + s;\n        dest[8] = m[8] + s;\n        dest[9] = m[9] + s;\n        dest[10] = m[10] + s;\n        dest[11] = m[11] + s;\n        dest[12] = m[12] + s;\n        dest[13] = m[13] + s;\n        dest[14] = m[14] + s;\n        dest[15] = m[15] + s;\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addScalarMat4\n     * @static\n     */\n    addScalarMat4(s, m, dest) {\n        return math.addMat4Scalar(m, s, dest);\n    },\n\n    /**\n     * Subtracts the second 4x4 matrix from the first.\n     * @method subMat4\n     * @static\n     */\n    subMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] - b[0];\n        dest[1] = a[1] - b[1];\n        dest[2] = a[2] - b[2];\n        dest[3] = a[3] - b[3];\n        dest[4] = a[4] - b[4];\n        dest[5] = a[5] - b[5];\n        dest[6] = a[6] - b[6];\n        dest[7] = a[7] - b[7];\n        dest[8] = a[8] - b[8];\n        dest[9] = a[9] - b[9];\n        dest[10] = a[10] - b[10];\n        dest[11] = a[11] - b[11];\n        dest[12] = a[12] - b[12];\n        dest[13] = a[13] - b[13];\n        dest[14] = a[14] - b[14];\n        dest[15] = a[15] - b[15];\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subMat4Scalar\n     * @static\n     */\n    subMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] - s;\n        dest[1] = m[1] - s;\n        dest[2] = m[2] - s;\n        dest[3] = m[3] - s;\n        dest[4] = m[4] - s;\n        dest[5] = m[5] - s;\n        dest[6] = m[6] - s;\n        dest[7] = m[7] - s;\n        dest[8] = m[8] - s;\n        dest[9] = m[9] - s;\n        dest[10] = m[10] - s;\n        dest[11] = m[11] - s;\n        dest[12] = m[12] - s;\n        dest[13] = m[13] - s;\n        dest[14] = m[14] - s;\n        dest[15] = m[15] - s;\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subScalarMat4\n     * @static\n     */\n    subScalarMat4(s, m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = s - m[0];\n        dest[1] = s - m[1];\n        dest[2] = s - m[2];\n        dest[3] = s - m[3];\n        dest[4] = s - m[4];\n        dest[5] = s - m[5];\n        dest[6] = s - m[6];\n        dest[7] = s - m[7];\n        dest[8] = s - m[8];\n        dest[9] = s - m[9];\n        dest[10] = s - m[10];\n        dest[11] = s - m[11];\n        dest[12] = s - m[12];\n        dest[13] = s - m[13];\n        dest[14] = s - m[14];\n        dest[15] = s - m[15];\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 4x4 matrix by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = a[0];\n\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4];\n        const a11 = a[5];\n        const a12 = a[6];\n        const a13 = a[7];\n        const a20 = a[8];\n        const a21 = a[9];\n        const a22 = a[10];\n        const a23 = a[11];\n        const a30 = a[12];\n        const a31 = a[13];\n        const a32 = a[14];\n        const a33 = a[15];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4];\n        const b11 = b[5];\n        const b12 = b[6];\n        const b13 = b[7];\n        const b20 = b[8];\n        const b21 = b[9];\n        const b22 = b[10];\n        const b23 = b[11];\n        const b30 = b[12];\n        const b31 = b[13];\n        const b32 = b[14];\n        const b33 = b[15];\n\n        dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n        dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n        dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n        dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n        dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n        dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n        dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n        dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n        dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n        dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n        dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n        dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n        dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n        dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n        dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n        dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 3x3 matrices by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat3(a, b, dest) {\n        if (!dest) {\n            dest = new FloatArrayType(9);\n        }\n\n        const a11 = a[0];\n        const a12 = a[3];\n        const a13 = a[6];\n        const a21 = a[1];\n        const a22 = a[4];\n        const a23 = a[7];\n        const a31 = a[2];\n        const a32 = a[5];\n        const a33 = a[8];\n        const b11 = b[0];\n        const b12 = b[3];\n        const b13 = b[6];\n        const b21 = b[1];\n        const b22 = b[4];\n        const b23 = b[7];\n        const b31 = b[2];\n        const b32 = b[5];\n        const b33 = b[8];\n\n        dest[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        dest[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        dest[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        dest[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        dest[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        dest[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        dest[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        dest[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        dest[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of the given 4x4 matrix by the given scalar.\n     * @method mulMat4Scalar\n     * @static\n     */\n    mulMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] * s;\n        dest[1] = m[1] * s;\n        dest[2] = m[2] * s;\n        dest[3] = m[3] * s;\n        dest[4] = m[4] * s;\n        dest[5] = m[5] * s;\n        dest[6] = m[6] * s;\n        dest[7] = m[7] * s;\n        dest[8] = m[8] * s;\n        dest[9] = m[9] * s;\n        dest[10] = m[10] * s;\n        dest[11] = m[11] * s;\n        dest[12] = m[12] * s;\n        dest[13] = m[13] * s;\n        dest[14] = m[14] * s;\n        dest[15] = m[15] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies the given 4x4 matrix by the given four-element vector.\n     * @method mulMat4v4\n     * @static\n     */\n    mulMat4v4(m, v, dest = math.vec4()) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Transposes the given 4x4 matrix.\n     * @method transposeMat4\n     * @static\n     */\n    transposeMat4(mat, dest) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        const m4 = mat[4];\n\n        const m14 = mat[14];\n        const m8 = mat[8];\n        const m13 = mat[13];\n        const m12 = mat[12];\n        const m9 = mat[9];\n        if (!dest || mat === dest) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a03 = mat[3];\n            const a12 = mat[6];\n            const a13 = mat[7];\n            const a23 = mat[11];\n            mat[1] = m4;\n            mat[2] = m8;\n            mat[3] = m12;\n            mat[4] = a01;\n            mat[6] = m9;\n            mat[7] = m13;\n            mat[8] = a02;\n            mat[9] = a12;\n            mat[11] = m14;\n            mat[12] = a03;\n            mat[13] = a13;\n            mat[14] = a23;\n            return mat;\n        }\n        dest[0] = mat[0];\n        dest[1] = m4;\n        dest[2] = m8;\n        dest[3] = m12;\n        dest[4] = mat[1];\n        dest[5] = mat[5];\n        dest[6] = m9;\n        dest[7] = m13;\n        dest[8] = mat[2];\n        dest[9] = mat[6];\n        dest[10] = mat[10];\n        dest[11] = m14;\n        dest[12] = mat[3];\n        dest[13] = mat[7];\n        dest[14] = mat[11];\n        dest[15] = mat[15];\n        return dest;\n    },\n\n    /**\n     * Transposes the given 3x3 matrix.\n     *\n     * @method transposeMat3\n     * @static\n     */\n    transposeMat3(mat, dest) {\n        if (dest === mat) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a12 = mat[5];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = a01;\n            dest[5] = mat[7];\n            dest[6] = a02;\n            dest[7] = a12;\n        } else {\n            dest[0] = mat[0];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = mat[1];\n            dest[4] = mat[4];\n            dest[5] = mat[7];\n            dest[6] = mat[2];\n            dest[7] = mat[5];\n            dest[8] = mat[8];\n        }\n        return dest;\n    },\n\n    /**\n     * Returns the determinant of the given 4x4 matrix.\n     * @method determinantMat4\n     * @static\n     */\n    determinantMat4(mat) {\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +\n            a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +\n            a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +\n            a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +\n            a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +\n            a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n    },\n\n    /**\n     * Returns the inverse of the given 4x4 matrix.\n     * @method inverseMat4\n     * @static\n     */\n    inverseMat4(mat, dest) {\n        if (!dest) {\n            dest = mat;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant (inlined to avoid double-caching)\n        const invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\n\n        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n\n        return dest;\n    },\n\n    /**\n     * Returns the trace of the given 4x4 matrix.\n     * @method traceMat4\n     * @static\n     */\n    traceMat4(m) {\n        return (m[0] + m[5] + m[10] + m[15]);\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4\n     * @static\n     */\n    translationMat4v(v, dest) {\n        const m = dest || math.identityMat4();\n        m[12] = v[0];\n        m[13] = v[1];\n        m[14] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 translation matrix.\n     * @method translationMat3\n     * @static\n     */\n    translationMat3v(v, dest) {\n        const m = dest || math.identityMat3();\n        m[6] = v[0];\n        m[7] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4c\n     * @static\n     */\n    translationMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.translationMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4s\n     * @static\n     */\n    translationMat4s(s, dest) {\n        return math.translationMat4c(s, s, s, dest);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param v\n     * @param m\n     */\n    translateMat4v(xyz, m) {\n        return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    OLDtranslateMat4c(x, y, z, m) {\n\n        const m12 = m[12];\n        m[0] += m12 * x;\n        m[4] += m12 * y;\n        m[8] += m12 * z;\n\n        const m13 = m[13];\n        m[1] += m13 * x;\n        m[5] += m13 * y;\n        m[9] += m13 * z;\n\n        const m14 = m[14];\n        m[2] += m14 * x;\n        m[6] += m14 * y;\n        m[10] += m14 * z;\n\n        const m15 = m[15];\n        m[3] += m15 * x;\n        m[7] += m15 * y;\n        m[11] += m15 * z;\n\n        return m;\n    },\n\n    translateMat4c(x, y, z, m) {\n\n        const m3 = m[3];\n        m[0] += m3 * x;\n        m[1] += m3 * y;\n        m[2] += m3 * z;\n\n        const m7 = m[7];\n        m[4] += m7 * x;\n        m[5] += m7 * y;\n        m[6] += m7 * z;\n\n        const m11 = m[11];\n        m[8] += m11 * x;\n        m[9] += m11 * y;\n        m[10] += m11 * z;\n\n        const m15 = m[15];\n        m[12] += m15 * x;\n        m[13] += m15 * y;\n        m[14] += m15 * z;\n\n        return m;\n    },\n\n    /**\n     * Creates a new matrix that replaces the translation in the rightmost column of the given\n     * affine matrix with the given translation.\n     * @param m\n     * @param translation\n     * @param dest\n     * @returns {*}\n     */\n    setMat4Translation(m, translation, dest) {\n\n        dest[0] = m[0];\n        dest[1] = m[1];\n        dest[2] = m[2];\n        dest[3] = m[3];\n\n        dest[4] = m[4];\n        dest[5] = m[5];\n        dest[6] = m[6];\n        dest[7] = m[7];\n\n        dest[8] = m[8];\n        dest[9] = m[9];\n        dest[10] = m[10];\n        dest[11] = m[11];\n\n        dest[12] = translation[0];\n        dest[13] = translation[1];\n        dest[14] = translation[2];\n        dest[15] = m[15];\n\n        return dest;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4v\n     * @static\n     */\n    rotationMat4v(anglerad, axis, m) {\n        const ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);\n        const s = Math.sin(anglerad);\n        const c = Math.cos(anglerad);\n        const q = 1.0 - c;\n\n        const x = ax[0];\n        const y = ax[1];\n        const z = ax[2];\n\n        let xy;\n        let yz;\n        let zx;\n        let xs;\n        let ys;\n        let zs;\n\n        //xx = x * x; used once\n        //yy = y * y; used once\n        //zz = z * z; used once\n        xy = x * y;\n        yz = y * z;\n        zx = z * x;\n        xs = x * s;\n        ys = y * s;\n        zs = z * s;\n\n        m = m || math.mat4();\n\n        m[0] = (q * x * x) + c;\n        m[1] = (q * xy) + zs;\n        m[2] = (q * zx) - ys;\n        m[3] = 0.0;\n\n        m[4] = (q * xy) - zs;\n        m[5] = (q * y * y) + c;\n        m[6] = (q * yz) + xs;\n        m[7] = 0.0;\n\n        m[8] = (q * zx) + ys;\n        m[9] = (q * yz) - xs;\n        m[10] = (q * z * z) + c;\n        m[11] = 0.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4c\n     * @static\n     */\n    rotationMat4c(anglerad, x, y, z, mat) {\n        return math.rotationMat4v(anglerad, [x, y, z], mat);\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4v\n     * @static\n     */\n    scalingMat4v(v, m = math.identityMat4()) {\n        m[0] = v[0];\n        m[5] = v[1];\n        m[10] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 scale matrix.\n     * @method scalingMat3v\n     * @static\n     */\n    scalingMat3v(v, m = math.identityMat3()) {\n        m[0] = v[0];\n        m[4] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4c\n     * @static\n     */\n    scalingMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.scalingMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    scaleMat4c(x, y, z, m) {\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n        return m;\n    },\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param xyz\n     * @param m\n     */\n    scaleMat4v(xyz, m) {\n\n        const x = xyz[0];\n        const y = xyz[1];\n        const z = xyz[2];\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4s\n     * @static\n     */\n    scalingMat4s(s) {\n        return math.scalingMat4c(s, s, s);\n    },\n\n    /**\n     * Creates a matrix from a quaternion rotation and vector translation\n     *\n     * @param {Number[]} q Rotation quaternion\n     * @param {Number[]} v Translation vector\n     * @param {Number[]} dest Destination matrix\n     * @returns {Number[]} dest\n     */\n    rotationTranslationMat4(q, v, dest = math.mat4()) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        dest[0] = 1 - (yy + zz);\n        dest[1] = xy + wz;\n        dest[2] = xz - wy;\n        dest[3] = 0;\n        dest[4] = xy - wz;\n        dest[5] = 1 - (xx + zz);\n        dest[6] = yz + wx;\n        dest[7] = 0;\n        dest[8] = xz + wy;\n        dest[9] = yz - wx;\n        dest[10] = 1 - (xx + yy);\n        dest[11] = 0;\n        dest[12] = v[0];\n        dest[13] = v[1];\n        dest[14] = v[2];\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Gets Euler angles from a 4x4 matrix.\n     *\n     * @param {Number[]} mat The 4x4 matrix.\n     * @param {String} order Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination Euler angles, created by default.\n     * @returns {Number[]} The Euler angles.\n     */\n    mat4ToEuler(mat, order, dest = math.vec4()) {\n        const clamp = math.clamp;\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = mat[0];\n\n        const m12 = mat[4];\n        const m13 = mat[8];\n        const m21 = mat[1];\n        const m22 = mat[5];\n        const m23 = mat[9];\n        const m31 = mat[2];\n        const m32 = mat[6];\n        const m33 = mat[10];\n\n        if (order === 'XYZ') {\n\n            dest[1] = Math.asin(clamp(m13, -1, 1));\n\n            if (Math.abs(m13) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[2] = Math.atan2(-m12, m11);\n            } else {\n                dest[0] = Math.atan2(m32, m22);\n                dest[2] = 0;\n\n            }\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = Math.asin(-clamp(m23, -1, 1));\n\n            if (Math.abs(m23) < 0.99999) {\n                dest[1] = Math.atan2(m13, m33);\n                dest[2] = Math.atan2(m21, m22);\n            } else {\n                dest[1] = Math.atan2(-m31, m11);\n                dest[2] = 0;\n            }\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = Math.asin(clamp(m32, -1, 1));\n\n            if (Math.abs(m32) < 0.99999) {\n                dest[1] = Math.atan2(-m31, m33);\n                dest[2] = Math.atan2(-m12, m22);\n            } else {\n                dest[1] = 0;\n                dest[2] = Math.atan2(m21, m11);\n            }\n\n        } else if (order === 'ZYX') {\n\n            dest[1] = Math.asin(-clamp(m31, -1, 1));\n\n            if (Math.abs(m31) < 0.99999) {\n                dest[0] = Math.atan2(m32, m33);\n                dest[2] = Math.atan2(m21, m11);\n            } else {\n                dest[0] = 0;\n                dest[2] = Math.atan2(-m12, m22);\n            }\n\n        } else if (order === 'YZX') {\n\n            dest[2] = Math.asin(clamp(m21, -1, 1));\n\n            if (Math.abs(m21) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m22);\n                dest[1] = Math.atan2(-m31, m11);\n            } else {\n                dest[0] = 0;\n                dest[1] = Math.atan2(m13, m33);\n            }\n\n        } else if (order === 'XZY') {\n\n            dest[2] = Math.asin(-clamp(m12, -1, 1));\n\n            if (Math.abs(m12) < 0.99999) {\n                dest[0] = Math.atan2(m32, m22);\n                dest[1] = Math.atan2(m13, m11);\n            } else {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[1] = 0;\n            }\n        }\n\n        return dest;\n    },\n\n    composeMat4(position, quaternion, scale, mat = math.mat4()) {\n        math.quaternionToRotationMat4(quaternion, mat);\n        math.scaleMat4v(scale, mat);\n        math.translateMat4v(position, mat);\n\n        return mat;\n    },\n\n    decomposeMat4: (() => {\n\n        const vec = new FloatArrayType(3);\n        const matrix = new FloatArrayType(16);\n\n        return function decompose(mat, position, quaternion, scale) {\n\n            vec[0] = mat[0];\n            vec[1] = mat[1];\n            vec[2] = mat[2];\n\n            let sx = math.lenVec3(vec);\n\n            vec[0] = mat[4];\n            vec[1] = mat[5];\n            vec[2] = mat[6];\n\n            const sy = math.lenVec3(vec);\n\n            vec[8] = mat[8];\n            vec[9] = mat[9];\n            vec[10] = mat[10];\n\n            const sz = math.lenVec3(vec);\n\n            // if determine is negative, we need to invert one scale\n            const det = math.determinantMat4(mat);\n\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            position[0] = mat[12];\n            position[1] = mat[13];\n            position[2] = mat[14];\n\n            // scale the rotation part\n            matrix.set(mat);\n\n            const invSX = 1 / sx;\n            const invSY = 1 / sy;\n            const invSZ = 1 / sz;\n\n            matrix[0] *= invSX;\n            matrix[1] *= invSX;\n            matrix[2] *= invSX;\n\n            matrix[4] *= invSY;\n            matrix[5] *= invSY;\n            matrix[6] *= invSY;\n\n            matrix[8] *= invSZ;\n            matrix[9] *= invSZ;\n            matrix[10] *= invSZ;\n\n            math.mat4ToQuaternion(matrix, quaternion);\n\n            scale[0] = sx;\n            scale[1] = sy;\n            scale[2] = sz;\n\n            return this;\n\n        };\n\n    })(),\n\n    /** @private */\n    getColMat4(mat, c) {\n        const i = c * 4;\n        return [mat[i], mat[i + 1], mat[i + 2], mat[i + 3]];\n    },\n\n    /** @private */\n    setRowMat4(mat, r, v) {\n        mat[r] = v[0];\n        mat[r + 4] = v[1];\n        mat[r + 8] = v[2];\n        mat[r + 12] = v[3];\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4v\n     * @param pos vec3 position of the viewer\n     * @param target vec3 point the viewer is looking at\n     * @param up vec3 pointing \"up\"\n     * @param dest mat4 Optional, mat4 matrix will be written into\n     *\n     * @return {mat4} dest if specified, a new mat4 otherwise\n     */\n    lookAtMat4v(pos, target, up, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n\n        const posx = pos[0];\n        const posy = pos[1];\n        const posz = pos[2];\n        const upx = up[0];\n        const upy = up[1];\n        const upz = up[2];\n        const targetx = target[0];\n        const targety = target[1];\n        const targetz = target[2];\n\n        if (posx === targetx && posy === targety && posz === targetz) {\n            return math.identityMat4();\n        }\n\n        let z0;\n        let z1;\n        let z2;\n        let x0;\n        let x1;\n        let x2;\n        let y0;\n        let y1;\n        let y2;\n        let len;\n\n        //vec3.direction(eye, center, z);\n        z0 = posx - targetx;\n        z1 = posy - targety;\n        z2 = posz - targetz;\n\n        // normalize (no check needed for 0 because of early return)\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        //vec3.normalize(vec3.cross(up, z, x));\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        //vec3.normalize(vec3.cross(z, x, y));\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        dest[0] = x0;\n        dest[1] = y0;\n        dest[2] = z0;\n        dest[3] = 0;\n        dest[4] = x1;\n        dest[5] = y1;\n        dest[6] = z1;\n        dest[7] = 0;\n        dest[8] = x2;\n        dest[9] = y2;\n        dest[10] = z2;\n        dest[11] = 0;\n        dest[12] = -(x0 * posx + x1 * posy + x2 * posz);\n        dest[13] = -(y0 * posx + y1 * posy + y2 * posz);\n        dest[14] = -(z0 * posx + z1 * posy + z2 * posz);\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4c\n     * @static\n     */\n    lookAtMat4c(posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {\n        return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);\n    },\n\n    /**\n     * Returns a 4x4 orthographic projection matrix.\n     * @method orthoMat4c\n     * @static\n     */\n    orthoMat4c(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n\n        dest[0] = 2.0 / rl;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 0.0;\n\n        dest[4] = 0.0;\n        dest[5] = 2.0 / tb;\n        dest[6] = 0.0;\n        dest[7] = 0.0;\n\n        dest[8] = 0.0;\n        dest[9] = 0.0;\n        dest[10] = -2.0 / fn;\n        dest[11] = 0.0;\n\n        dest[12] = -(left + right) / rl;\n        dest[13] = -(top + bottom) / tb;\n        dest[14] = -(far + near) / fn;\n        dest[15] = 1.0;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4v(fmin, fmax, m) {\n        if (!m) {\n            m = math.mat4();\n        }\n\n        const fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];\n        const fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];\n\n        math.addVec4(fmax4, fmin4, tempMat1);\n        math.subVec4(fmax4, fmin4, tempMat2);\n\n        const t = 2.0 * fmin4[2];\n\n        const tempMat20 = tempMat2[0];\n        const tempMat21 = tempMat2[1];\n        const tempMat22 = tempMat2[2];\n\n        m[0] = t / tempMat20;\n        m[1] = 0.0;\n        m[2] = 0.0;\n        m[3] = 0.0;\n\n        m[4] = 0.0;\n        m[5] = t / tempMat21;\n        m[6] = 0.0;\n        m[7] = 0.0;\n\n        m[8] = tempMat1[0] / tempMat20;\n        m[9] = tempMat1[1] / tempMat21;\n        m[10] = -tempMat1[2] / tempMat22;\n        m[11] = -1.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = -t * fmax4[2] / tempMat22;\n        m[15] = 0.0;\n\n        return m;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n        dest[0] = (near * 2) / rl;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        dest[4] = 0;\n        dest[5] = (near * 2) / tb;\n        dest[6] = 0;\n        dest[7] = 0;\n        dest[8] = (right + left) / rl;\n        dest[9] = (top + bottom) / tb;\n        dest[10] = -(far + near) / fn;\n        dest[11] = -1;\n        dest[12] = 0;\n        dest[13] = 0;\n        dest[14] = -(far * near * 2) / fn;\n        dest[15] = 0;\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method perspectiveMat4v\n     * @static\n     */\n    perspectiveMat4(fovyrad, aspectratio, znear, zfar, m) {\n        const pmin = [];\n        const pmax = [];\n\n        pmin[2] = znear;\n        pmax[2] = zfar;\n\n        pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);\n        pmin[1] = -pmax[1];\n\n        pmax[0] = pmax[1] * aspectratio;\n        pmin[0] = -pmax[0];\n\n        return math.frustumMat4v(pmin, pmax, m);\n    },\n\n    /**\n     * Returns true if the two 4x4 matrices are the same.\n     * @param m1\n     * @param m2\n     * @returns {boolean}\n     */\n    compareMat4(m1, m2) {\n        return m1[0] === m2[0] &&\n            m1[1] === m2[1] &&\n            m1[2] === m2[2] &&\n            m1[3] === m2[3] &&\n            m1[4] === m2[4] &&\n            m1[5] === m2[5] &&\n            m1[6] === m2[6] &&\n            m1[7] === m2[7] &&\n            m1[8] === m2[8] &&\n            m1[9] === m2[9] &&\n            m1[10] === m2[10] &&\n            m1[11] === m2[11] &&\n            m1[12] === m2[12] &&\n            m1[13] === m2[13] &&\n            m1[14] === m2[14] &&\n            m1[15] === m2[15];\n    },\n\n    /**\n     * Transforms a three-element position by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint3(m, p, dest = math.vec3()) {\n\n        const x = p[0];\n        const y = p[1];\n        const z = p[2];\n\n        dest[0] = (m[0] * x) + (m[4] * y) + (m[8] * z) + m[12];\n        dest[1] = (m[1] * x) + (m[5] * y) + (m[9] * z) + m[13];\n        dest[2] = (m[2] * x) + (m[6] * y) + (m[10] * z) + m[14];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a homogeneous coordinate by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint4(m, v, dest = math.vec4()) {\n        dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n\n        return dest;\n    },\n\n\n    /**\n     * Transforms an array of three-element positions by a 4x4 matrix.\n     * @method transformPoints3\n     * @static\n     */\n    transformPoints3(m, points, points2) {\n        const result = points2 || [];\n        const len = points.length;\n        let p0;\n        let p1;\n        let p2;\n        let pi;\n\n        // cache values\n        const m0 = m[0];\n\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        let r;\n\n        for (let i = 0; i < len; ++i) {\n\n            // cache values\n            pi = points[i];\n\n            p0 = pi[0];\n            p1 = pi[1];\n            p2 = pi[2];\n\n            r = result[i] || (result[i] = [0, 0, 0]);\n\n            r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;\n            r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;\n            r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;\n            r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;\n        }\n\n        result.length = len;\n\n        return result;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions3\n     * @static\n     */\n    transformPositions3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 3) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions4\n     * @static\n     */\n    transformPositions4(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms a three-element vector by a 4x4 matrix.\n     * @method transformVec3\n     * @static\n     */\n    transformVec3(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dest = dest || this.vec3();\n        dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);\n        dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);\n        dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 matrix.\n     * @method transformVec4\n     * @static\n     */\n    transformVec4(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest = dest || math.vec4();\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @method rotateVec3X\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3X(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @method rotateVec3Y\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Y(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @method rotateVec3Z\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Z(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n        r[2] = p[2];\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 projection matrix.\n     *\n     * @method projectVec4\n     * @param {Number[]} p 3D View-space coordinate\n     * @param {Number[]} q 2D Projected coordinate\n     * @returns {Number[]} 2D Projected coordinate\n     * @static\n     */\n    projectVec4(p, q) {\n        const f = 1.0 / p[3];\n        q = q || math.vec2();\n        q[0] = p[0] * f;\n        q[1] = p[1] * f;\n        return q;\n    },\n\n    /**\n     * Unprojects a three-element vector.\n     *\n     * @method unprojectVec3\n     * @param {Number[]} p 3D Projected coordinate\n     * @param {Number[]} viewMat View matrix\n     * @returns {Number[]} projMat Projection matrix\n     * @static\n     */\n    unprojectVec3: ((() => {\n        const mat = new FloatArrayType(16);\n        const mat2 = new FloatArrayType(16);\n        const mat3 = new FloatArrayType(16);\n        return function (p, viewMat, projMat, q) {\n            return this.transformVec3(this.mulMat4(this.inverseMat4(viewMat, mat), this.inverseMat4(projMat, mat2), mat3), p, q)\n        };\n    }))(),\n\n    /**\n     * Linearly interpolates between two 3D vectors.\n     * @method lerpVec3\n     * @static\n     */\n    lerpVec3(t, t1, t2, p1, p2, dest) {\n        const result = dest || math.vec3();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = p1[0] + (f * (p2[0] - p1[0]));\n        result[1] = p1[1] + (f * (p2[1] - p1[1]));\n        result[2] = p1[2] + (f * (p2[2] - p1[2]));\n        return result;\n    },\n\n    /**\n     * Linearly interpolates between two 4x4 matrices.\n     * @method lerpMat4\n     * @static\n     */\n    lerpMat4(t, t1, t2, m1, m2, dest) {\n        const result = dest || math.mat4();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = m1[0] + (f * (m2[0] - m1[0]));\n        result[1] = m1[1] + (f * (m2[1] - m1[1]));\n        result[2] = m1[2] + (f * (m2[2] - m1[2]));\n        result[3] = m1[3] + (f * (m2[3] - m1[3]));\n        result[4] = m1[4] + (f * (m2[4] - m1[4]));\n        result[5] = m1[5] + (f * (m2[5] - m1[5]));\n        result[6] = m1[6] + (f * (m2[6] - m1[6]));\n        result[7] = m1[7] + (f * (m2[7] - m1[7]));\n        result[8] = m1[8] + (f * (m2[8] - m1[8]));\n        result[9] = m1[9] + (f * (m2[9] - m1[9]));\n        result[10] = m1[10] + (f * (m2[10] - m1[10]));\n        result[11] = m1[11] + (f * (m2[11] - m1[11]));\n        result[12] = m1[12] + (f * (m2[12] - m1[12]));\n        result[13] = m1[13] + (f * (m2[13] - m1[13]));\n        result[14] = m1[14] + (f * (m2[14] - m1[14]));\n        result[15] = m1[15] + (f * (m2[15] - m1[15]));\n        return result;\n    },\n\n\n    /**\n     * Flattens a two-dimensional array into a one-dimensional array.\n     *\n     * @method flatten\n     * @static\n     * @param {Array of Arrays} a A 2D array\n     * @returns Flattened 1D array\n     */\n    flatten(a) {\n\n        const result = [];\n\n        let i;\n        let leni;\n        let j;\n        let lenj;\n        let item;\n\n        for (i = 0, leni = a.length; i < leni; i++) {\n            item = a[i];\n            for (j = 0, lenj = item.length; j < lenj; j++) {\n                result.push(item[j]);\n            }\n        }\n\n        return result;\n    },\n\n\n    identityQuaternion(dest = math.vec4()) {\n        dest[0] = 0.0;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 1.0;\n        return dest;\n    },\n\n    /**\n     * Initializes a quaternion from Euler angles.\n     *\n     * @param {Number[]} euler The Euler angles.\n     * @param {String} order Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination quaternion, created by default.\n     * @returns {Number[]} The quaternion.\n     */\n    eulerToQuaternion(euler, order, dest = math.vec4()) {\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const a = (euler[0] * math.DEGTORAD) / 2;\n        const b = (euler[1] * math.DEGTORAD) / 2;\n        const c = (euler[2] * math.DEGTORAD) / 2;\n\n        const c1 = Math.cos(a);\n        const c2 = Math.cos(b);\n        const c3 = Math.cos(c);\n        const s1 = Math.sin(a);\n        const s2 = Math.sin(b);\n        const s3 = Math.sin(c);\n\n        if (order === 'XYZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'ZYX') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'YZX') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'XZY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n\n        return dest;\n    },\n\n    mat4ToQuaternion(m, dest = math.vec4()) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = m[0];\n        const m12 = m[4];\n        const m13 = m[8];\n        const m21 = m[1];\n        const m22 = m[5];\n        const m23 = m[9];\n        const m31 = m[2];\n        const m32 = m[6];\n        const m33 = m[10];\n        let s;\n\n        const trace = m11 + m22 + m33;\n\n        if (trace > 0) {\n\n            s = 0.5 / Math.sqrt(trace + 1.0);\n\n            dest[3] = 0.25 / s;\n            dest[0] = (m32 - m23) * s;\n            dest[1] = (m13 - m31) * s;\n            dest[2] = (m21 - m12) * s;\n\n        } else if (m11 > m22 && m11 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n            dest[3] = (m32 - m23) / s;\n            dest[0] = 0.25 * s;\n            dest[1] = (m12 + m21) / s;\n            dest[2] = (m13 + m31) / s;\n\n        } else if (m22 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n            dest[3] = (m13 - m31) / s;\n            dest[0] = (m12 + m21) / s;\n            dest[1] = 0.25 * s;\n            dest[2] = (m23 + m32) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n            dest[3] = (m21 - m12) / s;\n            dest[0] = (m13 + m31) / s;\n            dest[1] = (m23 + m32) / s;\n            dest[2] = 0.25 * s;\n        }\n\n        return dest;\n    },\n\n    vec3PairToQuaternion(u, v, dest = math.vec4()) {\n        const norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));\n        let real_part = norm_u_norm_v + math.dotVec3(u, v);\n\n        if (real_part < 0.00000001 * norm_u_norm_v) {\n\n            // If u and v are exactly opposite, rotate 180 degrees\n            // around an arbitrary orthogonal axis. Axis normalisation\n            // can happen later, when we normalise the quaternion.\n\n            real_part = 0.0;\n\n            if (Math.abs(u[0]) > Math.abs(u[2])) {\n\n                dest[0] = -u[1];\n                dest[1] = u[0];\n                dest[2] = 0;\n\n            } else {\n                dest[0] = 0;\n                dest[1] = -u[2];\n                dest[2] = u[1]\n            }\n\n        } else {\n\n            // Otherwise, build quaternion the standard way.\n            math.cross3Vec3(u, v, dest);\n        }\n\n        dest[3] = real_part;\n\n        return math.normalizeQuaternion(dest);\n    },\n\n    angleAxisToQuaternion(angleAxis, dest = math.vec4()) {\n        const halfAngle = angleAxis[3] / 2.0;\n        const fsin = Math.sin(halfAngle);\n        dest[0] = fsin * angleAxis[0];\n        dest[1] = fsin * angleAxis[1];\n        dest[2] = fsin * angleAxis[2];\n        dest[3] = Math.cos(halfAngle);\n        return dest;\n    },\n\n    quaternionToEuler: ((() => {\n        const mat = new FloatArrayType(16);\n        return (q, order, dest) => {\n            dest = dest || math.vec3();\n            math.quaternionToRotationMat4(q, mat);\n            math.mat4ToEuler(mat, order, dest);\n            return dest;\n        };\n    }))(),\n\n    mulQuaternions(p, q, dest = math.vec4()) {\n        const p0 = p[0];\n        const p1 = p[1];\n        const p2 = p[2];\n        const p3 = p[3];\n        const q0 = q[0];\n        const q1 = q[1];\n        const q2 = q[2];\n        const q3 = q[3];\n        dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;\n        dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;\n        dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;\n        dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;\n        return dest;\n    },\n\n    vec3ApplyQuaternion(q, vec, dest = math.vec3()) {\n        const x = vec[0];\n        const y = vec[1];\n        const z = vec[2];\n\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return dest;\n    },\n\n    quaternionToMat4(q, dest) {\n\n        dest = math.identityMat4(dest);\n\n        const q0 = q[0];  //x\n        const q1 = q[1];  //y\n        const q2 = q[2];  //z\n        const q3 = q[3];  //w\n\n        const tx = 2.0 * q0;\n        const ty = 2.0 * q1;\n        const tz = 2.0 * q2;\n\n        const twx = tx * q3;\n        const twy = ty * q3;\n        const twz = tz * q3;\n\n        const txx = tx * q0;\n        const txy = ty * q0;\n        const txz = tz * q0;\n\n        const tyy = ty * q1;\n        const tyz = tz * q1;\n        const tzz = tz * q2;\n\n        dest[0] = 1.0 - (tyy + tzz);\n        dest[1] = txy + twz;\n        dest[2] = txz - twy;\n\n        dest[4] = txy - twz;\n        dest[5] = 1.0 - (txx + tzz);\n        dest[6] = tyz + twx;\n\n        dest[8] = txz + twy;\n        dest[9] = tyz - twx;\n\n        dest[10] = 1.0 - (txx + tyy);\n\n        return dest;\n    },\n\n    quaternionToRotationMat4(q, m) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        m[0] = 1 - (yy + zz);\n        m[4] = xy - wz;\n        m[8] = xz + wy;\n\n        m[1] = xy + wz;\n        m[5] = 1 - (xx + zz);\n        m[9] = yz - wx;\n\n        m[2] = xz - wy;\n        m[6] = yz + wx;\n        m[10] = 1 - (xx + yy);\n\n        // last column\n        m[3] = 0;\n        m[7] = 0;\n        m[11] = 0;\n\n        // bottom row\n        m[12] = 0;\n        m[13] = 0;\n        m[14] = 0;\n        m[15] = 1;\n\n        return m;\n    },\n\n    normalizeQuaternion(q, dest = q) {\n        const len = math.lenVec4([q[0], q[1], q[2], q[3]]);\n        dest[0] = q[0] / len;\n        dest[1] = q[1] / len;\n        dest[2] = q[2] / len;\n        dest[3] = q[3] / len;\n        return dest;\n    },\n\n    conjugateQuaternion(q, dest = q) {\n        dest[0] = -q[0];\n        dest[1] = -q[1];\n        dest[2] = -q[2];\n        dest[3] = q[3];\n        return dest;\n    },\n\n    inverseQuaternion(q, dest) {\n        return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));\n    },\n\n    quaternionToAngleAxis(q, angleAxis = math.vec4()) {\n        q = math.normalizeQuaternion(q, tempVec4);\n        const q3 = q[3];\n        const angle = 2 * Math.acos(q3);\n        const s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            angleAxis[0] = q[0];\n            angleAxis[1] = q[1];\n            angleAxis[2] = q[2];\n        } else {\n            angleAxis[0] = q[0] / s;\n            angleAxis[1] = q[1] / s;\n            angleAxis[2] = q[2] / s;\n        }\n        angleAxis[3] = angle; // * 57.295779579;\n        return angleAxis;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundaries\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns a new, uninitialized 3D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB3(values) {\n        return new FloatArrayType(values || 6);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB2(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB3(values) {\n        return new FloatArrayType(values || 32);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB2(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /** Returns a new 3D bounding sphere */\n    Sphere3(x, y, z, r) {\n        return new FloatArrayType([x, y, z, r]);\n    },\n\n    /**\n     * Transforms an OBB3 by a 4x4 matrix.\n     *\n     * @private\n     */\n    transformOBB3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /** Returns true if the first AABB contains the second AABB.\n     * @param aabb1\n     * @param aabb2\n     * @returns {boolean}\n     */\n    containsAABB3: function (aabb1, aabb2) {\n        const result = (\n            aabb1[0] <= aabb2[0] && aabb2[3] <= aabb1[3] &&\n            aabb1[1] <= aabb2[1] && aabb2[4] <= aabb1[4] &&\n            aabb1[2] <= aabb2[2] && aabb2[5] <= aabb1[5]);\n        return result;\n    },\n\n\n    /**\n     * Gets the diagonal size of an AABB3 given as minima and maxima.\n     *\n     * @private\n     */\n    getAABB3Diag: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return aabb => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            math.subVec3(max, min, tempVec3);\n\n            return Math.abs(math.lenVec3(tempVec3));\n        };\n    }))(),\n\n    /**\n     * Get a diagonal boundary size that is symmetrical about the given point.\n     *\n     * @private\n     */\n    getAABB3DiagPoint: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (aabb, p) => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            const diagVec = math.subVec3(max, min, tempVec3);\n\n            const xneg = p[0] - aabb[0];\n            const xpos = aabb[3] - p[0];\n            const yneg = p[1] - aabb[1];\n            const ypos = aabb[4] - p[1];\n            const zneg = p[2] - aabb[2];\n            const zpos = aabb[5] - p[2];\n\n            diagVec[0] += (xneg > xpos) ? xneg : xpos;\n            diagVec[1] += (yneg > ypos) ? yneg : ypos;\n            diagVec[2] += (zneg > zpos) ? zneg : zpos;\n\n            return Math.abs(math.lenVec3(diagVec));\n        };\n    }))(),\n\n    /**\n     * Gets the area of an AABB.\n     *\n     * @private\n     */\n    getAABB3Area(aabb) {\n        const width = (aabb[3] - aabb[0]);\n        const height = (aabb[4] - aabb[1]);\n        const depth = (aabb[5] - aabb[2]);\n        return (width * height * depth);\n    },\n\n    /**\n     * Gets the center of an AABB.\n     *\n     * @private\n     */\n    getAABB3Center(aabb, dest) {\n        const r = dest || math.vec3();\n\n        r[0] = (aabb[0] + aabb[3]) / 2;\n        r[1] = (aabb[1] + aabb[4]) / 2;\n        r[2] = (aabb[2] + aabb[5]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Gets the center of a 2D AABB.\n     *\n     * @private\n     */\n    getAABB2Center(aabb, dest) {\n        const r = dest || math.vec2();\n\n        r[0] = (aabb[2] + aabb[0]) / 2;\n        r[1] = (aabb[3] + aabb[1]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB3(aabb = math.AABB3()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MAX_DOUBLE;\n        aabb[3] = math.MIN_DOUBLE;\n        aabb[4] = math.MIN_DOUBLE;\n        aabb[5] = math.MIN_DOUBLE;\n\n        return aabb;\n    },\n\n    /**\n     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n     * an array of eight 3D positions, one for each corner of the boundary.\n     *\n     * @private\n     */\n    AABB3ToOBB3(aabb, obb = math.OBB3()) {\n        obb[0] = aabb[0];\n        obb[1] = aabb[1];\n        obb[2] = aabb[2];\n        obb[3] = 1;\n\n        obb[4] = aabb[3];\n        obb[5] = aabb[1];\n        obb[6] = aabb[2];\n        obb[7] = 1;\n\n        obb[8] = aabb[3];\n        obb[9] = aabb[4];\n        obb[10] = aabb[2];\n        obb[11] = 1;\n\n        obb[12] = aabb[0];\n        obb[13] = aabb[4];\n        obb[14] = aabb[2];\n        obb[15] = 1;\n\n        obb[16] = aabb[0];\n        obb[17] = aabb[1];\n        obb[18] = aabb[5];\n        obb[19] = 1;\n\n        obb[20] = aabb[3];\n        obb[21] = aabb[1];\n        obb[22] = aabb[5];\n        obb[23] = 1;\n\n        obb[24] = aabb[3];\n        obb[25] = aabb[4];\n        obb[26] = aabb[5];\n        obb[27] = 1;\n\n        obb[28] = aabb[0];\n        obb[29] = aabb[4];\n        obb[30] = aabb[5];\n        obb[31] = 1;\n\n        return obb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    positions3ToAABB3: ((() => {\n\n        const p = new Float32Array(3);\n\n        return (positions, aabb, positionsDecodeMatrix) => {\n            aabb = aabb || math.AABB3();\n\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = math.MIN_DOUBLE;\n            let ymax = math.MIN_DOUBLE;\n            let zmax = math.MIN_DOUBLE;\n\n            let x;\n            let y;\n            let z;\n\n            for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                if (positionsDecodeMatrix) {\n\n                    p[0] = positions[i + 0];\n                    p[1] = positions[i + 1];\n                    p[2] = positions[i + 2];\n\n                    math.decompressPosition(p, positionsDecodeMatrix, p);\n\n                    x = p[0];\n                    y = p[1];\n                    z = p[2];\n\n                } else {\n                    x = positions[i + 0];\n                    y = positions[i + 1];\n                    z = positions[i + 2];\n                }\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n\n                if (y < ymin) {\n                    ymin = y;\n                }\n\n                if (z < zmin) {\n                    zmin = z;\n                }\n\n                if (x > xmax) {\n                    xmax = x;\n                }\n\n                if (y > ymax) {\n                    ymax = y;\n                }\n\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n\n            aabb[0] = xmin;\n            aabb[1] = ymin;\n            aabb[2] = zmin;\n            aabb[3] = xmax;\n            aabb[4] = ymax;\n            aabb[5] = zmax;\n\n            return aabb;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    OBB3ToAABB3(obb, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n        let zmax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = obb.length; i < len; i += 4) {\n\n            x = obb[i + 0];\n            y = obb[i + 1];\n            z = obb[i + 2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToAABB3(points, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n        let zmax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = points.length; i < len; i++) {\n\n            x = points[i][0];\n            y = points[i][1];\n            z = points[i][2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToSphere3: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const numPoints = points.length;\n\n            for (i = 0; i < numPoints; i++) {\n                x += points[i][0];\n                y += points[i][1];\n                z += points[i][2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < numPoints; i++) {\n\n                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D positions.\n     *\n     * @private\n     */\n    positions3ToSphere3: ((() => {\n\n        const tempVec3a = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n\n        return (positions, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPositions = positions.length;\n            let radius = 0;\n\n            for (i = 0; i < lenPositions; i += 3) {\n                x += positions[i];\n                y += positions[i + 1];\n                z += positions[i + 2];\n            }\n\n            const numPositions = lenPositions / 3;\n\n            sphere[0] = x / numPositions;\n            sphere[1] = y / numPositions;\n            sphere[2] = z / numPositions;\n\n            let dist;\n\n            for (i = 0; i < lenPositions; i += 3) {\n\n                tempVec3a[0] = positions[i];\n                tempVec3a[1] = positions[i + 1];\n                tempVec3a[2] = positions[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(tempVec3a, sphere, tempVec3b)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToSphere3: ((() => {\n\n        const point = new Float32Array(3);\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPoints = points.length;\n            const numPoints = lenPoints / 4;\n\n            for (i = 0; i < lenPoints; i += 4) {\n                x += points[i + 0];\n                y += points[i + 1];\n                z += points[i + 2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < lenPoints; i += 4) {\n\n                point[0] = points[i + 0];\n                point[1] = points[i + 1];\n                point[2] = points[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Gets the center of a bounding sphere.\n     *\n     * @private\n     */\n    getSphere3Center(sphere, dest = math.vec3()) {\n        dest[0] = sphere[0];\n        dest[1] = sphere[1];\n        dest[2] = sphere[2];\n\n        return dest;\n    },\n\n    /**\n     * Gets the 3D center of the given flat array of 3D positions.\n     *\n     * @private\n     */\n    getPositionsCenter(positions, center = math.vec3()) {\n        let xCenter = 0;\n        let yCenter = 0;\n        let zCenter = 0;\n        for (var i = 0, len = positions.length; i < len; i += 3) {\n            xCenter += positions[i + 0];\n            yCenter += positions[i + 1];\n            zCenter += positions[i + 2];\n        }\n        const numPositions = positions.length / 3;\n        center[0] = xCenter / numPositions;\n        center[1] = yCenter / numPositions;\n        center[2] = zCenter / numPositions;\n        return center;\n    },\n\n    /**\n     * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB3(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] > aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        if (aabb1[4] < aabb2[4]) {\n            aabb1[4] = aabb2[4];\n        }\n\n        if (aabb1[5] < aabb2[5]) {\n            aabb1[5] = aabb2[5];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n     *\n     * @private\n     */\n    expandAABB3Point3(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] > p[2]) {\n            aabb[2] = p[2];\n        }\n\n        if (aabb[3] < p[0]) {\n            aabb[3] = p[0];\n        }\n\n        if (aabb[4] < p[1]) {\n            aabb[4] = p[1];\n        }\n\n        if (aabb[5] < p[2]) {\n            aabb[5] = p[2];\n        }\n\n        return aabb;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given points, if needed.\n     *\n     * @private\n     */\n    expandAABB3Points3(aabb, positions) {\n        var x;\n        var y;\n        var z;\n        for (var i = 0, len = positions.length; i < len; i += 3) {\n            x = positions[i];\n            y = positions[i + 1];\n            z = positions[i + 2];\n            if (aabb[0] > x) {\n                aabb[0] = x;\n            }\n            if (aabb[1] > y) {\n                aabb[1] = y;\n            }\n            if (aabb[2] > z) {\n                aabb[2] = z;\n            }\n            if (aabb[3] < x) {\n                aabb[3] = x;\n            }\n            if (aabb[4] < y) {\n                aabb[4] = y;\n            }\n            if (aabb[5] < z) {\n                aabb[5] = z;\n            }\n        }\n        return aabb;\n    },\n\n    /**\n     * Collapses a 2D axis-aligned boundary, ready to expand to fit 2D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB2(aabb = math.AABB2()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MIN_DOUBLE;\n        aabb[3] = math.MIN_DOUBLE;\n\n        return aabb;\n    },\n\n    point3AABB3Intersect(aabb, p) {\n        return aabb[0] > p[0] || aabb[3] < p[0] || aabb[1] > p[1] || aabb[4] < p[1] || aabb[2] > p[2] || aabb[5] < p[2];\n    },\n\n    /**\n     *\n     * @param dir\n     * @param constant\n     * @param aabb\n     * @returns {number}\n     */\n    planeAABB3Intersect(dir, constant, aabb) {\n        let min, max;\n        if (dir[0] > 0) {\n            min = dir[0] * aabb[0];\n            max = dir[0] * aabb[3];\n        } else {\n            min = dir[0] * aabb[3];\n            max = dir[0] * aabb[0];\n        }\n        if (dir[1] > 0) {\n            min += dir[1] * aabb[1];\n            max += dir[1] * aabb[4];\n        } else {\n            min += dir[1] * aabb[4];\n            max += dir[1] * aabb[1];\n        }\n        if (dir[2] > 0) {\n            min += dir[2] * aabb[2];\n            max += dir[2] * aabb[5];\n        } else {\n            min += dir[2] * aabb[5];\n            max += dir[2] * aabb[2];\n        }\n        const outside = (min <= -constant) && (max <= -constant);\n        if (outside) {\n            return -1;\n        }\n\n        const inside = (min >= -constant) && (max >= -constant);\n        if (inside) {\n            return 1;\n        }\n\n        return 0;\n    },\n\n    /**\n     * Finds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToAABB2(points, aabb = math.AABB2()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let w;\n        let f;\n\n        for (let i = 0, len = points.length; i < len; i += 4) {\n\n            x = points[i + 0];\n            y = points[i + 1];\n            w = points[i + 3] || 1.0;\n\n            f = 1.0 / w;\n\n            x *= f;\n            y *= f;\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = xmax;\n        aabb[3] = ymax;\n\n        return aabb;\n    },\n\n    /**\n     * Expands the first axis-aligned 2D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB2(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] < aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 2D boundary to enclose the given point, if required.\n     *\n     * @private\n     */\n    expandAABB2Point2(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] < p[0]) {\n            aabb[2] = p[0];\n        }\n\n        if (aabb[3] < p[1]) {\n            aabb[3] = p[1];\n        }\n\n        return aabb;\n    },\n\n    AABB2ToCanvas(aabb, canvasWidth, canvasHeight, aabb2 = aabb) {\n        const xmin = (aabb[0] + 1.0) * 0.5;\n        const ymin = (aabb[1] + 1.0) * 0.5;\n        const xmax = (aabb[2] + 1.0) * 0.5;\n        const ymax = (aabb[3] + 1.0) * 0.5;\n\n        aabb2[0] = Math.floor(xmin * canvasWidth);\n        aabb2[1] = canvasHeight - Math.floor(ymax * canvasHeight);\n        aabb2[2] = Math.floor(xmax * canvasWidth);\n        aabb2[3] = canvasHeight - Math.floor(ymin * canvasHeight);\n\n        return aabb2;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Curves\n    //------------------------------------------------------------------------------------------------------------------\n\n    tangentQuadraticBezier(t, p0, p1, p2) {\n        return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n    },\n\n    tangentQuadraticBezier3(t, p0, p1, p2, p3) {\n        return -3 * p0 * (1 - t) * (1 - t) +\n            3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) +\n            6 * t * p2 * (1 - t) - 3 * t * t * p2 +\n            3 * t * t * p3;\n    },\n\n    tangentSpline(t) {\n        const h00 = 6 * t * t - 6 * t;\n        const h10 = 3 * t * t - 4 * t + 1;\n        const h01 = -6 * t * t + 6 * t;\n        const h11 = 3 * t * t - 2 * t;\n        return h00 + h10 + h01 + h11;\n    },\n\n    catmullRomInterpolate(p0, p1, p2, p3, t) {\n        const v0 = (p2 - p0) * 0.5;\n        const v1 = (p3 - p1) * 0.5;\n        const t2 = t * t;\n        const t3 = t * t2;\n        return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n    },\n\n// Bezier Curve formulii from http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n// Quad Bezier Functions\n\n    b2p0(t, p) {\n        const k = 1 - t;\n        return k * k * p;\n\n    },\n\n    b2p1(t, p) {\n        return 2 * (1 - t) * t * p;\n    },\n\n    b2p2(t, p) {\n        return t * t * p;\n    },\n\n    b2(t, p0, p1, p2) {\n        return this.b2p0(t, p0) + this.b2p1(t, p1) + this.b2p2(t, p2);\n    },\n\n// Cubic Bezier Functions\n\n    b3p0(t, p) {\n        const k = 1 - t;\n        return k * k * k * p;\n    },\n\n    b3p1(t, p) {\n        const k = 1 - t;\n        return 3 * k * k * t * p;\n    },\n\n    b3p2(t, p) {\n        const k = 1 - t;\n        return 3 * k * t * t * p;\n    },\n\n    b3p3(t, p) {\n        return t * t * t * p;\n    },\n\n    b3(t, p0, p1, p2, p3) {\n        return this.b3p0(t, p0) + this.b3p1(t, p1) + this.b3p2(t, p2) + this.b3p3(t, p3);\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Geometry\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Calculates the normal vector of a triangle.\n     *\n     * @private\n     */\n    triangleNormal(a, b, c, normal = math.vec3()) {\n        const p1x = b[0] - a[0];\n        const p1y = b[1] - a[1];\n        const p1z = b[2] - a[2];\n\n        const p2x = c[0] - a[0];\n        const p2y = c[1] - a[1];\n        const p2z = c[2] - a[2];\n\n        const p3x = p1y * p2z - p1z * p2y;\n        const p3y = p1z * p2x - p1x * p2z;\n        const p3z = p1x * p2y - p1y * p2x;\n\n        const mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);\n        if (mag === 0) {\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else {\n            normal[0] = p3x / mag;\n            normal[1] = p3y / mag;\n            normal[2] = p3z / mag;\n        }\n\n        return normal\n    },\n\n    /**\n     * Finds the intersection of a 3D ray with a 3D triangle.\n     *\n     * @private\n     */\n    rayTriangleIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            const EPSILON = 0.000001;\n\n            const edge1 = math.subVec3(b, a, tempVec3);\n            const edge2 = math.subVec3(c, a, tempVec3b);\n\n            const pvec = math.cross3Vec3(dir, edge2, tempVec3c);\n            const det = math.dotVec3(edge1, pvec);\n            if (det < EPSILON) {\n                return null;\n            }\n\n            const tvec = math.subVec3(origin, a, tempVec3d);\n            const u = math.dotVec3(tvec, pvec);\n            if (u < 0 || u > det) {\n                return null;\n            }\n\n            const qvec = math.cross3Vec3(tvec, edge1, tempVec3e);\n            const v = math.dotVec3(dir, qvec);\n            if (v < 0 || u + v > det) {\n                return null;\n            }\n\n            const t = math.dotVec3(edge2, qvec) / det;\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Finds the intersection of a 3D ray with a plane defined by 3 points.\n     *\n     * @private\n     */\n    rayPlaneIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            dir = math.normalizeVec3(dir, tempVec3);\n\n            const edge1 = math.subVec3(b, a, tempVec3b);\n            const edge2 = math.subVec3(c, a, tempVec3c);\n\n            const n = math.cross3Vec3(edge1, edge2, tempVec3d);\n            math.normalizeVec3(n, n);\n\n            const d = -math.dotVec3(a, n);\n\n            const t = -(math.dotVec3(origin, n) + d) / math.dotVec3(dir, n);\n\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     *\n     * @private\n     */\n    cartesianToBarycentric: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n\n        return (cartesian, a, b, c, dest) => {\n\n            const v0 = math.subVec3(c, a, tempVec3);\n            const v1 = math.subVec3(b, a, tempVec3b);\n            const v2 = math.subVec3(cartesian, a, tempVec3c);\n\n            const dot00 = math.dotVec3(v0, v0);\n            const dot01 = math.dotVec3(v0, v1);\n            const dot02 = math.dotVec3(v0, v2);\n            const dot11 = math.dotVec3(v1, v1);\n            const dot12 = math.dotVec3(v1, v2);\n\n            const denom = (dot00 * dot11 - dot01 * dot01);\n\n            // Colinear or singular triangle\n\n            if (denom === 0) {\n\n                // Arbitrary location outside of triangle\n\n                return null;\n            }\n\n            const invDenom = 1 / denom;\n\n            const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n            const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n            dest[0] = 1 - u - v;\n            dest[1] = v;\n            dest[2] = u;\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Returns true if the given barycentric coordinates are within their triangle.\n     *\n     * @private\n     */\n    barycentricInsideTriangle(bary) {\n\n        const v = bary[1];\n        const u = bary[2];\n\n        return (u >= 0) && (v >= 0) && (u + v < 1);\n    },\n\n    /**\n     * Gets cartesian coordinates from barycentric coordinates within a triangle.\n     *\n     * @private\n     */\n    barycentricToCartesian(bary, a, b, c, cartesian = math.vec3()) {\n        const u = bary[0];\n        const v = bary[1];\n        const w = bary[2];\n\n        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;\n        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;\n        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;\n\n        return cartesian;\n    },\n\n\n    /**\n     * Given geometry defined as an array of positions, optional normals, option uv and an array of indices, returns\n     * modified arrays that have duplicate vertices removed.\n     *\n     * Note: does not work well when co-incident vertices have same positions but different normals and UVs.\n     *\n     * @param positions\n     * @param normals\n     * @param uv\n     * @param indices\n     * @returns {{positions: Array, indices: Array}}\n     * @private\n     */\n    mergeVertices(positions, normals, uv, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        const indicesLookup = [];\n        const uniquePositions = [];\n        const uniqueNormals = normals ? [] : null;\n        const uniqueUV = uv ? [] : null;\n        const indices2 = [];\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let i;\n        let len;\n        let uvi = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = uniquePositions.length / 3;\n                uniquePositions.push(vx);\n                uniquePositions.push(vy);\n                uniquePositions.push(vz);\n                if (normals) {\n                    uniqueNormals.push(normals[i]);\n                    uniqueNormals.push(normals[i + 1]);\n                    uniqueNormals.push(normals[i + 2]);\n                }\n                if (uv) {\n                    uniqueUV.push(uv[uvi]);\n                    uniqueUV.push(uv[uvi + 1]);\n                }\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n            uvi += 2;\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            indices2[i] = indicesLookup[indices[i]];\n        }\n        const result = {\n            positions: uniquePositions,\n            indices: indices2\n        };\n        if (uniqueNormals) {\n            result.normals = uniqueNormals;\n        }\n        if (uniqueUV) {\n            result.uv = uniqueUV;\n\n        }\n        return result;\n    },\n\n    /**\n     * Builds normal vectors from positions and indices.\n     *\n     * @private\n     */\n    buildNormals: ((() => {\n\n        const a = new Float32Array(3);\n        const b = new Float32Array(3);\n        const c = new Float32Array(3);\n        const ab = new Float32Array(3);\n        const ac = new Float32Array(3);\n        const crossVec = new Float32Array(3);\n\n        return (positions, indices, normals) => {\n\n            let i;\n            let len;\n            const nvecs = new Array(positions.length / 3);\n            let j0;\n            let j1;\n            let j2;\n\n            for (i = 0, len = indices.length; i < len; i += 3) {\n\n                j0 = indices[i];\n                j1 = indices[i + 1];\n                j2 = indices[i + 2];\n\n                a[0] = positions[j0 * 3];\n                a[1] = positions[j0 * 3 + 1];\n                a[2] = positions[j0 * 3 + 2];\n\n                b[0] = positions[j1 * 3];\n                b[1] = positions[j1 * 3 + 1];\n                b[2] = positions[j1 * 3 + 2];\n\n                c[0] = positions[j2 * 3];\n                c[1] = positions[j2 * 3 + 1];\n                c[2] = positions[j2 * 3 + 2];\n\n                math.subVec3(b, a, ab);\n                math.subVec3(c, a, ac);\n\n                const normVec = new Float32Array(3);\n\n                math.normalizeVec3(math.cross3Vec3(ab, ac, crossVec), normVec);\n\n                if (!nvecs[j0]) {\n                    nvecs[j0] = [];\n                }\n                if (!nvecs[j1]) {\n                    nvecs[j1] = [];\n                }\n                if (!nvecs[j2]) {\n                    nvecs[j2] = [];\n                }\n\n                nvecs[j0].push(normVec);\n                nvecs[j1].push(normVec);\n                nvecs[j2].push(normVec);\n            }\n\n            normals = (normals && normals.length === positions.length) ? normals : new Float32Array(positions.length);\n\n            let count;\n            let x;\n            let y;\n            let z;\n\n            for (i = 0, len = nvecs.length; i < len; i++) {  // Now go through and average out everything\n\n                count = nvecs[i].length;\n\n                x = 0;\n                y = 0;\n                z = 0;\n\n                for (let j = 0; j < count; j++) {\n                    x += nvecs[i][j][0];\n                    y += nvecs[i][j][1];\n                    z += nvecs[i][j][2];\n                }\n\n                normals[i * 3] = (x / count);\n                normals[i * 3 + 1] = (y / count);\n                normals[i * 3 + 2] = (z / count);\n            }\n\n            return normals;\n        };\n    }))(),\n\n    /**\n     * Builds vertex tangent vectors from positions, UVs and indices.\n     *\n     * @private\n     */\n    buildTangents: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n        const tempVec3f = new Float32Array(3);\n        const tempVec3g = new Float32Array(3);\n\n        return (positions, indices, uv) => {\n\n            const tangents = new Float32Array(positions.length);\n\n            // The vertex arrays needs to be calculated\n            // before the calculation of the tangents\n\n            for (let location = 0; location < indices.length; location += 3) {\n\n                // Recontructing each vertex and UV coordinate into the respective vectors\n\n                let index = indices[location];\n\n                const v0 = positions.subarray(index * 3, index * 3 + 3);\n                const uv0 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 1];\n\n                const v1 = positions.subarray(index * 3, index * 3 + 3);\n                const uv1 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 2];\n\n                const v2 = positions.subarray(index * 3, index * 3 + 3);\n                const uv2 = uv.subarray(index * 2, index * 2 + 2);\n\n                const deltaPos1 = math.subVec3(v1, v0, tempVec3);\n                const deltaPos2 = math.subVec3(v2, v0, tempVec3b);\n\n                const deltaUV1 = math.subVec2(uv1, uv0, tempVec3c);\n                const deltaUV2 = math.subVec2(uv2, uv0, tempVec3d);\n\n                const r = 1 / ((deltaUV1[0] * deltaUV2[1]) - (deltaUV1[1] * deltaUV2[0]));\n\n                const tangent = math.mulVec3Scalar(\n                    math.subVec3(\n                        math.mulVec3Scalar(deltaPos1, deltaUV2[1], tempVec3e),\n                        math.mulVec3Scalar(deltaPos2, deltaUV1[1], tempVec3f),\n                        tempVec3g\n                    ),\n                    r,\n                    tempVec3f\n                );\n\n                // Average the value of the vectors\n\n                let addTo;\n\n                for (let v = 0; v < 3; v++) {\n                    addTo = indices[location + v] * 3;\n                    tangents[addTo] += tangent[0];\n                    tangents[addTo + 1] += tangent[1];\n                    tangents[addTo + 2] += tangent[2];\n                }\n            }\n\n            return tangents;\n        };\n    }))(),\n\n    /**\n     * Builds vertex and index arrays needed by color-indexed triangle picking.\n     *\n     * @private\n     */\n    buildPickTriangles(positions, indices, compressGeometry) {\n\n        const numIndices = indices.length;\n        const pickPositions = compressGeometry ? new Uint16Array(numIndices * 9) : new Float32Array(numIndices * 9);\n        const pickColors = new Uint8Array(numIndices * 12);\n        let primIndex = 0;\n        let vi;// Positions array index\n        let pvi = 0;// Picking positions array index\n        let pci = 0; // Picking color array index\n\n        // Triangle indices\n        let i;\n        let r;\n        let g;\n        let b;\n        let a;\n\n        for (let location = 0; location < numIndices; location += 3) {\n\n            // Primitive-indexed triangle pick color\n\n            a = (primIndex >> 24 & 0xFF);\n            b = (primIndex >> 16 & 0xFF);\n            g = (primIndex >> 8 & 0xFF);\n            r = (primIndex & 0xFF);\n\n            // A\n\n            i = indices[location];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // B\n\n            i = indices[location + 1];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // C\n\n            i = indices[location + 2];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            primIndex++;\n        }\n\n        return {\n            positions: pickPositions,\n            colors: pickColors\n        };\n    },\n\n    /**\n     * Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\n     * that don't share vertex array elements. Works by finding groups of vertices that have the same location and\n     * averaging their normal vectors.\n     *\n     * @returns {{positions: Array, normals: *}}\n     */\n    faceToVertexNormals(positions, normals, options = {}) {\n        const smoothNormalsAngleThreshold = options.smoothNormalsAngleThreshold || 20;\n        const vertexMap = {};\n        const vertexNormals = [];\n        const vertexNormalAccum = {};\n        let acc;\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let posi;\n        let i;\n        let j;\n        let len;\n        let a;\n        let b;\n        let c;\n\n        for (i = 0, len = positions.length; i < len; i += 3) {\n\n            posi = i / 3;\n\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n\n            if (vertexMap[key] === undefined) {\n                vertexMap[key] = [posi];\n            } else {\n                vertexMap[key].push(posi);\n            }\n\n            const normal = math.normalizeVec3([normals[i], normals[i + 1], normals[i + 2]]);\n\n            vertexNormals[posi] = normal;\n\n            acc = math.vec4([normal[0], normal[1], normal[2], 1]);\n\n            vertexNormalAccum[posi] = acc;\n        }\n\n        for (key in vertexMap) {\n\n            if (vertexMap.hasOwnProperty(key)) {\n\n                const vertices = vertexMap[key];\n                const numVerts = vertices.length;\n\n                for (i = 0; i < numVerts; i++) {\n\n                    const ii = vertices[i];\n\n                    acc = vertexNormalAccum[ii];\n\n                    for (j = 0; j < numVerts; j++) {\n\n                        if (i === j) {\n                            continue;\n                        }\n\n                        const jj = vertices[j];\n\n                        a = vertexNormals[ii];\n                        b = vertexNormals[jj];\n\n                        const angle = Math.abs(math.angleVec3(a, b) / math.DEGTORAD);\n\n                        if (angle < smoothNormalsAngleThreshold) {\n\n                            acc[0] += b[0];\n                            acc[1] += b[1];\n                            acc[2] += b[2];\n                            acc[3] += 1.0;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0, len = normals.length; i < len; i += 3) {\n\n            acc = vertexNormalAccum[i / 3];\n\n            normals[i + 0] = acc[0] / acc[3];\n            normals[i + 1] = acc[1] / acc[3];\n            normals[i + 2] = acc[2] / acc[3];\n\n        }\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Ray casting\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Transforms a Canvas-space position into a World-space ray, in the context of a Camera.\n     @method canvasPosToWorldRay\n     @static\n     @param {Number[]} viewMatrix View matrix\n     @param {Number[]} projMatrix Projection matrix\n     @param {Number[]} canvasPos The Canvas-space position.\n     @param {Number[]} worldRayOrigin The World-space ray origin.\n     @param {Number[]} worldRayDir The World-space ray direction.\n     */\n    canvasPosToWorldRay: ((() => {\n\n        const tempMat4b = new Float32Array(16);\n        const tempMat4c = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n        const tempVec4c = new Float32Array(4);\n        const tempVec4d = new Float32Array(4);\n\n        return (canvas, viewMatrix, projMatrix, canvasPos, worldRayOrigin, worldRayDir) => {\n\n            const pvMat = math.mulMat4(projMatrix, viewMatrix, tempMat4b);\n            const pvMatInverse = math.inverseMat4(pvMat, tempMat4c);\n\n            // Calculate clip space coordinates, which will be in range\n            // of x=[-1..1] and y=[-1..1], with y=(+1) at top\n\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n\n            const clipX = (canvasPos[0] - canvasWidth / 2) / (canvasWidth / 2);  // Calculate clip space coordinates\n            const clipY = -(canvasPos[1] - canvasHeight / 2) / (canvasHeight / 2);\n\n            tempVec4a[0] = clipX;\n            tempVec4a[1] = clipY;\n            tempVec4a[2] = -1;\n            tempVec4a[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4a, tempVec4b);\n            math.mulVec4Scalar(tempVec4b, 1 / tempVec4b[3]);\n\n            tempVec4c[0] = clipX;\n            tempVec4c[1] = clipY;\n            tempVec4c[2] = 1;\n            tempVec4c[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4c, tempVec4d);\n            math.mulVec4Scalar(tempVec4d, 1 / tempVec4d[3]);\n\n            worldRayOrigin[0] = tempVec4d[0];\n            worldRayOrigin[1] = tempVec4d[1];\n            worldRayOrigin[2] = tempVec4d[2];\n\n            math.subVec3(tempVec4d, tempVec4b, worldRayDir);\n\n            math.normalizeVec3(worldRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a Canvas-space position to a Mesh's Local-space coordinate system, in the context of a Camera.\n     @method canvasPosToLocalRay\n     @static\n     @param {Camera} camera The Camera.\n     @param {Mesh} mesh The Mesh.\n     @param {Number[]} viewMatrix View matrix\n     @param {Number[]} projMatrix Projection matrix\n     @param {Number[]} worldMatrix Modeling matrix\n     @param {Number[]} canvasPos The Canvas-space position.\n     @param {Number[]} localRayOrigin The Local-space ray origin.\n     @param {Number[]} localRayDir The Local-space ray direction.\n     */\n    canvasPosToLocalRay: ((() => {\n\n        const worldRayOrigin = new Float32Array(3);\n        const worldRayDir = new Float32Array(3);\n\n        return (canvas, viewMatrix, projMatrix, worldMatrix, canvasPos, localRayOrigin, localRayDir) => {\n            math.canvasPosToWorldRay(canvas, viewMatrix, projMatrix, canvasPos, worldRayOrigin, worldRayDir);\n            math.worldRayToLocalRay(worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a ray from World-space to a Mesh's Local-space coordinate system.\n     @method worldRayToLocalRay\n     @static\n     @param {Number[]} worldMatrix The World transform matrix\n     @param {Number[]} worldRayOrigin The World-space ray origin.\n     @param {Number[]} worldRayDir The World-space ray direction.\n     @param {Number[]} localRayOrigin The Local-space ray origin.\n     @param {Number[]} localRayDir The Local-space ray direction.\n     */\n    worldRayToLocalRay: ((() => {\n\n        const tempMat4 = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n\n        return (worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir) => {\n\n            const modelMatInverse = math.inverseMat4(worldMatrix, tempMat4);\n\n            tempVec4a[0] = worldRayOrigin[0];\n            tempVec4a[1] = worldRayOrigin[1];\n            tempVec4a[2] = worldRayOrigin[2];\n            tempVec4a[3] = 1;\n\n            math.transformVec4(modelMatInverse, tempVec4a, tempVec4b);\n\n            localRayOrigin[0] = tempVec4b[0];\n            localRayOrigin[1] = tempVec4b[1];\n            localRayOrigin[2] = tempVec4b[2];\n\n            math.transformVec3(modelMatInverse, worldRayDir, localRayDir);\n        };\n    }))(),\n\n    buildKDTree: ((() => {\n\n        const KD_TREE_MAX_DEPTH = 10;\n        const KD_TREE_MIN_TRIANGLES = 20;\n\n        const dimLength = new Float32Array();\n\n        function buildNode(triangles, indices, positions, depth) {\n            const aabb = new Float32Array(6);\n\n            const node = {\n                triangles: null,\n                left: null,\n                right: null,\n                leaf: false,\n                splitDim: 0,\n                aabb\n            };\n\n            aabb[0] = aabb[1] = aabb[2] = Number.POSITIVE_INFINITY;\n            aabb[3] = aabb[4] = aabb[5] = Number.NEGATIVE_INFINITY;\n\n            let t;\n            let i;\n            let len;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n                var ii = triangles[t] * 3;\n                for (let j = 0; j < 3; ++j) {\n                    const pi = indices[ii + j] * 3;\n                    if (positions[pi] < aabb[0]) {\n                        aabb[0] = positions[pi]\n                    }\n                    if (positions[pi] > aabb[3]) {\n                        aabb[3] = positions[pi]\n                    }\n                    if (positions[pi + 1] < aabb[1]) {\n                        aabb[1] = positions[pi + 1]\n                    }\n                    if (positions[pi + 1] > aabb[4]) {\n                        aabb[4] = positions[pi + 1]\n                    }\n                    if (positions[pi + 2] < aabb[2]) {\n                        aabb[2] = positions[pi + 2]\n                    }\n                    if (positions[pi + 2] > aabb[5]) {\n                        aabb[5] = positions[pi + 2]\n                    }\n                }\n            }\n\n            if (triangles.length < KD_TREE_MIN_TRIANGLES || depth > KD_TREE_MAX_DEPTH) {\n                node.triangles = triangles;\n                node.leaf = true;\n                return node;\n            }\n\n            dimLength[0] = aabb[3] - aabb[0];\n            dimLength[1] = aabb[4] - aabb[1];\n            dimLength[2] = aabb[5] - aabb[2];\n\n            let dim = 0;\n\n            if (dimLength[1] > dimLength[dim]) {\n                dim = 1;\n            }\n\n            if (dimLength[2] > dimLength[dim]) {\n                dim = 2;\n            }\n\n            node.splitDim = dim;\n\n            const mid = (aabb[dim] + aabb[dim + 3]) / 2;\n            const left = new Array(triangles.length);\n            let numLeft = 0;\n            const right = new Array(triangles.length);\n            let numRight = 0;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n\n                var ii = triangles[t] * 3;\n                const i0 = indices[ii];\n                const i1 = indices[ii + 1];\n                const i2 = indices[ii + 2];\n\n                const pi0 = i0 * 3;\n                const pi1 = i1 * 3;\n                const pi2 = i2 * 3;\n\n                if (positions[pi0 + dim] <= mid || positions[pi1 + dim] <= mid || positions[pi2 + dim] <= mid) {\n                    left[numLeft++] = triangles[t];\n                } else {\n                    right[numRight++] = triangles[t];\n                }\n            }\n\n            left.length = numLeft;\n            right.length = numRight;\n\n            node.left = buildNode(left, indices, positions, depth + 1);\n            node.right = buildNode(right, indices, positions, depth + 1);\n\n            return node;\n        }\n\n        return (indices, positions) => {\n            const numTris = indices.length / 3;\n            const triangles = new Array(numTris);\n            for (let i = 0; i < numTris; ++i) {\n                triangles[i] = i;\n            }\n            return buildNode(triangles, indices, positions, 0);\n        };\n    }))(),\n\n\n    decompressPosition(position, decodeMatrix, dest) {\n        dest[0] = position[0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[1] = position[1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    },\n\n    decompressPositions(positions, decodeMatrix, dest = new Float32Array(positions.length)) {\n        for (let i = 0, len = positions.length; i < len; i += 3) {\n            dest[i + 0] = positions[i + 0] * decodeMatrix[0] + decodeMatrix[12];\n            dest[i + 1] = positions[i + 1] * decodeMatrix[5] + decodeMatrix[13];\n            dest[i + 2] = positions[i + 2] * decodeMatrix[10] + decodeMatrix[14];\n        }\n        return dest;\n    },\n\n    decompressUV(uv, decodeMatrix, dest) {\n        dest[0] = uv[0] * decodeMatrix[0] + decodeMatrix[6];\n        dest[1] = uv[1] * decodeMatrix[4] + decodeMatrix[7];\n    },\n\n    decompressUVs(uvs, decodeMatrix, dest = new Float32Array(uvs.length)) {\n        for (let i = 0, len = uvs.length; i < len; i += 3) {\n            dest[i + 0] = uvs[i + 0] * decodeMatrix[0] + decodeMatrix[6];\n            dest[i + 1] = uvs[i + 1] * decodeMatrix[4] + decodeMatrix[7];\n        }\n        return dest;\n    },\n\n    octDecodeVec2(oct, result) {\n        let x = oct[0];\n        let y = oct[1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[0] = x / length;\n        result[1] = y / length;\n        result[2] = z / length;\n        return result;\n    },\n\n    octDecodeVec2s(octs, result) {\n        for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n            let x = octs[i + 0];\n            let y = octs[i + 1];\n            x = (2 * x + 1) / 255;\n            y = (2 * y + 1) / 255;\n            const z = 1 - Math.abs(x) - Math.abs(y);\n            if (z < 0) {\n                x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n                y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n            }\n            const length = Math.sqrt(x * x + y * y + z * z);\n            result[j + 0] = x / length;\n            result[j + 1] = y / length;\n            result[j + 2] = z / length;\n            j += 3;\n        }\n        return result;\n    }\n};\n\nmath.buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n    // TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + \",\" + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                dot = math.dotVec3(normal1, normal2);\n                if (dot > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGgvbWF0aC5qcz9iNWU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsU0FBUztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1GQUFtRixHQUFHLGVBQWUsRUFBRSxvQkFBb0IsR0FBRyw0QkFBNEIsRUFBRSxxQkFBcUIsR0FBRyxzQkFBc0IsRUFBRSxvQkFBb0IsR0FBRyxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCO0FBQzFYO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGdCQUFnQixjQUFjO0FBQzlCLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsY0FBYztBQUM3QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQixjQUFjO0FBQzlCLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0IsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0IsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsY0FBYztBQUM3QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsY0FBYztBQUM3QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxjQUFjO0FBQzdCLGdCQUFnQixjQUFjO0FBQzlCLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsY0FBYztBQUM5QixnQkFBZ0IsY0FBYztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0IsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0IsZ0JBQWdCLGNBQWM7QUFDOUIsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0wsa0JBQWtCO0FBQ2xCO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7QUFHTDtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsU0FBUztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSwrRUFBK0Usb0JBQW9CO0FBQ25HO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsS0FBSzs7QUFFTDtBQUNBLDJEQUEyRCxvQkFBb0I7QUFDL0U7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixLQUFLO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHVCQUF1QixTQUFTOztBQUVoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsU0FBUzs7QUFFNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixTQUFTOztBQUU1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQyxVQUFVO0FBQzlDO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBLHdCQUF3QjtBQUN4Qix3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsU0FBUzs7QUFFNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtREFBbUQsU0FBUzs7QUFFNUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUMsU0FBUzs7QUFFbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxTQUFTOztBQUVyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsZUFBZTtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsZUFBZTs7QUFFdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx1QkFBdUIsa0JBQWtCOztBQUV6QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUIsZUFBZTtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsZUFBZTs7QUFFdEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDLFNBQVM7O0FBRXJEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxTQUFTO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyQkFBMkIsR0FBRywyQkFBMkIsR0FBRywyQkFBMkI7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Q0FBNkMsU0FBUzs7QUFFdEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQyxTQUFTLE9BQU87O0FBRTNEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0IsV0FBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxrQ0FBa0MsMkJBQTJCOztBQUU3RDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Ysb0JBQW9CO0FBQ3BCLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4Qix1QkFBdUI7O0FBRXJEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDLFNBQVM7O0FBRXBEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcsMkJBQTJCOztBQUU1RztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLDJCQUEyQixjQUFjOztBQUV6Qzs7QUFFQTs7QUFFQSwrQkFBK0IsY0FBYzs7QUFFN0M7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlDQUF5QyxTQUFTOztBQUVsRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0VBQStFO0FBQy9FOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxLQUFLO0FBQ2xCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0MsU0FBUztBQUN4RDtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDLFNBQVM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsYUFBYTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGlEQUFpRCxTQUFTO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsU0FBUztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLG9CQUFvQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQ7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tYXRoL21hdGguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTb21lIHRlbXBvcmFyeSB2YXJzIHRvIGhlbHAgYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cbmNvbnN0IGRvdWJsZVByZWNpc2lvbiA9IHRydWU7XG5jb25zdCBGbG9hdEFycmF5VHlwZSA9IGRvdWJsZVByZWNpc2lvbiA/IEZsb2F0NjRBcnJheSA6IEZsb2F0MzJBcnJheTtcblxuY29uc3QgdGVtcE1hdDEgPSBuZXcgRmxvYXRBcnJheVR5cGUoMTYpO1xuY29uc3QgdGVtcE1hdDIgPSBuZXcgRmxvYXRBcnJheVR5cGUoMTYpO1xuY29uc3QgdGVtcFZlYzQgPSBuZXcgRmxvYXRBcnJheVR5cGUoNCk7XG5cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBtYXRoID0ge1xuXG4gICAgTUlOX0RPVUJMRTogLU51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgIE1BWF9ET1VCTEU6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiByYWRpaWFucyBpbiBhIGRlZ3JlZSAoMC4wMTc0NTMyOTI1KS5cbiAgICAgKiBAcHJvcGVydHkgREVHVE9SQURcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIERFR1RPUkFEOiAwLjAxNzQ1MzI5MjUsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRlZ3JlZXMgaW4gYSByYWRpYW4uXG4gICAgICogQHByb3BlcnR5IFJBRFRPREVHXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICBSQURUT0RFRzogNTcuMjk1Nzc5NTEzLFxuXG4gICAgdW5nbG9iYWxpemVPYmplY3RJZChtb2RlbElkLCBnbG9iYWxJZCkge1xuICAgICAgICBjb25zdCBpZHggPSBnbG9iYWxJZC5pbmRleE9mKFwiI1wiKTtcbiAgICAgICAgcmV0dXJuIChpZHggPT09IG1vZGVsSWQubGVuZ3RoICYmIGdsb2JhbElkLnN0YXJ0c1dpdGgobW9kZWxJZCkpID8gZ2xvYmFsSWQuc3Vic3RyaW5nKGlkeCArIDEpIDogZ2xvYmFsSWQ7XG4gICAgfSxcblxuICAgIGdsb2JhbGl6ZU9iamVjdElkKG1vZGVsSWQsIG9iamVjdElkKSB7XG4gICAgICAgIHJldHVybiAobW9kZWxJZCArIFwiI1wiICsgb2JqZWN0SWQpXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcsIHVuaW5pdGlhbGl6ZWQgdHdvLWVsZW1lbnQgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgdmVjMlxuICAgICAqIEBwYXJhbSBbdmFsdWVzXSBJbml0aWFsIHZhbHVlcy5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJldHVybnMge051bWJlcltdfVxuICAgICAqL1xuICAgIHZlYzIodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUodmFsdWVzIHx8IDIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3LCB1bmluaXRpYWxpemVkIHRocmVlLWVsZW1lbnQgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgdmVjM1xuICAgICAqIEBwYXJhbSBbdmFsdWVzXSBJbml0aWFsIHZhbHVlcy5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJldHVybnMge051bWJlcltdfVxuICAgICAqL1xuICAgIHZlYzModmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUodmFsdWVzIHx8IDMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3LCB1bmluaXRpYWxpemVkIGZvdXItZWxlbWVudCB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCB2ZWM0XG4gICAgICogQHBhcmFtIFt2YWx1ZXNdIEluaXRpYWwgdmFsdWVzLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyW119XG4gICAgICovXG4gICAgdmVjNCh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdEFycmF5VHlwZSh2YWx1ZXMgfHwgNCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcsIHVuaW5pdGlhbGl6ZWQgM3gzIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIG1hdDNcbiAgICAgKiBAcGFyYW0gW3ZhbHVlc10gSW5pdGlhbCB2YWx1ZXMuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX1cbiAgICAgKi9cbiAgICBtYXQzKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0QXJyYXlUeXBlKHZhbHVlcyB8fCA5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSAzeDMgbWF0cml4IHRvIDR4NFxuICAgICAqIEBtZXRob2QgbWF0M1RvTWF0NFxuICAgICAqIEBwYXJhbSBtYXQzIDN4MyBtYXRyaXguXG4gICAgICogQHBhcmFtIG1hdDQgNHg0IG1hdHJpeFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyW119XG4gICAgICovXG4gICAgbWF0M1RvTWF0NChtYXQzLCBtYXQ0ID0gbmV3IEZsb2F0QXJyYXlUeXBlKDE2KSkge1xuICAgICAgICBtYXQ0WzBdID0gbWF0M1swXTtcbiAgICAgICAgbWF0NFsxXSA9IG1hdDNbMV07XG4gICAgICAgIG1hdDRbMl0gPSBtYXQzWzJdO1xuICAgICAgICBtYXQ0WzNdID0gMDtcbiAgICAgICAgbWF0NFs0XSA9IG1hdDNbM107XG4gICAgICAgIG1hdDRbNV0gPSBtYXQzWzRdO1xuICAgICAgICBtYXQ0WzZdID0gbWF0M1s1XTtcbiAgICAgICAgbWF0NFs3XSA9IDA7XG4gICAgICAgIG1hdDRbOF0gPSBtYXQzWzZdO1xuICAgICAgICBtYXQ0WzldID0gbWF0M1s3XTtcbiAgICAgICAgbWF0NFsxMF0gPSBtYXQzWzhdO1xuICAgICAgICBtYXQ0WzExXSA9IDA7XG4gICAgICAgIG1hdDRbMTJdID0gMDtcbiAgICAgICAgbWF0NFsxM10gPSAwO1xuICAgICAgICBtYXQ0WzE0XSA9IDA7XG4gICAgICAgIG1hdDRbMTVdID0gMTtcbiAgICAgICAgcmV0dXJuIG1hdDQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcsIHVuaW5pdGlhbGl6ZWQgNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIG1hdDRcbiAgICAgKiBAcGFyYW0gW3ZhbHVlc10gSW5pdGlhbCB2YWx1ZXMuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX1cbiAgICAgKi9cbiAgICBtYXQ0KHZhbHVlcykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0QXJyYXlUeXBlKHZhbHVlcyB8fCAxNik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgNHg0IG1hdHJpeCB0byAzeDNcbiAgICAgKiBAbWV0aG9kIG1hdDRUb01hdDNcbiAgICAgKiBAcGFyYW0gbWF0NCA0eDQgbWF0cml4LlxuICAgICAqIEBwYXJhbSBtYXQzIDN4MyBtYXRyaXhcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHJldHVybnMge051bWJlcltdfVxuICAgICAqL1xuICAgIG1hdDRUb01hdDMobWF0NCwgbWF0MykgeyAvLyBUT0RPXG4gICAgICAgIC8vcmV0dXJuIG5ldyBGbG9hdEFycmF5VHlwZSh2YWx1ZXMgfHwgOSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgbGlzdCBvZiBkb3VibGUtcHJlY2lzaW9uIHZhbHVlcyB0byBhIGxpc3Qgb2YgaGlnaC1wYXJ0IGZsb2F0cyBhbmQgYSBsaXN0IG9mIGxvdy1wYXJ0IGZsb2F0cy5cbiAgICAgKiBAcGFyYW0gZG91YmxlVmFsc1xuICAgICAqIEBwYXJhbSBmbG9hdFZhbHNIaWdoXG4gICAgICogQHBhcmFtIGZsb2F0VmFsc0xvd1xuICAgICAqL1xuICAgIGRvdWJsZXNUb0Zsb2F0cyhkb3VibGVWYWxzLCBmbG9hdFZhbHNIaWdoLCBmbG9hdFZhbHNMb3cpIHtcbiAgICAgICAgY29uc3QgZmxvYXRQYWlyID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGRvdWJsZVZhbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIG1hdGguc3BsaXREb3VibGUoZG91YmxlVmFsc1tpXSwgZmxvYXRQYWlyKTtcbiAgICAgICAgICAgIGZsb2F0VmFsc0hpZ2hbaV0gPSBmbG9hdFBhaXJbMF07XG4gICAgICAgICAgICBmbG9hdFZhbHNMb3dbaV0gPSBmbG9hdFBhaXJbMV07XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGEgZG91YmxlIHZhbHVlIGludG8gdHdvIGZsb2F0cy5cbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKiBAcGFyYW0gZmxvYXRQYWlyXG4gICAgICovXG4gICAgc3BsaXREb3VibGUodmFsdWUsIGZsb2F0UGFpcikge1xuICAgICAgICBjb25zdCBoaSA9IEZsb2F0MzJBcnJheS5mcm9tKFt2YWx1ZV0pWzBdO1xuICAgICAgICBjb25zdCBsb3cgPSB2YWx1ZSAtIGhpO1xuICAgICAgICBmbG9hdFBhaXJbMF0gPSBoaTtcbiAgICAgICAgZmxvYXRQYWlyWzFdID0gbG93O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFVVSUQuXG4gICAgICogQG1ldGhvZCBjcmVhdGVVVUlEXG4gICAgICogQHN0YXRpY1xuICAgICAqIEByZXR1cm4gc3RyaW5nIFRoZSBuZXcgVVVJRFxuICAgICAqL1xuICAgIGNyZWF0ZVVVSUQ6ICgoKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxmID0ge307XG4gICAgICAgIGNvbnN0IGx1dCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBsdXRbaV0gPSAoaSA8IDE2ID8gJzAnIDogJycpICsgKGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZDAgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG4gICAgICAgICAgICBjb25zdCBkMSA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuICAgICAgICAgICAgY29uc3QgZDMgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG4gICAgICAgICAgICByZXR1cm4gYCR7bHV0W2QwICYgMHhmZl0gKyBsdXRbZDAgPj4gOCAmIDB4ZmZdICsgbHV0W2QwID4+IDE2ICYgMHhmZl0gKyBsdXRbZDAgPj4gMjQgJiAweGZmXX0tJHtsdXRbZDEgJiAweGZmXX0ke2x1dFtkMSA+PiA4ICYgMHhmZl19LSR7bHV0W2QxID4+IDE2ICYgMHgwZiB8IDB4NDBdfSR7bHV0W2QxID4+IDI0ICYgMHhmZl19LSR7bHV0W2QyICYgMHgzZiB8IDB4ODBdfSR7bHV0W2QyID4+IDggJiAweGZmXX0tJHtsdXRbZDIgPj4gMTYgJiAweGZmXX0ke2x1dFtkMiA+PiAyNCAmIDB4ZmZdfSR7bHV0W2QzICYgMHhmZl19JHtsdXRbZDMgPj4gOCAmIDB4ZmZdfSR7bHV0W2QzID4+IDE2ICYgMHhmZl19JHtsdXRbZDMgPj4gMjQgJiAweGZmXX1gO1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGEgdmFsdWUgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWluIExvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXggVXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge051bWJlcn0gQ2xhbXBlZCByZXN1bHQuXG4gICAgICovXG4gICAgY2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgdmFsdWUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmxvYXRpbmctcG9pbnQgbW9kdWx1c1xuICAgICAqIEBtZXRob2QgZm1vZFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZm1vZChhLCBiKSB7XG4gICAgICAgIGlmIChhIDwgYikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm1hdGguZm1vZCA6IEF0dGVtcHRpbmcgdG8gZmluZCBtb2R1bHVzIHdpdGhpbiBuZWdhdGl2ZSByYW5nZSAtIHdvdWxkIGJlIGluZmluaXRlIGxvb3AgLSBpZ25vcmluZ1wiKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChiIDw9IGEpIHtcbiAgICAgICAgICAgIGEgLT0gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gMy1lbGVtZW50IHZlY3RvcnMgYXJlIHRoZSBzYW1lLlxuICAgICAqIEBwYXJhbSB2MVxuICAgICAqIEBwYXJhbSB2MlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGNvbXBhcmVWZWMzKHYxLCB2Mikge1xuICAgICAgICByZXR1cm4gKHYxWzBdID09PSB2MlswXSAmJiB2MVsxXSA9PT0gdjJbMV0gJiYgdjFbMl0gPT09IHYyWzJdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyBhIHRocmVlLWVsZW1lbnQgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgbmVnYXRlVmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgVmVjdG9yIHRvIG5lZ2F0ZVxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBuZWdhdGVWZWMzKHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gLXZbMF07XG4gICAgICAgIGRlc3RbMV0gPSAtdlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IC12WzJdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyBhIGZvdXItZWxlbWVudCB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBuZWdhdGVWZWM0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBWZWN0b3IgdG8gbmVnYXRlXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG5lZ2F0ZVZlYzQodiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSAtdlswXTtcbiAgICAgICAgZGVzdFsxXSA9IC12WzFdO1xuICAgICAgICBkZXN0WzJdID0gLXZbMl07XG4gICAgICAgIGRlc3RbM10gPSAtdlszXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIGZvdXItZWxlbWVudCB2ZWN0b3IgdG8gYW5vdGhlci5cbiAgICAgKiBAbWV0aG9kIGFkZFZlYzRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB1IEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBTZWNvbmQgdmVjdG9yXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB1IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGFkZFZlYzQodSwgdiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB1O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB1WzBdICsgdlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHVbMV0gKyB2WzFdO1xuICAgICAgICBkZXN0WzJdID0gdVsyXSArIHZbMl07XG4gICAgICAgIGRlc3RbM10gPSB1WzNdICsgdlszXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzY2FsYXIgdmFsdWUgdG8gZWFjaCBlbGVtZW50IG9mIGEgZm91ci1lbGVtZW50IHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIGFkZFZlYzRTY2FsYXJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcyBUaGUgc2NhbGFyXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGFkZFZlYzRTY2FsYXIodiwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB2WzBdICsgcztcbiAgICAgICAgZGVzdFsxXSA9IHZbMV0gKyBzO1xuICAgICAgICBkZXN0WzJdID0gdlsyXSArIHM7XG4gICAgICAgIGRlc3RbM10gPSB2WzNdICsgcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgb25lIHRocmVlLWVsZW1lbnQgdmVjdG9yIHRvIGFub3RoZXIuXG4gICAgICogQG1ldGhvZCBhZGRWZWMzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdSBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgU2Vjb25kIHZlY3RvclxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBhZGRWZWMzKHUsIHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdTtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdVswXSArIHZbMF07XG4gICAgICAgIGRlc3RbMV0gPSB1WzFdICsgdlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHVbMl0gKyB2WzJdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIHNjYWxhciB2YWx1ZSB0byBlYWNoIGVsZW1lbnQgb2YgYSB0aHJlZS1lbGVtZW50IHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIGFkZFZlYzRTY2FsYXJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcyBUaGUgc2NhbGFyXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGFkZFZlYzNTY2FsYXIodiwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB2WzBdICsgcztcbiAgICAgICAgZGVzdFsxXSA9IHZbMV0gKyBzO1xuICAgICAgICBkZXN0WzJdID0gdlsyXSArIHM7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgb25lIGZvdXItZWxlbWVudCB2ZWN0b3IgZnJvbSBhbm90aGVyLlxuICAgICAqIEBtZXRob2Qgc3ViVmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHUgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFZlY3RvciB0byBzdWJ0cmFjdFxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBzdWJWZWM0KHUsIHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdTtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdVswXSAtIHZbMF07XG4gICAgICAgIGRlc3RbMV0gPSB1WzFdIC0gdlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHVbMl0gLSB2WzJdO1xuICAgICAgICBkZXN0WzNdID0gdVszXSAtIHZbM107XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgb25lIHRocmVlLWVsZW1lbnQgdmVjdG9yIGZyb20gYW5vdGhlci5cbiAgICAgKiBAbWV0aG9kIHN1YlZlYzNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB1IEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBWZWN0b3IgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0gIHtBcnJheShOdW1iZXIpfSBbZGVzdF0gRGVzdGluYXRpb24gdmVjdG9yXG4gICAgICogQHJldHVybiB7QXJyYXkoTnVtYmVyKX0gZGVzdCBpZiBzcGVjaWZpZWQsIHUgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgc3ViVmVjMyh1LCB2LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IHU7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHVbMF0gLSB2WzBdO1xuICAgICAgICBkZXN0WzFdID0gdVsxXSAtIHZbMV07XG4gICAgICAgIGRlc3RbMl0gPSB1WzJdIC0gdlsyXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyBvbmUgdHdvLWVsZW1lbnQgdmVjdG9yIGZyb20gYW5vdGhlci5cbiAgICAgKiBAbWV0aG9kIHN1YlZlYzJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB1IEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBWZWN0b3IgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0gIHtBcnJheShOdW1iZXIpfSBbZGVzdF0gRGVzdGluYXRpb24gdmVjdG9yXG4gICAgICogQHJldHVybiB7QXJyYXkoTnVtYmVyKX0gZGVzdCBpZiBzcGVjaWZpZWQsIHUgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgc3ViVmVjMih1LCB2LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IHU7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHVbMF0gLSB2WzBdO1xuICAgICAgICBkZXN0WzFdID0gdVsxXSAtIHZbMV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGdlb21ldHJpYyBtZWFuIG9mIHRoZSB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgZ2VvbWV0cmljTWVhblZlYzJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHsuLi5BcnJheShOdW1iZXIpfSB2ZWN0b3JzIFZlYzIgdG8gbWVhblxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IFRoZSBnZW9tZXRyaWMgbWVhbiB2ZWMyXG4gICAgICovXG4gICAgZ2VvbWV0cmljTWVhblZlYzIoLi4udmVjdG9ycykge1xuICAgICAgICBjb25zdCBnZW9tZXRyaWNNZWFuID0gbmV3IEZsb2F0QXJyYXlUeXBlKHZlY3RvcnNbMF0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHZlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGdlb21ldHJpY01lYW5bMF0gKz0gdmVjdG9yc1tpXVswXTtcbiAgICAgICAgICAgIGdlb21ldHJpY01lYW5bMV0gKz0gdmVjdG9yc1tpXVsxXTtcbiAgICAgICAgfVxuICAgICAgICBnZW9tZXRyaWNNZWFuWzBdIC89IHZlY3RvcnMubGVuZ3RoO1xuICAgICAgICBnZW9tZXRyaWNNZWFuWzFdIC89IHZlY3RvcnMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZ2VvbWV0cmljTWVhbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIGEgc2NhbGFyIHZhbHVlIGZyb20gZWFjaCBlbGVtZW50IG9mIGEgZm91ci1lbGVtZW50IHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIHN1YlZlYzRTY2FsYXJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcyBUaGUgc2NhbGFyXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIHN1YlZlYzRTY2FsYXIodiwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB2WzBdIC0gcztcbiAgICAgICAgZGVzdFsxXSA9IHZbMV0gLSBzO1xuICAgICAgICBkZXN0WzJdID0gdlsyXSAtIHM7XG4gICAgICAgIGRlc3RbM10gPSB2WzNdIC0gcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgZWFjaCBlbGVtZW50IG9mIGEgNC1lbGVtZW50IHZlY3RvciB0byBhIHNjYWxhciB2YWx1ZSBtaW51cyB0aGUgdmFsdWUgb2YgdGhhdCBlbGVtZW50LlxuICAgICAqIEBtZXRob2Qgc3ViU2NhbGFyVmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgVGhlIHZlY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzIFRoZSBzY2FsYXJcbiAgICAgKiBAcGFyYW0gIHtBcnJheShOdW1iZXIpfSBbZGVzdF0gRGVzdGluYXRpb24gdmVjdG9yXG4gICAgICogQHJldHVybiB7QXJyYXkoTnVtYmVyKX0gZGVzdCBpZiBzcGVjaWZpZWQsIHYgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgc3ViU2NhbGFyVmVjNCh2LCBzLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IHY7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHMgLSB2WzBdO1xuICAgICAgICBkZXN0WzFdID0gcyAtIHZbMV07XG4gICAgICAgIGRlc3RbMl0gPSBzIC0gdlsyXTtcbiAgICAgICAgZGVzdFszXSA9IHMgLSB2WzNdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBvbmUgdGhyZWUtZWxlbWVudCB2ZWN0b3IgYnkgYW5vdGhlci5cbiAgICAgKiBAbWV0aG9kIG11bFZlYzNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB1IEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBTZWNvbmQgdmVjdG9yXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB1IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG11bFZlYzQodSwgdiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB1O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB1WzBdICogdlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHVbMV0gKiB2WzFdO1xuICAgICAgICBkZXN0WzJdID0gdVsyXSAqIHZbMl07XG4gICAgICAgIGRlc3RbM10gPSB1WzNdICogdlszXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgZWFjaCBlbGVtZW50IG9mIGEgZm91ci1lbGVtZW50IHZlY3RvciBieSBhIHNjYWxhci5cbiAgICAgKiBAbWV0aG9kIG11bFZlYzM0Y2FsYXJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcyBUaGUgc2NhbGFyXG4gICAgICogQHBhcmFtICB7QXJyYXkoTnVtYmVyKX0gW2Rlc3RdIERlc3RpbmF0aW9uIHZlY3RvclxuICAgICAqIEByZXR1cm4ge0FycmF5KE51bWJlcil9IGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG11bFZlYzRTY2FsYXIodiwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB2WzBdICogcztcbiAgICAgICAgZGVzdFsxXSA9IHZbMV0gKiBzO1xuICAgICAgICBkZXN0WzJdID0gdlsyXSAqIHM7XG4gICAgICAgIGRlc3RbM10gPSB2WzNdICogcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgZWFjaCBlbGVtZW50IG9mIGEgdGhyZWUtZWxlbWVudCB2ZWN0b3IgYnkgYSBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBtdWxWZWMzU2NhbGFyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBUaGUgdmVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHMgVGhlIHNjYWxhclxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtdWxWZWMzU2NhbGFyKHYsIHMsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdlswXSAqIHM7XG4gICAgICAgIGRlc3RbMV0gPSB2WzFdICogcztcbiAgICAgICAgZGVzdFsyXSA9IHZbMl0gKiBzO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBlYWNoIGVsZW1lbnQgb2YgYSB0d28tZWxlbWVudCB2ZWN0b3IgYnkgYSBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBtdWxWZWMyU2NhbGFyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBUaGUgdmVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHMgVGhlIHNjYWxhclxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtdWxWZWMyU2NhbGFyKHYsIHMsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdlswXSAqIHM7XG4gICAgICAgIGRlc3RbMV0gPSB2WzFdICogcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgb25lIHRocmVlLWVsZW1lbnQgdmVjdG9yIGJ5IGFub3RoZXIuXG4gICAgICogQG1ldGhvZCBkaXZWZWMzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdSBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgU2Vjb25kIHZlY3RvclxuICAgICAqIEBwYXJhbSAge0FycmF5KE51bWJlcil9IFtkZXN0XSBEZXN0aW5hdGlvbiB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIHtBcnJheShOdW1iZXIpfSBkZXN0IGlmIHNwZWNpZmllZCwgdSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBkaXZWZWMzKHUsIHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdTtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdVswXSAvIHZbMF07XG4gICAgICAgIGRlc3RbMV0gPSB1WzFdIC8gdlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHVbMl0gLyB2WzJdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyBvbmUgZm91ci1lbGVtZW50IHZlY3RvciBieSBhbm90aGVyLlxuICAgICAqIEBtZXRob2QgZGl2VmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHUgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gIHtBcnJheShOdW1iZXIpfSBbZGVzdF0gRGVzdGluYXRpb24gdmVjdG9yXG4gICAgICogQHJldHVybiB7QXJyYXkoTnVtYmVyKX0gZGVzdCBpZiBzcGVjaWZpZWQsIHUgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZGl2VmVjNCh1LCB2LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IHU7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHVbMF0gLyB2WzBdO1xuICAgICAgICBkZXN0WzFdID0gdVsxXSAvIHZbMV07XG4gICAgICAgIGRlc3RbMl0gPSB1WzJdIC8gdlsyXTtcbiAgICAgICAgZGVzdFszXSA9IHVbM10gLyB2WzNdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyBhIHNjYWxhciBieSBhIHRocmVlLWVsZW1lbnQgdmVjdG9yLCByZXR1cm5pbmcgYSBuZXcgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgZGl2U2NhbGFyVmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0gdiB2ZWMzXG4gICAgICogQHBhcmFtIHMgc2NhbGFyXG4gICAgICogQHBhcmFtIGRlc3QgdmVjMyAtIG9wdGlvbmFsIGRlc3RpbmF0aW9uXG4gICAgICogQHJldHVybiBbXSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBkaXZTY2FsYXJWZWMzKHMsIHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gcyAvIHZbMF07XG4gICAgICAgIGRlc3RbMV0gPSBzIC8gdlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHMgLyB2WzJdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyBhIHRocmVlLWVsZW1lbnQgdmVjdG9yIGJ5IGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgZGl2VmVjM1NjYWxhclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0gdiB2ZWMzXG4gICAgICogQHBhcmFtIHMgc2NhbGFyXG4gICAgICogQHBhcmFtIGRlc3QgdmVjMyAtIG9wdGlvbmFsIGRlc3RpbmF0aW9uXG4gICAgICogQHJldHVybiBbXSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBkaXZWZWMzU2NhbGFyKHYsIHMsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdjtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gdlswXSAvIHM7XG4gICAgICAgIGRlc3RbMV0gPSB2WzFdIC8gcztcbiAgICAgICAgZGVzdFsyXSA9IHZbMl0gLyBzO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyBhIGZvdXItZWxlbWVudCB2ZWN0b3IgYnkgYSBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBkaXZWZWM0U2NhbGFyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB2IHZlYzRcbiAgICAgKiBAcGFyYW0gcyBzY2FsYXJcbiAgICAgKiBAcGFyYW0gZGVzdCB2ZWM0IC0gb3B0aW9uYWwgZGVzdGluYXRpb25cbiAgICAgKiBAcmV0dXJuIFtdIGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGRpdlZlYzRTY2FsYXIodiwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSB2WzBdIC8gcztcbiAgICAgICAgZGVzdFsxXSA9IHZbMV0gLyBzO1xuICAgICAgICBkZXN0WzJdID0gdlsyXSAvIHM7XG4gICAgICAgIGRlc3RbM10gPSB2WzNdIC8gcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyBhIHNjYWxhciBieSBhIGZvdXItZWxlbWVudCB2ZWN0b3IsIHJldHVybmluZyBhIG5ldyB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBkaXZTY2FsYXJWZWM0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSBzIHNjYWxhclxuICAgICAqIEBwYXJhbSB2IHZlYzRcbiAgICAgKiBAcGFyYW0gZGVzdCB2ZWM0IC0gb3B0aW9uYWwgZGVzdGluYXRpb25cbiAgICAgKiBAcmV0dXJuIFtdIGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGRpdlNjYWxhclZlYzQocywgdiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB2O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSBzIC8gdlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHMgLyB2WzFdO1xuICAgICAgICBkZXN0WzJdID0gcyAvIHZbMl07XG4gICAgICAgIGRlc3RbM10gPSBzIC8gdlszXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBmb3VyLWVsZW1lbnQgdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGRvdFZlYzRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB1IEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBTZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybiBUaGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBkb3RWZWM0KHUsIHYpIHtcbiAgICAgICAgcmV0dXJuICh1WzBdICogdlswXSArIHVbMV0gKiB2WzFdICsgdVsyXSAqIHZbMl0gKyB1WzNdICogdlszXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIGZvdXItZWxlbWVudCB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgY3Jvc3MzVmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHUgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIFRoZSBjcm9zcyBwcm9kdWN0XG4gICAgICovXG4gICAgY3Jvc3MzVmVjNCh1LCB2KSB7XG4gICAgICAgIGNvbnN0IHUwID0gdVswXTtcbiAgICAgICAgY29uc3QgdTEgPSB1WzFdO1xuICAgICAgICBjb25zdCB1MiA9IHVbMl07XG4gICAgICAgIGNvbnN0IHYwID0gdlswXTtcbiAgICAgICAgY29uc3QgdjEgPSB2WzFdO1xuICAgICAgICBjb25zdCB2MiA9IHZbMl07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB1MSAqIHYyIC0gdTIgKiB2MSxcbiAgICAgICAgICAgIHUyICogdjAgLSB1MCAqIHYyLFxuICAgICAgICAgICAgdTAgKiB2MSAtIHUxICogdjAsXG4gICAgICAgICAgICAwLjBdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB0aHJlZS1lbGVtZW50IHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBjcm9zczNWZWMzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdSBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgU2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm4gVGhlIGNyb3NzIHByb2R1Y3RcbiAgICAgKi9cbiAgICBjcm9zczNWZWMzKHUsIHYsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gdTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gdVswXTtcbiAgICAgICAgY29uc3QgeSA9IHVbMV07XG4gICAgICAgIGNvbnN0IHogPSB1WzJdO1xuICAgICAgICBjb25zdCB4MiA9IHZbMF07XG4gICAgICAgIGNvbnN0IHkyID0gdlsxXTtcbiAgICAgICAgY29uc3QgejIgPSB2WzJdO1xuICAgICAgICBkZXN0WzBdID0geSAqIHoyIC0geiAqIHkyO1xuICAgICAgICBkZXN0WzFdID0geiAqIHgyIC0geCAqIHoyO1xuICAgICAgICBkZXN0WzJdID0geCAqIHkyIC0geSAqIHgyO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG5cbiAgICBzcUxlblZlYzQodikgeyAvLyBUT0RPXG4gICAgICAgIHJldHVybiBtYXRoLmRvdFZlYzQodiwgdik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiBhIGZvdXItZWxlbWVudCB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBsZW5WZWM0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBUaGUgdmVjdG9yXG4gICAgICogQHJldHVybiBUaGUgbGVuZ3RoXG4gICAgICovXG4gICAgbGVuVmVjNCh2KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQobWF0aC5zcUxlblZlYzQodikpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdGhyZWUtZWxlbWVudCB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgZG90VmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHUgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIFRoZSBkb3QgcHJvZHVjdFxuICAgICAqL1xuICAgIGRvdFZlYzModSwgdikge1xuICAgICAgICByZXR1cm4gKHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0gKyB1WzJdICogdlsyXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB0d28tZWxlbWVudCB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgZG90VmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHUgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheShOdW1iZXIpfSB2IFNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIFRoZSBkb3QgcHJvZHVjdFxuICAgICAqL1xuICAgIGRvdFZlYzIodSwgdikge1xuICAgICAgICByZXR1cm4gKHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0pO1xuICAgIH0sXG5cblxuICAgIHNxTGVuVmVjMyh2KSB7XG4gICAgICAgIHJldHVybiBtYXRoLmRvdFZlYzModiwgdik7XG4gICAgfSxcblxuXG4gICAgc3FMZW5WZWMyKHYpIHtcbiAgICAgICAgcmV0dXJuIG1hdGguZG90VmVjMih2LCB2KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIGEgdGhyZWUtZWxlbWVudCB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBsZW5WZWMzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7QXJyYXkoTnVtYmVyKX0gdiBUaGUgdmVjdG9yXG4gICAgICogQHJldHVybiBUaGUgbGVuZ3RoXG4gICAgICovXG4gICAgbGVuVmVjMyh2KSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQobWF0aC5zcUxlblZlYzModikpO1xuICAgIH0sXG5cbiAgICBkaXN0VmVjMzogKCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHZlYyA9IG5ldyBGbG9hdEFycmF5VHlwZSgzKTtcbiAgICAgICAgcmV0dXJuICh2LCB3KSA9PiBtYXRoLmxlblZlYzMobWF0aC5zdWJWZWMzKHYsIHcsIHZlYykpO1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIGEgdHdvLWVsZW1lbnQgdmVjdG9yLlxuICAgICAqIEBtZXRob2QgbGVuVmVjMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0FycmF5KE51bWJlcil9IHYgVGhlIHZlY3RvclxuICAgICAqIEByZXR1cm4gVGhlIGxlbmd0aFxuICAgICAqL1xuICAgIGxlblZlYzIodikge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KG1hdGguc3FMZW5WZWMyKHYpKTtcbiAgICB9LFxuXG4gICAgZGlzdFZlYzI6ICgoKCkgPT4ge1xuICAgICAgICBjb25zdCB2ZWMgPSBuZXcgRmxvYXRBcnJheVR5cGUoMik7XG4gICAgICAgIHJldHVybiAodiwgdykgPT4gbWF0aC5sZW5WZWMyKG1hdGguc3ViVmVjMih2LCB3LCB2ZWMpKTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgcmNwVmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0gdiB2ZWMzXG4gICAgICogQHBhcmFtIGRlc3QgdmVjMyAtIG9wdGlvbmFsIGRlc3RpbmF0aW9uXG4gICAgICogQHJldHVybiBbXSBkZXN0IGlmIHNwZWNpZmllZCwgdiBvdGhlcndpc2VcbiAgICAgKlxuICAgICAqL1xuICAgIHJjcFZlYzModiwgZGVzdCkge1xuICAgICAgICByZXR1cm4gbWF0aC5kaXZTY2FsYXJWZWMzKDEuMCwgdiwgZGVzdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgYSBmb3VyLWVsZW1lbnQgdmVjdG9yXG4gICAgICogQG1ldGhvZCBub3JtYWxpemVWZWM0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB2IHZlYzRcbiAgICAgKiBAcGFyYW0gZGVzdCB2ZWM0IC0gb3B0aW9uYWwgZGVzdGluYXRpb25cbiAgICAgKiBAcmV0dXJuIFtdIGRlc3QgaWYgc3BlY2lmaWVkLCB2IG90aGVyd2lzZVxuICAgICAqXG4gICAgICovXG4gICAgbm9ybWFsaXplVmVjNCh2LCBkZXN0KSB7XG4gICAgICAgIGNvbnN0IGYgPSAxLjAgLyBtYXRoLmxlblZlYzQodik7XG4gICAgICAgIHJldHVybiBtYXRoLm11bFZlYzRTY2FsYXIodiwgZiwgZGVzdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZXMgYSB0aHJlZS1lbGVtZW50IHZlY3RvclxuICAgICAqIEBtZXRob2Qgbm9ybWFsaXplVmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBub3JtYWxpemVWZWMzKHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgZiA9IDEuMCAvIG1hdGgubGVuVmVjMyh2KTtcbiAgICAgICAgcmV0dXJuIG1hdGgubXVsVmVjM1NjYWxhcih2LCBmLCBkZXN0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplcyBhIHR3by1lbGVtZW50IHZlY3RvclxuICAgICAqIEBtZXRob2Qgbm9ybWFsaXplVmVjMlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBub3JtYWxpemVWZWMyKHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgZiA9IDEuMCAvIG1hdGgubGVuVmVjMih2KTtcbiAgICAgICAgcmV0dXJuIG1hdGgubXVsVmVjMlNjYWxhcih2LCBmLCBkZXN0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgICAqIEBtZXRob2QgYW5nbGVWZWMzXG4gICAgICogQHBhcmFtIHZcbiAgICAgKiBAcGFyYW0gd1xuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgYW5nbGVWZWMzKHYsIHcpIHtcbiAgICAgICAgbGV0IHRoZXRhID0gbWF0aC5kb3RWZWMzKHYsIHcpIC8gKE1hdGguc3FydChtYXRoLnNxTGVuVmVjMyh2KSAqIG1hdGguc3FMZW5WZWMzKHcpKSk7XG4gICAgICAgIHRoZXRhID0gdGhldGEgPCAtMSA/IC0xIDogKHRoZXRhID4gMSA/IDEgOiB0aGV0YSk7ICAvLyBDbGFtcCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG4gICAgICAgIHJldHVybiBNYXRoLmFjb3ModGhldGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyZWUtZWxlbWVudCB2ZWN0b3IgZnJvbSB0aGUgcm90YXRpb24gcGFydCBvZiBhIHNpeHRlZW4tZWxlbWVudCBtYXRyaXguXG4gICAgICogQHBhcmFtIG1cbiAgICAgKiBAcGFyYW0gZGVzdFxuICAgICAqL1xuICAgIHZlYzNGcm9tTWF0NFNjYWxlOiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCB0ZW1wVmVjMyA9IG5ldyBGbG9hdEFycmF5VHlwZSgzKTtcblxuICAgICAgICByZXR1cm4gKG0sIGRlc3QpID0+IHtcblxuICAgICAgICAgICAgdGVtcFZlYzNbMF0gPSBtWzBdO1xuICAgICAgICAgICAgdGVtcFZlYzNbMV0gPSBtWzFdO1xuICAgICAgICAgICAgdGVtcFZlYzNbMl0gPSBtWzJdO1xuXG4gICAgICAgICAgICBkZXN0WzBdID0gbWF0aC5sZW5WZWMzKHRlbXBWZWMzKTtcblxuICAgICAgICAgICAgdGVtcFZlYzNbMF0gPSBtWzRdO1xuICAgICAgICAgICAgdGVtcFZlYzNbMV0gPSBtWzVdO1xuICAgICAgICAgICAgdGVtcFZlYzNbMl0gPSBtWzZdO1xuXG4gICAgICAgICAgICBkZXN0WzFdID0gbWF0aC5sZW5WZWMzKHRlbXBWZWMzKTtcblxuICAgICAgICAgICAgdGVtcFZlYzNbMF0gPSBtWzhdO1xuICAgICAgICAgICAgdGVtcFZlYzNbMV0gPSBtWzldO1xuICAgICAgICAgICAgdGVtcFZlYzNbMl0gPSBtWzEwXTtcblxuICAgICAgICAgICAgZGVzdFsyXSA9IG1hdGgubGVuVmVjMyh0ZW1wVmVjMyk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gbi1lbGVtZW50IHZlY3RvciB0byBhIEpTT04tc2VyaWFsaXphYmxlXG4gICAgICogYXJyYXkgd2l0aCB2YWx1ZXMgcm91bmRlZCB0byB0d28gZGVjaW1hbCBwbGFjZXMuXG4gICAgICovXG4gICAgdmVjVG9BcnJheTogKCgoKSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIHRydW5jKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHYgKiAxMDAwMDApIC8gMTAwMDAwXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdiA9PiB7XG4gICAgICAgICAgICB2ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZbaV0gPSB0cnVuYyh2W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSAzLWVsZW1lbnQgdmVjdG9yIGZyb20gYW4gYXJyYXkgdG8gYW4gb2JqZWN0IG9mIHRoZSBmb3JtIGBgYGB7eDo5OTksIHk6OTk5LCB6Ojk5OX1gYGBgLlxuICAgICAqIEBwYXJhbSBhcnJcbiAgICAgKiBAcmV0dXJucyB7e3g6ICosIHk6ICosIHo6ICp9fVxuICAgICAqL1xuICAgIHh5ekFycmF5VG9PYmplY3QoYXJyKSB7XG4gICAgICAgIHJldHVybiB7XCJ4XCI6IGFyclswXSwgXCJ5XCI6IGFyclsxXSwgXCJ6XCI6IGFyclsyXX07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgMy1lbGVtZW50IHZlY3RvciBvYmplY3Qgb2YgdGhlIGZvcm0gYGBgYHt4Ojk5OSwgeTo5OTksIHo6OTk5fWBgYGAgdG8gYW4gYXJyYXkuXG4gICAgICogQHBhcmFtIHh5elxuICAgICAqIEBwYXJhbSAgW2FycnldXG4gICAgICogQHJldHVybnMgeypbXX1cbiAgICAgKi9cbiAgICB4eXpPYmplY3RUb0FycmF5KHh5eiwgYXJyeSkge1xuICAgICAgICBhcnJ5ID0gYXJyeSB8fCBuZXcgRmxvYXRBcnJheVR5cGUoMyk7XG4gICAgICAgIGFycnlbMF0gPSB4eXoueDtcbiAgICAgICAgYXJyeVsxXSA9IHh5ei55O1xuICAgICAgICBhcnJ5WzJdID0geHl6Lno7XG4gICAgICAgIHJldHVybiBhcnJ5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEdXBsaWNhdGVzIGEgNHg0IGlkZW50aXR5IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGR1cE1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgZHVwTWF0NChtKSB7XG4gICAgICAgIHJldHVybiBtLnNsaWNlKDAsIDE2KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgYSAzeDMgbWF0cml4IGZyb20gYSA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgbWF0NFRvM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBtYXQ0VG8zKG0pIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1bMF0sIG1bMV0sIG1bMl0sXG4gICAgICAgICAgICBtWzRdLCBtWzVdLCBtWzZdLFxuICAgICAgICAgICAgbVs4XSwgbVs5XSwgbVsxMF1cbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDR4NCBtYXRyaXggd2l0aCBlYWNoIGVsZW1lbnQgc2V0IHRvIHRoZSBnaXZlbiBzY2FsYXIgdmFsdWUuXG4gICAgICogQG1ldGhvZCBtNHNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgbTRzKHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHMsIHMsIHMsIHMsXG4gICAgICAgICAgICBzLCBzLCBzLCBzLFxuICAgICAgICAgICAgcywgcywgcywgcyxcbiAgICAgICAgICAgIHMsIHMsIHMsIHNcbiAgICAgICAgXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDR4NCBtYXRyaXggd2l0aCBlYWNoIGVsZW1lbnQgc2V0IHRvIHplcm8uXG4gICAgICogQG1ldGhvZCBzZXRNYXQ0VG9aZXJvZXNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc2V0TWF0NFRvWmVyb2VzKCkge1xuICAgICAgICByZXR1cm4gbWF0aC5tNHMoMC4wKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDR4NCBtYXRyaXggd2l0aCBlYWNoIGVsZW1lbnQgc2V0IHRvIDEuMC5cbiAgICAgKiBAbWV0aG9kIHNldE1hdDRUb09uZXNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc2V0TWF0NFRvT25lcygpIHtcbiAgICAgICAgcmV0dXJuIG1hdGgubTRzKDEuMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSA0eDQgbWF0cml4IHdpdGggZWFjaCBlbGVtZW50IHNldCB0byAxLjAuXG4gICAgICogQG1ldGhvZCBzZXRNYXQ0VG9PbmVzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGRpYWdvbmFsTWF0NHYodikge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0QXJyYXlUeXBlKFtcbiAgICAgICAgICAgIHZbMF0sIDAuMCwgMC4wLCAwLjAsXG4gICAgICAgICAgICAwLjAsIHZbMV0sIDAuMCwgMC4wLFxuICAgICAgICAgICAgMC4wLCAwLjAsIHZbMl0sIDAuMCxcbiAgICAgICAgICAgIDAuMCwgMC4wLCAwLjAsIHZbM11cbiAgICAgICAgXSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSA0eDQgbWF0cml4IHdpdGggZGlhZ29uYWwgZWxlbWVudHMgc2V0IHRvIHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBkaWFnb25hbE1hdDRjXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGRpYWdvbmFsTWF0NGMoeCwgeSwgeiwgdykge1xuICAgICAgICByZXR1cm4gbWF0aC5kaWFnb25hbE1hdDR2KFt4LCB5LCB6LCB3XSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSA0eDQgbWF0cml4IHdpdGggZGlhZ29uYWwgZWxlbWVudHMgc2V0IHRvIHRoZSBnaXZlbiBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBkaWFnb25hbE1hdDRzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGRpYWdvbmFsTWF0NHMocykge1xuICAgICAgICByZXR1cm4gbWF0aC5kaWFnb25hbE1hdDRjKHMsIHMsIHMsIHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgNHg0IGlkZW50aXR5IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGlkZW50aXR5TWF0NFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBpZGVudGl0eU1hdDQobWF0ID0gbmV3IEZsb2F0QXJyYXlUeXBlKDE2KSkge1xuICAgICAgICBtYXRbMF0gPSAxLjA7XG4gICAgICAgIG1hdFsxXSA9IDAuMDtcbiAgICAgICAgbWF0WzJdID0gMC4wO1xuICAgICAgICBtYXRbM10gPSAwLjA7XG5cbiAgICAgICAgbWF0WzRdID0gMC4wO1xuICAgICAgICBtYXRbNV0gPSAxLjA7XG4gICAgICAgIG1hdFs2XSA9IDAuMDtcbiAgICAgICAgbWF0WzddID0gMC4wO1xuXG4gICAgICAgIG1hdFs4XSA9IDAuMDtcbiAgICAgICAgbWF0WzldID0gMC4wO1xuICAgICAgICBtYXRbMTBdID0gMS4wO1xuICAgICAgICBtYXRbMTFdID0gMC4wO1xuXG4gICAgICAgIG1hdFsxMl0gPSAwLjA7XG4gICAgICAgIG1hdFsxM10gPSAwLjA7XG4gICAgICAgIG1hdFsxNF0gPSAwLjA7XG4gICAgICAgIG1hdFsxNV0gPSAxLjA7XG5cbiAgICAgICAgcmV0dXJuIG1hdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDN4MyBpZGVudGl0eSBtYXRyaXguXG4gICAgICogQG1ldGhvZCBpZGVudGl0eU1hdDNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgaWRlbnRpdHlNYXQzKG1hdCA9IG5ldyBGbG9hdEFycmF5VHlwZSg5KSkge1xuICAgICAgICBtYXRbMF0gPSAxLjA7XG4gICAgICAgIG1hdFsxXSA9IDAuMDtcbiAgICAgICAgbWF0WzJdID0gMC4wO1xuXG4gICAgICAgIG1hdFszXSA9IDAuMDtcbiAgICAgICAgbWF0WzRdID0gMS4wO1xuICAgICAgICBtYXRbNV0gPSAwLjA7XG5cbiAgICAgICAgbWF0WzZdID0gMC4wO1xuICAgICAgICBtYXRbN10gPSAwLjA7XG4gICAgICAgIG1hdFs4XSA9IDEuMDtcblxuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUZXN0cyBpZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeCBpcyB0aGUgaWRlbnRpdHkgbWF0cml4LlxuICAgICAqIEBtZXRob2QgaXNJZGVudGl0eU1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgaXNJZGVudGl0eU1hdDQobSkge1xuICAgICAgICBpZiAobVswXSAhPT0gMS4wIHx8IG1bMV0gIT09IDAuMCB8fCBtWzJdICE9PSAwLjAgfHwgbVszXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICBtWzRdICE9PSAwLjAgfHwgbVs1XSAhPT0gMS4wIHx8IG1bNl0gIT09IDAuMCB8fCBtWzddICE9PSAwLjAgfHxcbiAgICAgICAgICAgIG1bOF0gIT09IDAuMCB8fCBtWzldICE9PSAwLjAgfHwgbVsxMF0gIT09IDEuMCB8fCBtWzExXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICBtWzEyXSAhPT0gMC4wIHx8IG1bMTNdICE9PSAwLjAgfHwgbVsxNF0gIT09IDAuMCB8fCBtWzE1XSAhPT0gMS4wKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE5lZ2F0ZXMgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAgICogQG1ldGhvZCBuZWdhdGVNYXQ0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIG5lZ2F0ZU1hdDQobSwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSAtbVswXTtcbiAgICAgICAgZGVzdFsxXSA9IC1tWzFdO1xuICAgICAgICBkZXN0WzJdID0gLW1bMl07XG4gICAgICAgIGRlc3RbM10gPSAtbVszXTtcbiAgICAgICAgZGVzdFs0XSA9IC1tWzRdO1xuICAgICAgICBkZXN0WzVdID0gLW1bNV07XG4gICAgICAgIGRlc3RbNl0gPSAtbVs2XTtcbiAgICAgICAgZGVzdFs3XSA9IC1tWzddO1xuICAgICAgICBkZXN0WzhdID0gLW1bOF07XG4gICAgICAgIGRlc3RbOV0gPSAtbVs5XTtcbiAgICAgICAgZGVzdFsxMF0gPSAtbVsxMF07XG4gICAgICAgIGRlc3RbMTFdID0gLW1bMTFdO1xuICAgICAgICBkZXN0WzEyXSA9IC1tWzEyXTtcbiAgICAgICAgZGVzdFsxM10gPSAtbVsxM107XG4gICAgICAgIGRlc3RbMTRdID0gLW1bMTRdO1xuICAgICAgICBkZXN0WzE1XSA9IC1tWzE1XTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGdpdmVuIDR4NCBtYXRyaWNlcyB0b2dldGhlci5cbiAgICAgKiBAbWV0aG9kIGFkZE1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgYWRkTWF0NChhLCBiLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IGE7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IGFbMF0gKyBiWzBdO1xuICAgICAgICBkZXN0WzFdID0gYVsxXSArIGJbMV07XG4gICAgICAgIGRlc3RbMl0gPSBhWzJdICsgYlsyXTtcbiAgICAgICAgZGVzdFszXSA9IGFbM10gKyBiWzNdO1xuICAgICAgICBkZXN0WzRdID0gYVs0XSArIGJbNF07XG4gICAgICAgIGRlc3RbNV0gPSBhWzVdICsgYls1XTtcbiAgICAgICAgZGVzdFs2XSA9IGFbNl0gKyBiWzZdO1xuICAgICAgICBkZXN0WzddID0gYVs3XSArIGJbN107XG4gICAgICAgIGRlc3RbOF0gPSBhWzhdICsgYls4XTtcbiAgICAgICAgZGVzdFs5XSA9IGFbOV0gKyBiWzldO1xuICAgICAgICBkZXN0WzEwXSA9IGFbMTBdICsgYlsxMF07XG4gICAgICAgIGRlc3RbMTFdID0gYVsxMV0gKyBiWzExXTtcbiAgICAgICAgZGVzdFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICAgICAgICBkZXN0WzEzXSA9IGFbMTNdICsgYlsxM107XG4gICAgICAgIGRlc3RbMTRdID0gYVsxNF0gKyBiWzE0XTtcbiAgICAgICAgZGVzdFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gc2NhbGFyIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGFkZE1hdDRTY2FsYXJcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgYWRkTWF0NFNjYWxhcihtLCBzLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IG07XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IG1bMF0gKyBzO1xuICAgICAgICBkZXN0WzFdID0gbVsxXSArIHM7XG4gICAgICAgIGRlc3RbMl0gPSBtWzJdICsgcztcbiAgICAgICAgZGVzdFszXSA9IG1bM10gKyBzO1xuICAgICAgICBkZXN0WzRdID0gbVs0XSArIHM7XG4gICAgICAgIGRlc3RbNV0gPSBtWzVdICsgcztcbiAgICAgICAgZGVzdFs2XSA9IG1bNl0gKyBzO1xuICAgICAgICBkZXN0WzddID0gbVs3XSArIHM7XG4gICAgICAgIGRlc3RbOF0gPSBtWzhdICsgcztcbiAgICAgICAgZGVzdFs5XSA9IG1bOV0gKyBzO1xuICAgICAgICBkZXN0WzEwXSA9IG1bMTBdICsgcztcbiAgICAgICAgZGVzdFsxMV0gPSBtWzExXSArIHM7XG4gICAgICAgIGRlc3RbMTJdID0gbVsxMl0gKyBzO1xuICAgICAgICBkZXN0WzEzXSA9IG1bMTNdICsgcztcbiAgICAgICAgZGVzdFsxNF0gPSBtWzE0XSArIHM7XG4gICAgICAgIGRlc3RbMTVdID0gbVsxNV0gKyBzO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gc2NhbGFyIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGFkZFNjYWxhck1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgYWRkU2NhbGFyTWF0NChzLCBtLCBkZXN0KSB7XG4gICAgICAgIHJldHVybiBtYXRoLmFkZE1hdDRTY2FsYXIobSwgcywgZGVzdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgc2Vjb25kIDR4NCBtYXRyaXggZnJvbSB0aGUgZmlyc3QuXG4gICAgICogQG1ldGhvZCBzdWJNYXQ0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHN1Yk1hdDQoYSwgYiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSBhWzBdIC0gYlswXTtcbiAgICAgICAgZGVzdFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgICAgICBkZXN0WzJdID0gYVsyXSAtIGJbMl07XG4gICAgICAgIGRlc3RbM10gPSBhWzNdIC0gYlszXTtcbiAgICAgICAgZGVzdFs0XSA9IGFbNF0gLSBiWzRdO1xuICAgICAgICBkZXN0WzVdID0gYVs1XSAtIGJbNV07XG4gICAgICAgIGRlc3RbNl0gPSBhWzZdIC0gYls2XTtcbiAgICAgICAgZGVzdFs3XSA9IGFbN10gLSBiWzddO1xuICAgICAgICBkZXN0WzhdID0gYVs4XSAtIGJbOF07XG4gICAgICAgIGRlc3RbOV0gPSBhWzldIC0gYls5XTtcbiAgICAgICAgZGVzdFsxMF0gPSBhWzEwXSAtIGJbMTBdO1xuICAgICAgICBkZXN0WzExXSA9IGFbMTFdIC0gYlsxMV07XG4gICAgICAgIGRlc3RbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgICAgICAgZGVzdFsxM10gPSBhWzEzXSAtIGJbMTNdO1xuICAgICAgICBkZXN0WzE0XSA9IGFbMTRdIC0gYlsxNF07XG4gICAgICAgIGRlc3RbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gc2NhbGFyIGZyb20gZWFjaCBlbGVtZW50IG9mIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2Qgc3ViTWF0NFNjYWxhclxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzdWJNYXQ0U2NhbGFyKG0sIHMsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbTtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gbVswXSAtIHM7XG4gICAgICAgIGRlc3RbMV0gPSBtWzFdIC0gcztcbiAgICAgICAgZGVzdFsyXSA9IG1bMl0gLSBzO1xuICAgICAgICBkZXN0WzNdID0gbVszXSAtIHM7XG4gICAgICAgIGRlc3RbNF0gPSBtWzRdIC0gcztcbiAgICAgICAgZGVzdFs1XSA9IG1bNV0gLSBzO1xuICAgICAgICBkZXN0WzZdID0gbVs2XSAtIHM7XG4gICAgICAgIGRlc3RbN10gPSBtWzddIC0gcztcbiAgICAgICAgZGVzdFs4XSA9IG1bOF0gLSBzO1xuICAgICAgICBkZXN0WzldID0gbVs5XSAtIHM7XG4gICAgICAgIGRlc3RbMTBdID0gbVsxMF0gLSBzO1xuICAgICAgICBkZXN0WzExXSA9IG1bMTFdIC0gcztcbiAgICAgICAgZGVzdFsxMl0gPSBtWzEyXSAtIHM7XG4gICAgICAgIGRlc3RbMTNdID0gbVsxM10gLSBzO1xuICAgICAgICBkZXN0WzE0XSA9IG1bMTRdIC0gcztcbiAgICAgICAgZGVzdFsxNV0gPSBtWzE1XSAtIHM7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHNjYWxhciBmcm9tIGVhY2ggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHN1YlNjYWxhck1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgc3ViU2NhbGFyTWF0NChzLCBtLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IG07XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHMgLSBtWzBdO1xuICAgICAgICBkZXN0WzFdID0gcyAtIG1bMV07XG4gICAgICAgIGRlc3RbMl0gPSBzIC0gbVsyXTtcbiAgICAgICAgZGVzdFszXSA9IHMgLSBtWzNdO1xuICAgICAgICBkZXN0WzRdID0gcyAtIG1bNF07XG4gICAgICAgIGRlc3RbNV0gPSBzIC0gbVs1XTtcbiAgICAgICAgZGVzdFs2XSA9IHMgLSBtWzZdO1xuICAgICAgICBkZXN0WzddID0gcyAtIG1bN107XG4gICAgICAgIGRlc3RbOF0gPSBzIC0gbVs4XTtcbiAgICAgICAgZGVzdFs5XSA9IHMgLSBtWzldO1xuICAgICAgICBkZXN0WzEwXSA9IHMgLSBtWzEwXTtcbiAgICAgICAgZGVzdFsxMV0gPSBzIC0gbVsxMV07XG4gICAgICAgIGRlc3RbMTJdID0gcyAtIG1bMTJdO1xuICAgICAgICBkZXN0WzEzXSA9IHMgLSBtWzEzXTtcbiAgICAgICAgZGVzdFsxNF0gPSBzIC0gbVsxNF07XG4gICAgICAgIGRlc3RbMTVdID0gcyAtIG1bMTVdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgdHdvIGdpdmVuIDR4NCBtYXRyaXggYnkgZWFjaCBvdGhlci5cbiAgICAgKiBAbWV0aG9kIG11bE1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgbXVsTWF0NChhLCBiLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgY29uc3QgYTAwID0gYVswXTtcblxuICAgICAgICBjb25zdCBhMDEgPSBhWzFdO1xuICAgICAgICBjb25zdCBhMDIgPSBhWzJdO1xuICAgICAgICBjb25zdCBhMDMgPSBhWzNdO1xuICAgICAgICBjb25zdCBhMTAgPSBhWzRdO1xuICAgICAgICBjb25zdCBhMTEgPSBhWzVdO1xuICAgICAgICBjb25zdCBhMTIgPSBhWzZdO1xuICAgICAgICBjb25zdCBhMTMgPSBhWzddO1xuICAgICAgICBjb25zdCBhMjAgPSBhWzhdO1xuICAgICAgICBjb25zdCBhMjEgPSBhWzldO1xuICAgICAgICBjb25zdCBhMjIgPSBhWzEwXTtcbiAgICAgICAgY29uc3QgYTIzID0gYVsxMV07XG4gICAgICAgIGNvbnN0IGEzMCA9IGFbMTJdO1xuICAgICAgICBjb25zdCBhMzEgPSBhWzEzXTtcbiAgICAgICAgY29uc3QgYTMyID0gYVsxNF07XG4gICAgICAgIGNvbnN0IGEzMyA9IGFbMTVdO1xuICAgICAgICBjb25zdCBiMDAgPSBiWzBdO1xuICAgICAgICBjb25zdCBiMDEgPSBiWzFdO1xuICAgICAgICBjb25zdCBiMDIgPSBiWzJdO1xuICAgICAgICBjb25zdCBiMDMgPSBiWzNdO1xuICAgICAgICBjb25zdCBiMTAgPSBiWzRdO1xuICAgICAgICBjb25zdCBiMTEgPSBiWzVdO1xuICAgICAgICBjb25zdCBiMTIgPSBiWzZdO1xuICAgICAgICBjb25zdCBiMTMgPSBiWzddO1xuICAgICAgICBjb25zdCBiMjAgPSBiWzhdO1xuICAgICAgICBjb25zdCBiMjEgPSBiWzldO1xuICAgICAgICBjb25zdCBiMjIgPSBiWzEwXTtcbiAgICAgICAgY29uc3QgYjIzID0gYlsxMV07XG4gICAgICAgIGNvbnN0IGIzMCA9IGJbMTJdO1xuICAgICAgICBjb25zdCBiMzEgPSBiWzEzXTtcbiAgICAgICAgY29uc3QgYjMyID0gYlsxNF07XG4gICAgICAgIGNvbnN0IGIzMyA9IGJbMTVdO1xuXG4gICAgICAgIGRlc3RbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjAgKyBiMDMgKiBhMzA7XG4gICAgICAgIGRlc3RbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjEgKyBiMDMgKiBhMzE7XG4gICAgICAgIGRlc3RbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjIgKyBiMDMgKiBhMzI7XG4gICAgICAgIGRlc3RbM10gPSBiMDAgKiBhMDMgKyBiMDEgKiBhMTMgKyBiMDIgKiBhMjMgKyBiMDMgKiBhMzM7XG4gICAgICAgIGRlc3RbNF0gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjAgKyBiMTMgKiBhMzA7XG4gICAgICAgIGRlc3RbNV0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjEgKyBiMTMgKiBhMzE7XG4gICAgICAgIGRlc3RbNl0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjIgKyBiMTMgKiBhMzI7XG4gICAgICAgIGRlc3RbN10gPSBiMTAgKiBhMDMgKyBiMTEgKiBhMTMgKyBiMTIgKiBhMjMgKyBiMTMgKiBhMzM7XG4gICAgICAgIGRlc3RbOF0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjAgKyBiMjMgKiBhMzA7XG4gICAgICAgIGRlc3RbOV0gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjEgKyBiMjMgKiBhMzE7XG4gICAgICAgIGRlc3RbMTBdID0gYjIwICogYTAyICsgYjIxICogYTEyICsgYjIyICogYTIyICsgYjIzICogYTMyO1xuICAgICAgICBkZXN0WzExXSA9IGIyMCAqIGEwMyArIGIyMSAqIGExMyArIGIyMiAqIGEyMyArIGIyMyAqIGEzMztcbiAgICAgICAgZGVzdFsxMl0gPSBiMzAgKiBhMDAgKyBiMzEgKiBhMTAgKyBiMzIgKiBhMjAgKyBiMzMgKiBhMzA7XG4gICAgICAgIGRlc3RbMTNdID0gYjMwICogYTAxICsgYjMxICogYTExICsgYjMyICogYTIxICsgYjMzICogYTMxO1xuICAgICAgICBkZXN0WzE0XSA9IGIzMCAqIGEwMiArIGIzMSAqIGExMiArIGIzMiAqIGEyMiArIGIzMyAqIGEzMjtcbiAgICAgICAgZGVzdFsxNV0gPSBiMzAgKiBhMDMgKyBiMzEgKiBhMTMgKyBiMzIgKiBhMjMgKyBiMzMgKiBhMzM7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIHR3byBnaXZlbiAzeDMgbWF0cmljZXMgYnkgZWFjaCBvdGhlci5cbiAgICAgKiBAbWV0aG9kIG11bE1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgbXVsTWF0MyhhLCBiLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkge1xuICAgICAgICAgICAgZGVzdCA9IG5ldyBGbG9hdEFycmF5VHlwZSg5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGExMSA9IGFbMF07XG4gICAgICAgIGNvbnN0IGExMiA9IGFbM107XG4gICAgICAgIGNvbnN0IGExMyA9IGFbNl07XG4gICAgICAgIGNvbnN0IGEyMSA9IGFbMV07XG4gICAgICAgIGNvbnN0IGEyMiA9IGFbNF07XG4gICAgICAgIGNvbnN0IGEyMyA9IGFbN107XG4gICAgICAgIGNvbnN0IGEzMSA9IGFbMl07XG4gICAgICAgIGNvbnN0IGEzMiA9IGFbNV07XG4gICAgICAgIGNvbnN0IGEzMyA9IGFbOF07XG4gICAgICAgIGNvbnN0IGIxMSA9IGJbMF07XG4gICAgICAgIGNvbnN0IGIxMiA9IGJbM107XG4gICAgICAgIGNvbnN0IGIxMyA9IGJbNl07XG4gICAgICAgIGNvbnN0IGIyMSA9IGJbMV07XG4gICAgICAgIGNvbnN0IGIyMiA9IGJbNF07XG4gICAgICAgIGNvbnN0IGIyMyA9IGJbN107XG4gICAgICAgIGNvbnN0IGIzMSA9IGJbMl07XG4gICAgICAgIGNvbnN0IGIzMiA9IGJbNV07XG4gICAgICAgIGNvbnN0IGIzMyA9IGJbOF07XG5cbiAgICAgICAgZGVzdFswXSA9IGExMSAqIGIxMSArIGExMiAqIGIyMSArIGExMyAqIGIzMTtcbiAgICAgICAgZGVzdFszXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMjtcbiAgICAgICAgZGVzdFs2XSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMztcblxuICAgICAgICBkZXN0WzFdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxO1xuICAgICAgICBkZXN0WzRdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuICAgICAgICBkZXN0WzddID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzO1xuXG4gICAgICAgIGRlc3RbMl0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XG4gICAgICAgIGRlc3RbNV0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG4gICAgICAgIGRlc3RbOF0gPSBhMzEgKiBiMTMgKyBhMzIgKiBiMjMgKyBhMzMgKiBiMzM7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgZWFjaCBlbGVtZW50IG9mIHRoZSBnaXZlbiA0eDQgbWF0cml4IGJ5IHRoZSBnaXZlbiBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBtdWxNYXQ0U2NhbGFyXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIG11bE1hdDRTY2FsYXIobSwgcywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSBtWzBdICogcztcbiAgICAgICAgZGVzdFsxXSA9IG1bMV0gKiBzO1xuICAgICAgICBkZXN0WzJdID0gbVsyXSAqIHM7XG4gICAgICAgIGRlc3RbM10gPSBtWzNdICogcztcbiAgICAgICAgZGVzdFs0XSA9IG1bNF0gKiBzO1xuICAgICAgICBkZXN0WzVdID0gbVs1XSAqIHM7XG4gICAgICAgIGRlc3RbNl0gPSBtWzZdICogcztcbiAgICAgICAgZGVzdFs3XSA9IG1bN10gKiBzO1xuICAgICAgICBkZXN0WzhdID0gbVs4XSAqIHM7XG4gICAgICAgIGRlc3RbOV0gPSBtWzldICogcztcbiAgICAgICAgZGVzdFsxMF0gPSBtWzEwXSAqIHM7XG4gICAgICAgIGRlc3RbMTFdID0gbVsxMV0gKiBzO1xuICAgICAgICBkZXN0WzEyXSA9IG1bMTJdICogcztcbiAgICAgICAgZGVzdFsxM10gPSBtWzEzXSAqIHM7XG4gICAgICAgIGRlc3RbMTRdID0gbVsxNF0gKiBzO1xuICAgICAgICBkZXN0WzE1XSA9IG1bMTVdICogcztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGdpdmVuIDR4NCBtYXRyaXggYnkgdGhlIGdpdmVuIGZvdXItZWxlbWVudCB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBtdWxNYXQ0djRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgbXVsTWF0NHY0KG0sIHYsIGRlc3QgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBjb25zdCB2MCA9IHZbMF07XG4gICAgICAgIGNvbnN0IHYxID0gdlsxXTtcbiAgICAgICAgY29uc3QgdjIgPSB2WzJdO1xuICAgICAgICBjb25zdCB2MyA9IHZbM107XG4gICAgICAgIGRlc3RbMF0gPSBtWzBdICogdjAgKyBtWzRdICogdjEgKyBtWzhdICogdjIgKyBtWzEyXSAqIHYzO1xuICAgICAgICBkZXN0WzFdID0gbVsxXSAqIHYwICsgbVs1XSAqIHYxICsgbVs5XSAqIHYyICsgbVsxM10gKiB2MztcbiAgICAgICAgZGVzdFsyXSA9IG1bMl0gKiB2MCArIG1bNl0gKiB2MSArIG1bMTBdICogdjIgKyBtWzE0XSAqIHYzO1xuICAgICAgICBkZXN0WzNdID0gbVszXSAqIHYwICsgbVs3XSAqIHYxICsgbVsxMV0gKiB2MiArIG1bMTVdICogdjM7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc3Bvc2VzIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNwb3NlTWF0NFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc3Bvc2VNYXQ0KG1hdCwgZGVzdCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgICAgIGNvbnN0IG00ID0gbWF0WzRdO1xuXG4gICAgICAgIGNvbnN0IG0xNCA9IG1hdFsxNF07XG4gICAgICAgIGNvbnN0IG04ID0gbWF0WzhdO1xuICAgICAgICBjb25zdCBtMTMgPSBtYXRbMTNdO1xuICAgICAgICBjb25zdCBtMTIgPSBtYXRbMTJdO1xuICAgICAgICBjb25zdCBtOSA9IG1hdFs5XTtcbiAgICAgICAgaWYgKCFkZXN0IHx8IG1hdCA9PT0gZGVzdCkge1xuICAgICAgICAgICAgY29uc3QgYTAxID0gbWF0WzFdO1xuICAgICAgICAgICAgY29uc3QgYTAyID0gbWF0WzJdO1xuICAgICAgICAgICAgY29uc3QgYTAzID0gbWF0WzNdO1xuICAgICAgICAgICAgY29uc3QgYTEyID0gbWF0WzZdO1xuICAgICAgICAgICAgY29uc3QgYTEzID0gbWF0WzddO1xuICAgICAgICAgICAgY29uc3QgYTIzID0gbWF0WzExXTtcbiAgICAgICAgICAgIG1hdFsxXSA9IG00O1xuICAgICAgICAgICAgbWF0WzJdID0gbTg7XG4gICAgICAgICAgICBtYXRbM10gPSBtMTI7XG4gICAgICAgICAgICBtYXRbNF0gPSBhMDE7XG4gICAgICAgICAgICBtYXRbNl0gPSBtOTtcbiAgICAgICAgICAgIG1hdFs3XSA9IG0xMztcbiAgICAgICAgICAgIG1hdFs4XSA9IGEwMjtcbiAgICAgICAgICAgIG1hdFs5XSA9IGExMjtcbiAgICAgICAgICAgIG1hdFsxMV0gPSBtMTQ7XG4gICAgICAgICAgICBtYXRbMTJdID0gYTAzO1xuICAgICAgICAgICAgbWF0WzEzXSA9IGExMztcbiAgICAgICAgICAgIG1hdFsxNF0gPSBhMjM7XG4gICAgICAgICAgICByZXR1cm4gbWF0O1xuICAgICAgICB9XG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtNDtcbiAgICAgICAgZGVzdFsyXSA9IG04O1xuICAgICAgICBkZXN0WzNdID0gbTEyO1xuICAgICAgICBkZXN0WzRdID0gbWF0WzFdO1xuICAgICAgICBkZXN0WzVdID0gbWF0WzVdO1xuICAgICAgICBkZXN0WzZdID0gbTk7XG4gICAgICAgIGRlc3RbN10gPSBtMTM7XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbOV0gPSBtYXRbNl07XG4gICAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgICAgZGVzdFsxMV0gPSBtMTQ7XG4gICAgICAgIGRlc3RbMTJdID0gbWF0WzNdO1xuICAgICAgICBkZXN0WzEzXSA9IG1hdFs3XTtcbiAgICAgICAgZGVzdFsxNF0gPSBtYXRbMTFdO1xuICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc3Bvc2VzIHRoZSBnaXZlbiAzeDMgbWF0cml4LlxuICAgICAqXG4gICAgICogQG1ldGhvZCB0cmFuc3Bvc2VNYXQzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHRyYW5zcG9zZU1hdDMobWF0LCBkZXN0KSB7XG4gICAgICAgIGlmIChkZXN0ID09PSBtYXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGEwMSA9IG1hdFsxXTtcbiAgICAgICAgICAgIGNvbnN0IGEwMiA9IG1hdFsyXTtcbiAgICAgICAgICAgIGNvbnN0IGExMiA9IG1hdFs1XTtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBtYXRbM107XG4gICAgICAgICAgICBkZXN0WzJdID0gbWF0WzZdO1xuICAgICAgICAgICAgZGVzdFszXSA9IGEwMTtcbiAgICAgICAgICAgIGRlc3RbNV0gPSBtYXRbN107XG4gICAgICAgICAgICBkZXN0WzZdID0gYTAyO1xuICAgICAgICAgICAgZGVzdFs3XSA9IGExMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgICAgICBkZXN0WzFdID0gbWF0WzNdO1xuICAgICAgICAgICAgZGVzdFsyXSA9IG1hdFs2XTtcbiAgICAgICAgICAgIGRlc3RbM10gPSBtYXRbMV07XG4gICAgICAgICAgICBkZXN0WzRdID0gbWF0WzRdO1xuICAgICAgICAgICAgZGVzdFs1XSA9IG1hdFs3XTtcbiAgICAgICAgICAgIGRlc3RbNl0gPSBtYXRbMl07XG4gICAgICAgICAgICBkZXN0WzddID0gbWF0WzVdO1xuICAgICAgICAgICAgZGVzdFs4XSA9IG1hdFs4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhlIGdpdmVuIDR4NCBtYXRyaXguXG4gICAgICogQG1ldGhvZCBkZXRlcm1pbmFudE1hdDRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgZGV0ZXJtaW5hbnRNYXQ0KG1hdCkge1xuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgY29uc3QgYTAwID0gbWF0WzBdO1xuXG4gICAgICAgIGNvbnN0IGEwMSA9IG1hdFsxXTtcbiAgICAgICAgY29uc3QgYTAyID0gbWF0WzJdO1xuICAgICAgICBjb25zdCBhMDMgPSBtYXRbM107XG4gICAgICAgIGNvbnN0IGExMCA9IG1hdFs0XTtcbiAgICAgICAgY29uc3QgYTExID0gbWF0WzVdO1xuICAgICAgICBjb25zdCBhMTIgPSBtYXRbNl07XG4gICAgICAgIGNvbnN0IGExMyA9IG1hdFs3XTtcbiAgICAgICAgY29uc3QgYTIwID0gbWF0WzhdO1xuICAgICAgICBjb25zdCBhMjEgPSBtYXRbOV07XG4gICAgICAgIGNvbnN0IGEyMiA9IG1hdFsxMF07XG4gICAgICAgIGNvbnN0IGEyMyA9IG1hdFsxMV07XG4gICAgICAgIGNvbnN0IGEzMCA9IG1hdFsxMl07XG4gICAgICAgIGNvbnN0IGEzMSA9IG1hdFsxM107XG4gICAgICAgIGNvbnN0IGEzMiA9IG1hdFsxNF07XG4gICAgICAgIGNvbnN0IGEzMyA9IG1hdFsxNV07XG4gICAgICAgIHJldHVybiBhMzAgKiBhMjEgKiBhMTIgKiBhMDMgLSBhMjAgKiBhMzEgKiBhMTIgKiBhMDMgLSBhMzAgKiBhMTEgKiBhMjIgKiBhMDMgKyBhMTAgKiBhMzEgKiBhMjIgKiBhMDMgK1xuICAgICAgICAgICAgYTIwICogYTExICogYTMyICogYTAzIC0gYTEwICogYTIxICogYTMyICogYTAzIC0gYTMwICogYTIxICogYTAyICogYTEzICsgYTIwICogYTMxICogYTAyICogYTEzICtcbiAgICAgICAgICAgIGEzMCAqIGEwMSAqIGEyMiAqIGExMyAtIGEwMCAqIGEzMSAqIGEyMiAqIGExMyAtIGEyMCAqIGEwMSAqIGEzMiAqIGExMyArIGEwMCAqIGEyMSAqIGEzMiAqIGExMyArXG4gICAgICAgICAgICBhMzAgKiBhMTEgKiBhMDIgKiBhMjMgLSBhMTAgKiBhMzEgKiBhMDIgKiBhMjMgLSBhMzAgKiBhMDEgKiBhMTIgKiBhMjMgKyBhMDAgKiBhMzEgKiBhMTIgKiBhMjMgK1xuICAgICAgICAgICAgYTEwICogYTAxICogYTMyICogYTIzIC0gYTAwICogYTExICogYTMyICogYTIzIC0gYTIwICogYTExICogYTAyICogYTMzICsgYTEwICogYTIxICogYTAyICogYTMzICtcbiAgICAgICAgICAgIGEyMCAqIGEwMSAqIGExMiAqIGEzMyAtIGEwMCAqIGEyMSAqIGExMiAqIGEzMyAtIGExMCAqIGEwMSAqIGEyMiAqIGEzMyArIGEwMCAqIGExMSAqIGEyMiAqIGEzMztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGludmVyc2VNYXQ0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGludmVyc2VNYXQ0KG1hdCwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgY29uc3QgYTAwID0gbWF0WzBdO1xuXG4gICAgICAgIGNvbnN0IGEwMSA9IG1hdFsxXTtcbiAgICAgICAgY29uc3QgYTAyID0gbWF0WzJdO1xuICAgICAgICBjb25zdCBhMDMgPSBtYXRbM107XG4gICAgICAgIGNvbnN0IGExMCA9IG1hdFs0XTtcbiAgICAgICAgY29uc3QgYTExID0gbWF0WzVdO1xuICAgICAgICBjb25zdCBhMTIgPSBtYXRbNl07XG4gICAgICAgIGNvbnN0IGExMyA9IG1hdFs3XTtcbiAgICAgICAgY29uc3QgYTIwID0gbWF0WzhdO1xuICAgICAgICBjb25zdCBhMjEgPSBtYXRbOV07XG4gICAgICAgIGNvbnN0IGEyMiA9IG1hdFsxMF07XG4gICAgICAgIGNvbnN0IGEyMyA9IG1hdFsxMV07XG4gICAgICAgIGNvbnN0IGEzMCA9IG1hdFsxMl07XG4gICAgICAgIGNvbnN0IGEzMSA9IG1hdFsxM107XG4gICAgICAgIGNvbnN0IGEzMiA9IG1hdFsxNF07XG4gICAgICAgIGNvbnN0IGEzMyA9IG1hdFsxNV07XG4gICAgICAgIGNvbnN0IGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgICAgICAgY29uc3QgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICAgICAgICBjb25zdCBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gICAgICAgIGNvbnN0IGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgICAgICAgY29uc3QgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICAgICAgICBjb25zdCBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gICAgICAgIGNvbnN0IGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgICAgICAgY29uc3QgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICAgICAgICBjb25zdCBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gICAgICAgIGNvbnN0IGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgICAgICAgY29uc3QgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICAgICAgICBjb25zdCBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudCAoaW5saW5lZCB0byBhdm9pZCBkb3VibGUtY2FjaGluZylcbiAgICAgICAgY29uc3QgaW52RGV0ID0gMSAvIChiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDYpO1xuXG4gICAgICAgIGRlc3RbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGludkRldDtcbiAgICAgICAgZGVzdFsxXSA9ICgtYTAxICogYjExICsgYTAyICogYjEwIC0gYTAzICogYjA5KSAqIGludkRldDtcbiAgICAgICAgZGVzdFsyXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogaW52RGV0O1xuICAgICAgICBkZXN0WzNdID0gKC1hMjEgKiBiMDUgKyBhMjIgKiBiMDQgLSBhMjMgKiBiMDMpICogaW52RGV0O1xuICAgICAgICBkZXN0WzRdID0gKC1hMTAgKiBiMTEgKyBhMTIgKiBiMDggLSBhMTMgKiBiMDcpICogaW52RGV0O1xuICAgICAgICBkZXN0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbNl0gPSAoLWEzMCAqIGIwNSArIGEzMiAqIGIwMiAtIGEzMyAqIGIwMSkgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGludkRldDtcbiAgICAgICAgZGVzdFs4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogaW52RGV0O1xuICAgICAgICBkZXN0WzldID0gKC1hMDAgKiBiMTAgKyBhMDEgKiBiMDggLSBhMDMgKiBiMDYpICogaW52RGV0O1xuICAgICAgICBkZXN0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogaW52RGV0O1xuICAgICAgICBkZXN0WzExXSA9ICgtYTIwICogYjA0ICsgYTIxICogYjAyIC0gYTIzICogYjAwKSAqIGludkRldDtcbiAgICAgICAgZGVzdFsxMl0gPSAoLWExMCAqIGIwOSArIGExMSAqIGIwNyAtIGExMiAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbMTRdID0gKC1hMzAgKiBiMDMgKyBhMzEgKiBiMDEgLSBhMzIgKiBiMDApICogaW52RGV0O1xuICAgICAgICBkZXN0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogaW52RGV0O1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0cmFjZSBvZiB0aGUgZ2l2ZW4gNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHRyYWNlTWF0NFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFjZU1hdDQobSkge1xuICAgICAgICByZXR1cm4gKG1bMF0gKyBtWzVdICsgbVsxMF0gKyBtWzE1XSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgNHg0IHRyYW5zbGF0aW9uIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0aW9uTWF0NFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2xhdGlvbk1hdDR2KHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgbSA9IGRlc3QgfHwgbWF0aC5pZGVudGl0eU1hdDQoKTtcbiAgICAgICAgbVsxMl0gPSB2WzBdO1xuICAgICAgICBtWzEzXSA9IHZbMV07XG4gICAgICAgIG1bMTRdID0gdlsyXTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgM3gzIHRyYW5zbGF0aW9uIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0aW9uTWF0M1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2xhdGlvbk1hdDN2KHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgbSA9IGRlc3QgfHwgbWF0aC5pZGVudGl0eU1hdDMoKTtcbiAgICAgICAgbVs2XSA9IHZbMF07XG4gICAgICAgIG1bN10gPSB2WzFdO1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyA0eDQgdHJhbnNsYXRpb24gbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRpb25NYXQ0Y1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2xhdGlvbk1hdDRjOiAoKCgpID0+IHtcbiAgICAgICAgY29uc3QgeHl6ID0gbmV3IEZsb2F0QXJyYXlUeXBlKDMpO1xuICAgICAgICByZXR1cm4gKHgsIHksIHosIGRlc3QpID0+IHtcbiAgICAgICAgICAgIHh5elswXSA9IHg7XG4gICAgICAgICAgICB4eXpbMV0gPSB5O1xuICAgICAgICAgICAgeHl6WzJdID0gejtcbiAgICAgICAgICAgIHJldHVybiBtYXRoLnRyYW5zbGF0aW9uTWF0NHYoeHl6LCBkZXN0KTtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgNHg0IHRyYW5zbGF0aW9uIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0aW9uTWF0NHNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgdHJhbnNsYXRpb25NYXQ0cyhzLCBkZXN0KSB7XG4gICAgICAgIHJldHVybiBtYXRoLnRyYW5zbGF0aW9uTWF0NGMocywgcywgcywgZGVzdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVmZmljaWVudGx5IHBvc3QtY29uY2F0ZW5hdGVzIGEgdHJhbnNsYXRpb24gdG8gdGhlIGdpdmVuIG1hdHJpeC5cbiAgICAgKiBAcGFyYW0gdlxuICAgICAqIEBwYXJhbSBtXG4gICAgICovXG4gICAgdHJhbnNsYXRlTWF0NHYoeHl6LCBtKSB7XG4gICAgICAgIHJldHVybiBtYXRoLnRyYW5zbGF0ZU1hdDRjKHh5elswXSwgeHl6WzFdLCB4eXpbMl0sIG0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFZmZpY2llbnRseSBwb3N0LWNvbmNhdGVuYXRlcyBhIHRyYW5zbGF0aW9uIHRvIHRoZSBnaXZlbiBtYXRyaXguXG4gICAgICogQHBhcmFtIHhcbiAgICAgKiBAcGFyYW0geVxuICAgICAqIEBwYXJhbSB6XG4gICAgICogQHBhcmFtIG1cbiAgICAgKi9cbiAgICBPTER0cmFuc2xhdGVNYXQ0Yyh4LCB5LCB6LCBtKSB7XG5cbiAgICAgICAgY29uc3QgbTEyID0gbVsxMl07XG4gICAgICAgIG1bMF0gKz0gbTEyICogeDtcbiAgICAgICAgbVs0XSArPSBtMTIgKiB5O1xuICAgICAgICBtWzhdICs9IG0xMiAqIHo7XG5cbiAgICAgICAgY29uc3QgbTEzID0gbVsxM107XG4gICAgICAgIG1bMV0gKz0gbTEzICogeDtcbiAgICAgICAgbVs1XSArPSBtMTMgKiB5O1xuICAgICAgICBtWzldICs9IG0xMyAqIHo7XG5cbiAgICAgICAgY29uc3QgbTE0ID0gbVsxNF07XG4gICAgICAgIG1bMl0gKz0gbTE0ICogeDtcbiAgICAgICAgbVs2XSArPSBtMTQgKiB5O1xuICAgICAgICBtWzEwXSArPSBtMTQgKiB6O1xuXG4gICAgICAgIGNvbnN0IG0xNSA9IG1bMTVdO1xuICAgICAgICBtWzNdICs9IG0xNSAqIHg7XG4gICAgICAgIG1bN10gKz0gbTE1ICogeTtcbiAgICAgICAgbVsxMV0gKz0gbTE1ICogejtcblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgdHJhbnNsYXRlTWF0NGMoeCwgeSwgeiwgbSkge1xuXG4gICAgICAgIGNvbnN0IG0zID0gbVszXTtcbiAgICAgICAgbVswXSArPSBtMyAqIHg7XG4gICAgICAgIG1bMV0gKz0gbTMgKiB5O1xuICAgICAgICBtWzJdICs9IG0zICogejtcblxuICAgICAgICBjb25zdCBtNyA9IG1bN107XG4gICAgICAgIG1bNF0gKz0gbTcgKiB4O1xuICAgICAgICBtWzVdICs9IG03ICogeTtcbiAgICAgICAgbVs2XSArPSBtNyAqIHo7XG5cbiAgICAgICAgY29uc3QgbTExID0gbVsxMV07XG4gICAgICAgIG1bOF0gKz0gbTExICogeDtcbiAgICAgICAgbVs5XSArPSBtMTEgKiB5O1xuICAgICAgICBtWzEwXSArPSBtMTEgKiB6O1xuXG4gICAgICAgIGNvbnN0IG0xNSA9IG1bMTVdO1xuICAgICAgICBtWzEyXSArPSBtMTUgKiB4O1xuICAgICAgICBtWzEzXSArPSBtMTUgKiB5O1xuICAgICAgICBtWzE0XSArPSBtMTUgKiB6O1xuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1hdHJpeCB0aGF0IHJlcGxhY2VzIHRoZSB0cmFuc2xhdGlvbiBpbiB0aGUgcmlnaHRtb3N0IGNvbHVtbiBvZiB0aGUgZ2l2ZW5cbiAgICAgKiBhZmZpbmUgbWF0cml4IHdpdGggdGhlIGdpdmVuIHRyYW5zbGF0aW9uLlxuICAgICAqIEBwYXJhbSBtXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIGRlc3RcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBzZXRNYXQ0VHJhbnNsYXRpb24obSwgdHJhbnNsYXRpb24sIGRlc3QpIHtcblxuICAgICAgICBkZXN0WzBdID0gbVswXTtcbiAgICAgICAgZGVzdFsxXSA9IG1bMV07XG4gICAgICAgIGRlc3RbMl0gPSBtWzJdO1xuICAgICAgICBkZXN0WzNdID0gbVszXTtcblxuICAgICAgICBkZXN0WzRdID0gbVs0XTtcbiAgICAgICAgZGVzdFs1XSA9IG1bNV07XG4gICAgICAgIGRlc3RbNl0gPSBtWzZdO1xuICAgICAgICBkZXN0WzddID0gbVs3XTtcblxuICAgICAgICBkZXN0WzhdID0gbVs4XTtcbiAgICAgICAgZGVzdFs5XSA9IG1bOV07XG4gICAgICAgIGRlc3RbMTBdID0gbVsxMF07XG4gICAgICAgIGRlc3RbMTFdID0gbVsxMV07XG5cbiAgICAgICAgZGVzdFsxMl0gPSB0cmFuc2xhdGlvblswXTtcbiAgICAgICAgZGVzdFsxM10gPSB0cmFuc2xhdGlvblsxXTtcbiAgICAgICAgZGVzdFsxNF0gPSB0cmFuc2xhdGlvblsyXTtcbiAgICAgICAgZGVzdFsxNV0gPSBtWzE1XTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyA0eDQgcm90YXRpb24gbWF0cml4LlxuICAgICAqIEBtZXRob2Qgcm90YXRpb25NYXQ0dlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICByb3RhdGlvbk1hdDR2KGFuZ2xlcmFkLCBheGlzLCBtKSB7XG4gICAgICAgIGNvbnN0IGF4ID0gbWF0aC5ub3JtYWxpemVWZWM0KFtheGlzWzBdLCBheGlzWzFdLCBheGlzWzJdLCAwLjBdLCBbXSk7XG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZXJhZCk7XG4gICAgICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhhbmdsZXJhZCk7XG4gICAgICAgIGNvbnN0IHEgPSAxLjAgLSBjO1xuXG4gICAgICAgIGNvbnN0IHggPSBheFswXTtcbiAgICAgICAgY29uc3QgeSA9IGF4WzFdO1xuICAgICAgICBjb25zdCB6ID0gYXhbMl07XG5cbiAgICAgICAgbGV0IHh5O1xuICAgICAgICBsZXQgeXo7XG4gICAgICAgIGxldCB6eDtcbiAgICAgICAgbGV0IHhzO1xuICAgICAgICBsZXQgeXM7XG4gICAgICAgIGxldCB6cztcblxuICAgICAgICAvL3h4ID0geCAqIHg7IHVzZWQgb25jZVxuICAgICAgICAvL3l5ID0geSAqIHk7IHVzZWQgb25jZVxuICAgICAgICAvL3p6ID0geiAqIHo7IHVzZWQgb25jZVxuICAgICAgICB4eSA9IHggKiB5O1xuICAgICAgICB5eiA9IHkgKiB6O1xuICAgICAgICB6eCA9IHogKiB4O1xuICAgICAgICB4cyA9IHggKiBzO1xuICAgICAgICB5cyA9IHkgKiBzO1xuICAgICAgICB6cyA9IHogKiBzO1xuXG4gICAgICAgIG0gPSBtIHx8IG1hdGgubWF0NCgpO1xuXG4gICAgICAgIG1bMF0gPSAocSAqIHggKiB4KSArIGM7XG4gICAgICAgIG1bMV0gPSAocSAqIHh5KSArIHpzO1xuICAgICAgICBtWzJdID0gKHEgKiB6eCkgLSB5cztcbiAgICAgICAgbVszXSA9IDAuMDtcblxuICAgICAgICBtWzRdID0gKHEgKiB4eSkgLSB6cztcbiAgICAgICAgbVs1XSA9IChxICogeSAqIHkpICsgYztcbiAgICAgICAgbVs2XSA9IChxICogeXopICsgeHM7XG4gICAgICAgIG1bN10gPSAwLjA7XG5cbiAgICAgICAgbVs4XSA9IChxICogengpICsgeXM7XG4gICAgICAgIG1bOV0gPSAocSAqIHl6KSAtIHhzO1xuICAgICAgICBtWzEwXSA9IChxICogeiAqIHopICsgYztcbiAgICAgICAgbVsxMV0gPSAwLjA7XG5cbiAgICAgICAgbVsxMl0gPSAwLjA7XG4gICAgICAgIG1bMTNdID0gMC4wO1xuICAgICAgICBtWzE0XSA9IDAuMDtcbiAgICAgICAgbVsxNV0gPSAxLjA7XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgNHg0IHJvdGF0aW9uIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHJvdGF0aW9uTWF0NGNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgcm90YXRpb25NYXQ0YyhhbmdsZXJhZCwgeCwgeSwgeiwgbWF0KSB7XG4gICAgICAgIHJldHVybiBtYXRoLnJvdGF0aW9uTWF0NHYoYW5nbGVyYWQsIFt4LCB5LCB6XSwgbWF0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyA0eDQgc2NhbGUgbWF0cml4LlxuICAgICAqIEBtZXRob2Qgc2NhbGluZ01hdDR2XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHNjYWxpbmdNYXQ0dih2LCBtID0gbWF0aC5pZGVudGl0eU1hdDQoKSkge1xuICAgICAgICBtWzBdID0gdlswXTtcbiAgICAgICAgbVs1XSA9IHZbMV07XG4gICAgICAgIG1bMTBdID0gdlsyXTtcbiAgICAgICAgcmV0dXJuIG07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgM3gzIHNjYWxlIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHNjYWxpbmdNYXQzdlxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBzY2FsaW5nTWF0M3YodiwgbSA9IG1hdGguaWRlbnRpdHlNYXQzKCkpIHtcbiAgICAgICAgbVswXSA9IHZbMF07XG4gICAgICAgIG1bNF0gPSB2WzFdO1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyA0eDQgc2NhbGUgbWF0cml4LlxuICAgICAqIEBtZXRob2Qgc2NhbGluZ01hdDRjXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHNjYWxpbmdNYXQ0YzogKCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHh5eiA9IG5ldyBGbG9hdEFycmF5VHlwZSgzKTtcbiAgICAgICAgcmV0dXJuICh4LCB5LCB6LCBkZXN0KSA9PiB7XG4gICAgICAgICAgICB4eXpbMF0gPSB4O1xuICAgICAgICAgICAgeHl6WzFdID0geTtcbiAgICAgICAgICAgIHh5elsyXSA9IHo7XG4gICAgICAgICAgICByZXR1cm4gbWF0aC5zY2FsaW5nTWF0NHYoeHl6LCBkZXN0KTtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICAqIEVmZmljaWVudGx5IHBvc3QtY29uY2F0ZW5hdGVzIGEgc2NhbGluZyB0byB0aGUgZ2l2ZW4gbWF0cml4LlxuICAgICAqIEBtZXRob2Qgc2NhbGVNYXQ0Y1xuICAgICAqIEBwYXJhbSB4XG4gICAgICogQHBhcmFtIHlcbiAgICAgKiBAcGFyYW0gelxuICAgICAqIEBwYXJhbSBtXG4gICAgICovXG4gICAgc2NhbGVNYXQ0Yyh4LCB5LCB6LCBtKSB7XG5cbiAgICAgICAgbVswXSAqPSB4O1xuICAgICAgICBtWzRdICo9IHk7XG4gICAgICAgIG1bOF0gKj0gejtcblxuICAgICAgICBtWzFdICo9IHg7XG4gICAgICAgIG1bNV0gKj0geTtcbiAgICAgICAgbVs5XSAqPSB6O1xuXG4gICAgICAgIG1bMl0gKj0geDtcbiAgICAgICAgbVs2XSAqPSB5O1xuICAgICAgICBtWzEwXSAqPSB6O1xuXG4gICAgICAgIG1bM10gKj0geDtcbiAgICAgICAgbVs3XSAqPSB5O1xuICAgICAgICBtWzExXSAqPSB6O1xuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRWZmaWNpZW50bHkgcG9zdC1jb25jYXRlbmF0ZXMgYSBzY2FsaW5nIHRvIHRoZSBnaXZlbiBtYXRyaXguXG4gICAgICogQG1ldGhvZCBzY2FsZU1hdDRjXG4gICAgICogQHBhcmFtIHh5elxuICAgICAqIEBwYXJhbSBtXG4gICAgICovXG4gICAgc2NhbGVNYXQ0dih4eXosIG0pIHtcblxuICAgICAgICBjb25zdCB4ID0geHl6WzBdO1xuICAgICAgICBjb25zdCB5ID0geHl6WzFdO1xuICAgICAgICBjb25zdCB6ID0geHl6WzJdO1xuXG4gICAgICAgIG1bMF0gKj0geDtcbiAgICAgICAgbVs0XSAqPSB5O1xuICAgICAgICBtWzhdICo9IHo7XG4gICAgICAgIG1bMV0gKj0geDtcbiAgICAgICAgbVs1XSAqPSB5O1xuICAgICAgICBtWzldICo9IHo7XG4gICAgICAgIG1bMl0gKj0geDtcbiAgICAgICAgbVs2XSAqPSB5O1xuICAgICAgICBtWzEwXSAqPSB6O1xuICAgICAgICBtWzNdICo9IHg7XG4gICAgICAgIG1bN10gKj0geTtcbiAgICAgICAgbVsxMV0gKj0gejtcblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyA0eDQgc2NhbGUgbWF0cml4LlxuICAgICAqIEBtZXRob2Qgc2NhbGluZ01hdDRzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHNjYWxpbmdNYXQ0cyhzKSB7XG4gICAgICAgIHJldHVybiBtYXRoLnNjYWxpbmdNYXQ0YyhzLCBzLCBzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGRlc3QgRGVzdGluYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybnMge051bWJlcltdfSBkZXN0XG4gICAgICovXG4gICAgcm90YXRpb25UcmFuc2xhdGlvbk1hdDQocSwgdiwgZGVzdCA9IG1hdGgubWF0NCgpKSB7XG4gICAgICAgIGNvbnN0IHggPSBxWzBdO1xuICAgICAgICBjb25zdCB5ID0gcVsxXTtcbiAgICAgICAgY29uc3QgeiA9IHFbMl07XG4gICAgICAgIGNvbnN0IHcgPSBxWzNdO1xuXG4gICAgICAgIGNvbnN0IHgyID0geCArIHg7XG4gICAgICAgIGNvbnN0IHkyID0geSArIHk7XG4gICAgICAgIGNvbnN0IHoyID0geiArIHo7XG4gICAgICAgIGNvbnN0IHh4ID0geCAqIHgyO1xuICAgICAgICBjb25zdCB4eSA9IHggKiB5MjtcbiAgICAgICAgY29uc3QgeHogPSB4ICogejI7XG4gICAgICAgIGNvbnN0IHl5ID0geSAqIHkyO1xuICAgICAgICBjb25zdCB5eiA9IHkgKiB6MjtcbiAgICAgICAgY29uc3QgenogPSB6ICogejI7XG4gICAgICAgIGNvbnN0IHd4ID0gdyAqIHgyO1xuICAgICAgICBjb25zdCB3eSA9IHcgKiB5MjtcbiAgICAgICAgY29uc3Qgd3ogPSB3ICogejI7XG5cbiAgICAgICAgZGVzdFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgICAgIGRlc3RbMV0gPSB4eSArIHd6O1xuICAgICAgICBkZXN0WzJdID0geHogLSB3eTtcbiAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIGRlc3RbNF0gPSB4eSAtIHd6O1xuICAgICAgICBkZXN0WzVdID0gMSAtICh4eCArIHp6KTtcbiAgICAgICAgZGVzdFs2XSA9IHl6ICsgd3g7XG4gICAgICAgIGRlc3RbN10gPSAwO1xuICAgICAgICBkZXN0WzhdID0geHogKyB3eTtcbiAgICAgICAgZGVzdFs5XSA9IHl6IC0gd3g7XG4gICAgICAgIGRlc3RbMTBdID0gMSAtICh4eCArIHl5KTtcbiAgICAgICAgZGVzdFsxMV0gPSAwO1xuICAgICAgICBkZXN0WzEyXSA9IHZbMF07XG4gICAgICAgIGRlc3RbMTNdID0gdlsxXTtcbiAgICAgICAgZGVzdFsxNF0gPSB2WzJdO1xuICAgICAgICBkZXN0WzE1XSA9IDE7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgRXVsZXIgYW5nbGVzIGZyb20gYSA0eDQgbWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gbWF0IFRoZSA0eDQgbWF0cml4LlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmRlciBEZXNpcmVkIEV1bGVyIGFuZ2xlIG9yZGVyOiBcIlhZWlwiLCBcIllYWlwiLCBcIlpYWVwiIGV0Yy5cbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBbZGVzdF0gRGVzdGluYXRpb24gRXVsZXIgYW5nbGVzLCBjcmVhdGVkIGJ5IGRlZmF1bHQuXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBUaGUgRXVsZXIgYW5nbGVzLlxuICAgICAqL1xuICAgIG1hdDRUb0V1bGVyKG1hdCwgb3JkZXIsIGRlc3QgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBjb25zdCBjbGFtcCA9IG1hdGguY2xhbXA7XG5cbiAgICAgICAgLy8gQXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuICAgICAgICBjb25zdCBtMTEgPSBtYXRbMF07XG5cbiAgICAgICAgY29uc3QgbTEyID0gbWF0WzRdO1xuICAgICAgICBjb25zdCBtMTMgPSBtYXRbOF07XG4gICAgICAgIGNvbnN0IG0yMSA9IG1hdFsxXTtcbiAgICAgICAgY29uc3QgbTIyID0gbWF0WzVdO1xuICAgICAgICBjb25zdCBtMjMgPSBtYXRbOV07XG4gICAgICAgIGNvbnN0IG0zMSA9IG1hdFsyXTtcbiAgICAgICAgY29uc3QgbTMyID0gbWF0WzZdO1xuICAgICAgICBjb25zdCBtMzMgPSBtYXRbMTBdO1xuXG4gICAgICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcblxuICAgICAgICAgICAgZGVzdFsxXSA9IE1hdGguYXNpbihjbGFtcChtMTMsIC0xLCAxKSk7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhtMTMpIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBNYXRoLmF0YW4yKC1tMjMsIG0zMyk7XG4gICAgICAgICAgICAgICAgZGVzdFsyXSA9IE1hdGguYXRhbjIoLW0xMiwgbTExKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IE1hdGguYXRhbjIobTMyLCBtMjIpO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcblxuICAgICAgICAgICAgZGVzdFswXSA9IE1hdGguYXNpbigtY2xhbXAobTIzLCAtMSwgMSkpO1xuXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobTIzKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgICAgICBkZXN0WzFdID0gTWF0aC5hdGFuMihtMTMsIG0zMyk7XG4gICAgICAgICAgICAgICAgZGVzdFsyXSA9IE1hdGguYXRhbjIobTIxLCBtMjIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZXN0WzFdID0gTWF0aC5hdGFuMigtbTMxLCBtMTEpO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG5cbiAgICAgICAgICAgIGRlc3RbMF0gPSBNYXRoLmFzaW4oY2xhbXAobTMyLCAtMSwgMSkpO1xuXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobTMyKSA8IDAuOTk5OTkpIHtcbiAgICAgICAgICAgICAgICBkZXN0WzFdID0gTWF0aC5hdGFuMigtbTMxLCBtMzMpO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSBNYXRoLmF0YW4yKC1tMTIsIG0yMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSBNYXRoLmF0YW4yKG0yMSwgbTExKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xuXG4gICAgICAgICAgICBkZXN0WzFdID0gTWF0aC5hc2luKC1jbGFtcChtMzEsIC0xLCAxKSk7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhtMzEpIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBNYXRoLmF0YW4yKG0zMiwgbTMzKTtcbiAgICAgICAgICAgICAgICBkZXN0WzJdID0gTWF0aC5hdGFuMihtMjEsIG0xMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSBNYXRoLmF0YW4yKC1tMTIsIG0yMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcblxuICAgICAgICAgICAgZGVzdFsyXSA9IE1hdGguYXNpbihjbGFtcChtMjEsIC0xLCAxKSk7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhtMjEpIDwgMC45OTk5OSkge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBNYXRoLmF0YW4yKC1tMjMsIG0yMik7XG4gICAgICAgICAgICAgICAgZGVzdFsxXSA9IE1hdGguYXRhbjIoLW0zMSwgbTExKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IDA7XG4gICAgICAgICAgICAgICAgZGVzdFsxXSA9IE1hdGguYXRhbjIobTEzLCBtMzMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG5cbiAgICAgICAgICAgIGRlc3RbMl0gPSBNYXRoLmFzaW4oLWNsYW1wKG0xMiwgLTEsIDEpKTtcblxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKG0xMikgPCAwLjk5OTk5KSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IE1hdGguYXRhbjIobTMyLCBtMjIpO1xuICAgICAgICAgICAgICAgIGRlc3RbMV0gPSBNYXRoLmF0YW4yKG0xMywgbTExKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IE1hdGguYXRhbjIoLW0yMywgbTMzKTtcbiAgICAgICAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICBjb21wb3NlTWF0NChwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUsIG1hdCA9IG1hdGgubWF0NCgpKSB7XG4gICAgICAgIG1hdGgucXVhdGVybmlvblRvUm90YXRpb25NYXQ0KHF1YXRlcm5pb24sIG1hdCk7XG4gICAgICAgIG1hdGguc2NhbGVNYXQ0dihzY2FsZSwgbWF0KTtcbiAgICAgICAgbWF0aC50cmFuc2xhdGVNYXQ0dihwb3NpdGlvbiwgbWF0KTtcblxuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH0sXG5cbiAgICBkZWNvbXBvc2VNYXQ0OiAoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHZlYyA9IG5ldyBGbG9hdEFycmF5VHlwZSgzKTtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IEZsb2F0QXJyYXlUeXBlKDE2KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVjb21wb3NlKG1hdCwgcG9zaXRpb24sIHF1YXRlcm5pb24sIHNjYWxlKSB7XG5cbiAgICAgICAgICAgIHZlY1swXSA9IG1hdFswXTtcbiAgICAgICAgICAgIHZlY1sxXSA9IG1hdFsxXTtcbiAgICAgICAgICAgIHZlY1syXSA9IG1hdFsyXTtcblxuICAgICAgICAgICAgbGV0IHN4ID0gbWF0aC5sZW5WZWMzKHZlYyk7XG5cbiAgICAgICAgICAgIHZlY1swXSA9IG1hdFs0XTtcbiAgICAgICAgICAgIHZlY1sxXSA9IG1hdFs1XTtcbiAgICAgICAgICAgIHZlY1syXSA9IG1hdFs2XTtcblxuICAgICAgICAgICAgY29uc3Qgc3kgPSBtYXRoLmxlblZlYzModmVjKTtcblxuICAgICAgICAgICAgdmVjWzhdID0gbWF0WzhdO1xuICAgICAgICAgICAgdmVjWzldID0gbWF0WzldO1xuICAgICAgICAgICAgdmVjWzEwXSA9IG1hdFsxMF07XG5cbiAgICAgICAgICAgIGNvbnN0IHN6ID0gbWF0aC5sZW5WZWMzKHZlYyk7XG5cbiAgICAgICAgICAgIC8vIGlmIGRldGVybWluZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXG4gICAgICAgICAgICBjb25zdCBkZXQgPSBtYXRoLmRldGVybWluYW50TWF0NChtYXQpO1xuXG4gICAgICAgICAgICBpZiAoZGV0IDwgMCkge1xuICAgICAgICAgICAgICAgIHN4ID0gLXN4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3NpdGlvblswXSA9IG1hdFsxMl07XG4gICAgICAgICAgICBwb3NpdGlvblsxXSA9IG1hdFsxM107XG4gICAgICAgICAgICBwb3NpdGlvblsyXSA9IG1hdFsxNF07XG5cbiAgICAgICAgICAgIC8vIHNjYWxlIHRoZSByb3RhdGlvbiBwYXJ0XG4gICAgICAgICAgICBtYXRyaXguc2V0KG1hdCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGludlNYID0gMSAvIHN4O1xuICAgICAgICAgICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XG4gICAgICAgICAgICBjb25zdCBpbnZTWiA9IDEgLyBzejtcblxuICAgICAgICAgICAgbWF0cml4WzBdICo9IGludlNYO1xuICAgICAgICAgICAgbWF0cml4WzFdICo9IGludlNYO1xuICAgICAgICAgICAgbWF0cml4WzJdICo9IGludlNYO1xuXG4gICAgICAgICAgICBtYXRyaXhbNF0gKj0gaW52U1k7XG4gICAgICAgICAgICBtYXRyaXhbNV0gKj0gaW52U1k7XG4gICAgICAgICAgICBtYXRyaXhbNl0gKj0gaW52U1k7XG5cbiAgICAgICAgICAgIG1hdHJpeFs4XSAqPSBpbnZTWjtcbiAgICAgICAgICAgIG1hdHJpeFs5XSAqPSBpbnZTWjtcbiAgICAgICAgICAgIG1hdHJpeFsxMF0gKj0gaW52U1o7XG5cbiAgICAgICAgICAgIG1hdGgubWF0NFRvUXVhdGVybmlvbihtYXRyaXgsIHF1YXRlcm5pb24pO1xuXG4gICAgICAgICAgICBzY2FsZVswXSA9IHN4O1xuICAgICAgICAgICAgc2NhbGVbMV0gPSBzeTtcbiAgICAgICAgICAgIHNjYWxlWzJdID0gc3o7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIH07XG5cbiAgICB9KSgpLFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgZ2V0Q29sTWF0NChtYXQsIGMpIHtcbiAgICAgICAgY29uc3QgaSA9IGMgKiA0O1xuICAgICAgICByZXR1cm4gW21hdFtpXSwgbWF0W2kgKyAxXSwgbWF0W2kgKyAyXSwgbWF0W2kgKyAzXV07XG4gICAgfSxcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHNldFJvd01hdDQobWF0LCByLCB2KSB7XG4gICAgICAgIG1hdFtyXSA9IHZbMF07XG4gICAgICAgIG1hdFtyICsgNF0gPSB2WzFdO1xuICAgICAgICBtYXRbciArIDhdID0gdlsyXTtcbiAgICAgICAgbWF0W3IgKyAxMl0gPSB2WzNdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgNHg0ICdsb29rYXQnIHZpZXdpbmcgdHJhbnNmb3JtIG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIGxvb2tBdE1hdDR2XG4gICAgICogQHBhcmFtIHBvcyB2ZWMzIHBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IHZlYzMgcG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gICAgICogQHBhcmFtIHVwIHZlYzMgcG9pbnRpbmcgXCJ1cFwiXG4gICAgICogQHBhcmFtIGRlc3QgbWF0NCBPcHRpb25hbCwgbWF0NCBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQ0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIGxvb2tBdE1hdDR2KHBvcywgdGFyZ2V0LCB1cCwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtYXRoLm1hdDQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvc3ggPSBwb3NbMF07XG4gICAgICAgIGNvbnN0IHBvc3kgPSBwb3NbMV07XG4gICAgICAgIGNvbnN0IHBvc3ogPSBwb3NbMl07XG4gICAgICAgIGNvbnN0IHVweCA9IHVwWzBdO1xuICAgICAgICBjb25zdCB1cHkgPSB1cFsxXTtcbiAgICAgICAgY29uc3QgdXB6ID0gdXBbMl07XG4gICAgICAgIGNvbnN0IHRhcmdldHggPSB0YXJnZXRbMF07XG4gICAgICAgIGNvbnN0IHRhcmdldHkgPSB0YXJnZXRbMV07XG4gICAgICAgIGNvbnN0IHRhcmdldHogPSB0YXJnZXRbMl07XG5cbiAgICAgICAgaWYgKHBvc3ggPT09IHRhcmdldHggJiYgcG9zeSA9PT0gdGFyZ2V0eSAmJiBwb3N6ID09PSB0YXJnZXR6KSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0aC5pZGVudGl0eU1hdDQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB6MDtcbiAgICAgICAgbGV0IHoxO1xuICAgICAgICBsZXQgejI7XG4gICAgICAgIGxldCB4MDtcbiAgICAgICAgbGV0IHgxO1xuICAgICAgICBsZXQgeDI7XG4gICAgICAgIGxldCB5MDtcbiAgICAgICAgbGV0IHkxO1xuICAgICAgICBsZXQgeTI7XG4gICAgICAgIGxldCBsZW47XG5cbiAgICAgICAgLy92ZWMzLmRpcmVjdGlvbihleWUsIGNlbnRlciwgeik7XG4gICAgICAgIHowID0gcG9zeCAtIHRhcmdldHg7XG4gICAgICAgIHoxID0gcG9zeSAtIHRhcmdldHk7XG4gICAgICAgIHoyID0gcG9zeiAtIHRhcmdldHo7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIChubyBjaGVjayBuZWVkZWQgZm9yIDAgYmVjYXVzZSBvZiBlYXJseSByZXR1cm4pXG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQoejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyKTtcbiAgICAgICAgejAgKj0gbGVuO1xuICAgICAgICB6MSAqPSBsZW47XG4gICAgICAgIHoyICo9IGxlbjtcblxuICAgICAgICAvL3ZlYzMubm9ybWFsaXplKHZlYzMuY3Jvc3ModXAsIHosIHgpKTtcbiAgICAgICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xuICAgICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XG4gICAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgICAgICAgbGVuID0gTWF0aC5zcXJ0KHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4Mik7XG4gICAgICAgIGlmICghbGVuKSB7XG4gICAgICAgICAgICB4MCA9IDA7XG4gICAgICAgICAgICB4MSA9IDA7XG4gICAgICAgICAgICB4MiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgICAgICAgeDAgKj0gbGVuO1xuICAgICAgICAgICAgeDEgKj0gbGVuO1xuICAgICAgICAgICAgeDIgKj0gbGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy92ZWMzLm5vcm1hbGl6ZSh2ZWMzLmNyb3NzKHosIHgsIHkpKTtcbiAgICAgICAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgICAgICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgICAgICAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcblxuICAgICAgICBsZW4gPSBNYXRoLnNxcnQoeTAgKiB5MCArIHkxICogeTEgKyB5MiAqIHkyKTtcbiAgICAgICAgaWYgKCFsZW4pIHtcbiAgICAgICAgICAgIHkwID0gMDtcbiAgICAgICAgICAgIHkxID0gMDtcbiAgICAgICAgICAgIHkyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgICAgICB5MCAqPSBsZW47XG4gICAgICAgICAgICB5MSAqPSBsZW47XG4gICAgICAgICAgICB5MiAqPSBsZW47XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzBdID0geDA7XG4gICAgICAgIGRlc3RbMV0gPSB5MDtcbiAgICAgICAgZGVzdFsyXSA9IHowO1xuICAgICAgICBkZXN0WzNdID0gMDtcbiAgICAgICAgZGVzdFs0XSA9IHgxO1xuICAgICAgICBkZXN0WzVdID0geTE7XG4gICAgICAgIGRlc3RbNl0gPSB6MTtcbiAgICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICAgIGRlc3RbOF0gPSB4MjtcbiAgICAgICAgZGVzdFs5XSA9IHkyO1xuICAgICAgICBkZXN0WzEwXSA9IHoyO1xuICAgICAgICBkZXN0WzExXSA9IDA7XG4gICAgICAgIGRlc3RbMTJdID0gLSh4MCAqIHBvc3ggKyB4MSAqIHBvc3kgKyB4MiAqIHBvc3opO1xuICAgICAgICBkZXN0WzEzXSA9IC0oeTAgKiBwb3N4ICsgeTEgKiBwb3N5ICsgeTIgKiBwb3N6KTtcbiAgICAgICAgZGVzdFsxNF0gPSAtKHowICogcG9zeCArIHoxICogcG9zeSArIHoyICogcG9zeik7XG4gICAgICAgIGRlc3RbMTVdID0gMTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDR4NCAnbG9va2F0JyB2aWV3aW5nIHRyYW5zZm9ybSBtYXRyaXguXG4gICAgICogQG1ldGhvZCBsb29rQXRNYXQ0Y1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBsb29rQXRNYXQ0Yyhwb3N4LCBwb3N5LCBwb3N6LCB0YXJnZXR4LCB0YXJnZXR5LCB0YXJnZXR6LCB1cHgsIHVweSwgdXB6KSB7XG4gICAgICAgIHJldHVybiBtYXRoLmxvb2tBdE1hdDR2KFtwb3N4LCBwb3N5LCBwb3N6XSwgW3RhcmdldHgsIHRhcmdldHksIHRhcmdldHpdLCBbdXB4LCB1cHksIHVwel0sIFtdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIDR4NCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXguXG4gICAgICogQG1ldGhvZCBvcnRob01hdDRjXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIG9ydGhvTWF0NGMobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbWF0aC5tYXQ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmwgPSAocmlnaHQgLSBsZWZ0KTtcbiAgICAgICAgY29uc3QgdGIgPSAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgY29uc3QgZm4gPSAoZmFyIC0gbmVhcik7XG5cbiAgICAgICAgZGVzdFswXSA9IDIuMCAvIHJsO1xuICAgICAgICBkZXN0WzFdID0gMC4wO1xuICAgICAgICBkZXN0WzJdID0gMC4wO1xuICAgICAgICBkZXN0WzNdID0gMC4wO1xuXG4gICAgICAgIGRlc3RbNF0gPSAwLjA7XG4gICAgICAgIGRlc3RbNV0gPSAyLjAgLyB0YjtcbiAgICAgICAgZGVzdFs2XSA9IDAuMDtcbiAgICAgICAgZGVzdFs3XSA9IDAuMDtcblxuICAgICAgICBkZXN0WzhdID0gMC4wO1xuICAgICAgICBkZXN0WzldID0gMC4wO1xuICAgICAgICBkZXN0WzEwXSA9IC0yLjAgLyBmbjtcbiAgICAgICAgZGVzdFsxMV0gPSAwLjA7XG5cbiAgICAgICAgZGVzdFsxMl0gPSAtKGxlZnQgKyByaWdodCkgLyBybDtcbiAgICAgICAgZGVzdFsxM10gPSAtKHRvcCArIGJvdHRvbSkgLyB0YjtcbiAgICAgICAgZGVzdFsxNF0gPSAtKGZhciArIG5lYXIpIC8gZm47XG4gICAgICAgIGRlc3RbMTVdID0gMS4wO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgNHg0IHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4LlxuICAgICAqIEBtZXRob2QgZnJ1c3R1bU1hdDR2XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIGZydXN0dW1NYXQ0dihmbWluLCBmbWF4LCBtKSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgbSA9IG1hdGgubWF0NCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm1pbjQgPSBbZm1pblswXSwgZm1pblsxXSwgZm1pblsyXSwgMC4wXTtcbiAgICAgICAgY29uc3QgZm1heDQgPSBbZm1heFswXSwgZm1heFsxXSwgZm1heFsyXSwgMC4wXTtcblxuICAgICAgICBtYXRoLmFkZFZlYzQoZm1heDQsIGZtaW40LCB0ZW1wTWF0MSk7XG4gICAgICAgIG1hdGguc3ViVmVjNChmbWF4NCwgZm1pbjQsIHRlbXBNYXQyKTtcblxuICAgICAgICBjb25zdCB0ID0gMi4wICogZm1pbjRbMl07XG5cbiAgICAgICAgY29uc3QgdGVtcE1hdDIwID0gdGVtcE1hdDJbMF07XG4gICAgICAgIGNvbnN0IHRlbXBNYXQyMSA9IHRlbXBNYXQyWzFdO1xuICAgICAgICBjb25zdCB0ZW1wTWF0MjIgPSB0ZW1wTWF0MlsyXTtcblxuICAgICAgICBtWzBdID0gdCAvIHRlbXBNYXQyMDtcbiAgICAgICAgbVsxXSA9IDAuMDtcbiAgICAgICAgbVsyXSA9IDAuMDtcbiAgICAgICAgbVszXSA9IDAuMDtcblxuICAgICAgICBtWzRdID0gMC4wO1xuICAgICAgICBtWzVdID0gdCAvIHRlbXBNYXQyMTtcbiAgICAgICAgbVs2XSA9IDAuMDtcbiAgICAgICAgbVs3XSA9IDAuMDtcblxuICAgICAgICBtWzhdID0gdGVtcE1hdDFbMF0gLyB0ZW1wTWF0MjA7XG4gICAgICAgIG1bOV0gPSB0ZW1wTWF0MVsxXSAvIHRlbXBNYXQyMTtcbiAgICAgICAgbVsxMF0gPSAtdGVtcE1hdDFbMl0gLyB0ZW1wTWF0MjI7XG4gICAgICAgIG1bMTFdID0gLTEuMDtcblxuICAgICAgICBtWzEyXSA9IDAuMDtcbiAgICAgICAgbVsxM10gPSAwLjA7XG4gICAgICAgIG1bMTRdID0gLXQgKiBmbWF4NFsyXSAvIHRlbXBNYXQyMjtcbiAgICAgICAgbVsxNV0gPSAwLjA7XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSA0eDQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXguXG4gICAgICogQG1ldGhvZCBmcnVzdHVtTWF0NHZcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgZnJ1c3R1bU1hdDQobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbWF0aC5tYXQ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmwgPSAocmlnaHQgLSBsZWZ0KTtcbiAgICAgICAgY29uc3QgdGIgPSAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgY29uc3QgZm4gPSAoZmFyIC0gbmVhcik7XG4gICAgICAgIGRlc3RbMF0gPSAobmVhciAqIDIpIC8gcmw7XG4gICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIGRlc3RbNF0gPSAwO1xuICAgICAgICBkZXN0WzVdID0gKG5lYXIgKiAyKSAvIHRiO1xuICAgICAgICBkZXN0WzZdID0gMDtcbiAgICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICAgIGRlc3RbOF0gPSAocmlnaHQgKyBsZWZ0KSAvIHJsO1xuICAgICAgICBkZXN0WzldID0gKHRvcCArIGJvdHRvbSkgLyB0YjtcbiAgICAgICAgZGVzdFsxMF0gPSAtKGZhciArIG5lYXIpIC8gZm47XG4gICAgICAgIGRlc3RbMTFdID0gLTE7XG4gICAgICAgIGRlc3RbMTJdID0gMDtcbiAgICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgICBkZXN0WzE0XSA9IC0oZmFyICogbmVhciAqIDIpIC8gZm47XG4gICAgICAgIGRlc3RbMTVdID0gMDtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSA0eDQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXguXG4gICAgICogQG1ldGhvZCBwZXJzcGVjdGl2ZU1hdDR2XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHBlcnNwZWN0aXZlTWF0NChmb3Z5cmFkLCBhc3BlY3RyYXRpbywgem5lYXIsIHpmYXIsIG0pIHtcbiAgICAgICAgY29uc3QgcG1pbiA9IFtdO1xuICAgICAgICBjb25zdCBwbWF4ID0gW107XG5cbiAgICAgICAgcG1pblsyXSA9IHpuZWFyO1xuICAgICAgICBwbWF4WzJdID0gemZhcjtcblxuICAgICAgICBwbWF4WzFdID0gcG1pblsyXSAqIE1hdGgudGFuKGZvdnlyYWQgLyAyLjApO1xuICAgICAgICBwbWluWzFdID0gLXBtYXhbMV07XG5cbiAgICAgICAgcG1heFswXSA9IHBtYXhbMV0gKiBhc3BlY3RyYXRpbztcbiAgICAgICAgcG1pblswXSA9IC1wbWF4WzBdO1xuXG4gICAgICAgIHJldHVybiBtYXRoLmZydXN0dW1NYXQ0dihwbWluLCBwbWF4LCBtKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gNHg0IG1hdHJpY2VzIGFyZSB0aGUgc2FtZS5cbiAgICAgKiBAcGFyYW0gbTFcbiAgICAgKiBAcGFyYW0gbTJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjb21wYXJlTWF0NChtMSwgbTIpIHtcbiAgICAgICAgcmV0dXJuIG0xWzBdID09PSBtMlswXSAmJlxuICAgICAgICAgICAgbTFbMV0gPT09IG0yWzFdICYmXG4gICAgICAgICAgICBtMVsyXSA9PT0gbTJbMl0gJiZcbiAgICAgICAgICAgIG0xWzNdID09PSBtMlszXSAmJlxuICAgICAgICAgICAgbTFbNF0gPT09IG0yWzRdICYmXG4gICAgICAgICAgICBtMVs1XSA9PT0gbTJbNV0gJiZcbiAgICAgICAgICAgIG0xWzZdID09PSBtMls2XSAmJlxuICAgICAgICAgICAgbTFbN10gPT09IG0yWzddICYmXG4gICAgICAgICAgICBtMVs4XSA9PT0gbTJbOF0gJiZcbiAgICAgICAgICAgIG0xWzldID09PSBtMls5XSAmJlxuICAgICAgICAgICAgbTFbMTBdID09PSBtMlsxMF0gJiZcbiAgICAgICAgICAgIG0xWzExXSA9PT0gbTJbMTFdICYmXG4gICAgICAgICAgICBtMVsxMl0gPT09IG0yWzEyXSAmJlxuICAgICAgICAgICAgbTFbMTNdID09PSBtMlsxM10gJiZcbiAgICAgICAgICAgIG0xWzE0XSA9PT0gbTJbMTRdICYmXG4gICAgICAgICAgICBtMVsxNV0gPT09IG0yWzE1XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhIHRocmVlLWVsZW1lbnQgcG9zaXRpb24gYnkgYSA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNmb3JtUG9pbnQzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVBvaW50MyhtLCBwLCBkZXN0ID0gbWF0aC52ZWMzKCkpIHtcblxuICAgICAgICBjb25zdCB4ID0gcFswXTtcbiAgICAgICAgY29uc3QgeSA9IHBbMV07XG4gICAgICAgIGNvbnN0IHogPSBwWzJdO1xuXG4gICAgICAgIGRlc3RbMF0gPSAobVswXSAqIHgpICsgKG1bNF0gKiB5KSArIChtWzhdICogeikgKyBtWzEyXTtcbiAgICAgICAgZGVzdFsxXSA9IChtWzFdICogeCkgKyAobVs1XSAqIHkpICsgKG1bOV0gKiB6KSArIG1bMTNdO1xuICAgICAgICBkZXN0WzJdID0gKG1bMl0gKiB4KSArIChtWzZdICogeSkgKyAobVsxMF0gKiB6KSArIG1bMTRdO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGEgaG9tb2dlbmVvdXMgY29vcmRpbmF0ZSBieSBhIDR4NCBtYXRyaXguXG4gICAgICogQG1ldGhvZCB0cmFuc2Zvcm1Qb2ludDNcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgdHJhbnNmb3JtUG9pbnQ0KG0sIHYsIGRlc3QgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBkZXN0WzBdID0gbVswXSAqIHZbMF0gKyBtWzRdICogdlsxXSArIG1bOF0gKiB2WzJdICsgbVsxMl0gKiB2WzNdO1xuICAgICAgICBkZXN0WzFdID0gbVsxXSAqIHZbMF0gKyBtWzVdICogdlsxXSArIG1bOV0gKiB2WzJdICsgbVsxM10gKiB2WzNdO1xuICAgICAgICBkZXN0WzJdID0gbVsyXSAqIHZbMF0gKyBtWzZdICogdlsxXSArIG1bMTBdICogdlsyXSArIG1bMTRdICogdlszXTtcbiAgICAgICAgZGVzdFszXSA9IG1bM10gKiB2WzBdICsgbVs3XSAqIHZbMV0gKyBtWzExXSAqIHZbMl0gKyBtWzE1XSAqIHZbM107XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiB0aHJlZS1lbGVtZW50IHBvc2l0aW9ucyBieSBhIDR4NCBtYXRyaXguXG4gICAgICogQG1ldGhvZCB0cmFuc2Zvcm1Qb2ludHMzXG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVBvaW50czMobSwgcG9pbnRzLCBwb2ludHMyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBvaW50czIgfHwgW107XG4gICAgICAgIGNvbnN0IGxlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGxldCBwMDtcbiAgICAgICAgbGV0IHAxO1xuICAgICAgICBsZXQgcDI7XG4gICAgICAgIGxldCBwaTtcblxuICAgICAgICAvLyBjYWNoZSB2YWx1ZXNcbiAgICAgICAgY29uc3QgbTAgPSBtWzBdO1xuXG4gICAgICAgIGNvbnN0IG0xID0gbVsxXTtcbiAgICAgICAgY29uc3QgbTIgPSBtWzJdO1xuICAgICAgICBjb25zdCBtMyA9IG1bM107XG4gICAgICAgIGNvbnN0IG00ID0gbVs0XTtcbiAgICAgICAgY29uc3QgbTUgPSBtWzVdO1xuICAgICAgICBjb25zdCBtNiA9IG1bNl07XG4gICAgICAgIGNvbnN0IG03ID0gbVs3XTtcbiAgICAgICAgY29uc3QgbTggPSBtWzhdO1xuICAgICAgICBjb25zdCBtOSA9IG1bOV07XG4gICAgICAgIGNvbnN0IG0xMCA9IG1bMTBdO1xuICAgICAgICBjb25zdCBtMTEgPSBtWzExXTtcbiAgICAgICAgY29uc3QgbTEyID0gbVsxMl07XG4gICAgICAgIGNvbnN0IG0xMyA9IG1bMTNdO1xuICAgICAgICBjb25zdCBtMTQgPSBtWzE0XTtcbiAgICAgICAgY29uc3QgbTE1ID0gbVsxNV07XG5cbiAgICAgICAgbGV0IHI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuXG4gICAgICAgICAgICAvLyBjYWNoZSB2YWx1ZXNcbiAgICAgICAgICAgIHBpID0gcG9pbnRzW2ldO1xuXG4gICAgICAgICAgICBwMCA9IHBpWzBdO1xuICAgICAgICAgICAgcDEgPSBwaVsxXTtcbiAgICAgICAgICAgIHAyID0gcGlbMl07XG5cbiAgICAgICAgICAgIHIgPSByZXN1bHRbaV0gfHwgKHJlc3VsdFtpXSA9IFswLCAwLCAwXSk7XG5cbiAgICAgICAgICAgIHJbMF0gPSAobTAgKiBwMCkgKyAobTQgKiBwMSkgKyAobTggKiBwMikgKyBtMTI7XG4gICAgICAgICAgICByWzFdID0gKG0xICogcDApICsgKG01ICogcDEpICsgKG05ICogcDIpICsgbTEzO1xuICAgICAgICAgICAgclsyXSA9IChtMiAqIHAwKSArIChtNiAqIHAxKSArIChtMTAgKiBwMikgKyBtMTQ7XG4gICAgICAgICAgICByWzNdID0gKG0zICogcDApICsgKG03ICogcDEpICsgKG0xMSAqIHAyKSArIG0xNTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW47XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBwb3NpdGlvbnMgYnkgYSA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNmb3JtUG9zaXRpb25zM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1Qb3NpdGlvbnMzKG0sIHAsIHAyID0gcCkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgY29uc3QgbGVuID0gcC5sZW5ndGg7XG5cbiAgICAgICAgbGV0IHg7XG4gICAgICAgIGxldCB5O1xuICAgICAgICBsZXQgejtcblxuICAgICAgICBjb25zdCBtMCA9IG1bMF07XG4gICAgICAgIGNvbnN0IG0xID0gbVsxXTtcbiAgICAgICAgY29uc3QgbTIgPSBtWzJdO1xuICAgICAgICBjb25zdCBtMyA9IG1bM107XG4gICAgICAgIGNvbnN0IG00ID0gbVs0XTtcbiAgICAgICAgY29uc3QgbTUgPSBtWzVdO1xuICAgICAgICBjb25zdCBtNiA9IG1bNl07XG4gICAgICAgIGNvbnN0IG03ID0gbVs3XTtcbiAgICAgICAgY29uc3QgbTggPSBtWzhdO1xuICAgICAgICBjb25zdCBtOSA9IG1bOV07XG4gICAgICAgIGNvbnN0IG0xMCA9IG1bMTBdO1xuICAgICAgICBjb25zdCBtMTEgPSBtWzExXTtcbiAgICAgICAgY29uc3QgbTEyID0gbVsxMl07XG4gICAgICAgIGNvbnN0IG0xMyA9IG1bMTNdO1xuICAgICAgICBjb25zdCBtMTQgPSBtWzE0XTtcbiAgICAgICAgY29uc3QgbTE1ID0gbVsxNV07XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAzKSB7XG5cbiAgICAgICAgICAgIHggPSBwW2kgKyAwXTtcbiAgICAgICAgICAgIHkgPSBwW2kgKyAxXTtcbiAgICAgICAgICAgIHogPSBwW2kgKyAyXTtcblxuICAgICAgICAgICAgcDJbaSArIDBdID0gKG0wICogeCkgKyAobTQgKiB5KSArIChtOCAqIHopICsgbTEyO1xuICAgICAgICAgICAgcDJbaSArIDFdID0gKG0xICogeCkgKyAobTUgKiB5KSArIChtOSAqIHopICsgbTEzO1xuICAgICAgICAgICAgcDJbaSArIDJdID0gKG0yICogeCkgKyAobTYgKiB5KSArIChtMTAgKiB6KSArIG0xNDtcbiAgICAgICAgICAgIHAyW2kgKyAzXSA9IChtMyAqIHgpICsgKG03ICogeSkgKyAobTExICogeikgKyBtMTU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcDI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYW4gYXJyYXkgb2YgcG9zaXRpb25zIGJ5IGEgNHg0IG1hdHJpeC5cbiAgICAgKiBAbWV0aG9kIHRyYW5zZm9ybVBvc2l0aW9uczRcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgdHJhbnNmb3JtUG9zaXRpb25zNChtLCBwLCBwMiA9IHApIHtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHAubGVuZ3RoO1xuXG4gICAgICAgIGxldCB4O1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IHo7XG5cbiAgICAgICAgY29uc3QgbTAgPSBtWzBdO1xuICAgICAgICBjb25zdCBtMSA9IG1bMV07XG4gICAgICAgIGNvbnN0IG0yID0gbVsyXTtcbiAgICAgICAgY29uc3QgbTMgPSBtWzNdO1xuICAgICAgICBjb25zdCBtNCA9IG1bNF07XG4gICAgICAgIGNvbnN0IG01ID0gbVs1XTtcbiAgICAgICAgY29uc3QgbTYgPSBtWzZdO1xuICAgICAgICBjb25zdCBtNyA9IG1bN107XG4gICAgICAgIGNvbnN0IG04ID0gbVs4XTtcbiAgICAgICAgY29uc3QgbTkgPSBtWzldO1xuICAgICAgICBjb25zdCBtMTAgPSBtWzEwXTtcbiAgICAgICAgY29uc3QgbTExID0gbVsxMV07XG4gICAgICAgIGNvbnN0IG0xMiA9IG1bMTJdO1xuICAgICAgICBjb25zdCBtMTMgPSBtWzEzXTtcbiAgICAgICAgY29uc3QgbTE0ID0gbVsxNF07XG4gICAgICAgIGNvbnN0IG0xNSA9IG1bMTVdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuXG4gICAgICAgICAgICB4ID0gcFtpICsgMF07XG4gICAgICAgICAgICB5ID0gcFtpICsgMV07XG4gICAgICAgICAgICB6ID0gcFtpICsgMl07XG5cbiAgICAgICAgICAgIHAyW2kgKyAwXSA9IChtMCAqIHgpICsgKG00ICogeSkgKyAobTggKiB6KSArIG0xMjtcbiAgICAgICAgICAgIHAyW2kgKyAxXSA9IChtMSAqIHgpICsgKG01ICogeSkgKyAobTkgKiB6KSArIG0xMztcbiAgICAgICAgICAgIHAyW2kgKyAyXSA9IChtMiAqIHgpICsgKG02ICogeSkgKyAobTEwICogeikgKyBtMTQ7XG4gICAgICAgICAgICBwMltpICsgM10gPSAobTMgKiB4KSArIChtNyAqIHkpICsgKG0xMSAqIHopICsgbTE1O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHAyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGEgdGhyZWUtZWxlbWVudCB2ZWN0b3IgYnkgYSA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNmb3JtVmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1WZWMzKG0sIHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgdjAgPSB2WzBdO1xuICAgICAgICBjb25zdCB2MSA9IHZbMV07XG4gICAgICAgIGNvbnN0IHYyID0gdlsyXTtcbiAgICAgICAgZGVzdCA9IGRlc3QgfHwgdGhpcy52ZWMzKCk7XG4gICAgICAgIGRlc3RbMF0gPSAobVswXSAqIHYwKSArIChtWzRdICogdjEpICsgKG1bOF0gKiB2Mik7XG4gICAgICAgIGRlc3RbMV0gPSAobVsxXSAqIHYwKSArIChtWzVdICogdjEpICsgKG1bOV0gKiB2Mik7XG4gICAgICAgIGRlc3RbMl0gPSAobVsyXSAqIHYwKSArIChtWzZdICogdjEpICsgKG1bMTBdICogdjIpO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhIGZvdXItZWxlbWVudCB2ZWN0b3IgYnkgYSA0eDQgbWF0cml4LlxuICAgICAqIEBtZXRob2QgdHJhbnNmb3JtVmVjNFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1WZWM0KG0sIHYsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgdjAgPSB2WzBdO1xuICAgICAgICBjb25zdCB2MSA9IHZbMV07XG4gICAgICAgIGNvbnN0IHYyID0gdlsyXTtcbiAgICAgICAgY29uc3QgdjMgPSB2WzNdO1xuICAgICAgICBkZXN0ID0gZGVzdCB8fCBtYXRoLnZlYzQoKTtcbiAgICAgICAgZGVzdFswXSA9IG1bMF0gKiB2MCArIG1bNF0gKiB2MSArIG1bOF0gKiB2MiArIG1bMTJdICogdjM7XG4gICAgICAgIGRlc3RbMV0gPSBtWzFdICogdjAgKyBtWzVdICogdjEgKyBtWzldICogdjIgKyBtWzEzXSAqIHYzO1xuICAgICAgICBkZXN0WzJdID0gbVsyXSAqIHYwICsgbVs2XSAqIHYxICsgbVsxMF0gKiB2MiArIG1bMTRdICogdjM7XG4gICAgICAgIGRlc3RbM10gPSBtWzNdICogdjAgKyBtWzddICogdjEgKyBtWzExXSAqIHYyICsgbVsxNV0gKiB2MztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHgtYXhpc1xuICAgICAqXG4gICAgICogQG1ldGhvZCByb3RhdGVWZWMzWFxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGRlc3QgVGhlIHJlY2VpdmluZyB2ZWMzXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBkZXN0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHJvdGF0ZVZlYzNYKGEsIGIsIGMsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgcCA9IFtdO1xuICAgICAgICBjb25zdCByID0gW107XG5cbiAgICAgICAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuICAgICAgICBwWzBdID0gYVswXSAtIGJbMF07XG4gICAgICAgIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICAgICAgcFsyXSA9IGFbMl0gLSBiWzJdO1xuXG4gICAgICAgIC8vcGVyZm9ybSByb3RhdGlvblxuICAgICAgICByWzBdID0gcFswXTtcbiAgICAgICAgclsxXSA9IHBbMV0gKiBNYXRoLmNvcyhjKSAtIHBbMl0gKiBNYXRoLnNpbihjKTtcbiAgICAgICAgclsyXSA9IHBbMV0gKiBNYXRoLnNpbihjKSArIHBbMl0gKiBNYXRoLmNvcyhjKTtcblxuICAgICAgICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIGRlc3RbMF0gPSByWzBdICsgYlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHJbMV0gKyBiWzFdO1xuICAgICAgICBkZXN0WzJdID0gclsyXSArIGJbMl07XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHktYXhpc1xuICAgICAqXG4gICAgICogQG1ldGhvZCByb3RhdGVWZWMzWVxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGRlc3QgVGhlIHJlY2VpdmluZyB2ZWMzXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBkZXN0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHJvdGF0ZVZlYzNZKGEsIGIsIGMsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgcCA9IFtdO1xuICAgICAgICBjb25zdCByID0gW107XG5cbiAgICAgICAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuICAgICAgICBwWzBdID0gYVswXSAtIGJbMF07XG4gICAgICAgIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICAgICAgcFsyXSA9IGFbMl0gLSBiWzJdO1xuXG4gICAgICAgIC8vcGVyZm9ybSByb3RhdGlvblxuICAgICAgICByWzBdID0gcFsyXSAqIE1hdGguc2luKGMpICsgcFswXSAqIE1hdGguY29zKGMpO1xuICAgICAgICByWzFdID0gcFsxXTtcbiAgICAgICAgclsyXSA9IHBbMl0gKiBNYXRoLmNvcyhjKSAtIHBbMF0gKiBNYXRoLnNpbihjKTtcblxuICAgICAgICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIGRlc3RbMF0gPSByWzBdICsgYlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHJbMV0gKyBiWzFdO1xuICAgICAgICBkZXN0WzJdID0gclsyXSArIGJbMl07XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xuICAgICAqXG4gICAgICogQG1ldGhvZCByb3RhdGVWZWMzWlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGRlc3QgVGhlIHJlY2VpdmluZyB2ZWMzXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBkZXN0XG4gICAgICogQHN0YXRpY1xuICAgICAqL1xuICAgIHJvdGF0ZVZlYzNaKGEsIGIsIGMsIGRlc3QpIHtcbiAgICAgICAgY29uc3QgcCA9IFtdO1xuICAgICAgICBjb25zdCByID0gW107XG5cbiAgICAgICAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuICAgICAgICBwWzBdID0gYVswXSAtIGJbMF07XG4gICAgICAgIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgICAgICAgcFsyXSA9IGFbMl0gLSBiWzJdO1xuXG4gICAgICAgIC8vcGVyZm9ybSByb3RhdGlvblxuICAgICAgICByWzBdID0gcFswXSAqIE1hdGguY29zKGMpIC0gcFsxXSAqIE1hdGguc2luKGMpO1xuICAgICAgICByWzFdID0gcFswXSAqIE1hdGguc2luKGMpICsgcFsxXSAqIE1hdGguY29zKGMpO1xuICAgICAgICByWzJdID0gcFsyXTtcblxuICAgICAgICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgIGRlc3RbMF0gPSByWzBdICsgYlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHJbMV0gKyBiWzFdO1xuICAgICAgICBkZXN0WzJdID0gclsyXSArIGJbMl07XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYSBmb3VyLWVsZW1lbnQgdmVjdG9yIGJ5IGEgNHg0IHByb2plY3Rpb24gbWF0cml4LlxuICAgICAqXG4gICAgICogQG1ldGhvZCBwcm9qZWN0VmVjNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHAgM0QgVmlldy1zcGFjZSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gcSAyRCBQcm9qZWN0ZWQgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gMkQgUHJvamVjdGVkIGNvb3JkaW5hdGVcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgcHJvamVjdFZlYzQocCwgcSkge1xuICAgICAgICBjb25zdCBmID0gMS4wIC8gcFszXTtcbiAgICAgICAgcSA9IHEgfHwgbWF0aC52ZWMyKCk7XG4gICAgICAgIHFbMF0gPSBwWzBdICogZjtcbiAgICAgICAgcVsxXSA9IHBbMV0gKiBmO1xuICAgICAgICByZXR1cm4gcTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5wcm9qZWN0cyBhIHRocmVlLWVsZW1lbnQgdmVjdG9yLlxuICAgICAqXG4gICAgICogQG1ldGhvZCB1bnByb2plY3RWZWMzXG4gICAgICogQHBhcmFtIHtOdW1iZXJbXX0gcCAzRCBQcm9qZWN0ZWQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHZpZXdNYXQgVmlldyBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyW119IHByb2pNYXQgUHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAc3RhdGljXG4gICAgICovXG4gICAgdW5wcm9qZWN0VmVjMzogKCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdCA9IG5ldyBGbG9hdEFycmF5VHlwZSgxNik7XG4gICAgICAgIGNvbnN0IG1hdDIgPSBuZXcgRmxvYXRBcnJheVR5cGUoMTYpO1xuICAgICAgICBjb25zdCBtYXQzID0gbmV3IEZsb2F0QXJyYXlUeXBlKDE2KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwLCB2aWV3TWF0LCBwcm9qTWF0LCBxKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1WZWMzKHRoaXMubXVsTWF0NCh0aGlzLmludmVyc2VNYXQ0KHZpZXdNYXQsIG1hdCksIHRoaXMuaW52ZXJzZU1hdDQocHJvak1hdCwgbWF0MiksIG1hdDMpLCBwLCBxKVxuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogTGluZWFybHkgaW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIDNEIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBsZXJwVmVjM1xuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBsZXJwVmVjMyh0LCB0MSwgdDIsIHAxLCBwMiwgZGVzdCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkZXN0IHx8IG1hdGgudmVjMygpO1xuICAgICAgICBjb25zdCBmID0gKHQgLSB0MSkgLyAodDIgLSB0MSk7XG4gICAgICAgIHJlc3VsdFswXSA9IHAxWzBdICsgKGYgKiAocDJbMF0gLSBwMVswXSkpO1xuICAgICAgICByZXN1bHRbMV0gPSBwMVsxXSArIChmICogKHAyWzFdIC0gcDFbMV0pKTtcbiAgICAgICAgcmVzdWx0WzJdID0gcDFbMl0gKyAoZiAqIChwMlsyXSAtIHAxWzJdKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExpbmVhcmx5IGludGVycG9sYXRlcyBiZXR3ZWVuIHR3byA0eDQgbWF0cmljZXMuXG4gICAgICogQG1ldGhvZCBsZXJwTWF0NFxuICAgICAqIEBzdGF0aWNcbiAgICAgKi9cbiAgICBsZXJwTWF0NCh0LCB0MSwgdDIsIG0xLCBtMiwgZGVzdCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkZXN0IHx8IG1hdGgubWF0NCgpO1xuICAgICAgICBjb25zdCBmID0gKHQgLSB0MSkgLyAodDIgLSB0MSk7XG4gICAgICAgIHJlc3VsdFswXSA9IG0xWzBdICsgKGYgKiAobTJbMF0gLSBtMVswXSkpO1xuICAgICAgICByZXN1bHRbMV0gPSBtMVsxXSArIChmICogKG0yWzFdIC0gbTFbMV0pKTtcbiAgICAgICAgcmVzdWx0WzJdID0gbTFbMl0gKyAoZiAqIChtMlsyXSAtIG0xWzJdKSk7XG4gICAgICAgIHJlc3VsdFszXSA9IG0xWzNdICsgKGYgKiAobTJbM10gLSBtMVszXSkpO1xuICAgICAgICByZXN1bHRbNF0gPSBtMVs0XSArIChmICogKG0yWzRdIC0gbTFbNF0pKTtcbiAgICAgICAgcmVzdWx0WzVdID0gbTFbNV0gKyAoZiAqIChtMls1XSAtIG0xWzVdKSk7XG4gICAgICAgIHJlc3VsdFs2XSA9IG0xWzZdICsgKGYgKiAobTJbNl0gLSBtMVs2XSkpO1xuICAgICAgICByZXN1bHRbN10gPSBtMVs3XSArIChmICogKG0yWzddIC0gbTFbN10pKTtcbiAgICAgICAgcmVzdWx0WzhdID0gbTFbOF0gKyAoZiAqIChtMls4XSAtIG0xWzhdKSk7XG4gICAgICAgIHJlc3VsdFs5XSA9IG0xWzldICsgKGYgKiAobTJbOV0gLSBtMVs5XSkpO1xuICAgICAgICByZXN1bHRbMTBdID0gbTFbMTBdICsgKGYgKiAobTJbMTBdIC0gbTFbMTBdKSk7XG4gICAgICAgIHJlc3VsdFsxMV0gPSBtMVsxMV0gKyAoZiAqIChtMlsxMV0gLSBtMVsxMV0pKTtcbiAgICAgICAgcmVzdWx0WzEyXSA9IG0xWzEyXSArIChmICogKG0yWzEyXSAtIG0xWzEyXSkpO1xuICAgICAgICByZXN1bHRbMTNdID0gbTFbMTNdICsgKGYgKiAobTJbMTNdIC0gbTFbMTNdKSk7XG4gICAgICAgIHJlc3VsdFsxNF0gPSBtMVsxNF0gKyAoZiAqIChtMlsxNF0gLSBtMVsxNF0pKTtcbiAgICAgICAgcmVzdWx0WzE1XSA9IG0xWzE1XSArIChmICogKG0yWzE1XSAtIG0xWzE1XSkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGEgdHdvLWRpbWVuc2lvbmFsIGFycmF5IGludG8gYSBvbmUtZGltZW5zaW9uYWwgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGZsYXR0ZW5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtBcnJheSBvZiBBcnJheXN9IGEgQSAyRCBhcnJheVxuICAgICAqIEByZXR1cm5zIEZsYXR0ZW5lZCAxRCBhcnJheVxuICAgICAqL1xuICAgIGZsYXR0ZW4oYSkge1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGxldCBpO1xuICAgICAgICBsZXQgbGVuaTtcbiAgICAgICAgbGV0IGo7XG4gICAgICAgIGxldCBsZW5qO1xuICAgICAgICBsZXQgaXRlbTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW5pID0gYS5sZW5ndGg7IGkgPCBsZW5pOyBpKyspIHtcbiAgICAgICAgICAgIGl0ZW0gPSBhW2ldO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuaiA9IGl0ZW0ubGVuZ3RoOyBqIDwgbGVuajsgaisrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaXRlbVtqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cblxuICAgIGlkZW50aXR5UXVhdGVybmlvbihkZXN0ID0gbWF0aC52ZWM0KCkpIHtcbiAgICAgICAgZGVzdFswXSA9IDAuMDtcbiAgICAgICAgZGVzdFsxXSA9IDAuMDtcbiAgICAgICAgZGVzdFsyXSA9IDAuMDtcbiAgICAgICAgZGVzdFszXSA9IDEuMDtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgcXVhdGVybmlvbiBmcm9tIEV1bGVyIGFuZ2xlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IGV1bGVyIFRoZSBFdWxlciBhbmdsZXMuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9yZGVyIEV1bGVyIGFuZ2xlIG9yZGVyOiBcIlhZWlwiLCBcIllYWlwiLCBcIlpYWVwiIGV0Yy5cbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSBbZGVzdF0gRGVzdGluYXRpb24gcXVhdGVybmlvbiwgY3JlYXRlZCBieSBkZWZhdWx0LlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJbXX0gVGhlIHF1YXRlcm5pb24uXG4gICAgICovXG4gICAgZXVsZXJUb1F1YXRlcm5pb24oZXVsZXIsIG9yZGVyLCBkZXN0ID0gbWF0aC52ZWM0KCkpIHtcbiAgICAgICAgLy8gaHR0cDovL3d3dy5tYXRod29ya3MuY29tL21hdGxhYmNlbnRyYWwvZmlsZWV4Y2hhbmdlL1xuICAgICAgICAvLyBcdDIwNjk2LWZ1bmN0aW9uLXRvLWNvbnZlcnQtYmV0d2Vlbi1kY20tZXVsZXItYW5nbGVzLXF1YXRlcm5pb25zLWFuZC1ldWxlci12ZWN0b3JzL1xuICAgICAgICAvL1x0Y29udGVudC9TcGluQ2FsYy5tXG5cbiAgICAgICAgY29uc3QgYSA9IChldWxlclswXSAqIG1hdGguREVHVE9SQUQpIC8gMjtcbiAgICAgICAgY29uc3QgYiA9IChldWxlclsxXSAqIG1hdGguREVHVE9SQUQpIC8gMjtcbiAgICAgICAgY29uc3QgYyA9IChldWxlclsyXSAqIG1hdGguREVHVE9SQUQpIC8gMjtcblxuICAgICAgICBjb25zdCBjMSA9IE1hdGguY29zKGEpO1xuICAgICAgICBjb25zdCBjMiA9IE1hdGguY29zKGIpO1xuICAgICAgICBjb25zdCBjMyA9IE1hdGguY29zKGMpO1xuICAgICAgICBjb25zdCBzMSA9IE1hdGguc2luKGEpO1xuICAgICAgICBjb25zdCBzMiA9IE1hdGguc2luKGIpO1xuICAgICAgICBjb25zdCBzMyA9IE1hdGguc2luKGMpO1xuXG4gICAgICAgIGlmIChvcmRlciA9PT0gJ1hZWicpIHtcblxuICAgICAgICAgICAgZGVzdFswXSA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcbiAgICAgICAgICAgIGRlc3RbMV0gPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgICAgICAgICBkZXN0WzJdID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuICAgICAgICAgICAgZGVzdFszXSA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVhaJykge1xuXG4gICAgICAgICAgICBkZXN0WzBdID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgICAgICAgZGVzdFsxXSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICAgICAgICAgIGRlc3RbMl0gPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG4gICAgICAgICAgICBkZXN0WzNdID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XG5cbiAgICAgICAgICAgIGRlc3RbMF0gPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICAgICAgICBkZXN0WzFdID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuICAgICAgICAgICAgZGVzdFsyXSA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcbiAgICAgICAgICAgIGRlc3RbM10gPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cbiAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcblxuICAgICAgICAgICAgZGVzdFswXSA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcbiAgICAgICAgICAgIGRlc3RbMV0gPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG4gICAgICAgICAgICBkZXN0WzJdID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgICAgICAgZGVzdFszXSA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnWVpYJykge1xuXG4gICAgICAgICAgICBkZXN0WzBdID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgICAgICAgZGVzdFsxXSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcbiAgICAgICAgICAgIGRlc3RbMl0gPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG4gICAgICAgICAgICBkZXN0WzNdID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG4gICAgICAgIH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XG5cbiAgICAgICAgICAgIGRlc3RbMF0gPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICAgICAgICBkZXN0WzFdID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgICAgICAgICAgZGVzdFsyXSA9IGMxICogYzIgKiBzMyArIHMxICogczIgKiBjMztcbiAgICAgICAgICAgIGRlc3RbM10gPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgbWF0NFRvUXVhdGVybmlvbihtLCBkZXN0ID0gbWF0aC52ZWM0KCkpIHtcbiAgICAgICAgLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cblxuICAgICAgICAvLyBBc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG4gICAgICAgIGNvbnN0IG0xMSA9IG1bMF07XG4gICAgICAgIGNvbnN0IG0xMiA9IG1bNF07XG4gICAgICAgIGNvbnN0IG0xMyA9IG1bOF07XG4gICAgICAgIGNvbnN0IG0yMSA9IG1bMV07XG4gICAgICAgIGNvbnN0IG0yMiA9IG1bNV07XG4gICAgICAgIGNvbnN0IG0yMyA9IG1bOV07XG4gICAgICAgIGNvbnN0IG0zMSA9IG1bMl07XG4gICAgICAgIGNvbnN0IG0zMiA9IG1bNl07XG4gICAgICAgIGNvbnN0IG0zMyA9IG1bMTBdO1xuICAgICAgICBsZXQgcztcblxuICAgICAgICBjb25zdCB0cmFjZSA9IG0xMSArIG0yMiArIG0zMztcblxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XG5cbiAgICAgICAgICAgIHMgPSAwLjUgLyBNYXRoLnNxcnQodHJhY2UgKyAxLjApO1xuXG4gICAgICAgICAgICBkZXN0WzNdID0gMC4yNSAvIHM7XG4gICAgICAgICAgICBkZXN0WzBdID0gKG0zMiAtIG0yMykgKiBzO1xuICAgICAgICAgICAgZGVzdFsxXSA9IChtMTMgLSBtMzEpICogcztcbiAgICAgICAgICAgIGRlc3RbMl0gPSAobTIxIC0gbTEyKSAqIHM7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtMTEgPiBtMjIgJiYgbTExID4gbTMzKSB7XG5cbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcblxuICAgICAgICAgICAgZGVzdFszXSA9IChtMzIgLSBtMjMpIC8gcztcbiAgICAgICAgICAgIGRlc3RbMF0gPSAwLjI1ICogcztcbiAgICAgICAgICAgIGRlc3RbMV0gPSAobTEyICsgbTIxKSAvIHM7XG4gICAgICAgICAgICBkZXN0WzJdID0gKG0xMyArIG0zMSkgLyBzO1xuXG4gICAgICAgIH0gZWxzZSBpZiAobTIyID4gbTMzKSB7XG5cbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcblxuICAgICAgICAgICAgZGVzdFszXSA9IChtMTMgLSBtMzEpIC8gcztcbiAgICAgICAgICAgIGRlc3RbMF0gPSAobTEyICsgbTIxKSAvIHM7XG4gICAgICAgICAgICBkZXN0WzFdID0gMC4yNSAqIHM7XG4gICAgICAgICAgICBkZXN0WzJdID0gKG0yMyArIG0zMikgLyBzO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKTtcblxuICAgICAgICAgICAgZGVzdFszXSA9IChtMjEgLSBtMTIpIC8gcztcbiAgICAgICAgICAgIGRlc3RbMF0gPSAobTEzICsgbTMxKSAvIHM7XG4gICAgICAgICAgICBkZXN0WzFdID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICAgICAgZGVzdFsyXSA9IDAuMjUgKiBzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIHZlYzNQYWlyVG9RdWF0ZXJuaW9uKHUsIHYsIGRlc3QgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBjb25zdCBub3JtX3Vfbm9ybV92ID0gTWF0aC5zcXJ0KG1hdGguZG90VmVjMyh1LCB1KSAqIG1hdGguZG90VmVjMyh2LCB2KSk7XG4gICAgICAgIGxldCByZWFsX3BhcnQgPSBub3JtX3Vfbm9ybV92ICsgbWF0aC5kb3RWZWMzKHUsIHYpO1xuXG4gICAgICAgIGlmIChyZWFsX3BhcnQgPCAwLjAwMDAwMDAxICogbm9ybV91X25vcm1fdikge1xuXG4gICAgICAgICAgICAvLyBJZiB1IGFuZCB2IGFyZSBleGFjdGx5IG9wcG9zaXRlLCByb3RhdGUgMTgwIGRlZ3JlZXNcbiAgICAgICAgICAgIC8vIGFyb3VuZCBhbiBhcmJpdHJhcnkgb3J0aG9nb25hbCBheGlzLiBBeGlzIG5vcm1hbGlzYXRpb25cbiAgICAgICAgICAgIC8vIGNhbiBoYXBwZW4gbGF0ZXIsIHdoZW4gd2Ugbm9ybWFsaXNlIHRoZSBxdWF0ZXJuaW9uLlxuXG4gICAgICAgICAgICByZWFsX3BhcnQgPSAwLjA7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh1WzBdKSA+IE1hdGguYWJzKHVbMl0pKSB7XG5cbiAgICAgICAgICAgICAgICBkZXN0WzBdID0gLXVbMV07XG4gICAgICAgICAgICAgICAgZGVzdFsxXSA9IHVbMF07XG4gICAgICAgICAgICAgICAgZGVzdFsyXSA9IDA7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVzdFswXSA9IDA7XG4gICAgICAgICAgICAgICAgZGVzdFsxXSA9IC11WzJdO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSB1WzFdXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBidWlsZCBxdWF0ZXJuaW9uIHRoZSBzdGFuZGFyZCB3YXkuXG4gICAgICAgICAgICBtYXRoLmNyb3NzM1ZlYzModSwgdiwgZGVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzNdID0gcmVhbF9wYXJ0O1xuXG4gICAgICAgIHJldHVybiBtYXRoLm5vcm1hbGl6ZVF1YXRlcm5pb24oZGVzdCk7XG4gICAgfSxcblxuICAgIGFuZ2xlQXhpc1RvUXVhdGVybmlvbihhbmdsZUF4aXMsIGRlc3QgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSBhbmdsZUF4aXNbM10gLyAyLjA7XG4gICAgICAgIGNvbnN0IGZzaW4gPSBNYXRoLnNpbihoYWxmQW5nbGUpO1xuICAgICAgICBkZXN0WzBdID0gZnNpbiAqIGFuZ2xlQXhpc1swXTtcbiAgICAgICAgZGVzdFsxXSA9IGZzaW4gKiBhbmdsZUF4aXNbMV07XG4gICAgICAgIGRlc3RbMl0gPSBmc2luICogYW5nbGVBeGlzWzJdO1xuICAgICAgICBkZXN0WzNdID0gTWF0aC5jb3MoaGFsZkFuZ2xlKTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIHF1YXRlcm5pb25Ub0V1bGVyOiAoKCgpID0+IHtcbiAgICAgICAgY29uc3QgbWF0ID0gbmV3IEZsb2F0QXJyYXlUeXBlKDE2KTtcbiAgICAgICAgcmV0dXJuIChxLCBvcmRlciwgZGVzdCkgPT4ge1xuICAgICAgICAgICAgZGVzdCA9IGRlc3QgfHwgbWF0aC52ZWMzKCk7XG4gICAgICAgICAgICBtYXRoLnF1YXRlcm5pb25Ub1JvdGF0aW9uTWF0NChxLCBtYXQpO1xuICAgICAgICAgICAgbWF0aC5tYXQ0VG9FdWxlcihtYXQsIG9yZGVyLCBkZXN0KTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgbXVsUXVhdGVybmlvbnMocCwgcSwgZGVzdCA9IG1hdGgudmVjNCgpKSB7XG4gICAgICAgIGNvbnN0IHAwID0gcFswXTtcbiAgICAgICAgY29uc3QgcDEgPSBwWzFdO1xuICAgICAgICBjb25zdCBwMiA9IHBbMl07XG4gICAgICAgIGNvbnN0IHAzID0gcFszXTtcbiAgICAgICAgY29uc3QgcTAgPSBxWzBdO1xuICAgICAgICBjb25zdCBxMSA9IHFbMV07XG4gICAgICAgIGNvbnN0IHEyID0gcVsyXTtcbiAgICAgICAgY29uc3QgcTMgPSBxWzNdO1xuICAgICAgICBkZXN0WzBdID0gcDMgKiBxMCArIHAwICogcTMgKyBwMSAqIHEyIC0gcDIgKiBxMTtcbiAgICAgICAgZGVzdFsxXSA9IHAzICogcTEgKyBwMSAqIHEzICsgcDIgKiBxMCAtIHAwICogcTI7XG4gICAgICAgIGRlc3RbMl0gPSBwMyAqIHEyICsgcDIgKiBxMyArIHAwICogcTEgLSBwMSAqIHEwO1xuICAgICAgICBkZXN0WzNdID0gcDMgKiBxMyAtIHAwICogcTAgLSBwMSAqIHExIC0gcDIgKiBxMjtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIHZlYzNBcHBseVF1YXRlcm5pb24ocSwgdmVjLCBkZXN0ID0gbWF0aC52ZWMzKCkpIHtcbiAgICAgICAgY29uc3QgeCA9IHZlY1swXTtcbiAgICAgICAgY29uc3QgeSA9IHZlY1sxXTtcbiAgICAgICAgY29uc3QgeiA9IHZlY1syXTtcblxuICAgICAgICBjb25zdCBxeCA9IHFbMF07XG4gICAgICAgIGNvbnN0IHF5ID0gcVsxXTtcbiAgICAgICAgY29uc3QgcXogPSBxWzJdO1xuICAgICAgICBjb25zdCBxdyA9IHFbM107XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcblxuICAgICAgICBjb25zdCBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgICAgICAgY29uc3QgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG4gICAgICAgIGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICAgICAgICBjb25zdCBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG4gICAgICAgIGRlc3RbMF0gPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICAgICAgICBkZXN0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICAgICAgZGVzdFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfSxcblxuICAgIHF1YXRlcm5pb25Ub01hdDQocSwgZGVzdCkge1xuXG4gICAgICAgIGRlc3QgPSBtYXRoLmlkZW50aXR5TWF0NChkZXN0KTtcblxuICAgICAgICBjb25zdCBxMCA9IHFbMF07ICAvL3hcbiAgICAgICAgY29uc3QgcTEgPSBxWzFdOyAgLy95XG4gICAgICAgIGNvbnN0IHEyID0gcVsyXTsgIC8velxuICAgICAgICBjb25zdCBxMyA9IHFbM107ICAvL3dcblxuICAgICAgICBjb25zdCB0eCA9IDIuMCAqIHEwO1xuICAgICAgICBjb25zdCB0eSA9IDIuMCAqIHExO1xuICAgICAgICBjb25zdCB0eiA9IDIuMCAqIHEyO1xuXG4gICAgICAgIGNvbnN0IHR3eCA9IHR4ICogcTM7XG4gICAgICAgIGNvbnN0IHR3eSA9IHR5ICogcTM7XG4gICAgICAgIGNvbnN0IHR3eiA9IHR6ICogcTM7XG5cbiAgICAgICAgY29uc3QgdHh4ID0gdHggKiBxMDtcbiAgICAgICAgY29uc3QgdHh5ID0gdHkgKiBxMDtcbiAgICAgICAgY29uc3QgdHh6ID0gdHogKiBxMDtcblxuICAgICAgICBjb25zdCB0eXkgPSB0eSAqIHExO1xuICAgICAgICBjb25zdCB0eXogPSB0eiAqIHExO1xuICAgICAgICBjb25zdCB0enogPSB0eiAqIHEyO1xuXG4gICAgICAgIGRlc3RbMF0gPSAxLjAgLSAodHl5ICsgdHp6KTtcbiAgICAgICAgZGVzdFsxXSA9IHR4eSArIHR3ejtcbiAgICAgICAgZGVzdFsyXSA9IHR4eiAtIHR3eTtcblxuICAgICAgICBkZXN0WzRdID0gdHh5IC0gdHd6O1xuICAgICAgICBkZXN0WzVdID0gMS4wIC0gKHR4eCArIHR6eik7XG4gICAgICAgIGRlc3RbNl0gPSB0eXogKyB0d3g7XG5cbiAgICAgICAgZGVzdFs4XSA9IHR4eiArIHR3eTtcbiAgICAgICAgZGVzdFs5XSA9IHR5eiAtIHR3eDtcblxuICAgICAgICBkZXN0WzEwXSA9IDEuMCAtICh0eHggKyB0eXkpO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICBxdWF0ZXJuaW9uVG9Sb3RhdGlvbk1hdDQocSwgbSkge1xuICAgICAgICBjb25zdCB4ID0gcVswXTtcbiAgICAgICAgY29uc3QgeSA9IHFbMV07XG4gICAgICAgIGNvbnN0IHogPSBxWzJdO1xuICAgICAgICBjb25zdCB3ID0gcVszXTtcblxuICAgICAgICBjb25zdCB4MiA9IHggKyB4O1xuICAgICAgICBjb25zdCB5MiA9IHkgKyB5O1xuICAgICAgICBjb25zdCB6MiA9IHogKyB6O1xuICAgICAgICBjb25zdCB4eCA9IHggKiB4MjtcbiAgICAgICAgY29uc3QgeHkgPSB4ICogeTI7XG4gICAgICAgIGNvbnN0IHh6ID0geCAqIHoyO1xuICAgICAgICBjb25zdCB5eSA9IHkgKiB5MjtcbiAgICAgICAgY29uc3QgeXogPSB5ICogejI7XG4gICAgICAgIGNvbnN0IHp6ID0geiAqIHoyO1xuICAgICAgICBjb25zdCB3eCA9IHcgKiB4MjtcbiAgICAgICAgY29uc3Qgd3kgPSB3ICogeTI7XG4gICAgICAgIGNvbnN0IHd6ID0gdyAqIHoyO1xuXG4gICAgICAgIG1bMF0gPSAxIC0gKHl5ICsgenopO1xuICAgICAgICBtWzRdID0geHkgLSB3ejtcbiAgICAgICAgbVs4XSA9IHh6ICsgd3k7XG5cbiAgICAgICAgbVsxXSA9IHh5ICsgd3o7XG4gICAgICAgIG1bNV0gPSAxIC0gKHh4ICsgenopO1xuICAgICAgICBtWzldID0geXogLSB3eDtcblxuICAgICAgICBtWzJdID0geHogLSB3eTtcbiAgICAgICAgbVs2XSA9IHl6ICsgd3g7XG4gICAgICAgIG1bMTBdID0gMSAtICh4eCArIHl5KTtcblxuICAgICAgICAvLyBsYXN0IGNvbHVtblxuICAgICAgICBtWzNdID0gMDtcbiAgICAgICAgbVs3XSA9IDA7XG4gICAgICAgIG1bMTFdID0gMDtcblxuICAgICAgICAvLyBib3R0b20gcm93XG4gICAgICAgIG1bMTJdID0gMDtcbiAgICAgICAgbVsxM10gPSAwO1xuICAgICAgICBtWzE0XSA9IDA7XG4gICAgICAgIG1bMTVdID0gMTtcblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9LFxuXG4gICAgbm9ybWFsaXplUXVhdGVybmlvbihxLCBkZXN0ID0gcSkge1xuICAgICAgICBjb25zdCBsZW4gPSBtYXRoLmxlblZlYzQoW3FbMF0sIHFbMV0sIHFbMl0sIHFbM11dKTtcbiAgICAgICAgZGVzdFswXSA9IHFbMF0gLyBsZW47XG4gICAgICAgIGRlc3RbMV0gPSBxWzFdIC8gbGVuO1xuICAgICAgICBkZXN0WzJdID0gcVsyXSAvIGxlbjtcbiAgICAgICAgZGVzdFszXSA9IHFbM10gLyBsZW47XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH0sXG5cbiAgICBjb25qdWdhdGVRdWF0ZXJuaW9uKHEsIGRlc3QgPSBxKSB7XG4gICAgICAgIGRlc3RbMF0gPSAtcVswXTtcbiAgICAgICAgZGVzdFsxXSA9IC1xWzFdO1xuICAgICAgICBkZXN0WzJdID0gLXFbMl07XG4gICAgICAgIGRlc3RbM10gPSBxWzNdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgaW52ZXJzZVF1YXRlcm5pb24ocSwgZGVzdCkge1xuICAgICAgICByZXR1cm4gbWF0aC5ub3JtYWxpemVRdWF0ZXJuaW9uKG1hdGguY29uanVnYXRlUXVhdGVybmlvbihxLCBkZXN0KSk7XG4gICAgfSxcblxuICAgIHF1YXRlcm5pb25Ub0FuZ2xlQXhpcyhxLCBhbmdsZUF4aXMgPSBtYXRoLnZlYzQoKSkge1xuICAgICAgICBxID0gbWF0aC5ub3JtYWxpemVRdWF0ZXJuaW9uKHEsIHRlbXBWZWM0KTtcbiAgICAgICAgY29uc3QgcTMgPSBxWzNdO1xuICAgICAgICBjb25zdCBhbmdsZSA9IDIgKiBNYXRoLmFjb3MocTMpO1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zcXJ0KDEgLSBxMyAqIHEzKTtcbiAgICAgICAgaWYgKHMgPCAwLjAwMSkgeyAvLyB0ZXN0IHRvIGF2b2lkIGRpdmlkZSBieSB6ZXJvLCBzIGlzIGFsd2F5cyBwb3NpdGl2ZSBkdWUgdG8gc3FydFxuICAgICAgICAgICAgYW5nbGVBeGlzWzBdID0gcVswXTtcbiAgICAgICAgICAgIGFuZ2xlQXhpc1sxXSA9IHFbMV07XG4gICAgICAgICAgICBhbmdsZUF4aXNbMl0gPSBxWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5nbGVBeGlzWzBdID0gcVswXSAvIHM7XG4gICAgICAgICAgICBhbmdsZUF4aXNbMV0gPSBxWzFdIC8gcztcbiAgICAgICAgICAgIGFuZ2xlQXhpc1syXSA9IHFbMl0gLyBzO1xuICAgICAgICB9XG4gICAgICAgIGFuZ2xlQXhpc1szXSA9IGFuZ2xlOyAvLyAqIDU3LjI5NTc3OTU3OTtcbiAgICAgICAgcmV0dXJuIGFuZ2xlQXhpcztcbiAgICB9LFxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBCb3VuZGFyaWVzXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcsIHVuaW5pdGlhbGl6ZWQgM0QgYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQUFCQjModmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUodmFsdWVzIHx8IDYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3LCB1bmluaXRpYWxpemVkIDJEIGF4aXMtYWxpZ25lZCBib3VuZGluZyBib3guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEFBQkIyKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0QXJyYXlUeXBlKHZhbHVlcyB8fCA0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldywgdW5pbml0aWFsaXplZCAzRCBvcmllbnRlZCBib3VuZGluZyBib3ggKE9CQikuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE9CQjModmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUodmFsdWVzIHx8IDMyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldywgdW5pbml0aWFsaXplZCAyRCBvcmllbnRlZCBib3VuZGluZyBib3ggKE9CQikuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE9CQjIodmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUodmFsdWVzIHx8IDE2KTtcbiAgICB9LFxuXG4gICAgLyoqIFJldHVybnMgYSBuZXcgM0QgYm91bmRpbmcgc3BoZXJlICovXG4gICAgU3BoZXJlMyh4LCB5LCB6LCByKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXRBcnJheVR5cGUoW3gsIHksIHosIHJdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhbiBPQkIzIGJ5IGEgNHg0IG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdHJhbnNmb3JtT0JCMyhtLCBwLCBwMiA9IHApIHtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IGxlbiA9IHAubGVuZ3RoO1xuXG4gICAgICAgIGxldCB4O1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IHo7XG5cbiAgICAgICAgY29uc3QgbTAgPSBtWzBdO1xuICAgICAgICBjb25zdCBtMSA9IG1bMV07XG4gICAgICAgIGNvbnN0IG0yID0gbVsyXTtcbiAgICAgICAgY29uc3QgbTMgPSBtWzNdO1xuICAgICAgICBjb25zdCBtNCA9IG1bNF07XG4gICAgICAgIGNvbnN0IG01ID0gbVs1XTtcbiAgICAgICAgY29uc3QgbTYgPSBtWzZdO1xuICAgICAgICBjb25zdCBtNyA9IG1bN107XG4gICAgICAgIGNvbnN0IG04ID0gbVs4XTtcbiAgICAgICAgY29uc3QgbTkgPSBtWzldO1xuICAgICAgICBjb25zdCBtMTAgPSBtWzEwXTtcbiAgICAgICAgY29uc3QgbTExID0gbVsxMV07XG4gICAgICAgIGNvbnN0IG0xMiA9IG1bMTJdO1xuICAgICAgICBjb25zdCBtMTMgPSBtWzEzXTtcbiAgICAgICAgY29uc3QgbTE0ID0gbVsxNF07XG4gICAgICAgIGNvbnN0IG0xNSA9IG1bMTVdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuXG4gICAgICAgICAgICB4ID0gcFtpICsgMF07XG4gICAgICAgICAgICB5ID0gcFtpICsgMV07XG4gICAgICAgICAgICB6ID0gcFtpICsgMl07XG5cbiAgICAgICAgICAgIHAyW2kgKyAwXSA9IChtMCAqIHgpICsgKG00ICogeSkgKyAobTggKiB6KSArIG0xMjtcbiAgICAgICAgICAgIHAyW2kgKyAxXSA9IChtMSAqIHgpICsgKG01ICogeSkgKyAobTkgKiB6KSArIG0xMztcbiAgICAgICAgICAgIHAyW2kgKyAyXSA9IChtMiAqIHgpICsgKG02ICogeSkgKyAobTEwICogeikgKyBtMTQ7XG4gICAgICAgICAgICBwMltpICsgM10gPSAobTMgKiB4KSArIChtNyAqIHkpICsgKG0xMSAqIHopICsgbTE1O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHAyO1xuICAgIH0sXG5cbiAgICAvKiogUmV0dXJucyB0cnVlIGlmIHRoZSBmaXJzdCBBQUJCIGNvbnRhaW5zIHRoZSBzZWNvbmQgQUFCQi5cbiAgICAgKiBAcGFyYW0gYWFiYjFcbiAgICAgKiBAcGFyYW0gYWFiYjJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBjb250YWluc0FBQkIzOiBmdW5jdGlvbiAoYWFiYjEsIGFhYmIyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IChcbiAgICAgICAgICAgIGFhYmIxWzBdIDw9IGFhYmIyWzBdICYmIGFhYmIyWzNdIDw9IGFhYmIxWzNdICYmXG4gICAgICAgICAgICBhYWJiMVsxXSA8PSBhYWJiMlsxXSAmJiBhYWJiMls0XSA8PSBhYWJiMVs0XSAmJlxuICAgICAgICAgICAgYWFiYjFbMl0gPD0gYWFiYjJbMl0gJiYgYWFiYjJbNV0gPD0gYWFiYjFbNV0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRpYWdvbmFsIHNpemUgb2YgYW4gQUFCQjMgZ2l2ZW4gYXMgbWluaW1hIGFuZCBtYXhpbWEuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldEFBQkIzRGlhZzogKCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgbWluID0gbmV3IEZsb2F0QXJyYXlUeXBlKDMpO1xuICAgICAgICBjb25zdCBtYXggPSBuZXcgRmxvYXRBcnJheVR5cGUoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzID0gbmV3IEZsb2F0QXJyYXlUeXBlKDMpO1xuXG4gICAgICAgIHJldHVybiBhYWJiID0+IHtcblxuICAgICAgICAgICAgbWluWzBdID0gYWFiYlswXTtcbiAgICAgICAgICAgIG1pblsxXSA9IGFhYmJbMV07XG4gICAgICAgICAgICBtaW5bMl0gPSBhYWJiWzJdO1xuXG4gICAgICAgICAgICBtYXhbMF0gPSBhYWJiWzNdO1xuICAgICAgICAgICAgbWF4WzFdID0gYWFiYls0XTtcbiAgICAgICAgICAgIG1heFsyXSA9IGFhYmJbNV07XG5cbiAgICAgICAgICAgIG1hdGguc3ViVmVjMyhtYXgsIG1pbiwgdGVtcFZlYzMpO1xuXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMobWF0aC5sZW5WZWMzKHRlbXBWZWMzKSk7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBkaWFnb25hbCBib3VuZGFyeSBzaXplIHRoYXQgaXMgc3ltbWV0cmljYWwgYWJvdXQgdGhlIGdpdmVuIHBvaW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRBQUJCM0RpYWdQb2ludDogKCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgbWluID0gbmV3IEZsb2F0QXJyYXlUeXBlKDMpO1xuICAgICAgICBjb25zdCBtYXggPSBuZXcgRmxvYXRBcnJheVR5cGUoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzID0gbmV3IEZsb2F0QXJyYXlUeXBlKDMpO1xuXG4gICAgICAgIHJldHVybiAoYWFiYiwgcCkgPT4ge1xuXG4gICAgICAgICAgICBtaW5bMF0gPSBhYWJiWzBdO1xuICAgICAgICAgICAgbWluWzFdID0gYWFiYlsxXTtcbiAgICAgICAgICAgIG1pblsyXSA9IGFhYmJbMl07XG5cbiAgICAgICAgICAgIG1heFswXSA9IGFhYmJbM107XG4gICAgICAgICAgICBtYXhbMV0gPSBhYWJiWzRdO1xuICAgICAgICAgICAgbWF4WzJdID0gYWFiYls1XTtcblxuICAgICAgICAgICAgY29uc3QgZGlhZ1ZlYyA9IG1hdGguc3ViVmVjMyhtYXgsIG1pbiwgdGVtcFZlYzMpO1xuXG4gICAgICAgICAgICBjb25zdCB4bmVnID0gcFswXSAtIGFhYmJbMF07XG4gICAgICAgICAgICBjb25zdCB4cG9zID0gYWFiYlszXSAtIHBbMF07XG4gICAgICAgICAgICBjb25zdCB5bmVnID0gcFsxXSAtIGFhYmJbMV07XG4gICAgICAgICAgICBjb25zdCB5cG9zID0gYWFiYls0XSAtIHBbMV07XG4gICAgICAgICAgICBjb25zdCB6bmVnID0gcFsyXSAtIGFhYmJbMl07XG4gICAgICAgICAgICBjb25zdCB6cG9zID0gYWFiYls1XSAtIHBbMl07XG5cbiAgICAgICAgICAgIGRpYWdWZWNbMF0gKz0gKHhuZWcgPiB4cG9zKSA/IHhuZWcgOiB4cG9zO1xuICAgICAgICAgICAgZGlhZ1ZlY1sxXSArPSAoeW5lZyA+IHlwb3MpID8geW5lZyA6IHlwb3M7XG4gICAgICAgICAgICBkaWFnVmVjWzJdICs9ICh6bmVnID4genBvcykgPyB6bmVnIDogenBvcztcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWJzKG1hdGgubGVuVmVjMyhkaWFnVmVjKSk7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmVhIG9mIGFuIEFBQkIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldEFBQkIzQXJlYShhYWJiKSB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gKGFhYmJbM10gLSBhYWJiWzBdKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gKGFhYmJbNF0gLSBhYWJiWzFdKTtcbiAgICAgICAgY29uc3QgZGVwdGggPSAoYWFiYls1XSAtIGFhYmJbMl0pO1xuICAgICAgICByZXR1cm4gKHdpZHRoICogaGVpZ2h0ICogZGVwdGgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjZW50ZXIgb2YgYW4gQUFCQi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0QUFCQjNDZW50ZXIoYWFiYiwgZGVzdCkge1xuICAgICAgICBjb25zdCByID0gZGVzdCB8fCBtYXRoLnZlYzMoKTtcblxuICAgICAgICByWzBdID0gKGFhYmJbMF0gKyBhYWJiWzNdKSAvIDI7XG4gICAgICAgIHJbMV0gPSAoYWFiYlsxXSArIGFhYmJbNF0pIC8gMjtcbiAgICAgICAgclsyXSA9IChhYWJiWzJdICsgYWFiYls1XSkgLyAyO1xuXG4gICAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjZW50ZXIgb2YgYSAyRCBBQUJCLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRBQUJCMkNlbnRlcihhYWJiLCBkZXN0KSB7XG4gICAgICAgIGNvbnN0IHIgPSBkZXN0IHx8IG1hdGgudmVjMigpO1xuXG4gICAgICAgIHJbMF0gPSAoYWFiYlsyXSArIGFhYmJbMF0pIC8gMjtcbiAgICAgICAgclsxXSA9IChhYWJiWzNdICsgYWFiYlsxXSkgLyAyO1xuXG4gICAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZXMgYSAzRCBheGlzLWFsaWduZWQgYm91bmRhcnksIHJlYWR5IHRvIGV4cGFuZCB0byBmaXQgM0QgcG9pbnRzLlxuICAgICAqIENyZWF0ZXMgbmV3IEFBQkIgaWYgbm9uZSBzdXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29sbGFwc2VBQUJCMyhhYWJiID0gbWF0aC5BQUJCMygpKSB7XG4gICAgICAgIGFhYmJbMF0gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGFhYmJbMV0gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGFhYmJbMl0gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGFhYmJbM10gPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgIGFhYmJbNF0gPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgIGFhYmJbNV0gPSBtYXRoLk1JTl9ET1VCTEU7XG5cbiAgICAgICAgcmV0dXJuIGFhYmI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFuIGF4aXMtYWxpZ25lZCAzRCBib3VuZGFyeSBpbnRvIGFuIG9yaWVudGVkIGJvdW5kYXJ5IGNvbnNpc3Rpbmcgb2ZcbiAgICAgKiBhbiBhcnJheSBvZiBlaWdodCAzRCBwb3NpdGlvbnMsIG9uZSBmb3IgZWFjaCBjb3JuZXIgb2YgdGhlIGJvdW5kYXJ5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBBQUJCM1RvT0JCMyhhYWJiLCBvYmIgPSBtYXRoLk9CQjMoKSkge1xuICAgICAgICBvYmJbMF0gPSBhYWJiWzBdO1xuICAgICAgICBvYmJbMV0gPSBhYWJiWzFdO1xuICAgICAgICBvYmJbMl0gPSBhYWJiWzJdO1xuICAgICAgICBvYmJbM10gPSAxO1xuXG4gICAgICAgIG9iYls0XSA9IGFhYmJbM107XG4gICAgICAgIG9iYls1XSA9IGFhYmJbMV07XG4gICAgICAgIG9iYls2XSA9IGFhYmJbMl07XG4gICAgICAgIG9iYls3XSA9IDE7XG5cbiAgICAgICAgb2JiWzhdID0gYWFiYlszXTtcbiAgICAgICAgb2JiWzldID0gYWFiYls0XTtcbiAgICAgICAgb2JiWzEwXSA9IGFhYmJbMl07XG4gICAgICAgIG9iYlsxMV0gPSAxO1xuXG4gICAgICAgIG9iYlsxMl0gPSBhYWJiWzBdO1xuICAgICAgICBvYmJbMTNdID0gYWFiYls0XTtcbiAgICAgICAgb2JiWzE0XSA9IGFhYmJbMl07XG4gICAgICAgIG9iYlsxNV0gPSAxO1xuXG4gICAgICAgIG9iYlsxNl0gPSBhYWJiWzBdO1xuICAgICAgICBvYmJbMTddID0gYWFiYlsxXTtcbiAgICAgICAgb2JiWzE4XSA9IGFhYmJbNV07XG4gICAgICAgIG9iYlsxOV0gPSAxO1xuXG4gICAgICAgIG9iYlsyMF0gPSBhYWJiWzNdO1xuICAgICAgICBvYmJbMjFdID0gYWFiYlsxXTtcbiAgICAgICAgb2JiWzIyXSA9IGFhYmJbNV07XG4gICAgICAgIG9iYlsyM10gPSAxO1xuXG4gICAgICAgIG9iYlsyNF0gPSBhYWJiWzNdO1xuICAgICAgICBvYmJbMjVdID0gYWFiYls0XTtcbiAgICAgICAgb2JiWzI2XSA9IGFhYmJbNV07XG4gICAgICAgIG9iYlsyN10gPSAxO1xuXG4gICAgICAgIG9iYlsyOF0gPSBhYWJiWzBdO1xuICAgICAgICBvYmJbMjldID0gYWFiYls0XTtcbiAgICAgICAgb2JiWzMwXSA9IGFhYmJbNV07XG4gICAgICAgIG9iYlszMV0gPSAxO1xuXG4gICAgICAgIHJldHVybiBvYmI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBtaW5pbXVtIGF4aXMtYWxpZ25lZCAzRCBib3VuZGFyeSBlbmNsb3NpbmcgdGhlIGhvbW9nZW5lb3VzIDNEIHBvaW50cyAoeCx5LHosdykgZ2l2ZW4gaW4gYSBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBvc2l0aW9uczNUb0FBQkIzOiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCBwID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKHBvc2l0aW9ucywgYWFiYiwgcG9zaXRpb25zRGVjb2RlTWF0cml4KSA9PiB7XG4gICAgICAgICAgICBhYWJiID0gYWFiYiB8fCBtYXRoLkFBQkIzKCk7XG5cbiAgICAgICAgICAgIGxldCB4bWluID0gbWF0aC5NQVhfRE9VQkxFO1xuICAgICAgICAgICAgbGV0IHltaW4gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgICAgICBsZXQgem1pbiA9IG1hdGguTUFYX0RPVUJMRTtcbiAgICAgICAgICAgIGxldCB4bWF4ID0gbWF0aC5NSU5fRE9VQkxFO1xuICAgICAgICAgICAgbGV0IHltYXggPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgICAgICBsZXQgem1heCA9IG1hdGguTUlOX0RPVUJMRTtcblxuICAgICAgICAgICAgbGV0IHg7XG4gICAgICAgICAgICBsZXQgeTtcbiAgICAgICAgICAgIGxldCB6O1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAzKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25zRGVjb2RlTWF0cml4KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcFswXSA9IHBvc2l0aW9uc1tpICsgMF07XG4gICAgICAgICAgICAgICAgICAgIHBbMV0gPSBwb3NpdGlvbnNbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICBwWzJdID0gcG9zaXRpb25zW2kgKyAyXTtcblxuICAgICAgICAgICAgICAgICAgICBtYXRoLmRlY29tcHJlc3NQb3NpdGlvbihwLCBwb3NpdGlvbnNEZWNvZGVNYXRyaXgsIHApO1xuXG4gICAgICAgICAgICAgICAgICAgIHggPSBwWzBdO1xuICAgICAgICAgICAgICAgICAgICB5ID0gcFsxXTtcbiAgICAgICAgICAgICAgICAgICAgeiA9IHBbMl07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0gcG9zaXRpb25zW2kgKyAwXTtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHBvc2l0aW9uc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgIHogPSBwb3NpdGlvbnNbaSArIDJdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4IDwgeG1pbikge1xuICAgICAgICAgICAgICAgICAgICB4bWluID0geDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeSA8IHltaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgeW1pbiA9IHk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHogPCB6bWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHptaW4gPSB6O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4ID4geG1heCkge1xuICAgICAgICAgICAgICAgICAgICB4bWF4ID0geDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeSA+IHltYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgeW1heCA9IHk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHogPiB6bWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHptYXggPSB6O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWFiYlswXSA9IHhtaW47XG4gICAgICAgICAgICBhYWJiWzFdID0geW1pbjtcbiAgICAgICAgICAgIGFhYmJbMl0gPSB6bWluO1xuICAgICAgICAgICAgYWFiYlszXSA9IHhtYXg7XG4gICAgICAgICAgICBhYWJiWzRdID0geW1heDtcbiAgICAgICAgICAgIGFhYmJbNV0gPSB6bWF4O1xuXG4gICAgICAgICAgICByZXR1cm4gYWFiYjtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBtaW5pbXVtIGF4aXMtYWxpZ25lZCAzRCBib3VuZGFyeSBlbmNsb3NpbmcgdGhlIGhvbW9nZW5lb3VzIDNEIHBvaW50cyAoeCx5LHosdykgZ2l2ZW4gaW4gYSBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE9CQjNUb0FBQkIzKG9iYiwgYWFiYiA9IG1hdGguQUFCQjMoKSkge1xuICAgICAgICBsZXQgeG1pbiA9IG1hdGguTUFYX0RPVUJMRTtcbiAgICAgICAgbGV0IHltaW4gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGxldCB6bWluID0gbWF0aC5NQVhfRE9VQkxFO1xuICAgICAgICBsZXQgeG1heCA9IG1hdGguTUlOX0RPVUJMRTtcbiAgICAgICAgbGV0IHltYXggPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgIGxldCB6bWF4ID0gbWF0aC5NSU5fRE9VQkxFO1xuXG4gICAgICAgIGxldCB4O1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IHo7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG9iYi5sZW5ndGg7IGkgPCBsZW47IGkgKz0gNCkge1xuXG4gICAgICAgICAgICB4ID0gb2JiW2kgKyAwXTtcbiAgICAgICAgICAgIHkgPSBvYmJbaSArIDFdO1xuICAgICAgICAgICAgeiA9IG9iYltpICsgMl07XG5cbiAgICAgICAgICAgIGlmICh4IDwgeG1pbikge1xuICAgICAgICAgICAgICAgIHhtaW4gPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeSA8IHltaW4pIHtcbiAgICAgICAgICAgICAgICB5bWluID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHogPCB6bWluKSB7XG4gICAgICAgICAgICAgICAgem1pbiA9IHo7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh4ID4geG1heCkge1xuICAgICAgICAgICAgICAgIHhtYXggPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeSA+IHltYXgpIHtcbiAgICAgICAgICAgICAgICB5bWF4ID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHogPiB6bWF4KSB7XG4gICAgICAgICAgICAgICAgem1heCA9IHo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhYWJiWzBdID0geG1pbjtcbiAgICAgICAgYWFiYlsxXSA9IHltaW47XG4gICAgICAgIGFhYmJbMl0gPSB6bWluO1xuICAgICAgICBhYWJiWzNdID0geG1heDtcbiAgICAgICAgYWFiYls0XSA9IHltYXg7XG4gICAgICAgIGFhYmJbNV0gPSB6bWF4O1xuXG4gICAgICAgIHJldHVybiBhYWJiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgbWluaW11bSBheGlzLWFsaWduZWQgM0QgYm91bmRhcnkgZW5jbG9zaW5nIHRoZSBnaXZlbiAzRCBwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBvaW50czNUb0FBQkIzKHBvaW50cywgYWFiYiA9IG1hdGguQUFCQjMoKSkge1xuICAgICAgICBsZXQgeG1pbiA9IG1hdGguTUFYX0RPVUJMRTtcbiAgICAgICAgbGV0IHltaW4gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGxldCB6bWluID0gbWF0aC5NQVhfRE9VQkxFO1xuICAgICAgICBsZXQgeG1heCA9IG1hdGguTUlOX0RPVUJMRTtcbiAgICAgICAgbGV0IHltYXggPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgIGxldCB6bWF4ID0gbWF0aC5NSU5fRE9VQkxFO1xuXG4gICAgICAgIGxldCB4O1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IHo7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXG4gICAgICAgICAgICB4ID0gcG9pbnRzW2ldWzBdO1xuICAgICAgICAgICAgeSA9IHBvaW50c1tpXVsxXTtcbiAgICAgICAgICAgIHogPSBwb2ludHNbaV1bMl07XG5cbiAgICAgICAgICAgIGlmICh4IDwgeG1pbikge1xuICAgICAgICAgICAgICAgIHhtaW4gPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeSA8IHltaW4pIHtcbiAgICAgICAgICAgICAgICB5bWluID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHogPCB6bWluKSB7XG4gICAgICAgICAgICAgICAgem1pbiA9IHo7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh4ID4geG1heCkge1xuICAgICAgICAgICAgICAgIHhtYXggPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeSA+IHltYXgpIHtcbiAgICAgICAgICAgICAgICB5bWF4ID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHogPiB6bWF4KSB7XG4gICAgICAgICAgICAgICAgem1heCA9IHo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhYWJiWzBdID0geG1pbjtcbiAgICAgICAgYWFiYlsxXSA9IHltaW47XG4gICAgICAgIGFhYmJbMl0gPSB6bWluO1xuICAgICAgICBhYWJiWzNdID0geG1heDtcbiAgICAgICAgYWFiYls0XSA9IHltYXg7XG4gICAgICAgIGFhYmJbNV0gPSB6bWF4O1xuXG4gICAgICAgIHJldHVybiBhYWJiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgbWluaW11bSBib3VuZGFyeSBzcGhlcmUgZW5jbG9zaW5nIHRoZSBnaXZlbiAzRCBwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBvaW50czNUb1NwaGVyZTM6ICgoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRlbXBWZWMzID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKHBvaW50cywgc3BoZXJlKSA9PiB7XG5cbiAgICAgICAgICAgIHNwaGVyZSA9IHNwaGVyZSB8fCBtYXRoLnZlYzQoKTtcblxuICAgICAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICAgICAgbGV0IHogPSAwO1xuXG4gICAgICAgICAgICBsZXQgaTtcbiAgICAgICAgICAgIGNvbnN0IG51bVBvaW50cyA9IHBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykge1xuICAgICAgICAgICAgICAgIHggKz0gcG9pbnRzW2ldWzBdO1xuICAgICAgICAgICAgICAgIHkgKz0gcG9pbnRzW2ldWzFdO1xuICAgICAgICAgICAgICAgIHogKz0gcG9pbnRzW2ldWzJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcGhlcmVbMF0gPSB4IC8gbnVtUG9pbnRzO1xuICAgICAgICAgICAgc3BoZXJlWzFdID0geSAvIG51bVBvaW50cztcbiAgICAgICAgICAgIHNwaGVyZVsyXSA9IHogLyBudW1Qb2ludHM7XG5cbiAgICAgICAgICAgIGxldCByYWRpdXMgPSAwO1xuICAgICAgICAgICAgbGV0IGRpc3Q7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgZGlzdCA9IE1hdGguYWJzKG1hdGgubGVuVmVjMyhtYXRoLnN1YlZlYzMocG9pbnRzW2ldLCBzcGhlcmUsIHRlbXBWZWMzKSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpc3QgPiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzID0gZGlzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwaGVyZVszXSA9IHJhZGl1cztcblxuICAgICAgICAgICAgcmV0dXJuIHNwaGVyZTtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBtaW5pbXVtIGJvdW5kYXJ5IHNwaGVyZSBlbmNsb3NpbmcgdGhlIGdpdmVuIDNEIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcG9zaXRpb25zM1RvU3BoZXJlMzogKCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgdGVtcFZlYzNhID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNiID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKHBvc2l0aW9ucywgc3BoZXJlKSA9PiB7XG5cbiAgICAgICAgICAgIHNwaGVyZSA9IHNwaGVyZSB8fCBtYXRoLnZlYzQoKTtcblxuICAgICAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICAgICAgbGV0IHkgPSAwO1xuICAgICAgICAgICAgbGV0IHogPSAwO1xuXG4gICAgICAgICAgICBsZXQgaTtcbiAgICAgICAgICAgIGNvbnN0IGxlblBvc2l0aW9ucyA9IHBvc2l0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgcmFkaXVzID0gMDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlblBvc2l0aW9uczsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgeCArPSBwb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgeSArPSBwb3NpdGlvbnNbaSArIDFdO1xuICAgICAgICAgICAgICAgIHogKz0gcG9zaXRpb25zW2kgKyAyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbnVtUG9zaXRpb25zID0gbGVuUG9zaXRpb25zIC8gMztcblxuICAgICAgICAgICAgc3BoZXJlWzBdID0geCAvIG51bVBvc2l0aW9ucztcbiAgICAgICAgICAgIHNwaGVyZVsxXSA9IHkgLyBudW1Qb3NpdGlvbnM7XG4gICAgICAgICAgICBzcGhlcmVbMl0gPSB6IC8gbnVtUG9zaXRpb25zO1xuXG4gICAgICAgICAgICBsZXQgZGlzdDtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlblBvc2l0aW9uczsgaSArPSAzKSB7XG5cbiAgICAgICAgICAgICAgICB0ZW1wVmVjM2FbMF0gPSBwb3NpdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgdGVtcFZlYzNhWzFdID0gcG9zaXRpb25zW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB0ZW1wVmVjM2FbMl0gPSBwb3NpdGlvbnNbaSArIDJdO1xuXG4gICAgICAgICAgICAgICAgZGlzdCA9IE1hdGguYWJzKG1hdGgubGVuVmVjMyhtYXRoLnN1YlZlYzModGVtcFZlYzNhLCBzcGhlcmUsIHRlbXBWZWMzYikpKTtcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1cyA9IGRpc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcGhlcmVbM10gPSByYWRpdXM7XG5cbiAgICAgICAgICAgIHJldHVybiBzcGhlcmU7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgbWluaW11bSBib3VuZGFyeSBzcGhlcmUgZW5jbG9zaW5nIHRoZSBnaXZlbiAzRCBwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE9CQjNUb1NwaGVyZTM6ICgoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuXG4gICAgICAgIHJldHVybiAocG9pbnRzLCBzcGhlcmUpID0+IHtcblxuICAgICAgICAgICAgc3BoZXJlID0gc3BoZXJlIHx8IG1hdGgudmVjNCgpO1xuXG4gICAgICAgICAgICBsZXQgeCA9IDA7XG4gICAgICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgICAgICBsZXQgeiA9IDA7XG5cbiAgICAgICAgICAgIGxldCBpO1xuICAgICAgICAgICAgY29uc3QgbGVuUG9pbnRzID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG51bVBvaW50cyA9IGxlblBvaW50cyAvIDQ7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5Qb2ludHM7IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgIHggKz0gcG9pbnRzW2kgKyAwXTtcbiAgICAgICAgICAgICAgICB5ICs9IHBvaW50c1tpICsgMV07XG4gICAgICAgICAgICAgICAgeiArPSBwb2ludHNbaSArIDJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcGhlcmVbMF0gPSB4IC8gbnVtUG9pbnRzO1xuICAgICAgICAgICAgc3BoZXJlWzFdID0geSAvIG51bVBvaW50cztcbiAgICAgICAgICAgIHNwaGVyZVsyXSA9IHogLyBudW1Qb2ludHM7XG5cbiAgICAgICAgICAgIGxldCByYWRpdXMgPSAwO1xuICAgICAgICAgICAgbGV0IGRpc3Q7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5Qb2ludHM7IGkgKz0gNCkge1xuXG4gICAgICAgICAgICAgICAgcG9pbnRbMF0gPSBwb2ludHNbaSArIDBdO1xuICAgICAgICAgICAgICAgIHBvaW50WzFdID0gcG9pbnRzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBwb2ludFsyXSA9IHBvaW50c1tpICsgMl07XG5cbiAgICAgICAgICAgICAgICBkaXN0ID0gTWF0aC5hYnMobWF0aC5sZW5WZWMzKG1hdGguc3ViVmVjMyhwb2ludCwgc3BoZXJlLCB0ZW1wVmVjMykpKTtcblxuICAgICAgICAgICAgICAgIGlmIChkaXN0ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1cyA9IGRpc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcGhlcmVbM10gPSByYWRpdXM7XG5cbiAgICAgICAgICAgIHJldHVybiBzcGhlcmU7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjZW50ZXIgb2YgYSBib3VuZGluZyBzcGhlcmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldFNwaGVyZTNDZW50ZXIoc3BoZXJlLCBkZXN0ID0gbWF0aC52ZWMzKCkpIHtcbiAgICAgICAgZGVzdFswXSA9IHNwaGVyZVswXTtcbiAgICAgICAgZGVzdFsxXSA9IHNwaGVyZVsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHNwaGVyZVsyXTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgM0QgY2VudGVyIG9mIHRoZSBnaXZlbiBmbGF0IGFycmF5IG9mIDNEIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0UG9zaXRpb25zQ2VudGVyKHBvc2l0aW9ucywgY2VudGVyID0gbWF0aC52ZWMzKCkpIHtcbiAgICAgICAgbGV0IHhDZW50ZXIgPSAwO1xuICAgICAgICBsZXQgeUNlbnRlciA9IDA7XG4gICAgICAgIGxldCB6Q2VudGVyID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgeENlbnRlciArPSBwb3NpdGlvbnNbaSArIDBdO1xuICAgICAgICAgICAgeUNlbnRlciArPSBwb3NpdGlvbnNbaSArIDFdO1xuICAgICAgICAgICAgekNlbnRlciArPSBwb3NpdGlvbnNbaSArIDJdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG51bVBvc2l0aW9ucyA9IHBvc2l0aW9ucy5sZW5ndGggLyAzO1xuICAgICAgICBjZW50ZXJbMF0gPSB4Q2VudGVyIC8gbnVtUG9zaXRpb25zO1xuICAgICAgICBjZW50ZXJbMV0gPSB5Q2VudGVyIC8gbnVtUG9zaXRpb25zO1xuICAgICAgICBjZW50ZXJbMl0gPSB6Q2VudGVyIC8gbnVtUG9zaXRpb25zO1xuICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeHBhbmRzIHRoZSBmaXJzdCBheGlzLWFsaWduZWQgM0QgYm91bmRhcnkgdG8gZW5jbG9zZSB0aGUgc2Vjb25kLCBpZiByZXF1aXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZXhwYW5kQUFCQjMoYWFiYjEsIGFhYmIyKSB7XG5cbiAgICAgICAgaWYgKGFhYmIxWzBdID4gYWFiYjJbMF0pIHtcbiAgICAgICAgICAgIGFhYmIxWzBdID0gYWFiYjJbMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYjFbMV0gPiBhYWJiMlsxXSkge1xuICAgICAgICAgICAgYWFiYjFbMV0gPSBhYWJiMlsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiMVsyXSA+IGFhYmIyWzJdKSB7XG4gICAgICAgICAgICBhYWJiMVsyXSA9IGFhYmIyWzJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFhYmIxWzNdIDwgYWFiYjJbM10pIHtcbiAgICAgICAgICAgIGFhYmIxWzNdID0gYWFiYjJbM107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYjFbNF0gPCBhYWJiMls0XSkge1xuICAgICAgICAgICAgYWFiYjFbNF0gPSBhYWJiMls0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiMVs1XSA8IGFhYmIyWzVdKSB7XG4gICAgICAgICAgICBhYWJiMVs1XSA9IGFhYmIyWzVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFhYmIxO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeHBhbmRzIGFuIGF4aXMtYWxpZ25lZCAzRCBib3VuZGFyeSB0byBlbmNsb3NlIHRoZSBnaXZlbiBwb2ludCwgaWYgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBleHBhbmRBQUJCM1BvaW50MyhhYWJiLCBwKSB7XG5cbiAgICAgICAgaWYgKGFhYmJbMF0gPiBwWzBdKSB7XG4gICAgICAgICAgICBhYWJiWzBdID0gcFswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiWzFdID4gcFsxXSkge1xuICAgICAgICAgICAgYWFiYlsxXSA9IHBbMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYlsyXSA+IHBbMl0pIHtcbiAgICAgICAgICAgIGFhYmJbMl0gPSBwWzJdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFhYmJbM10gPCBwWzBdKSB7XG4gICAgICAgICAgICBhYWJiWzNdID0gcFswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiWzRdIDwgcFsxXSkge1xuICAgICAgICAgICAgYWFiYls0XSA9IHBbMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYls1XSA8IHBbMl0pIHtcbiAgICAgICAgICAgIGFhYmJbNV0gPSBwWzJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFhYmI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4cGFuZHMgYW4gYXhpcy1hbGlnbmVkIDNEIGJvdW5kYXJ5IHRvIGVuY2xvc2UgdGhlIGdpdmVuIHBvaW50cywgaWYgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBleHBhbmRBQUJCM1BvaW50czMoYWFiYiwgcG9zaXRpb25zKSB7XG4gICAgICAgIHZhciB4O1xuICAgICAgICB2YXIgeTtcbiAgICAgICAgdmFyIHo7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgICAgIHggPSBwb3NpdGlvbnNbaV07XG4gICAgICAgICAgICB5ID0gcG9zaXRpb25zW2kgKyAxXTtcbiAgICAgICAgICAgIHogPSBwb3NpdGlvbnNbaSArIDJdO1xuICAgICAgICAgICAgaWYgKGFhYmJbMF0gPiB4KSB7XG4gICAgICAgICAgICAgICAgYWFiYlswXSA9IHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWFiYlsxXSA+IHkpIHtcbiAgICAgICAgICAgICAgICBhYWJiWzFdID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhYWJiWzJdID4geikge1xuICAgICAgICAgICAgICAgIGFhYmJbMl0gPSB6O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFhYmJbM10gPCB4KSB7XG4gICAgICAgICAgICAgICAgYWFiYlszXSA9IHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWFiYls0XSA8IHkpIHtcbiAgICAgICAgICAgICAgICBhYWJiWzRdID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhYWJiWzVdIDwgeikge1xuICAgICAgICAgICAgICAgIGFhYmJbNV0gPSB6O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhYWJiO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZXMgYSAyRCBheGlzLWFsaWduZWQgYm91bmRhcnksIHJlYWR5IHRvIGV4cGFuZCB0byBmaXQgMkQgcG9pbnRzLlxuICAgICAqIENyZWF0ZXMgbmV3IEFBQkIgaWYgbm9uZSBzdXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29sbGFwc2VBQUJCMihhYWJiID0gbWF0aC5BQUJCMigpKSB7XG4gICAgICAgIGFhYmJbMF0gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGFhYmJbMV0gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGFhYmJbMl0gPSBtYXRoLk1JTl9ET1VCTEU7XG4gICAgICAgIGFhYmJbM10gPSBtYXRoLk1JTl9ET1VCTEU7XG5cbiAgICAgICAgcmV0dXJuIGFhYmI7XG4gICAgfSxcblxuICAgIHBvaW50M0FBQkIzSW50ZXJzZWN0KGFhYmIsIHApIHtcbiAgICAgICAgcmV0dXJuIGFhYmJbMF0gPiBwWzBdIHx8IGFhYmJbM10gPCBwWzBdIHx8IGFhYmJbMV0gPiBwWzFdIHx8IGFhYmJbNF0gPCBwWzFdIHx8IGFhYmJbMl0gPiBwWzJdIHx8IGFhYmJbNV0gPCBwWzJdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkaXJcbiAgICAgKiBAcGFyYW0gY29uc3RhbnRcbiAgICAgKiBAcGFyYW0gYWFiYlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgcGxhbmVBQUJCM0ludGVyc2VjdChkaXIsIGNvbnN0YW50LCBhYWJiKSB7XG4gICAgICAgIGxldCBtaW4sIG1heDtcbiAgICAgICAgaWYgKGRpclswXSA+IDApIHtcbiAgICAgICAgICAgIG1pbiA9IGRpclswXSAqIGFhYmJbMF07XG4gICAgICAgICAgICBtYXggPSBkaXJbMF0gKiBhYWJiWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWluID0gZGlyWzBdICogYWFiYlszXTtcbiAgICAgICAgICAgIG1heCA9IGRpclswXSAqIGFhYmJbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpclsxXSA+IDApIHtcbiAgICAgICAgICAgIG1pbiArPSBkaXJbMV0gKiBhYWJiWzFdO1xuICAgICAgICAgICAgbWF4ICs9IGRpclsxXSAqIGFhYmJbNF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW4gKz0gZGlyWzFdICogYWFiYls0XTtcbiAgICAgICAgICAgIG1heCArPSBkaXJbMV0gKiBhYWJiWzFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJbMl0gPiAwKSB7XG4gICAgICAgICAgICBtaW4gKz0gZGlyWzJdICogYWFiYlsyXTtcbiAgICAgICAgICAgIG1heCArPSBkaXJbMl0gKiBhYWJiWzVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWluICs9IGRpclsyXSAqIGFhYmJbNV07XG4gICAgICAgICAgICBtYXggKz0gZGlyWzJdICogYWFiYlsyXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvdXRzaWRlID0gKG1pbiA8PSAtY29uc3RhbnQpICYmIChtYXggPD0gLWNvbnN0YW50KTtcbiAgICAgICAgaWYgKG91dHNpZGUpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluc2lkZSA9IChtaW4gPj0gLWNvbnN0YW50KSAmJiAobWF4ID49IC1jb25zdGFudCk7XG4gICAgICAgIGlmIChpbnNpZGUpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIHRoZSBtaW5pbXVtIDJEIHByb2plY3RlZCBheGlzLWFsaWduZWQgYm91bmRhcnkgZW5jbG9zaW5nIHRoZSBnaXZlbiAzRCBwb2ludHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIE9CQjNUb0FBQkIyKHBvaW50cywgYWFiYiA9IG1hdGguQUFCQjIoKSkge1xuICAgICAgICBsZXQgeG1pbiA9IG1hdGguTUFYX0RPVUJMRTtcbiAgICAgICAgbGV0IHltaW4gPSBtYXRoLk1BWF9ET1VCTEU7XG4gICAgICAgIGxldCB4bWF4ID0gbWF0aC5NSU5fRE9VQkxFO1xuICAgICAgICBsZXQgeW1heCA9IG1hdGguTUlOX0RPVUJMRTtcblxuICAgICAgICBsZXQgeDtcbiAgICAgICAgbGV0IHk7XG4gICAgICAgIGxldCB3O1xuICAgICAgICBsZXQgZjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSA0KSB7XG5cbiAgICAgICAgICAgIHggPSBwb2ludHNbaSArIDBdO1xuICAgICAgICAgICAgeSA9IHBvaW50c1tpICsgMV07XG4gICAgICAgICAgICB3ID0gcG9pbnRzW2kgKyAzXSB8fCAxLjA7XG5cbiAgICAgICAgICAgIGYgPSAxLjAgLyB3O1xuXG4gICAgICAgICAgICB4ICo9IGY7XG4gICAgICAgICAgICB5ICo9IGY7XG5cbiAgICAgICAgICAgIGlmICh4IDwgeG1pbikge1xuICAgICAgICAgICAgICAgIHhtaW4gPSB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoeSA8IHltaW4pIHtcbiAgICAgICAgICAgICAgICB5bWluID0geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHggPiB4bWF4KSB7XG4gICAgICAgICAgICAgICAgeG1heCA9IHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh5ID4geW1heCkge1xuICAgICAgICAgICAgICAgIHltYXggPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYWFiYlswXSA9IHhtaW47XG4gICAgICAgIGFhYmJbMV0gPSB5bWluO1xuICAgICAgICBhYWJiWzJdID0geG1heDtcbiAgICAgICAgYWFiYlszXSA9IHltYXg7XG5cbiAgICAgICAgcmV0dXJuIGFhYmI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4cGFuZHMgdGhlIGZpcnN0IGF4aXMtYWxpZ25lZCAyRCBib3VuZGFyeSB0byBlbmNsb3NlIHRoZSBzZWNvbmQsIGlmIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBleHBhbmRBQUJCMihhYWJiMSwgYWFiYjIpIHtcblxuICAgICAgICBpZiAoYWFiYjFbMF0gPiBhYWJiMlswXSkge1xuICAgICAgICAgICAgYWFiYjFbMF0gPSBhYWJiMlswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiMVsxXSA+IGFhYmIyWzFdKSB7XG4gICAgICAgICAgICBhYWJiMVsxXSA9IGFhYmIyWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFhYmIxWzJdIDwgYWFiYjJbMl0pIHtcbiAgICAgICAgICAgIGFhYmIxWzJdID0gYWFiYjJbMl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYjFbM10gPCBhYWJiMlszXSkge1xuICAgICAgICAgICAgYWFiYjFbM10gPSBhYWJiMlszXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhYWJiMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRXhwYW5kcyBhbiBheGlzLWFsaWduZWQgMkQgYm91bmRhcnkgdG8gZW5jbG9zZSB0aGUgZ2l2ZW4gcG9pbnQsIGlmIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBleHBhbmRBQUJCMlBvaW50MihhYWJiLCBwKSB7XG5cbiAgICAgICAgaWYgKGFhYmJbMF0gPiBwWzBdKSB7XG4gICAgICAgICAgICBhYWJiWzBdID0gcFswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhYWJiWzFdID4gcFsxXSkge1xuICAgICAgICAgICAgYWFiYlsxXSA9IHBbMV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWFiYlsyXSA8IHBbMF0pIHtcbiAgICAgICAgICAgIGFhYmJbMl0gPSBwWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFhYmJbM10gPCBwWzFdKSB7XG4gICAgICAgICAgICBhYWJiWzNdID0gcFsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhYWJiO1xuICAgIH0sXG5cbiAgICBBQUJCMlRvQ2FudmFzKGFhYmIsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIGFhYmIyID0gYWFiYikge1xuICAgICAgICBjb25zdCB4bWluID0gKGFhYmJbMF0gKyAxLjApICogMC41O1xuICAgICAgICBjb25zdCB5bWluID0gKGFhYmJbMV0gKyAxLjApICogMC41O1xuICAgICAgICBjb25zdCB4bWF4ID0gKGFhYmJbMl0gKyAxLjApICogMC41O1xuICAgICAgICBjb25zdCB5bWF4ID0gKGFhYmJbM10gKyAxLjApICogMC41O1xuXG4gICAgICAgIGFhYmIyWzBdID0gTWF0aC5mbG9vcih4bWluICogY2FudmFzV2lkdGgpO1xuICAgICAgICBhYWJiMlsxXSA9IGNhbnZhc0hlaWdodCAtIE1hdGguZmxvb3IoeW1heCAqIGNhbnZhc0hlaWdodCk7XG4gICAgICAgIGFhYmIyWzJdID0gTWF0aC5mbG9vcih4bWF4ICogY2FudmFzV2lkdGgpO1xuICAgICAgICBhYWJiMlszXSA9IGNhbnZhc0hlaWdodCAtIE1hdGguZmxvb3IoeW1pbiAqIGNhbnZhc0hlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIGFhYmIyO1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEN1cnZlc1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICB0YW5nZW50UXVhZHJhdGljQmV6aWVyKHQsIHAwLCBwMSwgcDIpIHtcbiAgICAgICAgcmV0dXJuIDIgKiAoMSAtIHQpICogKHAxIC0gcDApICsgMiAqIHQgKiAocDIgLSBwMSk7XG4gICAgfSxcblxuICAgIHRhbmdlbnRRdWFkcmF0aWNCZXppZXIzKHQsIHAwLCBwMSwgcDIsIHAzKSB7XG4gICAgICAgIHJldHVybiAtMyAqIHAwICogKDEgLSB0KSAqICgxIC0gdCkgK1xuICAgICAgICAgICAgMyAqIHAxICogKDEgLSB0KSAqICgxIC0gdCkgLSA2ICogdCAqIHAxICogKDEgLSB0KSArXG4gICAgICAgICAgICA2ICogdCAqIHAyICogKDEgLSB0KSAtIDMgKiB0ICogdCAqIHAyICtcbiAgICAgICAgICAgIDMgKiB0ICogdCAqIHAzO1xuICAgIH0sXG5cbiAgICB0YW5nZW50U3BsaW5lKHQpIHtcbiAgICAgICAgY29uc3QgaDAwID0gNiAqIHQgKiB0IC0gNiAqIHQ7XG4gICAgICAgIGNvbnN0IGgxMCA9IDMgKiB0ICogdCAtIDQgKiB0ICsgMTtcbiAgICAgICAgY29uc3QgaDAxID0gLTYgKiB0ICogdCArIDYgKiB0O1xuICAgICAgICBjb25zdCBoMTEgPSAzICogdCAqIHQgLSAyICogdDtcbiAgICAgICAgcmV0dXJuIGgwMCArIGgxMCArIGgwMSArIGgxMTtcbiAgICB9LFxuXG4gICAgY2F0bXVsbFJvbUludGVycG9sYXRlKHAwLCBwMSwgcDIsIHAzLCB0KSB7XG4gICAgICAgIGNvbnN0IHYwID0gKHAyIC0gcDApICogMC41O1xuICAgICAgICBjb25zdCB2MSA9IChwMyAtIHAxKSAqIDAuNTtcbiAgICAgICAgY29uc3QgdDIgPSB0ICogdDtcbiAgICAgICAgY29uc3QgdDMgPSB0ICogdDI7XG4gICAgICAgIHJldHVybiAoMiAqIHAxIC0gMiAqIHAyICsgdjAgKyB2MSkgKiB0MyArICgtMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEpICogdDIgKyB2MCAqIHQgKyBwMTtcbiAgICB9LFxuXG4vLyBCZXppZXIgQ3VydmUgZm9ybXVsaWkgZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0IlQzMlQTl6aWVyX2N1cnZlXG5cbi8vIFF1YWQgQmV6aWVyIEZ1bmN0aW9uc1xuXG4gICAgYjJwMCh0LCBwKSB7XG4gICAgICAgIGNvbnN0IGsgPSAxIC0gdDtcbiAgICAgICAgcmV0dXJuIGsgKiBrICogcDtcblxuICAgIH0sXG5cbiAgICBiMnAxKHQsIHApIHtcbiAgICAgICAgcmV0dXJuIDIgKiAoMSAtIHQpICogdCAqIHA7XG4gICAgfSxcblxuICAgIGIycDIodCwgcCkge1xuICAgICAgICByZXR1cm4gdCAqIHQgKiBwO1xuICAgIH0sXG5cbiAgICBiMih0LCBwMCwgcDEsIHAyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmIycDAodCwgcDApICsgdGhpcy5iMnAxKHQsIHAxKSArIHRoaXMuYjJwMih0LCBwMik7XG4gICAgfSxcblxuLy8gQ3ViaWMgQmV6aWVyIEZ1bmN0aW9uc1xuXG4gICAgYjNwMCh0LCBwKSB7XG4gICAgICAgIGNvbnN0IGsgPSAxIC0gdDtcbiAgICAgICAgcmV0dXJuIGsgKiBrICogayAqIHA7XG4gICAgfSxcblxuICAgIGIzcDEodCwgcCkge1xuICAgICAgICBjb25zdCBrID0gMSAtIHQ7XG4gICAgICAgIHJldHVybiAzICogayAqIGsgKiB0ICogcDtcbiAgICB9LFxuXG4gICAgYjNwMih0LCBwKSB7XG4gICAgICAgIGNvbnN0IGsgPSAxIC0gdDtcbiAgICAgICAgcmV0dXJuIDMgKiBrICogdCAqIHQgKiBwO1xuICAgIH0sXG5cbiAgICBiM3AzKHQsIHApIHtcbiAgICAgICAgcmV0dXJuIHQgKiB0ICogdCAqIHA7XG4gICAgfSxcblxuICAgIGIzKHQsIHAwLCBwMSwgcDIsIHAzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmIzcDAodCwgcDApICsgdGhpcy5iM3AxKHQsIHAxKSArIHRoaXMuYjNwMih0LCBwMikgKyB0aGlzLmIzcDModCwgcDMpO1xuICAgIH0sXG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEdlb21ldHJ5XG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIG5vcm1hbCB2ZWN0b3Igb2YgYSB0cmlhbmdsZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdHJpYW5nbGVOb3JtYWwoYSwgYiwgYywgbm9ybWFsID0gbWF0aC52ZWMzKCkpIHtcbiAgICAgICAgY29uc3QgcDF4ID0gYlswXSAtIGFbMF07XG4gICAgICAgIGNvbnN0IHAxeSA9IGJbMV0gLSBhWzFdO1xuICAgICAgICBjb25zdCBwMXogPSBiWzJdIC0gYVsyXTtcblxuICAgICAgICBjb25zdCBwMnggPSBjWzBdIC0gYVswXTtcbiAgICAgICAgY29uc3QgcDJ5ID0gY1sxXSAtIGFbMV07XG4gICAgICAgIGNvbnN0IHAyeiA9IGNbMl0gLSBhWzJdO1xuXG4gICAgICAgIGNvbnN0IHAzeCA9IHAxeSAqIHAyeiAtIHAxeiAqIHAyeTtcbiAgICAgICAgY29uc3QgcDN5ID0gcDF6ICogcDJ4IC0gcDF4ICogcDJ6O1xuICAgICAgICBjb25zdCBwM3ogPSBwMXggKiBwMnkgLSBwMXkgKiBwMng7XG5cbiAgICAgICAgY29uc3QgbWFnID0gTWF0aC5zcXJ0KHAzeCAqIHAzeCArIHAzeSAqIHAzeSArIHAzeiAqIHAzeik7XG4gICAgICAgIGlmIChtYWcgPT09IDApIHtcbiAgICAgICAgICAgIG5vcm1hbFswXSA9IDA7XG4gICAgICAgICAgICBub3JtYWxbMV0gPSAwO1xuICAgICAgICAgICAgbm9ybWFsWzJdID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vcm1hbFswXSA9IHAzeCAvIG1hZztcbiAgICAgICAgICAgIG5vcm1hbFsxXSA9IHAzeSAvIG1hZztcbiAgICAgICAgICAgIG5vcm1hbFsyXSA9IHAzeiAvIG1hZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGludGVyc2VjdGlvbiBvZiBhIDNEIHJheSB3aXRoIGEgM0QgdHJpYW5nbGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJheVRyaWFuZ2xlSW50ZXJzZWN0OiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCB0ZW1wVmVjMyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzYiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzYyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZSA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG5cbiAgICAgICAgcmV0dXJuIChvcmlnaW4sIGRpciwgYSwgYiwgYywgaXNlY3QpID0+IHtcblxuICAgICAgICAgICAgaXNlY3QgPSBpc2VjdCB8fCBtYXRoLnZlYzMoKTtcblxuICAgICAgICAgICAgY29uc3QgRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4gICAgICAgICAgICBjb25zdCBlZGdlMSA9IG1hdGguc3ViVmVjMyhiLCBhLCB0ZW1wVmVjMyk7XG4gICAgICAgICAgICBjb25zdCBlZGdlMiA9IG1hdGguc3ViVmVjMyhjLCBhLCB0ZW1wVmVjM2IpO1xuXG4gICAgICAgICAgICBjb25zdCBwdmVjID0gbWF0aC5jcm9zczNWZWMzKGRpciwgZWRnZTIsIHRlbXBWZWMzYyk7XG4gICAgICAgICAgICBjb25zdCBkZXQgPSBtYXRoLmRvdFZlYzMoZWRnZTEsIHB2ZWMpO1xuICAgICAgICAgICAgaWYgKGRldCA8IEVQU0lMT04pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHZlYyA9IG1hdGguc3ViVmVjMyhvcmlnaW4sIGEsIHRlbXBWZWMzZCk7XG4gICAgICAgICAgICBjb25zdCB1ID0gbWF0aC5kb3RWZWMzKHR2ZWMsIHB2ZWMpO1xuICAgICAgICAgICAgaWYgKHUgPCAwIHx8IHUgPiBkZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcXZlYyA9IG1hdGguY3Jvc3MzVmVjMyh0dmVjLCBlZGdlMSwgdGVtcFZlYzNlKTtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBtYXRoLmRvdFZlYzMoZGlyLCBxdmVjKTtcbiAgICAgICAgICAgIGlmICh2IDwgMCB8fCB1ICsgdiA+IGRldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0ID0gbWF0aC5kb3RWZWMzKGVkZ2UyLCBxdmVjKSAvIGRldDtcbiAgICAgICAgICAgIGlzZWN0WzBdID0gb3JpZ2luWzBdICsgdCAqIGRpclswXTtcbiAgICAgICAgICAgIGlzZWN0WzFdID0gb3JpZ2luWzFdICsgdCAqIGRpclsxXTtcbiAgICAgICAgICAgIGlzZWN0WzJdID0gb3JpZ2luWzJdICsgdCAqIGRpclsyXTtcblxuICAgICAgICAgICAgcmV0dXJuIGlzZWN0O1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIGludGVyc2VjdGlvbiBvZiBhIDNEIHJheSB3aXRoIGEgcGxhbmUgZGVmaW5lZCBieSAzIHBvaW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmF5UGxhbmVJbnRlcnNlY3Q6ICgoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRlbXBWZWMzID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNiID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNjID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNkID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKG9yaWdpbiwgZGlyLCBhLCBiLCBjLCBpc2VjdCkgPT4ge1xuXG4gICAgICAgICAgICBpc2VjdCA9IGlzZWN0IHx8IG1hdGgudmVjMygpO1xuXG4gICAgICAgICAgICBkaXIgPSBtYXRoLm5vcm1hbGl6ZVZlYzMoZGlyLCB0ZW1wVmVjMyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVkZ2UxID0gbWF0aC5zdWJWZWMzKGIsIGEsIHRlbXBWZWMzYik7XG4gICAgICAgICAgICBjb25zdCBlZGdlMiA9IG1hdGguc3ViVmVjMyhjLCBhLCB0ZW1wVmVjM2MpO1xuXG4gICAgICAgICAgICBjb25zdCBuID0gbWF0aC5jcm9zczNWZWMzKGVkZ2UxLCBlZGdlMiwgdGVtcFZlYzNkKTtcbiAgICAgICAgICAgIG1hdGgubm9ybWFsaXplVmVjMyhuLCBuKTtcblxuICAgICAgICAgICAgY29uc3QgZCA9IC1tYXRoLmRvdFZlYzMoYSwgbik7XG5cbiAgICAgICAgICAgIGNvbnN0IHQgPSAtKG1hdGguZG90VmVjMyhvcmlnaW4sIG4pICsgZCkgLyBtYXRoLmRvdFZlYzMoZGlyLCBuKTtcblxuICAgICAgICAgICAgaXNlY3RbMF0gPSBvcmlnaW5bMF0gKyB0ICogZGlyWzBdO1xuICAgICAgICAgICAgaXNlY3RbMV0gPSBvcmlnaW5bMV0gKyB0ICogZGlyWzFdO1xuICAgICAgICAgICAgaXNlY3RbMl0gPSBvcmlnaW5bMl0gKyB0ICogZGlyWzJdO1xuXG4gICAgICAgICAgICByZXR1cm4gaXNlY3Q7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIGZyb20gY2FydGVzaWFuIGNvb3JkaW5hdGVzIHdpdGhpbiBhIHRyaWFuZ2xlLlxuICAgICAqIEdldHMgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgZnJvbSBjYXJ0ZXNpYW4gY29vcmRpbmF0ZXMgd2l0aGluIGEgdHJpYW5nbGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNhcnRlc2lhblRvQmFyeWNlbnRyaWM6ICgoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRlbXBWZWMzID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNiID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgdGVtcFZlYzNjID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKGNhcnRlc2lhbiwgYSwgYiwgYywgZGVzdCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCB2MCA9IG1hdGguc3ViVmVjMyhjLCBhLCB0ZW1wVmVjMyk7XG4gICAgICAgICAgICBjb25zdCB2MSA9IG1hdGguc3ViVmVjMyhiLCBhLCB0ZW1wVmVjM2IpO1xuICAgICAgICAgICAgY29uc3QgdjIgPSBtYXRoLnN1YlZlYzMoY2FydGVzaWFuLCBhLCB0ZW1wVmVjM2MpO1xuXG4gICAgICAgICAgICBjb25zdCBkb3QwMCA9IG1hdGguZG90VmVjMyh2MCwgdjApO1xuICAgICAgICAgICAgY29uc3QgZG90MDEgPSBtYXRoLmRvdFZlYzModjAsIHYxKTtcbiAgICAgICAgICAgIGNvbnN0IGRvdDAyID0gbWF0aC5kb3RWZWMzKHYwLCB2Mik7XG4gICAgICAgICAgICBjb25zdCBkb3QxMSA9IG1hdGguZG90VmVjMyh2MSwgdjEpO1xuICAgICAgICAgICAgY29uc3QgZG90MTIgPSBtYXRoLmRvdFZlYzModjEsIHYyKTtcblxuICAgICAgICAgICAgY29uc3QgZGVub20gPSAoZG90MDAgKiBkb3QxMSAtIGRvdDAxICogZG90MDEpO1xuXG4gICAgICAgICAgICAvLyBDb2xpbmVhciBvciBzaW5ndWxhciB0cmlhbmdsZVxuXG4gICAgICAgICAgICBpZiAoZGVub20gPT09IDApIHtcblxuICAgICAgICAgICAgICAgIC8vIEFyYml0cmFyeSBsb2NhdGlvbiBvdXRzaWRlIG9mIHRyaWFuZ2xlXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW52RGVub20gPSAxIC8gZGVub207XG5cbiAgICAgICAgICAgIGNvbnN0IHUgPSAoZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIpICogaW52RGVub207XG4gICAgICAgICAgICBjb25zdCB2ID0gKGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyKSAqIGludkRlbm9tO1xuXG4gICAgICAgICAgICBkZXN0WzBdID0gMSAtIHUgLSB2O1xuICAgICAgICAgICAgZGVzdFsxXSA9IHY7XG4gICAgICAgICAgICBkZXN0WzJdID0gdTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIGFyZSB3aXRoaW4gdGhlaXIgdHJpYW5nbGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGJhcnljZW50cmljSW5zaWRlVHJpYW5nbGUoYmFyeSkge1xuXG4gICAgICAgIGNvbnN0IHYgPSBiYXJ5WzFdO1xuICAgICAgICBjb25zdCB1ID0gYmFyeVsyXTtcblxuICAgICAgICByZXR1cm4gKHUgPj0gMCkgJiYgKHYgPj0gMCkgJiYgKHUgKyB2IDwgMSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgY2FydGVzaWFuIGNvb3JkaW5hdGVzIGZyb20gYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgd2l0aGluIGEgdHJpYW5nbGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGJhcnljZW50cmljVG9DYXJ0ZXNpYW4oYmFyeSwgYSwgYiwgYywgY2FydGVzaWFuID0gbWF0aC52ZWMzKCkpIHtcbiAgICAgICAgY29uc3QgdSA9IGJhcnlbMF07XG4gICAgICAgIGNvbnN0IHYgPSBiYXJ5WzFdO1xuICAgICAgICBjb25zdCB3ID0gYmFyeVsyXTtcblxuICAgICAgICBjYXJ0ZXNpYW5bMF0gPSBhWzBdICogdSArIGJbMF0gKiB2ICsgY1swXSAqIHc7XG4gICAgICAgIGNhcnRlc2lhblsxXSA9IGFbMV0gKiB1ICsgYlsxXSAqIHYgKyBjWzFdICogdztcbiAgICAgICAgY2FydGVzaWFuWzJdID0gYVsyXSAqIHUgKyBiWzJdICogdiArIGNbMl0gKiB3O1xuXG4gICAgICAgIHJldHVybiBjYXJ0ZXNpYW47XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gZ2VvbWV0cnkgZGVmaW5lZCBhcyBhbiBhcnJheSBvZiBwb3NpdGlvbnMsIG9wdGlvbmFsIG5vcm1hbHMsIG9wdGlvbiB1diBhbmQgYW4gYXJyYXkgb2YgaW5kaWNlcywgcmV0dXJuc1xuICAgICAqIG1vZGlmaWVkIGFycmF5cyB0aGF0IGhhdmUgZHVwbGljYXRlIHZlcnRpY2VzIHJlbW92ZWQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBkb2VzIG5vdCB3b3JrIHdlbGwgd2hlbiBjby1pbmNpZGVudCB2ZXJ0aWNlcyBoYXZlIHNhbWUgcG9zaXRpb25zIGJ1dCBkaWZmZXJlbnQgbm9ybWFscyBhbmQgVVZzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBvc2l0aW9uc1xuICAgICAqIEBwYXJhbSBub3JtYWxzXG4gICAgICogQHBhcmFtIHV2XG4gICAgICogQHBhcmFtIGluZGljZXNcbiAgICAgKiBAcmV0dXJucyB7e3Bvc2l0aW9uczogQXJyYXksIGluZGljZXM6IEFycmF5fX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG1lcmdlVmVydGljZXMocG9zaXRpb25zLCBub3JtYWxzLCB1diwgaW5kaWNlcykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbnNNYXAgPSB7fTsgLy8gSGFzaG1hcCBmb3IgbG9va2luZyB1cCB2ZXJ0aWNlcyBieSBwb3NpdGlvbiBjb29yZGluYXRlcyAoYW5kIG1ha2luZyBzdXJlIHRoZXkgYXJlIHVuaXF1ZSlcbiAgICAgICAgY29uc3QgaW5kaWNlc0xvb2t1cCA9IFtdO1xuICAgICAgICBjb25zdCB1bmlxdWVQb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgdW5pcXVlTm9ybWFscyA9IG5vcm1hbHMgPyBbXSA6IG51bGw7XG4gICAgICAgIGNvbnN0IHVuaXF1ZVVWID0gdXYgPyBbXSA6IG51bGw7XG4gICAgICAgIGNvbnN0IGluZGljZXMyID0gW107XG4gICAgICAgIGxldCB2eDtcbiAgICAgICAgbGV0IHZ5O1xuICAgICAgICBsZXQgdno7XG4gICAgICAgIGxldCBrZXk7XG4gICAgICAgIGNvbnN0IHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMVxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSAxMCAqKiBwcmVjaXNpb25Qb2ludHM7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBsZXQgbGVuO1xuICAgICAgICBsZXQgdXZpID0gMDtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAzKSB7XG4gICAgICAgICAgICB2eCA9IHBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgIHZ5ID0gcG9zaXRpb25zW2kgKyAxXTtcbiAgICAgICAgICAgIHZ6ID0gcG9zaXRpb25zW2kgKyAyXTtcbiAgICAgICAgICAgIGtleSA9IGAke01hdGgucm91bmQodnggKiBwcmVjaXNpb24pfV8ke01hdGgucm91bmQodnkgKiBwcmVjaXNpb24pfV8ke01hdGgucm91bmQodnogKiBwcmVjaXNpb24pfWA7XG4gICAgICAgICAgICBpZiAocG9zaXRpb25zTWFwW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uc01hcFtrZXldID0gdW5pcXVlUG9zaXRpb25zLmxlbmd0aCAvIDM7XG4gICAgICAgICAgICAgICAgdW5pcXVlUG9zaXRpb25zLnB1c2godngpO1xuICAgICAgICAgICAgICAgIHVuaXF1ZVBvc2l0aW9ucy5wdXNoKHZ5KTtcbiAgICAgICAgICAgICAgICB1bmlxdWVQb3NpdGlvbnMucHVzaCh2eik7XG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlTm9ybWFscy5wdXNoKG5vcm1hbHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWVOb3JtYWxzLnB1c2gobm9ybWFsc1tpICsgMV0pO1xuICAgICAgICAgICAgICAgICAgICB1bmlxdWVOb3JtYWxzLnB1c2gobm9ybWFsc1tpICsgMl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodXYpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlVVYucHVzaCh1dlt1dmldKTtcbiAgICAgICAgICAgICAgICAgICAgdW5pcXVlVVYucHVzaCh1dlt1dmkgKyAxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kaWNlc0xvb2t1cFtpIC8gM10gPSBwb3NpdGlvbnNNYXBba2V5XTtcbiAgICAgICAgICAgIHV2aSArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGluZGljZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGluZGljZXMyW2ldID0gaW5kaWNlc0xvb2t1cFtpbmRpY2VzW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbnM6IHVuaXF1ZVBvc2l0aW9ucyxcbiAgICAgICAgICAgIGluZGljZXM6IGluZGljZXMyXG4gICAgICAgIH07XG4gICAgICAgIGlmICh1bmlxdWVOb3JtYWxzKSB7XG4gICAgICAgICAgICByZXN1bHQubm9ybWFscyA9IHVuaXF1ZU5vcm1hbHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXF1ZVVWKSB7XG4gICAgICAgICAgICByZXN1bHQudXYgPSB1bmlxdWVVVjtcblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyBub3JtYWwgdmVjdG9ycyBmcm9tIHBvc2l0aW9ucyBhbmQgaW5kaWNlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYnVpbGROb3JtYWxzOiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCBhID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgYiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IGMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICBjb25zdCBhYiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IGFjID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgY29uc3QgY3Jvc3NWZWMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuXG4gICAgICAgIHJldHVybiAocG9zaXRpb25zLCBpbmRpY2VzLCBub3JtYWxzKSA9PiB7XG5cbiAgICAgICAgICAgIGxldCBpO1xuICAgICAgICAgICAgbGV0IGxlbjtcbiAgICAgICAgICAgIGNvbnN0IG52ZWNzID0gbmV3IEFycmF5KHBvc2l0aW9ucy5sZW5ndGggLyAzKTtcbiAgICAgICAgICAgIGxldCBqMDtcbiAgICAgICAgICAgIGxldCBqMTtcbiAgICAgICAgICAgIGxldCBqMjtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMykge1xuXG4gICAgICAgICAgICAgICAgajAgPSBpbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgIGoxID0gaW5kaWNlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgajIgPSBpbmRpY2VzW2kgKyAyXTtcblxuICAgICAgICAgICAgICAgIGFbMF0gPSBwb3NpdGlvbnNbajAgKiAzXTtcbiAgICAgICAgICAgICAgICBhWzFdID0gcG9zaXRpb25zW2owICogMyArIDFdO1xuICAgICAgICAgICAgICAgIGFbMl0gPSBwb3NpdGlvbnNbajAgKiAzICsgMl07XG5cbiAgICAgICAgICAgICAgICBiWzBdID0gcG9zaXRpb25zW2oxICogM107XG4gICAgICAgICAgICAgICAgYlsxXSA9IHBvc2l0aW9uc1tqMSAqIDMgKyAxXTtcbiAgICAgICAgICAgICAgICBiWzJdID0gcG9zaXRpb25zW2oxICogMyArIDJdO1xuXG4gICAgICAgICAgICAgICAgY1swXSA9IHBvc2l0aW9uc1tqMiAqIDNdO1xuICAgICAgICAgICAgICAgIGNbMV0gPSBwb3NpdGlvbnNbajIgKiAzICsgMV07XG4gICAgICAgICAgICAgICAgY1syXSA9IHBvc2l0aW9uc1tqMiAqIDMgKyAyXTtcblxuICAgICAgICAgICAgICAgIG1hdGguc3ViVmVjMyhiLCBhLCBhYik7XG4gICAgICAgICAgICAgICAgbWF0aC5zdWJWZWMzKGMsIGEsIGFjKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1WZWMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuXG4gICAgICAgICAgICAgICAgbWF0aC5ub3JtYWxpemVWZWMzKG1hdGguY3Jvc3MzVmVjMyhhYiwgYWMsIGNyb3NzVmVjKSwgbm9ybVZlYyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW52ZWNzW2owXSkge1xuICAgICAgICAgICAgICAgICAgICBudmVjc1tqMF0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFudmVjc1tqMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbnZlY3NbajFdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghbnZlY3NbajJdKSB7XG4gICAgICAgICAgICAgICAgICAgIG52ZWNzW2oyXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG52ZWNzW2owXS5wdXNoKG5vcm1WZWMpO1xuICAgICAgICAgICAgICAgIG52ZWNzW2oxXS5wdXNoKG5vcm1WZWMpO1xuICAgICAgICAgICAgICAgIG52ZWNzW2oyXS5wdXNoKG5vcm1WZWMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3JtYWxzID0gKG5vcm1hbHMgJiYgbm9ybWFscy5sZW5ndGggPT09IHBvc2l0aW9ucy5sZW5ndGgpID8gbm9ybWFscyA6IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25zLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGxldCBjb3VudDtcbiAgICAgICAgICAgIGxldCB4O1xuICAgICAgICAgICAgbGV0IHk7XG4gICAgICAgICAgICBsZXQgejtcblxuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gbnZlY3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsgIC8vIE5vdyBnbyB0aHJvdWdoIGFuZCBhdmVyYWdlIG91dCBldmVyeXRoaW5nXG5cbiAgICAgICAgICAgICAgICBjb3VudCA9IG52ZWNzW2ldLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICAgICAgICAgIHogPSAwO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gbnZlY3NbaV1bal1bMF07XG4gICAgICAgICAgICAgICAgICAgIHkgKz0gbnZlY3NbaV1bal1bMV07XG4gICAgICAgICAgICAgICAgICAgIHogKz0gbnZlY3NbaV1bal1bMl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm9ybWFsc1tpICogM10gPSAoeCAvIGNvdW50KTtcbiAgICAgICAgICAgICAgICBub3JtYWxzW2kgKiAzICsgMV0gPSAoeSAvIGNvdW50KTtcbiAgICAgICAgICAgICAgICBub3JtYWxzW2kgKiAzICsgMl0gPSAoeiAvIGNvdW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbHM7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgdmVydGV4IHRhbmdlbnQgdmVjdG9ycyBmcm9tIHBvc2l0aW9ucywgVVZzIGFuZCBpbmRpY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBidWlsZFRhbmdlbnRzOiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCB0ZW1wVmVjMyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzYiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzYyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZSA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWMzZyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG5cbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbnMsIGluZGljZXMsIHV2KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhbmdlbnRzID0gbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbnMubGVuZ3RoKTtcblxuICAgICAgICAgICAgLy8gVGhlIHZlcnRleCBhcnJheXMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZFxuICAgICAgICAgICAgLy8gYmVmb3JlIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgdGFuZ2VudHNcblxuICAgICAgICAgICAgZm9yIChsZXQgbG9jYXRpb24gPSAwOyBsb2NhdGlvbiA8IGluZGljZXMubGVuZ3RoOyBsb2NhdGlvbiArPSAzKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBSZWNvbnRydWN0aW5nIGVhY2ggdmVydGV4IGFuZCBVViBjb29yZGluYXRlIGludG8gdGhlIHJlc3BlY3RpdmUgdmVjdG9yc1xuXG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gaW5kaWNlc1tsb2NhdGlvbl07XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHBvc2l0aW9ucy5zdWJhcnJheShpbmRleCAqIDMsIGluZGV4ICogMyArIDMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHV2MCA9IHV2LnN1YmFycmF5KGluZGV4ICogMiwgaW5kZXggKiAyICsgMik7XG5cbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGljZXNbbG9jYXRpb24gKyAxXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gcG9zaXRpb25zLnN1YmFycmF5KGluZGV4ICogMywgaW5kZXggKiAzICsgMyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXYxID0gdXYuc3ViYXJyYXkoaW5kZXggKiAyLCBpbmRleCAqIDIgKyAyKTtcblxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kaWNlc1tsb2NhdGlvbiArIDJdO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdjIgPSBwb3NpdGlvbnMuc3ViYXJyYXkoaW5kZXggKiAzLCBpbmRleCAqIDMgKyAzKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1djIgPSB1di5zdWJhcnJheShpbmRleCAqIDIsIGluZGV4ICogMiArIDIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGFQb3MxID0gbWF0aC5zdWJWZWMzKHYxLCB2MCwgdGVtcFZlYzMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhUG9zMiA9IG1hdGguc3ViVmVjMyh2MiwgdjAsIHRlbXBWZWMzYik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVVWMSA9IG1hdGguc3ViVmVjMih1djEsIHV2MCwgdGVtcFZlYzNjKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YVVWMiA9IG1hdGguc3ViVmVjMih1djIsIHV2MCwgdGVtcFZlYzNkKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAxIC8gKChkZWx0YVVWMVswXSAqIGRlbHRhVVYyWzFdKSAtIChkZWx0YVVWMVsxXSAqIGRlbHRhVVYyWzBdKSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0YW5nZW50ID0gbWF0aC5tdWxWZWMzU2NhbGFyKFxuICAgICAgICAgICAgICAgICAgICBtYXRoLnN1YlZlYzMoXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRoLm11bFZlYzNTY2FsYXIoZGVsdGFQb3MxLCBkZWx0YVVWMlsxXSwgdGVtcFZlYzNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGgubXVsVmVjM1NjYWxhcihkZWx0YVBvczIsIGRlbHRhVVYxWzFdLCB0ZW1wVmVjM2YpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFZlYzNnXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBWZWMzZlxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyBBdmVyYWdlIHRoZSB2YWx1ZSBvZiB0aGUgdmVjdG9yc1xuXG4gICAgICAgICAgICAgICAgbGV0IGFkZFRvO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCAzOyB2KyspIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkVG8gPSBpbmRpY2VzW2xvY2F0aW9uICsgdl0gKiAzO1xuICAgICAgICAgICAgICAgICAgICB0YW5nZW50c1thZGRUb10gKz0gdGFuZ2VudFswXTtcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudHNbYWRkVG8gKyAxXSArPSB0YW5nZW50WzFdO1xuICAgICAgICAgICAgICAgICAgICB0YW5nZW50c1thZGRUbyArIDJdICs9IHRhbmdlbnRbMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFuZ2VudHM7XG4gICAgICAgIH07XG4gICAgfSkpKCksXG5cbiAgICAvKipcbiAgICAgKiBCdWlsZHMgdmVydGV4IGFuZCBpbmRleCBhcnJheXMgbmVlZGVkIGJ5IGNvbG9yLWluZGV4ZWQgdHJpYW5nbGUgcGlja2luZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYnVpbGRQaWNrVHJpYW5nbGVzKHBvc2l0aW9ucywgaW5kaWNlcywgY29tcHJlc3NHZW9tZXRyeSkge1xuXG4gICAgICAgIGNvbnN0IG51bUluZGljZXMgPSBpbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcGlja1Bvc2l0aW9ucyA9IGNvbXByZXNzR2VvbWV0cnkgPyBuZXcgVWludDE2QXJyYXkobnVtSW5kaWNlcyAqIDkpIDogbmV3IEZsb2F0MzJBcnJheShudW1JbmRpY2VzICogOSk7XG4gICAgICAgIGNvbnN0IHBpY2tDb2xvcnMgPSBuZXcgVWludDhBcnJheShudW1JbmRpY2VzICogMTIpO1xuICAgICAgICBsZXQgcHJpbUluZGV4ID0gMDtcbiAgICAgICAgbGV0IHZpOy8vIFBvc2l0aW9ucyBhcnJheSBpbmRleFxuICAgICAgICBsZXQgcHZpID0gMDsvLyBQaWNraW5nIHBvc2l0aW9ucyBhcnJheSBpbmRleFxuICAgICAgICBsZXQgcGNpID0gMDsgLy8gUGlja2luZyBjb2xvciBhcnJheSBpbmRleFxuXG4gICAgICAgIC8vIFRyaWFuZ2xlIGluZGljZXNcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGxldCByO1xuICAgICAgICBsZXQgZztcbiAgICAgICAgbGV0IGI7XG4gICAgICAgIGxldCBhO1xuXG4gICAgICAgIGZvciAobGV0IGxvY2F0aW9uID0gMDsgbG9jYXRpb24gPCBudW1JbmRpY2VzOyBsb2NhdGlvbiArPSAzKSB7XG5cbiAgICAgICAgICAgIC8vIFByaW1pdGl2ZS1pbmRleGVkIHRyaWFuZ2xlIHBpY2sgY29sb3JcblxuICAgICAgICAgICAgYSA9IChwcmltSW5kZXggPj4gMjQgJiAweEZGKTtcbiAgICAgICAgICAgIGIgPSAocHJpbUluZGV4ID4+IDE2ICYgMHhGRik7XG4gICAgICAgICAgICBnID0gKHByaW1JbmRleCA+PiA4ICYgMHhGRik7XG4gICAgICAgICAgICByID0gKHByaW1JbmRleCAmIDB4RkYpO1xuXG4gICAgICAgICAgICAvLyBBXG5cbiAgICAgICAgICAgIGkgPSBpbmRpY2VzW2xvY2F0aW9uXTtcbiAgICAgICAgICAgIHZpID0gaSAqIDM7XG5cbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpXTtcbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpICsgMV07XG4gICAgICAgICAgICBwaWNrUG9zaXRpb25zW3B2aSsrXSA9IHBvc2l0aW9uc1t2aSArIDJdO1xuXG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IHI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGc7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGE7XG5cbiAgICAgICAgICAgIC8vIEJcblxuICAgICAgICAgICAgaSA9IGluZGljZXNbbG9jYXRpb24gKyAxXTtcbiAgICAgICAgICAgIHZpID0gaSAqIDM7XG5cbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpXTtcbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpICsgMV07XG4gICAgICAgICAgICBwaWNrUG9zaXRpb25zW3B2aSsrXSA9IHBvc2l0aW9uc1t2aSArIDJdO1xuXG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IHI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGc7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGE7XG5cbiAgICAgICAgICAgIC8vIENcblxuICAgICAgICAgICAgaSA9IGluZGljZXNbbG9jYXRpb24gKyAyXTtcbiAgICAgICAgICAgIHZpID0gaSAqIDM7XG5cbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpXTtcbiAgICAgICAgICAgIHBpY2tQb3NpdGlvbnNbcHZpKytdID0gcG9zaXRpb25zW3ZpICsgMV07XG4gICAgICAgICAgICBwaWNrUG9zaXRpb25zW3B2aSsrXSA9IHBvc2l0aW9uc1t2aSArIDJdO1xuXG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IHI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGc7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGI7XG4gICAgICAgICAgICBwaWNrQ29sb3JzW3BjaSsrXSA9IGE7XG5cbiAgICAgICAgICAgIHByaW1JbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvc2l0aW9uczogcGlja1Bvc2l0aW9ucyxcbiAgICAgICAgICAgIGNvbG9yczogcGlja0NvbG9yc1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBzdXJmYWNlLXBlcnBlbmRpY3VsYXIgZmFjZSBub3JtYWxzIHRvIHZlcnRleCBub3JtYWxzLiBBc3N1bWVzIHRoYXQgdGhlIG1lc2ggY29udGFpbnMgZGlzam9pbnQgdHJpYW5nbGVzXG4gICAgICogdGhhdCBkb24ndCBzaGFyZSB2ZXJ0ZXggYXJyYXkgZWxlbWVudHMuIFdvcmtzIGJ5IGZpbmRpbmcgZ3JvdXBzIG9mIHZlcnRpY2VzIHRoYXQgaGF2ZSB0aGUgc2FtZSBsb2NhdGlvbiBhbmRcbiAgICAgKiBhdmVyYWdpbmcgdGhlaXIgbm9ybWFsIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7e3Bvc2l0aW9uczogQXJyYXksIG5vcm1hbHM6ICp9fVxuICAgICAqL1xuICAgIGZhY2VUb1ZlcnRleE5vcm1hbHMocG9zaXRpb25zLCBub3JtYWxzLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3Qgc21vb3RoTm9ybWFsc0FuZ2xlVGhyZXNob2xkID0gb3B0aW9ucy5zbW9vdGhOb3JtYWxzQW5nbGVUaHJlc2hvbGQgfHwgMjA7XG4gICAgICAgIGNvbnN0IHZlcnRleE1hcCA9IHt9O1xuICAgICAgICBjb25zdCB2ZXJ0ZXhOb3JtYWxzID0gW107XG4gICAgICAgIGNvbnN0IHZlcnRleE5vcm1hbEFjY3VtID0ge307XG4gICAgICAgIGxldCBhY2M7XG4gICAgICAgIGxldCB2eDtcbiAgICAgICAgbGV0IHZ5O1xuICAgICAgICBsZXQgdno7XG4gICAgICAgIGxldCBrZXk7XG4gICAgICAgIGNvbnN0IHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMVxuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSAxMCAqKiBwcmVjaXNpb25Qb2ludHM7XG4gICAgICAgIGxldCBwb3NpO1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgbGV0IGo7XG4gICAgICAgIGxldCBsZW47XG4gICAgICAgIGxldCBhO1xuICAgICAgICBsZXQgYjtcbiAgICAgICAgbGV0IGM7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAzKSB7XG5cbiAgICAgICAgICAgIHBvc2kgPSBpIC8gMztcblxuICAgICAgICAgICAgdnggPSBwb3NpdGlvbnNbaV07XG4gICAgICAgICAgICB2eSA9IHBvc2l0aW9uc1tpICsgMV07XG4gICAgICAgICAgICB2eiA9IHBvc2l0aW9uc1tpICsgMl07XG5cbiAgICAgICAgICAgIGtleSA9IGAke01hdGgucm91bmQodnggKiBwcmVjaXNpb24pfV8ke01hdGgucm91bmQodnkgKiBwcmVjaXNpb24pfV8ke01hdGgucm91bmQodnogKiBwcmVjaXNpb24pfWA7XG5cbiAgICAgICAgICAgIGlmICh2ZXJ0ZXhNYXBba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmVydGV4TWFwW2tleV0gPSBbcG9zaV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlcnRleE1hcFtrZXldLnB1c2gocG9zaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbCA9IG1hdGgubm9ybWFsaXplVmVjMyhbbm9ybWFsc1tpXSwgbm9ybWFsc1tpICsgMV0sIG5vcm1hbHNbaSArIDJdXSk7XG5cbiAgICAgICAgICAgIHZlcnRleE5vcm1hbHNbcG9zaV0gPSBub3JtYWw7XG5cbiAgICAgICAgICAgIGFjYyA9IG1hdGgudmVjNChbbm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSwgMV0pO1xuXG4gICAgICAgICAgICB2ZXJ0ZXhOb3JtYWxBY2N1bVtwb3NpXSA9IGFjYztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoa2V5IGluIHZlcnRleE1hcCkge1xuXG4gICAgICAgICAgICBpZiAodmVydGV4TWFwLmhhc093blByb3BlcnR5KGtleSkpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnRpY2VzID0gdmVydGV4TWFwW2tleV07XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtVmVydHMgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtVmVydHM7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlpID0gdmVydGljZXNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgYWNjID0gdmVydGV4Tm9ybWFsQWNjdW1baWldO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBudW1WZXJ0czsgaisrKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGpqID0gdmVydGljZXNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB2ZXJ0ZXhOb3JtYWxzW2lpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSB2ZXJ0ZXhOb3JtYWxzW2pqXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLmFicyhtYXRoLmFuZ2xlVmVjMyhhLCBiKSAvIG1hdGguREVHVE9SQUQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5nbGUgPCBzbW9vdGhOb3JtYWxzQW5nbGVUaHJlc2hvbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY1swXSArPSBiWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY1sxXSArPSBiWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY1syXSArPSBiWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY1szXSArPSAxLjA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBub3JtYWxzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAzKSB7XG5cbiAgICAgICAgICAgIGFjYyA9IHZlcnRleE5vcm1hbEFjY3VtW2kgLyAzXTtcblxuICAgICAgICAgICAgbm9ybWFsc1tpICsgMF0gPSBhY2NbMF0gLyBhY2NbM107XG4gICAgICAgICAgICBub3JtYWxzW2kgKyAxXSA9IGFjY1sxXSAvIGFjY1szXTtcbiAgICAgICAgICAgIG5vcm1hbHNbaSArIDJdID0gYWNjWzJdIC8gYWNjWzNdO1xuXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBSYXkgY2FzdGluZ1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvKipcbiAgICAgVHJhbnNmb3JtcyBhIENhbnZhcy1zcGFjZSBwb3NpdGlvbiBpbnRvIGEgV29ybGQtc3BhY2UgcmF5LCBpbiB0aGUgY29udGV4dCBvZiBhIENhbWVyYS5cbiAgICAgQG1ldGhvZCBjYW52YXNQb3NUb1dvcmxkUmF5XG4gICAgIEBzdGF0aWNcbiAgICAgQHBhcmFtIHtOdW1iZXJbXX0gdmlld01hdHJpeCBWaWV3IG1hdHJpeFxuICAgICBAcGFyYW0ge051bWJlcltdfSBwcm9qTWF0cml4IFByb2plY3Rpb24gbWF0cml4XG4gICAgIEBwYXJhbSB7TnVtYmVyW119IGNhbnZhc1BvcyBUaGUgQ2FudmFzLXNwYWNlIHBvc2l0aW9uLlxuICAgICBAcGFyYW0ge051bWJlcltdfSB3b3JsZFJheU9yaWdpbiBUaGUgV29ybGQtc3BhY2UgcmF5IG9yaWdpbi5cbiAgICAgQHBhcmFtIHtOdW1iZXJbXX0gd29ybGRSYXlEaXIgVGhlIFdvcmxkLXNwYWNlIHJheSBkaXJlY3Rpb24uXG4gICAgICovXG4gICAgY2FudmFzUG9zVG9Xb3JsZFJheTogKCgoKSA9PiB7XG5cbiAgICAgICAgY29uc3QgdGVtcE1hdDRiID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG4gICAgICAgIGNvbnN0IHRlbXBNYXQ0YyA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xuICAgICAgICBjb25zdCB0ZW1wVmVjNGEgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgICAgICBjb25zdCB0ZW1wVmVjNGIgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgICAgICBjb25zdCB0ZW1wVmVjNGMgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgICAgICBjb25zdCB0ZW1wVmVjNGQgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuXG4gICAgICAgIHJldHVybiAoY2FudmFzLCB2aWV3TWF0cml4LCBwcm9qTWF0cml4LCBjYW52YXNQb3MsIHdvcmxkUmF5T3JpZ2luLCB3b3JsZFJheURpcikgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBwdk1hdCA9IG1hdGgubXVsTWF0NChwcm9qTWF0cml4LCB2aWV3TWF0cml4LCB0ZW1wTWF0NGIpO1xuICAgICAgICAgICAgY29uc3QgcHZNYXRJbnZlcnNlID0gbWF0aC5pbnZlcnNlTWF0NChwdk1hdCwgdGVtcE1hdDRjKTtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGNsaXAgc3BhY2UgY29vcmRpbmF0ZXMsIHdoaWNoIHdpbGwgYmUgaW4gcmFuZ2VcbiAgICAgICAgICAgIC8vIG9mIHg9Wy0xLi4xXSBhbmQgeT1bLTEuLjFdLCB3aXRoIHk9KCsxKSBhdCB0b3BcblxuICAgICAgICAgICAgY29uc3QgY2FudmFzV2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBjYW52YXNIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgICAgICBjb25zdCBjbGlwWCA9IChjYW52YXNQb3NbMF0gLSBjYW52YXNXaWR0aCAvIDIpIC8gKGNhbnZhc1dpZHRoIC8gMik7ICAvLyBDYWxjdWxhdGUgY2xpcCBzcGFjZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgY29uc3QgY2xpcFkgPSAtKGNhbnZhc1Bvc1sxXSAtIGNhbnZhc0hlaWdodCAvIDIpIC8gKGNhbnZhc0hlaWdodCAvIDIpO1xuXG4gICAgICAgICAgICB0ZW1wVmVjNGFbMF0gPSBjbGlwWDtcbiAgICAgICAgICAgIHRlbXBWZWM0YVsxXSA9IGNsaXBZO1xuICAgICAgICAgICAgdGVtcFZlYzRhWzJdID0gLTE7XG4gICAgICAgICAgICB0ZW1wVmVjNGFbM10gPSAxO1xuXG4gICAgICAgICAgICBtYXRoLnRyYW5zZm9ybVZlYzQocHZNYXRJbnZlcnNlLCB0ZW1wVmVjNGEsIHRlbXBWZWM0Yik7XG4gICAgICAgICAgICBtYXRoLm11bFZlYzRTY2FsYXIodGVtcFZlYzRiLCAxIC8gdGVtcFZlYzRiWzNdKTtcblxuICAgICAgICAgICAgdGVtcFZlYzRjWzBdID0gY2xpcFg7XG4gICAgICAgICAgICB0ZW1wVmVjNGNbMV0gPSBjbGlwWTtcbiAgICAgICAgICAgIHRlbXBWZWM0Y1syXSA9IDE7XG4gICAgICAgICAgICB0ZW1wVmVjNGNbM10gPSAxO1xuXG4gICAgICAgICAgICBtYXRoLnRyYW5zZm9ybVZlYzQocHZNYXRJbnZlcnNlLCB0ZW1wVmVjNGMsIHRlbXBWZWM0ZCk7XG4gICAgICAgICAgICBtYXRoLm11bFZlYzRTY2FsYXIodGVtcFZlYzRkLCAxIC8gdGVtcFZlYzRkWzNdKTtcblxuICAgICAgICAgICAgd29ybGRSYXlPcmlnaW5bMF0gPSB0ZW1wVmVjNGRbMF07XG4gICAgICAgICAgICB3b3JsZFJheU9yaWdpblsxXSA9IHRlbXBWZWM0ZFsxXTtcbiAgICAgICAgICAgIHdvcmxkUmF5T3JpZ2luWzJdID0gdGVtcFZlYzRkWzJdO1xuXG4gICAgICAgICAgICBtYXRoLnN1YlZlYzModGVtcFZlYzRkLCB0ZW1wVmVjNGIsIHdvcmxkUmF5RGlyKTtcblxuICAgICAgICAgICAgbWF0aC5ub3JtYWxpemVWZWMzKHdvcmxkUmF5RGlyKTtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIC8qKlxuICAgICBUcmFuc2Zvcm1zIGEgQ2FudmFzLXNwYWNlIHBvc2l0aW9uIHRvIGEgTWVzaCdzIExvY2FsLXNwYWNlIGNvb3JkaW5hdGUgc3lzdGVtLCBpbiB0aGUgY29udGV4dCBvZiBhIENhbWVyYS5cbiAgICAgQG1ldGhvZCBjYW52YXNQb3NUb0xvY2FsUmF5XG4gICAgIEBzdGF0aWNcbiAgICAgQHBhcmFtIHtDYW1lcmF9IGNhbWVyYSBUaGUgQ2FtZXJhLlxuICAgICBAcGFyYW0ge01lc2h9IG1lc2ggVGhlIE1lc2guXG4gICAgIEBwYXJhbSB7TnVtYmVyW119IHZpZXdNYXRyaXggVmlldyBtYXRyaXhcbiAgICAgQHBhcmFtIHtOdW1iZXJbXX0gcHJvak1hdHJpeCBQcm9qZWN0aW9uIG1hdHJpeFxuICAgICBAcGFyYW0ge051bWJlcltdfSB3b3JsZE1hdHJpeCBNb2RlbGluZyBtYXRyaXhcbiAgICAgQHBhcmFtIHtOdW1iZXJbXX0gY2FudmFzUG9zIFRoZSBDYW52YXMtc3BhY2UgcG9zaXRpb24uXG4gICAgIEBwYXJhbSB7TnVtYmVyW119IGxvY2FsUmF5T3JpZ2luIFRoZSBMb2NhbC1zcGFjZSByYXkgb3JpZ2luLlxuICAgICBAcGFyYW0ge051bWJlcltdfSBsb2NhbFJheURpciBUaGUgTG9jYWwtc3BhY2UgcmF5IGRpcmVjdGlvbi5cbiAgICAgKi9cbiAgICBjYW52YXNQb3NUb0xvY2FsUmF5OiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCB3b3JsZFJheU9yaWdpbiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIGNvbnN0IHdvcmxkUmF5RGlyID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcblxuICAgICAgICByZXR1cm4gKGNhbnZhcywgdmlld01hdHJpeCwgcHJvak1hdHJpeCwgd29ybGRNYXRyaXgsIGNhbnZhc1BvcywgbG9jYWxSYXlPcmlnaW4sIGxvY2FsUmF5RGlyKSA9PiB7XG4gICAgICAgICAgICBtYXRoLmNhbnZhc1Bvc1RvV29ybGRSYXkoY2FudmFzLCB2aWV3TWF0cml4LCBwcm9qTWF0cml4LCBjYW52YXNQb3MsIHdvcmxkUmF5T3JpZ2luLCB3b3JsZFJheURpcik7XG4gICAgICAgICAgICBtYXRoLndvcmxkUmF5VG9Mb2NhbFJheSh3b3JsZE1hdHJpeCwgd29ybGRSYXlPcmlnaW4sIHdvcmxkUmF5RGlyLCBsb2NhbFJheU9yaWdpbiwgbG9jYWxSYXlEaXIpO1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG4gICAgLyoqXG4gICAgIFRyYW5zZm9ybXMgYSByYXkgZnJvbSBXb3JsZC1zcGFjZSB0byBhIE1lc2gncyBMb2NhbC1zcGFjZSBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgQG1ldGhvZCB3b3JsZFJheVRvTG9jYWxSYXlcbiAgICAgQHN0YXRpY1xuICAgICBAcGFyYW0ge051bWJlcltdfSB3b3JsZE1hdHJpeCBUaGUgV29ybGQgdHJhbnNmb3JtIG1hdHJpeFxuICAgICBAcGFyYW0ge051bWJlcltdfSB3b3JsZFJheU9yaWdpbiBUaGUgV29ybGQtc3BhY2UgcmF5IG9yaWdpbi5cbiAgICAgQHBhcmFtIHtOdW1iZXJbXX0gd29ybGRSYXlEaXIgVGhlIFdvcmxkLXNwYWNlIHJheSBkaXJlY3Rpb24uXG4gICAgIEBwYXJhbSB7TnVtYmVyW119IGxvY2FsUmF5T3JpZ2luIFRoZSBMb2NhbC1zcGFjZSByYXkgb3JpZ2luLlxuICAgICBAcGFyYW0ge051bWJlcltdfSBsb2NhbFJheURpciBUaGUgTG9jYWwtc3BhY2UgcmF5IGRpcmVjdGlvbi5cbiAgICAgKi9cbiAgICB3b3JsZFJheVRvTG9jYWxSYXk6ICgoKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IHRlbXBNYXQ0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG4gICAgICAgIGNvbnN0IHRlbXBWZWM0YSA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG4gICAgICAgIGNvbnN0IHRlbXBWZWM0YiA9IG5ldyBGbG9hdDMyQXJyYXkoNCk7XG5cbiAgICAgICAgcmV0dXJuICh3b3JsZE1hdHJpeCwgd29ybGRSYXlPcmlnaW4sIHdvcmxkUmF5RGlyLCBsb2NhbFJheU9yaWdpbiwgbG9jYWxSYXlEaXIpID0+IHtcblxuICAgICAgICAgICAgY29uc3QgbW9kZWxNYXRJbnZlcnNlID0gbWF0aC5pbnZlcnNlTWF0NCh3b3JsZE1hdHJpeCwgdGVtcE1hdDQpO1xuXG4gICAgICAgICAgICB0ZW1wVmVjNGFbMF0gPSB3b3JsZFJheU9yaWdpblswXTtcbiAgICAgICAgICAgIHRlbXBWZWM0YVsxXSA9IHdvcmxkUmF5T3JpZ2luWzFdO1xuICAgICAgICAgICAgdGVtcFZlYzRhWzJdID0gd29ybGRSYXlPcmlnaW5bMl07XG4gICAgICAgICAgICB0ZW1wVmVjNGFbM10gPSAxO1xuXG4gICAgICAgICAgICBtYXRoLnRyYW5zZm9ybVZlYzQobW9kZWxNYXRJbnZlcnNlLCB0ZW1wVmVjNGEsIHRlbXBWZWM0Yik7XG5cbiAgICAgICAgICAgIGxvY2FsUmF5T3JpZ2luWzBdID0gdGVtcFZlYzRiWzBdO1xuICAgICAgICAgICAgbG9jYWxSYXlPcmlnaW5bMV0gPSB0ZW1wVmVjNGJbMV07XG4gICAgICAgICAgICBsb2NhbFJheU9yaWdpblsyXSA9IHRlbXBWZWM0YlsyXTtcblxuICAgICAgICAgICAgbWF0aC50cmFuc2Zvcm1WZWMzKG1vZGVsTWF0SW52ZXJzZSwgd29ybGRSYXlEaXIsIGxvY2FsUmF5RGlyKTtcbiAgICAgICAgfTtcbiAgICB9KSkoKSxcblxuICAgIGJ1aWxkS0RUcmVlOiAoKCgpID0+IHtcblxuICAgICAgICBjb25zdCBLRF9UUkVFX01BWF9ERVBUSCA9IDEwO1xuICAgICAgICBjb25zdCBLRF9UUkVFX01JTl9UUklBTkdMRVMgPSAyMDtcblxuICAgICAgICBjb25zdCBkaW1MZW5ndGggPSBuZXcgRmxvYXQzMkFycmF5KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGROb2RlKHRyaWFuZ2xlcywgaW5kaWNlcywgcG9zaXRpb25zLCBkZXB0aCkge1xuICAgICAgICAgICAgY29uc3QgYWFiYiA9IG5ldyBGbG9hdDMyQXJyYXkoNik7XG5cbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbGVhZjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3BsaXREaW06IDAsXG4gICAgICAgICAgICAgICAgYWFiYlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYWFiYlswXSA9IGFhYmJbMV0gPSBhYWJiWzJdID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgYWFiYlszXSA9IGFhYmJbNF0gPSBhYWJiWzVdID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gICAgICAgICAgICBsZXQgdDtcbiAgICAgICAgICAgIGxldCBpO1xuICAgICAgICAgICAgbGV0IGxlbjtcblxuICAgICAgICAgICAgZm9yICh0ID0gMCwgbGVuID0gdHJpYW5nbGVzLmxlbmd0aDsgdCA8IGxlbjsgKyt0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlpID0gdHJpYW5nbGVzW3RdICogMztcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaSA9IGluZGljZXNbaWkgKyBqXSAqIDM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbnNbcGldIDwgYWFiYlswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWFiYlswXSA9IHBvc2l0aW9uc1twaV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25zW3BpXSA+IGFhYmJbM10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFhYmJbM10gPSBwb3NpdGlvbnNbcGldXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1twaSArIDFdIDwgYWFiYlsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWFiYlsxXSA9IHBvc2l0aW9uc1twaSArIDFdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1twaSArIDFdID4gYWFiYls0XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWFiYls0XSA9IHBvc2l0aW9uc1twaSArIDFdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1twaSArIDJdIDwgYWFiYlsyXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWFiYlsyXSA9IHBvc2l0aW9uc1twaSArIDJdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uc1twaSArIDJdID4gYWFiYls1XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWFiYls1XSA9IHBvc2l0aW9uc1twaSArIDJdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0cmlhbmdsZXMubGVuZ3RoIDwgS0RfVFJFRV9NSU5fVFJJQU5HTEVTIHx8IGRlcHRoID4gS0RfVFJFRV9NQVhfREVQVEgpIHtcbiAgICAgICAgICAgICAgICBub2RlLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcztcbiAgICAgICAgICAgICAgICBub2RlLmxlYWYgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkaW1MZW5ndGhbMF0gPSBhYWJiWzNdIC0gYWFiYlswXTtcbiAgICAgICAgICAgIGRpbUxlbmd0aFsxXSA9IGFhYmJbNF0gLSBhYWJiWzFdO1xuICAgICAgICAgICAgZGltTGVuZ3RoWzJdID0gYWFiYls1XSAtIGFhYmJbMl07XG5cbiAgICAgICAgICAgIGxldCBkaW0gPSAwO1xuXG4gICAgICAgICAgICBpZiAoZGltTGVuZ3RoWzFdID4gZGltTGVuZ3RoW2RpbV0pIHtcbiAgICAgICAgICAgICAgICBkaW0gPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGltTGVuZ3RoWzJdID4gZGltTGVuZ3RoW2RpbV0pIHtcbiAgICAgICAgICAgICAgICBkaW0gPSAyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlLnNwbGl0RGltID0gZGltO1xuXG4gICAgICAgICAgICBjb25zdCBtaWQgPSAoYWFiYltkaW1dICsgYWFiYltkaW0gKyAzXSkgLyAyO1xuICAgICAgICAgICAgY29uc3QgbGVmdCA9IG5ldyBBcnJheSh0cmlhbmdsZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGxldCBudW1MZWZ0ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gbmV3IEFycmF5KHRyaWFuZ2xlcy5sZW5ndGgpO1xuICAgICAgICAgICAgbGV0IG51bVJpZ2h0ID0gMDtcblxuICAgICAgICAgICAgZm9yICh0ID0gMCwgbGVuID0gdHJpYW5nbGVzLmxlbmd0aDsgdCA8IGxlbjsgKyt0KSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaWkgPSB0cmlhbmdsZXNbdF0gKiAzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpaV07XG4gICAgICAgICAgICAgICAgY29uc3QgaTEgPSBpbmRpY2VzW2lpICsgMV07XG4gICAgICAgICAgICAgICAgY29uc3QgaTIgPSBpbmRpY2VzW2lpICsgMl07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwaTAgPSBpMCAqIDM7XG4gICAgICAgICAgICAgICAgY29uc3QgcGkxID0gaTEgKiAzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpMiA9IGkyICogMztcblxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbnNbcGkwICsgZGltXSA8PSBtaWQgfHwgcG9zaXRpb25zW3BpMSArIGRpbV0gPD0gbWlkIHx8IHBvc2l0aW9uc1twaTIgKyBkaW1dIDw9IG1pZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0W251bUxlZnQrK10gPSB0cmlhbmdsZXNbdF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRbbnVtUmlnaHQrK10gPSB0cmlhbmdsZXNbdF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZWZ0Lmxlbmd0aCA9IG51bUxlZnQ7XG4gICAgICAgICAgICByaWdodC5sZW5ndGggPSBudW1SaWdodDtcblxuICAgICAgICAgICAgbm9kZS5sZWZ0ID0gYnVpbGROb2RlKGxlZnQsIGluZGljZXMsIHBvc2l0aW9ucywgZGVwdGggKyAxKTtcbiAgICAgICAgICAgIG5vZGUucmlnaHQgPSBidWlsZE5vZGUocmlnaHQsIGluZGljZXMsIHBvc2l0aW9ucywgZGVwdGggKyAxKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGluZGljZXMsIHBvc2l0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbnVtVHJpcyA9IGluZGljZXMubGVuZ3RoIC8gMztcbiAgICAgICAgICAgIGNvbnN0IHRyaWFuZ2xlcyA9IG5ldyBBcnJheShudW1UcmlzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVHJpczsgKytpKSB7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGVzW2ldID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBidWlsZE5vZGUodHJpYW5nbGVzLCBpbmRpY2VzLCBwb3NpdGlvbnMsIDApO1xuICAgICAgICB9O1xuICAgIH0pKSgpLFxuXG5cbiAgICBkZWNvbXByZXNzUG9zaXRpb24ocG9zaXRpb24sIGRlY29kZU1hdHJpeCwgZGVzdCkge1xuICAgICAgICBkZXN0WzBdID0gcG9zaXRpb25bMF0gKiBkZWNvZGVNYXRyaXhbMF0gKyBkZWNvZGVNYXRyaXhbMTJdO1xuICAgICAgICBkZXN0WzFdID0gcG9zaXRpb25bMV0gKiBkZWNvZGVNYXRyaXhbNV0gKyBkZWNvZGVNYXRyaXhbMTNdO1xuICAgICAgICBkZXN0WzJdID0gcG9zaXRpb25bMl0gKiBkZWNvZGVNYXRyaXhbMTBdICsgZGVjb2RlTWF0cml4WzE0XTtcbiAgICB9LFxuXG4gICAgZGVjb21wcmVzc1Bvc2l0aW9ucyhwb3NpdGlvbnMsIGRlY29kZU1hdHJpeCwgZGVzdCA9IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25zLmxlbmd0aCkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgZGVzdFtpICsgMF0gPSBwb3NpdGlvbnNbaSArIDBdICogZGVjb2RlTWF0cml4WzBdICsgZGVjb2RlTWF0cml4WzEyXTtcbiAgICAgICAgICAgIGRlc3RbaSArIDFdID0gcG9zaXRpb25zW2kgKyAxXSAqIGRlY29kZU1hdHJpeFs1XSArIGRlY29kZU1hdHJpeFsxM107XG4gICAgICAgICAgICBkZXN0W2kgKyAyXSA9IHBvc2l0aW9uc1tpICsgMl0gKiBkZWNvZGVNYXRyaXhbMTBdICsgZGVjb2RlTWF0cml4WzE0XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgZGVjb21wcmVzc1VWKHV2LCBkZWNvZGVNYXRyaXgsIGRlc3QpIHtcbiAgICAgICAgZGVzdFswXSA9IHV2WzBdICogZGVjb2RlTWF0cml4WzBdICsgZGVjb2RlTWF0cml4WzZdO1xuICAgICAgICBkZXN0WzFdID0gdXZbMV0gKiBkZWNvZGVNYXRyaXhbNF0gKyBkZWNvZGVNYXRyaXhbN107XG4gICAgfSxcblxuICAgIGRlY29tcHJlc3NVVnModXZzLCBkZWNvZGVNYXRyaXgsIGRlc3QgPSBuZXcgRmxvYXQzMkFycmF5KHV2cy5sZW5ndGgpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB1dnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGRlc3RbaSArIDBdID0gdXZzW2kgKyAwXSAqIGRlY29kZU1hdHJpeFswXSArIGRlY29kZU1hdHJpeFs2XTtcbiAgICAgICAgICAgIGRlc3RbaSArIDFdID0gdXZzW2kgKyAxXSAqIGRlY29kZU1hdHJpeFs0XSArIGRlY29kZU1hdHJpeFs3XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgb2N0RGVjb2RlVmVjMihvY3QsIHJlc3VsdCkge1xuICAgICAgICBsZXQgeCA9IG9jdFswXTtcbiAgICAgICAgbGV0IHkgPSBvY3RbMV07XG4gICAgICAgIHggPSAoMiAqIHggKyAxKSAvIDI1NTtcbiAgICAgICAgeSA9ICgyICogeSArIDEpIC8gMjU1O1xuICAgICAgICBjb25zdCB6ID0gMSAtIE1hdGguYWJzKHgpIC0gTWF0aC5hYnMoeSk7XG4gICAgICAgIGlmICh6IDwgMCkge1xuICAgICAgICAgICAgeCA9ICgxIC0gTWF0aC5hYnMoeSkpICogKHggPj0gMCA/IDEgOiAtMSk7XG4gICAgICAgICAgICB5ID0gKDEgLSBNYXRoLmFicyh4KSkgKiAoeSA+PSAwID8gMSA6IC0xKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgICAgICAgcmVzdWx0WzBdID0geCAvIGxlbmd0aDtcbiAgICAgICAgcmVzdWx0WzFdID0geSAvIGxlbmd0aDtcbiAgICAgICAgcmVzdWx0WzJdID0geiAvIGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgb2N0RGVjb2RlVmVjMnMob2N0cywgcmVzdWx0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gMCwgbGVuID0gb2N0cy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMikge1xuICAgICAgICAgICAgbGV0IHggPSBvY3RzW2kgKyAwXTtcbiAgICAgICAgICAgIGxldCB5ID0gb2N0c1tpICsgMV07XG4gICAgICAgICAgICB4ID0gKDIgKiB4ICsgMSkgLyAyNTU7XG4gICAgICAgICAgICB5ID0gKDIgKiB5ICsgMSkgLyAyNTU7XG4gICAgICAgICAgICBjb25zdCB6ID0gMSAtIE1hdGguYWJzKHgpIC0gTWF0aC5hYnMoeSk7XG4gICAgICAgICAgICBpZiAoeiA8IDApIHtcbiAgICAgICAgICAgICAgICB4ID0gKDEgLSBNYXRoLmFicyh5KSkgKiAoeCA+PSAwID8gMSA6IC0xKTtcbiAgICAgICAgICAgICAgICB5ID0gKDEgLSBNYXRoLmFicyh4KSkgKiAoeSA+PSAwID8gMSA6IC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xuICAgICAgICAgICAgcmVzdWx0W2ogKyAwXSA9IHggLyBsZW5ndGg7XG4gICAgICAgICAgICByZXN1bHRbaiArIDFdID0geSAvIGxlbmd0aDtcbiAgICAgICAgICAgIHJlc3VsdFtqICsgMl0gPSB6IC8gbGVuZ3RoO1xuICAgICAgICAgICAgaiArPSAzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcblxubWF0aC5idWlsZEVkZ2VJbmRpY2VzID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IHVuaXF1ZVBvc2l0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGluZGljZXNMb29rdXAgPSBbXTtcbiAgICBjb25zdCBpbmRpY2VzUmV2ZXJzZUxvb2t1cCA9IFtdO1xuICAgIGNvbnN0IHdlbGRlZEluZGljZXMgPSBbXTtcblxuICAgIC8vIFRPRE86IE9wdGltaXplIHdpdGggY2FjaGluZywgYnV0IG5lZWQgdG8gY2F0ZXIgdG8gYm90aCBjb21wcmVzc2VkIGFuZCB1bmNvbXByZXNzZWQgcG9zaXRpb25zXG5cbiAgICBjb25zdCBmYWNlcyA9IFtdO1xuICAgIGxldCBudW1GYWNlcyA9IDA7XG4gICAgY29uc3QgY29tcGEgPSBuZXcgVWludDE2QXJyYXkoMyk7XG4gICAgY29uc3QgY29tcGIgPSBuZXcgVWludDE2QXJyYXkoMyk7XG4gICAgY29uc3QgY29tcGMgPSBuZXcgVWludDE2QXJyYXkoMyk7XG4gICAgY29uc3QgYSA9IG1hdGgudmVjMygpO1xuICAgIGNvbnN0IGIgPSBtYXRoLnZlYzMoKTtcbiAgICBjb25zdCBjID0gbWF0aC52ZWMzKCk7XG4gICAgY29uc3QgY2IgPSBtYXRoLnZlYzMoKTtcbiAgICBjb25zdCBhYiA9IG1hdGgudmVjMygpO1xuICAgIGNvbnN0IGNyb3NzID0gbWF0aC52ZWMzKCk7XG4gICAgY29uc3Qgbm9ybWFsID0gbWF0aC52ZWMzKCk7XG5cbiAgICBmdW5jdGlvbiB3ZWxkVmVydGljZXMocG9zaXRpb25zLCBpbmRpY2VzKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uc01hcCA9IHt9OyAvLyBIYXNobWFwIGZvciBsb29raW5nIHVwIHZlcnRpY2VzIGJ5IHBvc2l0aW9uIGNvb3JkaW5hdGVzIChhbmQgbWFraW5nIHN1cmUgdGhleSBhcmUgdW5pcXVlKVxuICAgICAgICBsZXQgdng7XG4gICAgICAgIGxldCB2eTtcbiAgICAgICAgbGV0IHZ6O1xuICAgICAgICBsZXQga2V5O1xuICAgICAgICBjb25zdCBwcmVjaXNpb25Qb2ludHMgPSA0OyAvLyBudW1iZXIgb2YgZGVjaW1hbCBwb2ludHMsIGUuZy4gNCBmb3IgZXBzaWxvbiBvZiAwLjAwMDFcbiAgICAgICAgY29uc3QgcHJlY2lzaW9uID0gTWF0aC5wb3coMTAsIHByZWNpc2lvblBvaW50cyk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBsZXQgbGVuO1xuICAgICAgICBsZXQgbGVuVW5pcXVlUG9zaXRpb25zID0gMDtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAzKSB7XG4gICAgICAgICAgICB2eCA9IHBvc2l0aW9uc1tpXTtcbiAgICAgICAgICAgIHZ5ID0gcG9zaXRpb25zW2kgKyAxXTtcbiAgICAgICAgICAgIHZ6ID0gcG9zaXRpb25zW2kgKyAyXTtcbiAgICAgICAgICAgIGtleSA9IE1hdGgucm91bmQodnggKiBwcmVjaXNpb24pICsgJ18nICsgTWF0aC5yb3VuZCh2eSAqIHByZWNpc2lvbikgKyAnXycgKyBNYXRoLnJvdW5kKHZ6ICogcHJlY2lzaW9uKTtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbnNNYXBba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zTWFwW2tleV0gPSBsZW5VbmlxdWVQb3NpdGlvbnMgLyAzO1xuICAgICAgICAgICAgICAgIHVuaXF1ZVBvc2l0aW9uc1tsZW5VbmlxdWVQb3NpdGlvbnMrK10gPSB2eDtcbiAgICAgICAgICAgICAgICB1bmlxdWVQb3NpdGlvbnNbbGVuVW5pcXVlUG9zaXRpb25zKytdID0gdnk7XG4gICAgICAgICAgICAgICAgdW5pcXVlUG9zaXRpb25zW2xlblVuaXF1ZVBvc2l0aW9ucysrXSA9IHZ6O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kaWNlc0xvb2t1cFtpIC8gM10gPSBwb3NpdGlvbnNNYXBba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB3ZWxkZWRJbmRpY2VzW2ldID0gaW5kaWNlc0xvb2t1cFtpbmRpY2VzW2ldXTtcbiAgICAgICAgICAgIGluZGljZXNSZXZlcnNlTG9va3VwW3dlbGRlZEluZGljZXNbaV1dID0gaW5kaWNlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRmFjZXMobnVtSW5kaWNlcywgcG9zaXRpb25zRGVjb2RlTWF0cml4KSB7XG4gICAgICAgIG51bUZhY2VzID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IG51bUluZGljZXM7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgaWEgPSAoKHdlbGRlZEluZGljZXNbaV0pICogMyk7XG4gICAgICAgICAgICBjb25zdCBpYiA9ICgod2VsZGVkSW5kaWNlc1tpICsgMV0pICogMyk7XG4gICAgICAgICAgICBjb25zdCBpYyA9ICgod2VsZGVkSW5kaWNlc1tpICsgMl0pICogMyk7XG4gICAgICAgICAgICBpZiAocG9zaXRpb25zRGVjb2RlTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgY29tcGFbMF0gPSB1bmlxdWVQb3NpdGlvbnNbaWFdO1xuICAgICAgICAgICAgICAgIGNvbXBhWzFdID0gdW5pcXVlUG9zaXRpb25zW2lhICsgMV07XG4gICAgICAgICAgICAgICAgY29tcGFbMl0gPSB1bmlxdWVQb3NpdGlvbnNbaWEgKyAyXTtcbiAgICAgICAgICAgICAgICBjb21wYlswXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYl07XG4gICAgICAgICAgICAgICAgY29tcGJbMV0gPSB1bmlxdWVQb3NpdGlvbnNbaWIgKyAxXTtcbiAgICAgICAgICAgICAgICBjb21wYlsyXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYiArIDJdO1xuICAgICAgICAgICAgICAgIGNvbXBjWzBdID0gdW5pcXVlUG9zaXRpb25zW2ljXTtcbiAgICAgICAgICAgICAgICBjb21wY1sxXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYyArIDFdO1xuICAgICAgICAgICAgICAgIGNvbXBjWzJdID0gdW5pcXVlUG9zaXRpb25zW2ljICsgMl07XG4gICAgICAgICAgICAgICAgLy8gRGVjb2RlXG4gICAgICAgICAgICAgICAgbWF0aC5kZWNvbXByZXNzUG9zaXRpb24oY29tcGEsIHBvc2l0aW9uc0RlY29kZU1hdHJpeCwgYSk7XG4gICAgICAgICAgICAgICAgbWF0aC5kZWNvbXByZXNzUG9zaXRpb24oY29tcGIsIHBvc2l0aW9uc0RlY29kZU1hdHJpeCwgYik7XG4gICAgICAgICAgICAgICAgbWF0aC5kZWNvbXByZXNzUG9zaXRpb24oY29tcGMsIHBvc2l0aW9uc0RlY29kZU1hdHJpeCwgYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFbMF0gPSB1bmlxdWVQb3NpdGlvbnNbaWFdO1xuICAgICAgICAgICAgICAgIGFbMV0gPSB1bmlxdWVQb3NpdGlvbnNbaWEgKyAxXTtcbiAgICAgICAgICAgICAgICBhWzJdID0gdW5pcXVlUG9zaXRpb25zW2lhICsgMl07XG4gICAgICAgICAgICAgICAgYlswXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYl07XG4gICAgICAgICAgICAgICAgYlsxXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYiArIDFdO1xuICAgICAgICAgICAgICAgIGJbMl0gPSB1bmlxdWVQb3NpdGlvbnNbaWIgKyAyXTtcbiAgICAgICAgICAgICAgICBjWzBdID0gdW5pcXVlUG9zaXRpb25zW2ljXTtcbiAgICAgICAgICAgICAgICBjWzFdID0gdW5pcXVlUG9zaXRpb25zW2ljICsgMV07XG4gICAgICAgICAgICAgICAgY1syXSA9IHVuaXF1ZVBvc2l0aW9uc1tpYyArIDJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWF0aC5zdWJWZWMzKGMsIGIsIGNiKTtcbiAgICAgICAgICAgIG1hdGguc3ViVmVjMyhhLCBiLCBhYik7XG4gICAgICAgICAgICBtYXRoLmNyb3NzM1ZlYzMoY2IsIGFiLCBjcm9zcyk7XG4gICAgICAgICAgICBtYXRoLm5vcm1hbGl6ZVZlYzMoY3Jvc3MsIG5vcm1hbCk7XG4gICAgICAgICAgICBjb25zdCBmYWNlID0gZmFjZXNbbnVtRmFjZXNdIHx8IChmYWNlc1tudW1GYWNlc10gPSB7bm9ybWFsOiBtYXRoLnZlYzMoKX0pO1xuICAgICAgICAgICAgZmFjZS5ub3JtYWxbMF0gPSBub3JtYWxbMF07XG4gICAgICAgICAgICBmYWNlLm5vcm1hbFsxXSA9IG5vcm1hbFsxXTtcbiAgICAgICAgICAgIGZhY2Uubm9ybWFsWzJdID0gbm9ybWFsWzJdO1xuICAgICAgICAgICAgbnVtRmFjZXMrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAocG9zaXRpb25zLCBpbmRpY2VzLCBwb3NpdGlvbnNEZWNvZGVNYXRyaXgsIGVkZ2VUaHJlc2hvbGQpIHtcbiAgICAgICAgd2VsZFZlcnRpY2VzKHBvc2l0aW9ucywgaW5kaWNlcyk7XG4gICAgICAgIGJ1aWxkRmFjZXMoaW5kaWNlcy5sZW5ndGgsIHBvc2l0aW9uc0RlY29kZU1hdHJpeCk7XG4gICAgICAgIGNvbnN0IGVkZ2VJbmRpY2VzID0gW107XG4gICAgICAgIGNvbnN0IHRocmVzaG9sZERvdCA9IE1hdGguY29zKG1hdGguREVHVE9SQUQgKiBlZGdlVGhyZXNob2xkKTtcbiAgICAgICAgY29uc3QgZWRnZXMgPSB7fTtcbiAgICAgICAgbGV0IGVkZ2UxO1xuICAgICAgICBsZXQgZWRnZTI7XG4gICAgICAgIGxldCBpbmRleDE7XG4gICAgICAgIGxldCBpbmRleDI7XG4gICAgICAgIGxldCBrZXk7XG4gICAgICAgIGxldCBsYXJnZUluZGV4ID0gZmFsc2U7XG4gICAgICAgIGxldCBlZGdlO1xuICAgICAgICBsZXQgbm9ybWFsMTtcbiAgICAgICAgbGV0IG5vcm1hbDI7XG4gICAgICAgIGxldCBkb3Q7XG4gICAgICAgIGxldCBpYTtcbiAgICAgICAgbGV0IGliO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgZmFjZUluZGV4ID0gaSAvIDM7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgICAgICAgICAgIGVkZ2UxID0gd2VsZGVkSW5kaWNlc1tpICsgal07XG4gICAgICAgICAgICAgICAgZWRnZTIgPSB3ZWxkZWRJbmRpY2VzW2kgKyAoKGogKyAxKSAlIDMpXTtcbiAgICAgICAgICAgICAgICBpbmRleDEgPSBNYXRoLm1pbihlZGdlMSwgZWRnZTIpO1xuICAgICAgICAgICAgICAgIGluZGV4MiA9IE1hdGgubWF4KGVkZ2UxLCBlZGdlMik7XG4gICAgICAgICAgICAgICAga2V5ID0gaW5kZXgxICsgXCIsXCIgKyBpbmRleDI7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2VzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBlZGdlc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgxOiBpbmRleDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDI6IGluZGV4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2UxOiBmYWNlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlMjogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZXNba2V5XS5mYWNlMiA9IGZhY2VJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gZWRnZXMpIHtcbiAgICAgICAgICAgIGVkZ2UgPSBlZGdlc1trZXldO1xuICAgICAgICAgICAgLy8gYW4gZWRnZSBpcyBvbmx5IHJlbmRlcmVkIGlmIHRoZSBhbmdsZSAoaW4gZGVncmVlcykgYmV0d2VlbiB0aGUgZmFjZSBub3JtYWxzIG9mIHRoZSBhZGpvaW5pbmcgZmFjZXMgZXhjZWVkcyB0aGlzIHZhbHVlLiBkZWZhdWx0ID0gMSBkZWdyZWUuXG4gICAgICAgICAgICBpZiAoZWRnZS5mYWNlMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsMSA9IGZhY2VzW2VkZ2UuZmFjZTFdLm5vcm1hbDtcbiAgICAgICAgICAgICAgICBub3JtYWwyID0gZmFjZXNbZWRnZS5mYWNlMl0ubm9ybWFsO1xuICAgICAgICAgICAgICAgIGRvdCA9IG1hdGguZG90VmVjMyhub3JtYWwxLCBub3JtYWwyKTtcbiAgICAgICAgICAgICAgICBpZiAoZG90ID4gdGhyZXNob2xkRG90KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlhID0gaW5kaWNlc1JldmVyc2VMb29rdXBbZWRnZS5pbmRleDFdO1xuICAgICAgICAgICAgaWIgPSBpbmRpY2VzUmV2ZXJzZUxvb2t1cFtlZGdlLmluZGV4Ml07XG4gICAgICAgICAgICBpZiAoIWxhcmdlSW5kZXggJiYgaWEgPiA2NTUzNSB8fCBpYiA+IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgbGFyZ2VJbmRleCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlSW5kaWNlcy5wdXNoKGlhKTtcbiAgICAgICAgICAgIGVkZ2VJbmRpY2VzLnB1c2goaWIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAobGFyZ2VJbmRleCkgPyBuZXcgVWludDMyQXJyYXkoZWRnZUluZGljZXMpIDogbmV3IFVpbnQxNkFycmF5KGVkZ2VJbmRpY2VzKTtcbiAgICB9O1xufSkoKTtcblxuXG5leHBvcnQge21hdGh9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js ***!
  \****************************************************************************/
/*! exports provided: createRTCViewMat, worldToRTCPos, worldToRTCPositions, rtcToWorldPos, getPlaneRTCPos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRTCViewMat\", function() { return createRTCViewMat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"worldToRTCPos\", function() { return worldToRTCPos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"worldToRTCPositions\", function() { return worldToRTCPositions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rtcToWorldPos\", function() { return rtcToWorldPos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPlaneRTCPos\", function() { return getPlaneRTCPos; });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\nconst tempVec3a = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempAABB3 = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].AABB3();\n\n/**\n * Given a view matrix and a relative-to-center (RTC) coordinate origin, returns a view matrix\n * to transform RTC coordinates to View-space.\n *\n * The returned view matrix is\n *\n * @private\n */\nconst createRTCViewMat = (function () {\n\n    const tempMat = new Float32Array(16);\n    const rtcCenterWorld = new Float64Array(4);\n    const rtcCenterView = new Float64Array(4);\n\n    return function (viewMat, rtcCenter, rtcViewMat = tempMat) {\n        rtcCenterWorld[0] = rtcCenter[0];\n        rtcCenterWorld[1] = rtcCenter[1];\n        rtcCenterWorld[2] = rtcCenter[2];\n        rtcCenterWorld[3] = 1;\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(viewMat, rtcCenterWorld, rtcCenterView);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].setMat4Translation(viewMat, rtcCenterView, rtcViewMat);\n        return rtcViewMat;\n    }\n}());\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center pos\n * and a single-precision offset fom that center.\n *\n * @param {Float64Array} worldPos The World-space position.\n * @param {Float64Array} rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param {Float32Array} rtcPos Single-precision offset fom that center.\n */\nfunction worldToRTCPos(worldPos, rtcCenter, rtcPos) {\n\n    const xHigh = Float32Array.from([worldPos[0]])[0];\n    const xLow = worldPos[0] - xHigh;\n\n    const yHigh = Float32Array.from([worldPos[1]])[0];\n    const yLow = worldPos[1] - yHigh;\n\n    const zHigh = Float32Array.from([worldPos[2]])[0];\n    const zLow = worldPos[2] - zHigh;\n\n    rtcCenter[0] = xHigh;\n    rtcCenter[1] = yHigh;\n    rtcCenter[2] = zHigh;\n\n    rtcPos[0] = xLow;\n    rtcPos[1] = yLow;\n    rtcPos[2] = zLow;\n}\n\n\n/**\n * Converts a flat array of double-precision positions to RTC positions.\n *\n * Returns the RTC positions, along with a computed RTC center for those positions.\n *\n * When computing the RTC position, this function uses a modulus operation to ensure that, whenever possible,\n * identical RTC positions are reused for different positions arrays.\n *\n * @param {Float64Array} worldPositions Flat array of World-space 3D positions.\n * @param {Float64Array} rtcPositions Outputs the computed flat array of 3D RTC positions.\n * @param {Float64Array} rtcCenter Outputs the computed double-precision relative-to-center (RTC) center pos.\n * @param {Number} [cellSize=10000000] The size of each coordinate cell within the RTC coordinate system.\n * @returns {Boolean} ````True```` if the positions actually needed conversion to RTC, else ````false````. When\n * ````false````, we can safely ignore the data returned in ````rtcPositions```` and ````rtcCenter````,\n * since ````rtcCenter```` will equal ````[0,0,0]````, and ````rtcPositions```` will contain identical values to ````positions````.\n */\nfunction worldToRTCPositions(worldPositions, rtcPositions, rtcCenter, cellSize = 10000000) {\n\n    const center = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].getPositionsCenter(worldPositions, tempVec3a);\n\n    const rtcCenterX = Math.round(center[0] / cellSize) * cellSize;\n    const rtcCenterY = Math.round(center[1] / cellSize) * cellSize;\n    const rtcCenterZ = Math.round(center[2] / cellSize) * cellSize;\n\n    for (let i = 0, len = worldPositions.length; i < len; i += 3) {\n        rtcPositions[i + 0] = worldPositions[i + 0] - rtcCenterX;\n        rtcPositions[i + 1] = worldPositions[i + 1] - rtcCenterY;\n        rtcPositions[i + 2] = worldPositions[i + 2] - rtcCenterZ;\n    }\n\n    rtcCenter[0] = rtcCenterX;\n    rtcCenter[1] = rtcCenterY;\n    rtcCenter[2] = rtcCenterZ;\n\n    const rtcNeeded = (rtcCenter[0] !== 0 || rtcCenter[1] !== 0 || rtcCenter[2] !== 0);\n\n    return rtcNeeded;\n}\n\n/**\n * Converts an RTC 3D position to World-space.\n *\n * @param {Float64Array} rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param {Float32Array} rtcPos Single-precision offset fom that center.\n * @param {Float64Array} worldPos The World-space position.\n */\nfunction rtcToWorldPos(rtcCenter, rtcPos, worldPos) {\n    worldPos[0] = rtcCenter[0] + rtcPos[0];\n    worldPos[1] = rtcCenter[1] + rtcPos[1];\n    worldPos[2] = rtcCenter[2] + rtcPos[2];\n    return worldPos;\n}\n\n/**\n * Given a 3D plane defined by distance from origin and direction, and an RTC center position,\n * return a plane position that is relative to the RTC center.\n *\n * @param dist\n * @param dir\n * @param rtcCenter\n * @param rtcPlanePos\n * @returns {*}\n */\nfunction getPlaneRTCPos(dist, dir, rtcCenter, rtcPlanePos) {\n    const rtcCenterToPlaneDist = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].dotVec3(dir, rtcCenter) + dist;\n    const dirNormalized = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(dir, tempVec3a);\n    _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(dirNormalized, -rtcCenterToPlaneDist, rtcPlanePos);\n    return rtcPlanePos;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21hdGgvcnRjQ29vcmRzLmpzP2E1NTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBK0I7O0FBRS9CLGtCQUFrQiw2Q0FBSTtBQUN0QixrQkFBa0IsNkNBQUk7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkNBQUk7QUFDWixRQUFRLDZDQUFJO0FBQ1o7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsYUFBYTtBQUN4QixXQUFXLGFBQWE7QUFDeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsYUFBYTtBQUN4QixXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiw2Q0FBSTs7QUFFdkI7QUFDQTtBQUNBOztBQUVBLGdEQUFnRCxTQUFTO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixXQUFXLGFBQWE7QUFDeEIsV0FBVyxhQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGlDQUFpQyw2Q0FBSTtBQUNyQywwQkFBMEIsNkNBQUk7QUFDOUIsSUFBSSw2Q0FBSTtBQUNSO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvbWF0aC9ydGNDb29yZHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge21hdGh9IGZyb20gJy4vbWF0aC5qcyc7XG5cbmNvbnN0IHRlbXBWZWMzYSA9IG1hdGgudmVjMygpO1xuY29uc3QgdGVtcEFBQkIzID0gbWF0aC5BQUJCMygpO1xuXG4vKipcbiAqIEdpdmVuIGEgdmlldyBtYXRyaXggYW5kIGEgcmVsYXRpdmUtdG8tY2VudGVyIChSVEMpIGNvb3JkaW5hdGUgb3JpZ2luLCByZXR1cm5zIGEgdmlldyBtYXRyaXhcbiAqIHRvIHRyYW5zZm9ybSBSVEMgY29vcmRpbmF0ZXMgdG8gVmlldy1zcGFjZS5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgdmlldyBtYXRyaXggaXNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBjcmVhdGVSVENWaWV3TWF0ID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IHRlbXBNYXQgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgICBjb25zdCBydGNDZW50ZXJXb3JsZCA9IG5ldyBGbG9hdDY0QXJyYXkoNCk7XG4gICAgY29uc3QgcnRjQ2VudGVyVmlldyA9IG5ldyBGbG9hdDY0QXJyYXkoNCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHZpZXdNYXQsIHJ0Y0NlbnRlciwgcnRjVmlld01hdCA9IHRlbXBNYXQpIHtcbiAgICAgICAgcnRjQ2VudGVyV29ybGRbMF0gPSBydGNDZW50ZXJbMF07XG4gICAgICAgIHJ0Y0NlbnRlcldvcmxkWzFdID0gcnRjQ2VudGVyWzFdO1xuICAgICAgICBydGNDZW50ZXJXb3JsZFsyXSA9IHJ0Y0NlbnRlclsyXTtcbiAgICAgICAgcnRjQ2VudGVyV29ybGRbM10gPSAxO1xuICAgICAgICBtYXRoLnRyYW5zZm9ybVZlYzQodmlld01hdCwgcnRjQ2VudGVyV29ybGQsIHJ0Y0NlbnRlclZpZXcpO1xuICAgICAgICBtYXRoLnNldE1hdDRUcmFuc2xhdGlvbih2aWV3TWF0LCBydGNDZW50ZXJWaWV3LCBydGNWaWV3TWF0KTtcbiAgICAgICAgcmV0dXJuIHJ0Y1ZpZXdNYXQ7XG4gICAgfVxufSgpKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFdvcmxkLXNwYWNlIDNEIHBvc2l0aW9uIHRvIFJUQy5cbiAqXG4gKiBHaXZlbiBhIGRvdWJsZS1wcmVjaXNpb24gV29ybGQtc3BhY2UgcG9zaXRpb24sIHJldHVybnMgYSBkb3VibGUtcHJlY2lzaW9uIHJlbGF0aXZlLXRvLWNlbnRlciAoUlRDKSBjZW50ZXIgcG9zXG4gKiBhbmQgYSBzaW5nbGUtcHJlY2lzaW9uIG9mZnNldCBmb20gdGhhdCBjZW50ZXIuXG4gKlxuICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IHdvcmxkUG9zIFRoZSBXb3JsZC1zcGFjZSBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSBydGNDZW50ZXIgRG91YmxlLXByZWNpc2lvbiByZWxhdGl2ZS10by1jZW50ZXIgKFJUQykgY2VudGVyIHBvcy5cbiAqIEBwYXJhbSB7RmxvYXQzMkFycmF5fSBydGNQb3MgU2luZ2xlLXByZWNpc2lvbiBvZmZzZXQgZm9tIHRoYXQgY2VudGVyLlxuICovXG5mdW5jdGlvbiB3b3JsZFRvUlRDUG9zKHdvcmxkUG9zLCBydGNDZW50ZXIsIHJ0Y1Bvcykge1xuXG4gICAgY29uc3QgeEhpZ2ggPSBGbG9hdDMyQXJyYXkuZnJvbShbd29ybGRQb3NbMF1dKVswXTtcbiAgICBjb25zdCB4TG93ID0gd29ybGRQb3NbMF0gLSB4SGlnaDtcblxuICAgIGNvbnN0IHlIaWdoID0gRmxvYXQzMkFycmF5LmZyb20oW3dvcmxkUG9zWzFdXSlbMF07XG4gICAgY29uc3QgeUxvdyA9IHdvcmxkUG9zWzFdIC0geUhpZ2g7XG5cbiAgICBjb25zdCB6SGlnaCA9IEZsb2F0MzJBcnJheS5mcm9tKFt3b3JsZFBvc1syXV0pWzBdO1xuICAgIGNvbnN0IHpMb3cgPSB3b3JsZFBvc1syXSAtIHpIaWdoO1xuXG4gICAgcnRjQ2VudGVyWzBdID0geEhpZ2g7XG4gICAgcnRjQ2VudGVyWzFdID0geUhpZ2g7XG4gICAgcnRjQ2VudGVyWzJdID0gekhpZ2g7XG5cbiAgICBydGNQb3NbMF0gPSB4TG93O1xuICAgIHJ0Y1Bvc1sxXSA9IHlMb3c7XG4gICAgcnRjUG9zWzJdID0gekxvdztcbn1cblxuXG4vKipcbiAqIENvbnZlcnRzIGEgZmxhdCBhcnJheSBvZiBkb3VibGUtcHJlY2lzaW9uIHBvc2l0aW9ucyB0byBSVEMgcG9zaXRpb25zLlxuICpcbiAqIFJldHVybnMgdGhlIFJUQyBwb3NpdGlvbnMsIGFsb25nIHdpdGggYSBjb21wdXRlZCBSVEMgY2VudGVyIGZvciB0aG9zZSBwb3NpdGlvbnMuXG4gKlxuICogV2hlbiBjb21wdXRpbmcgdGhlIFJUQyBwb3NpdGlvbiwgdGhpcyBmdW5jdGlvbiB1c2VzIGEgbW9kdWx1cyBvcGVyYXRpb24gdG8gZW5zdXJlIHRoYXQsIHdoZW5ldmVyIHBvc3NpYmxlLFxuICogaWRlbnRpY2FsIFJUQyBwb3NpdGlvbnMgYXJlIHJldXNlZCBmb3IgZGlmZmVyZW50IHBvc2l0aW9ucyBhcnJheXMuXG4gKlxuICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IHdvcmxkUG9zaXRpb25zIEZsYXQgYXJyYXkgb2YgV29ybGQtc3BhY2UgM0QgcG9zaXRpb25zLlxuICogQHBhcmFtIHtGbG9hdDY0QXJyYXl9IHJ0Y1Bvc2l0aW9ucyBPdXRwdXRzIHRoZSBjb21wdXRlZCBmbGF0IGFycmF5IG9mIDNEIFJUQyBwb3NpdGlvbnMuXG4gKiBAcGFyYW0ge0Zsb2F0NjRBcnJheX0gcnRjQ2VudGVyIE91dHB1dHMgdGhlIGNvbXB1dGVkIGRvdWJsZS1wcmVjaXNpb24gcmVsYXRpdmUtdG8tY2VudGVyIChSVEMpIGNlbnRlciBwb3MuXG4gKiBAcGFyYW0ge051bWJlcn0gW2NlbGxTaXplPTEwMDAwMDAwXSBUaGUgc2l6ZSBvZiBlYWNoIGNvb3JkaW5hdGUgY2VsbCB3aXRoaW4gdGhlIFJUQyBjb29yZGluYXRlIHN5c3RlbS5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgYGBgVHJ1ZWBgYGAgaWYgdGhlIHBvc2l0aW9ucyBhY3R1YWxseSBuZWVkZWQgY29udmVyc2lvbiB0byBSVEMsIGVsc2UgYGBgYGZhbHNlYGBgYC4gV2hlblxuICogYGBgYGZhbHNlYGBgYCwgd2UgY2FuIHNhZmVseSBpZ25vcmUgdGhlIGRhdGEgcmV0dXJuZWQgaW4gYGBgYHJ0Y1Bvc2l0aW9uc2BgYGAgYW5kIGBgYGBydGNDZW50ZXJgYGBgLFxuICogc2luY2UgYGBgYHJ0Y0NlbnRlcmBgYGAgd2lsbCBlcXVhbCBgYGBgWzAsMCwwXWBgYGAsIGFuZCBgYGBgcnRjUG9zaXRpb25zYGBgYCB3aWxsIGNvbnRhaW4gaWRlbnRpY2FsIHZhbHVlcyB0byBgYGBgcG9zaXRpb25zYGBgYC5cbiAqL1xuZnVuY3Rpb24gd29ybGRUb1JUQ1Bvc2l0aW9ucyh3b3JsZFBvc2l0aW9ucywgcnRjUG9zaXRpb25zLCBydGNDZW50ZXIsIGNlbGxTaXplID0gMTAwMDAwMDApIHtcblxuICAgIGNvbnN0IGNlbnRlciA9IG1hdGguZ2V0UG9zaXRpb25zQ2VudGVyKHdvcmxkUG9zaXRpb25zLCB0ZW1wVmVjM2EpO1xuXG4gICAgY29uc3QgcnRjQ2VudGVyWCA9IE1hdGgucm91bmQoY2VudGVyWzBdIC8gY2VsbFNpemUpICogY2VsbFNpemU7XG4gICAgY29uc3QgcnRjQ2VudGVyWSA9IE1hdGgucm91bmQoY2VudGVyWzFdIC8gY2VsbFNpemUpICogY2VsbFNpemU7XG4gICAgY29uc3QgcnRjQ2VudGVyWiA9IE1hdGgucm91bmQoY2VudGVyWzJdIC8gY2VsbFNpemUpICogY2VsbFNpemU7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gd29ybGRQb3NpdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICAgICAgcnRjUG9zaXRpb25zW2kgKyAwXSA9IHdvcmxkUG9zaXRpb25zW2kgKyAwXSAtIHJ0Y0NlbnRlclg7XG4gICAgICAgIHJ0Y1Bvc2l0aW9uc1tpICsgMV0gPSB3b3JsZFBvc2l0aW9uc1tpICsgMV0gLSBydGNDZW50ZXJZO1xuICAgICAgICBydGNQb3NpdGlvbnNbaSArIDJdID0gd29ybGRQb3NpdGlvbnNbaSArIDJdIC0gcnRjQ2VudGVyWjtcbiAgICB9XG5cbiAgICBydGNDZW50ZXJbMF0gPSBydGNDZW50ZXJYO1xuICAgIHJ0Y0NlbnRlclsxXSA9IHJ0Y0NlbnRlclk7XG4gICAgcnRjQ2VudGVyWzJdID0gcnRjQ2VudGVyWjtcblxuICAgIGNvbnN0IHJ0Y05lZWRlZCA9IChydGNDZW50ZXJbMF0gIT09IDAgfHwgcnRjQ2VudGVyWzFdICE9PSAwIHx8IHJ0Y0NlbnRlclsyXSAhPT0gMCk7XG5cbiAgICByZXR1cm4gcnRjTmVlZGVkO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGFuIFJUQyAzRCBwb3NpdGlvbiB0byBXb3JsZC1zcGFjZS5cbiAqXG4gKiBAcGFyYW0ge0Zsb2F0NjRBcnJheX0gcnRjQ2VudGVyIERvdWJsZS1wcmVjaXNpb24gcmVsYXRpdmUtdG8tY2VudGVyIChSVEMpIGNlbnRlciBwb3MuXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheX0gcnRjUG9zIFNpbmdsZS1wcmVjaXNpb24gb2Zmc2V0IGZvbSB0aGF0IGNlbnRlci5cbiAqIEBwYXJhbSB7RmxvYXQ2NEFycmF5fSB3b3JsZFBvcyBUaGUgV29ybGQtc3BhY2UgcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIHJ0Y1RvV29ybGRQb3MocnRjQ2VudGVyLCBydGNQb3MsIHdvcmxkUG9zKSB7XG4gICAgd29ybGRQb3NbMF0gPSBydGNDZW50ZXJbMF0gKyBydGNQb3NbMF07XG4gICAgd29ybGRQb3NbMV0gPSBydGNDZW50ZXJbMV0gKyBydGNQb3NbMV07XG4gICAgd29ybGRQb3NbMl0gPSBydGNDZW50ZXJbMl0gKyBydGNQb3NbMl07XG4gICAgcmV0dXJuIHdvcmxkUG9zO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgM0QgcGxhbmUgZGVmaW5lZCBieSBkaXN0YW5jZSBmcm9tIG9yaWdpbiBhbmQgZGlyZWN0aW9uLCBhbmQgYW4gUlRDIGNlbnRlciBwb3NpdGlvbixcbiAqIHJldHVybiBhIHBsYW5lIHBvc2l0aW9uIHRoYXQgaXMgcmVsYXRpdmUgdG8gdGhlIFJUQyBjZW50ZXIuXG4gKlxuICogQHBhcmFtIGRpc3RcbiAqIEBwYXJhbSBkaXJcbiAqIEBwYXJhbSBydGNDZW50ZXJcbiAqIEBwYXJhbSBydGNQbGFuZVBvc1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGdldFBsYW5lUlRDUG9zKGRpc3QsIGRpciwgcnRjQ2VudGVyLCBydGNQbGFuZVBvcykge1xuICAgIGNvbnN0IHJ0Y0NlbnRlclRvUGxhbmVEaXN0ID0gbWF0aC5kb3RWZWMzKGRpciwgcnRjQ2VudGVyKSArIGRpc3Q7XG4gICAgY29uc3QgZGlyTm9ybWFsaXplZCA9IG1hdGgubm9ybWFsaXplVmVjMyhkaXIsIHRlbXBWZWMzYSk7XG4gICAgbWF0aC5tdWxWZWMzU2NhbGFyKGRpck5vcm1hbGl6ZWQsIC1ydGNDZW50ZXJUb1BsYW5lRGlzdCwgcnRjUGxhbmVQb3MpO1xuICAgIHJldHVybiBydGNQbGFuZVBvcztcbn1cblxuZXhwb3J0IHtjcmVhdGVSVENWaWV3TWF0LCB3b3JsZFRvUlRDUG9zLCB3b3JsZFRvUlRDUG9zaXRpb25zLCBydGNUb1dvcmxkUG9zLCBnZXRQbGFuZVJUQ1Bvc307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js ***!
  \***********************************************************************/
/*! exports provided: Mesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return Mesh; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./draw/DrawRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js\");\n/* harmony import */ var _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./emphasis/EmphasisFillRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js\");\n/* harmony import */ var _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./emphasis/EmphasisEdgesRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js\");\n/* harmony import */ var _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pick/PickMeshRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js\");\n/* harmony import */ var _pick_PickTriangleRenderer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pick/PickTriangleRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js\");\n/* harmony import */ var _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./occlusion/OcclusionRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js\");\n/* harmony import */ var _shadow_ShadowRenderer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shadow/ShadowRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js\");\n/* harmony import */ var _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../math/geometryCompressionUtils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js\");\n/* harmony import */ var _webgl_RenderFlags_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../webgl/RenderFlags.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js\");\n/**\n Fired when this Mesh is picked via a call to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n\n The event parameters will be the hit result returned by the {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}} method.\n @event picked\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst obb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].OBB3();\nconst angleAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst q1 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst q2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst xAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([1, 0, 0]);\nconst yAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 1, 0]);\nconst zAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 0, 1]);\n\nconst veca = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(3);\nconst vecb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(3);\n\nconst identityMat = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n\n/**\n * @desc An {@link Entity} that is a drawable element, with a {@link Geometry} and a {@link Material}, that can be\n * connected into a scene graph using {@link Node}s.\n *\n * ## Usage\n *\n * The example below is the same as the one given for {@link Node}, since the two classes work together.  In this example,\n * we'll create a scene graph in which a root {@link Node} represents a group and the Meshes are leaves.\n *\n * Since {@link Node} implements {@link Entity}, we can designate the root {@link Node} as a model, causing it to be registered by its\n * ID in {@link Scene#models}.\n *\n * Since Mesh also implements {@link Entity}, we can designate the leaf Meshes as objects, causing them to\n * be registered by their IDs in {@link Scene#objects}.\n *\n * We can then find those {@link Entity} types in {@link Scene#models} and {@link Scene#objects}.\n *\n * We can also update properties of our object-Meshes via calls to {@link Scene#setObjectsHighlighted} etc.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#sceneRepresentation_SceneGraph)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {Node} from \"../src/scene/nodes/Node.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {buildBoxGeometry} from \"../src/viewer/scene/geometry/builders/buildBoxGeometry.js\";\n * import {ReadableGeometry} from \"../src/viewer/scene/geometry/ReadableGeometry.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [-21.80, 4.01, 6.56];\n * viewer.scene.camera.look = [0, -5.75, 0];\n * viewer.scene.camera.up = [0.37, 0.91, -0.11];\n *\n * const boxGeometry = new ReadableGeometry(viewer.scene, buildBoxGeometry({\n *      xSize: 1,\n *      ySize: 1,\n *      zSize: 1\n * }));\n *\n * new Node(viewer.scene, {\n *      id: \"table\",\n *      isModel: true, // <---------- Node represents a model, so is registered by ID in viewer.scene.models\n *      rotation: [0, 50, 0],\n *      position: [0, 0, 0],\n *      scale: [1, 1, 1],\n *\n *      children: [\n *\n *          new Mesh(viewer.scene, { // Red table leg\n *              id: \"redLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [-4, -6, -4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [1, 0.3, 0.3]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, { // Green table leg\n *              id: \"greenLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [4, -6, -4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [0.3, 1.0, 0.3]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, {// Blue table leg\n *              id: \"blueLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [4, -6, 4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [0.3, 0.3, 1.0]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, {  // Yellow table leg\n *              id: \"yellowLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [-4, -6, 4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                   diffuse: [1.0, 1.0, 0.0]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, { // Purple table top\n *              id: \"tableTop\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [0, -3, 0],\n *              scale: [6, 0.5, 6],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [1.0, 0.3, 1.0]\n *              }),\n *              geometry: boxGeometry\n *          })\n *      ]\n *  });\n *\n * // Find Nodes and Meshes by their IDs\n *\n * var table = viewer.scene.models[\"table\"];                // Since table Node has isModel == true\n *\n * var redLeg = viewer.scene.objects[\"redLeg\"];             // Since the Meshes have isObject == true\n * var greenLeg = viewer.scene.objects[\"greenLeg\"];\n * var blueLeg = viewer.scene.objects[\"blueLeg\"];\n *\n * // Highlight one of the table leg Meshes\n *\n * viewer.scene.setObjectsHighlighted([\"redLeg\"], true);    // Since the Meshes have isObject == true\n *\n * // Periodically update transforms on our Nodes and Meshes\n *\n * viewer.scene.on(\"tick\", function () {\n *\n *       // Rotate legs\n *       redLeg.rotateY(0.5);\n *       greenLeg.rotateY(0.5);\n *       blueLeg.rotateY(0.5);\n *\n *       // Rotate table\n *       table.rotateY(0.5);\n *       table.rotateX(0.3);\n *   });\n * ````\n *\n * ## Metadata\n *\n * As mentioned, we can also associate {@link MetaModel}s and {@link MetaObject}s with our {@link Node}s and Meshes,\n * within a {@link MetaScene}. See {@link MetaScene} for an example.\n *\n * @implements {Entity}\n * @implements {Drawable}\n */\nclass Mesh extends _Component_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Mesh\";\n    }\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] Configs\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent scene, generated automatically when omitted.\n     * @param {String} [cfg.originalSystemId] ID of the corresponding object within the originating system, if any.\n     * @param {Boolean} [cfg.isModel] Specify ````true```` if this Mesh represents a model, in which case the Mesh will be registered by {@link Mesh#id} in {@link Scene#models} and may also have a corresponding {@link MetaModel} with matching {@link MetaModel#id}, registered by that ID in {@link MetaScene#metaModels}.\n     * @param {Boolean} [cfg.isObject] Specify ````true```` if this Mesh represents an object, in which case the Mesh will be registered by {@link Mesh#id} in {@link Scene#objects} and may also have a corresponding {@link MetaObject} with matching {@link MetaObject#id}, registered by that ID in {@link MetaScene#metaObjects}.\n     * @param {Node} [cfg.parent] The parent Node.\n     * @param {Number[]} [cfg.rtcCenter] Relative-to-center (RTC) coordinate system center for this Mesh. When this is given, then ````matrix````, ````position```` and ````geometry```` are all assumed to be relative to this center.\n     * @param {Number[]} [cfg.position=[0,0,0]] Local 3D position.\n     * @param {Number[]} [cfg.scale=[1,1,1]] Local scale.\n     * @param {Number[]} [cfg.rotation=[0,0,0]] Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     * @param {Number[]} [cfg.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] Local modelling transform matrix. Overrides the position, scale and rotation parameters.\n     * @param {Number[]} [cfg.offset=[0,0,0]] World-space 3D translation offset. Translates the Mesh in World space, after modelling transforms.\n     * @param {Boolean} [cfg.visible=true] Indicates if the Mesh is initially visible.\n     * @param {Boolean} [cfg.culled=false] Indicates if the Mesh is initially culled from view.\n     * @param {Boolean} [cfg.pickable=true] Indicates if the Mesh is initially pickable.\n     * @param {Boolean} [cfg.clippable=true] Indicates if the Mesh is initially clippable.\n     * @param {Boolean} [cfg.collidable=true] Indicates if the Mesh is initially included in boundary calculations.\n     * @param {Boolean} [cfg.castsShadow=true] Indicates if the Mesh initially casts shadows.\n     * @param {Boolean} [cfg.receivesShadow=true]  Indicates if the Mesh initially receives shadows.\n     * @param {Boolean} [cfg.xrayed=false] Indicates if the Mesh is initially xrayed.\n     * @param {Boolean} [cfg.highlighted=false] Indicates if the Mesh is initially highlighted.\n     * @param {Boolean} [cfg.selected=false] Indicates if the Mesh is initially selected.\n     * @param {Boolean} [cfg.edges=false] Indicates if the Mesh's edges are initially emphasized.\n     * @param {Number[]} [cfg.colorize=[1.0,1.0,1.0]] Mesh's initial RGB colorize color, multiplies by the rendered fragment colors.\n     * @param {Number} [cfg.opacity=1.0] Mesh's initial opacity factor, multiplies by the rendered fragment alpha.\n     * @param {String} [cfg.billboard=\"none\"] Mesh's billboarding behaviour. Options are \"none\" for no billboarding, \"spherical\" to always directly face {@link Camera.eye}, rotating both vertically and horizontally, or \"cylindrical\" to face the {@link Camera#eye} while rotating only about its vertically axis (use that mode for things like trees on a landscape).\n     * @param {Geometry} [cfg.geometry] {@link Geometry} to define the shape of this Mesh. Inherits {@link Scene#geometry} by default.\n     * @param {Material} [cfg.material] {@link Material} to define the normal rendered appearance for this Mesh. Inherits {@link Scene#material} by default.\n     * @param {EmphasisMaterial} [cfg.xrayMaterial] {@link EmphasisMaterial} to define the xrayed appearance for this Mesh. Inherits {@link Scene#xrayMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.highlightMaterial] {@link EmphasisMaterial} to define the xrayed appearance for this Mesh. Inherits {@link Scene#highlightMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.selectedMaterial] {@link EmphasisMaterial} to define the selected appearance for this Mesh. Inherits {@link Scene#selectedMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.edgeMaterial] {@link EdgeMaterial} to define the appearance of enhanced edges for this Mesh. Inherits {@link Scene#edgeMaterial} by default.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        /**\n         * ID of the corresponding object within the originating system, if any.\n         *\n         * @type {String}\n         * @abstract\n         */\n        this.originalSystemId = (cfg.originalSystemId || this.id);\n\n        /** @private **/\n        this.renderFlags = new _webgl_RenderFlags_js__WEBPACK_IMPORTED_MODULE_11__[\"RenderFlags\"]();\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderState\"]({ // NOTE: Renderer gets modeling and normal matrices from Mesh#matrix and Mesh.#normalWorldMatrix\n            visible: true,\n            culled: false,\n            pickable: null,\n            clippable: null,\n            collidable: null,\n            castsShadow: null,\n            receivesShadow: null,\n            xrayed: false,\n            highlighted: false,\n            selected: false,\n            edges: false,\n            stationary: !!cfg.stationary,\n            billboard: this._checkBillboard(cfg.billboard),\n            layer: null,\n            colorize: null,\n            pickID: this.scene._renderer.getPickID(this),\n            drawHash: \"\",\n            pickHash: \"\",\n            offset: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(),\n            rtcCenter: null,\n            rtcCenterHash: null\n        });\n\n        this._drawRenderer = null;\n        this._shadowRenderer = null;\n        this._emphasisFillRenderer = null;\n        this._emphasisEdgesRenderer = null;\n        this._pickMeshRenderer = null;\n        this._pickTriangleRenderer = null;\n        this._occlusionRenderer = null;\n\n        this._geometry = cfg.geometry ? this._checkComponent2([\"ReadableGeometry\", \"VBOGeometry\"], cfg.geometry) : this.scene.geometry;\n        this._material = cfg.material ? this._checkComponent2([\"PhongMaterial\", \"MetallicMaterial\", \"SpecularMaterial\", \"LambertMaterial\"], cfg.material) : this.scene.material;\n        this._xrayMaterial = cfg.xrayMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.xrayMaterial) : this.scene.xrayMaterial;\n        this._highlightMaterial = cfg.highlightMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.highlightMaterial) : this.scene.highlightMaterial;\n        this._selectedMaterial = cfg.selectedMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.selectedMaterial) : this.scene.selectedMaterial;\n        this._edgeMaterial = cfg.edgeMaterial ? this._checkComponent(\"EdgeMaterial\", cfg.edgeMaterial) : this.scene.edgeMaterial;\n\n        this._parentNode = null;\n\n        this._aabb = null;\n        this._aabbDirty = true;\n\n        this._numTriangles = (this._geometry ? this._geometry.numTriangles : 0);\n\n        this.scene._aabbDirty = true;\n\n        this._scale = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n        this._quaternion = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityQuaternion();\n        this._rotation = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n        this._position = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n        this._worldMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n        this._worldNormalMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n\n        this._localMatrixDirty = true;\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n\n        if (cfg.rtcCenter) {\n            this._state.rtcCenter = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(cfg.rtcCenter);\n            this._state.rtcCenterHash = cfg.rtcCenter.join();\n        }\n\n        if (cfg.matrix) {\n            this.matrix = cfg.matrix;\n        } else {\n            this.scale = cfg.scale;\n            this.position = cfg.position;\n            if (cfg.quaternion) {\n            } else {\n                this.rotation = cfg.rotation;\n            }\n        }\n\n        this._isObject = cfg.isObject;\n        if (this._isObject) {\n            this.scene._registerObject(this);\n        }\n\n        this._isModel = cfg.isModel;\n        if (this._isModel) {\n            this.scene._registerModel(this);\n        }\n\n        this.visible = cfg.visible;\n        this.culled = cfg.culled;\n        this.pickable = cfg.pickable;\n        this.clippable = cfg.clippable;\n        this.collidable = cfg.collidable;\n        this.castsShadow = cfg.castsShadow;\n        this.receivesShadow = cfg.receivesShadow;\n        this.xrayed = cfg.xrayed;\n        this.highlighted = cfg.highlighted;\n        this.selected = cfg.selected;\n        this.edges = cfg.edges;\n        this.layer = cfg.layer;\n        this.colorize = cfg.colorize;\n        this.opacity = cfg.opacity;\n        this.offset = cfg.offset;\n\n        if (cfg.parentId) {\n            const parentNode = this.scene.components[cfg.parentId];\n            if (!parentNode) {\n                this.error(\"Parent not found: '\" + cfg.parentId + \"'\");\n            } else if (!parentNode.isNode) {\n                this.error(\"Parent is not a Node: '\" + cfg.parentId + \"'\");\n            } else {\n                parentNode.addChild(this);\n            }\n            this._parentNode = parentNode;\n        } else if (cfg.parent) {\n            if (!cfg.parent.isNode) {\n                this.error(\"Parent is not a Node\");\n            }\n            cfg.parent.addChild(this);\n            this._parentNode = cfg.parent;\n        }\n\n        this.compile();\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Mesh members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that this Component is a Mesh.\n     * @final\n     * @type {Boolean}\n     */\n    get isMesh() {\n        return true;\n    }\n\n    /**\n     * The parent Node.\n     *\n     * The parent Node may also be set by passing the Mesh to the parent's {@link Node#addChild} method.\n     *\n     * @type {Node}\n     */\n    get parent() {\n        return this._parentNode;\n    }\n\n    _checkBillboard(value) {\n        value = value || \"none\";\n        if (value !== \"spherical\" && value !== \"cylindrical\" && value !== \"none\") {\n            this.error(\"Unsupported value for 'billboard': \" + value + \" - accepted values are \" +\n                \"'spherical', 'cylindrical' and 'none' - defaulting to 'none'.\");\n            value = \"none\";\n        }\n        return value;\n    }\n\n    /**\n     * Called by xeokit to compile shaders for this Mesh.\n     * @private\n     */\n    compile() {\n        const drawHash = this._makeDrawHash();\n        if (this._state.drawHash !== drawHash) {\n            this._state.drawHash = drawHash;\n            this._putDrawRenderers();\n            this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this);\n            // this._shadowRenderer = ShadowRenderer.get(this);\n            this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this);\n            this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this);\n        }\n        const pickHash = this._makePickHash();\n        if (this._state.pickHash !== pickHash) {\n            this._state.pickHash = pickHash;\n            this._putPickRenderers();\n            this._pickMeshRenderer = _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__[\"PickMeshRenderer\"].get(this);\n        }\n        const occlusionHash = this._makeOcclusionHash();\n        if (this._state.occlusionHash !== occlusionHash) {\n            this._state.occlusionHash = occlusionHash;\n            this._putOcclusionRenderer();\n            this._occlusionRenderer = _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__[\"OcclusionRenderer\"].get(this);\n        }\n    }\n\n    _setLocalMatrixDirty() {\n        this._localMatrixDirty = true;\n        this._setWorldMatrixDirty();\n    }\n\n    _setWorldMatrixDirty() {\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n    }\n\n    _buildWorldMatrix() {\n        const localMatrix = this.matrix;\n        if (!this._parentNode) {\n            for (let i = 0, len = localMatrix.length; i < len; i++) {\n                this._worldMatrix[i] = localMatrix[i];\n            }\n        } else {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(this._parentNode.worldMatrix, localMatrix, this._worldMatrix);\n        }\n        this._worldMatrixDirty = false;\n    }\n\n    _buildWorldNormalMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        if (!this._worldNormalMatrix) {\n            this._worldNormalMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n        }\n        // Note: order of inverse and transpose doesn't matter\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transposeMat4(this._worldMatrix, this._worldNormalMatrix);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].inverseMat4(this._worldNormalMatrix);\n        this._worldNormalMatrixDirty = false;\n    }\n\n    _setAABBDirty() {\n        if (this.collidable) {\n            for (let node = this; node; node = node._parentNode) {\n                node._aabbDirty = true;\n            }\n        }\n    }\n\n    _updateAABB() {\n        this.scene._aabbDirty = true;\n        if (!this._aabb) {\n            this._aabb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].AABB3();\n        }\n        this._buildAABB(this.worldMatrix, this._aabb); // Mesh or PerformanceModel\n        this._aabbDirty = false;\n    }\n\n    _webglContextRestored() {\n        if (this._drawRenderer) {\n            this._drawRenderer.webglContextRestored();\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.webglContextRestored();\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.webglContextRestored();\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.webglContextRestored();\n        }\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n        if (this._occlusionRenderer) {\n            this._occlusionRenderer.webglContextRestored();\n        }\n    }\n\n    _makeDrawHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n            scene._lightsState.getHash(),\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        if (state.receivesShadow) {\n            hash.push(\"/rs\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _makePickHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _makeOcclusionHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _buildAABB(worldMatrix, aabb) {\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformOBB3(worldMatrix, this._geometry.obb, obb);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].OBB3ToAABB3(obb, aabb);\n\n        const offset = this._state.offset;\n\n        aabb[0] += offset[0];\n        aabb[1] += offset[1];\n        aabb[2] += offset[2];\n        aabb[3] += offset[0];\n        aabb[4] += offset[1];\n        aabb[5] += offset[2];\n\n        if (this._state.rtcCenter) {\n            const rtcCenter = this._state.rtcCenter;\n            aabb[0] += rtcCenter[0];\n            aabb[1] += rtcCenter[1];\n            aabb[2] += rtcCenter[2];\n            aabb[3] += rtcCenter[0];\n            aabb[4] += rtcCenter[1];\n            aabb[5] += rtcCenter[2];\n        }\n    }\n\n    /**\n     * Defines the shape of this Mesh.\n     *\n     * Set to {@link Scene#geometry} by default.\n     *\n     * @type {Geometry}\n     */\n    get geometry() {\n        return this._geometry;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when rendering normally, ie. when not xrayed, highlighted or selected.\n     *\n     * Set to {@link Scene#material} by default.\n     *\n     * @type {Material}\n     */\n    get material() {\n        return this._material;\n    }\n\n    /**\n     * Sets the Mesh's local translation.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    set position(value) {\n        this._position.set(value || [0, 0, 0]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local translation.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get position() {\n        return this._position;\n    }\n\n    /**\n     * Sets the Mesh's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    set rotation(value) {\n        this._rotation.set(value || [0, 0, 0]);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].eulerToQuaternion(this._rotation, \"XYZ\", this._quaternion);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get rotation() {\n        return this._rotation;\n    }\n\n    /**\n     * Sets the Mesh's local rotation quaternion.\n     *\n     * Default value is ````[0,0,0,1]````.\n     *\n     * @type {Number[]}\n     */\n    set quaternion(value) {\n        this._quaternion.set(value || [0, 0, 0, 1]);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].quaternionToEuler(this._quaternion, \"XYZ\", this._rotation);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local rotation quaternion.\n     *\n     * Default value is ````[0,0,0,1]````.\n     *\n     * @type {Number[]}\n     */\n    get quaternion() {\n        return this._quaternion;\n    }\n\n    /**\n     * Sets the Mesh's local scale.\n     *\n     * Default value is ````[1,1,1]````.\n     *\n     * @type {Number[]}\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1, 1]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local scale.\n     *\n     * Default value is ````[1,1,1]````.\n     *\n     * @type {Number[]}\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {Number[]}\n     */\n    set matrix(value) {\n        if (!this.__localMatrix) {\n            this.__localMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n        }\n        this.__localMatrix.set(value || identityMat);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].decomposeMat4(this.__localMatrix, this._position, this._quaternion, this._scale);\n        this._localMatrixDirty = false;\n        this._setWorldMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {Number[]}\n     */\n    get matrix() {\n        if (this._localMatrixDirty) {\n            if (!this.__localMatrix) {\n                this.__localMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n            }\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].composeMat4(this._position, this._quaternion, this._scale, this.__localMatrix);\n            this._localMatrixDirty = false;\n        }\n        return this.__localMatrix;\n    }\n\n    /**\n     * Gets the Mesh's World matrix.\n     *\n     * @property worldMatrix\n     * @type {Number[]}\n     */\n    get worldMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        return this._worldMatrix;\n    }\n\n    /**\n     * Gets the Mesh's World normal matrix.\n     *\n     * @type {Number[]}\n     */\n    get worldNormalMatrix() {\n        if (this._worldNormalMatrixDirty) {\n            this._buildWorldNormalMatrix();\n        }\n        return this._worldNormalMatrix;\n    }\n\n    /**\n     * Rotates the Mesh about the given local axis by the given increment.\n     *\n     * @param {Number[]} axis Local axis about which to rotate.\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotate(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].angleAxisToQuaternion(angleAxis, q1);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulQuaternions(this.quaternion, q1, q2);\n        this.quaternion = q2;\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     * Rotates the Mesh about the given World-space axis by the given increment.\n     *\n     * @param {Number[]} axis Local axis about which to rotate.\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateOnWorldAxis(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].angleAxisToQuaternion(angleAxis, q1);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulQuaternions(q1, this.quaternion, q1);\n        //this.quaternion.premultiply(q1);\n        return this;\n    }\n\n    /**\n     * Rotates the Mesh about the local X-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateX(angle) {\n        return this.rotate(xAxis, angle);\n    }\n\n    /**\n     * Rotates the Mesh about the local Y-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateY(angle) {\n        return this.rotate(yAxis, angle);\n    }\n\n    /**\n     * Rotates the Mesh about the local Z-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateZ(angle) {\n        return this.rotate(zAxis, angle);\n    }\n\n    /**\n     * Translates the Mesh along local space vector by the given increment.\n     *\n     * @param {Number[]} axis Normalized local space 3D vector along which to translate.\n     * @param {Number} distance Distance to translate along  the vector.\n     */\n    translate(axis, distance) {\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3ApplyQuaternion(this.quaternion, axis, veca);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(veca, distance, vecb);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this.position, vecb, this.position);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     * Translates the Mesh along the local X-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the X-axis.\n     */\n    translateX(distance) {\n        return this.translate(xAxis, distance);\n    }\n\n    /**\n     * Translates the Mesh along the local Y-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the Y-axis.\n     */\n    translateY(distance) {\n        return this.translate(yAxis, distance);\n    }\n\n    /**\n     * Translates the Mesh along the local Z-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the Z-axis.\n     */\n    translateZ(distance) {\n        return this.translate(zAxis, distance);\n    }\n\n    _putDrawRenderers() {\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.put();\n            this._shadowRenderer = null;\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.put();\n            this._emphasisFillRenderer = null;\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.put();\n            this._emphasisEdgesRenderer = null;\n        }\n    }\n\n    _putPickRenderers() {\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.put();\n            this._pickMeshRenderer = null;\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickTriangleRenderer.put();\n            this._pickTriangleRenderer = null;\n        }\n    }\n\n    _putOcclusionRenderer() {\n        if (this._occlusionRenderer) {\n            this._occlusionRenderer.put();\n            this._occlusionRenderer = null;\n        }\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Entity members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that Mesh implements {@link Entity}.\n     *\n     * @returns {Boolean}\n     */\n    get isEntity() {\n        return true;\n    }\n\n    /**\n     * Returns ````true```` if this Mesh represents a model.\n     *\n     * When this returns ````true````, the Mesh will be registered by {@link Mesh#id} in {@link Scene#models} and\n     * may also have a corresponding {@link MetaModel}.\n     *\n     * @type {Boolean}\n     */\n    get isModel() {\n        return this._isModel;\n    }\n\n    /**\n     * Returns ````true```` if this Mesh represents an object.\n     *\n     * When this returns ````true````, the Mesh will be registered by {@link Mesh#id} in {@link Scene#objects} and\n     * may also have a corresponding {@link MetaObject}.\n     *\n     * @type {Boolean}\n     */\n    get isObject() {\n        return this._isObject;\n    }\n\n    /**\n     * Gets the Mesh's World-space 3D axis-aligned bounding box.\n     *\n     * Represented by a six-element Float64Array containing the min/max extents of the\n     * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n     *\n     * @type {Number[]}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabb;\n    }\n\n    /**\n     * Center of the relative-to-center (RTC) coordinate system for this Mesh.\n     *\n     * When this is given, then {@link Mesh#matrix}, {@link Mesh#position} and {@link Mesh#geometry} are all assumed to be relative to this center position.\n     *\n     * @type {Float64Array}\n     */\n    set rtcCenter(rtcCenter) {\n        if (rtcCenter) {\n            if (!this._state.rtcCenter) {\n                this._state.rtcCenter = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n            }\n            this._state.rtcCenter.set(rtcCenter);\n            this._state.rtcCenterHash = rtcCenter.join();\n            this._setAABBDirty();\n            this.scene._aabbDirty = true;\n        } else {\n            if (this._state.rtcCenter) {\n                this._state.rtcCenter = null;\n                this._state.rtcCenterHash = null;\n                this._setAABBDirty();\n                this.scene._aabbDirty = true;\n            }\n        }\n    }\n\n    /**\n     * 3D origin of the Mesh's {@link Geometry}'s vertex positions.\n     *\n     * When this is defined, then the positions are RTC, which means that they are relative to this position.\n     *\n     * @type {Float64Array}\n     */\n    get rtcCenter() {\n        return this._state.rtcCenter;\n    }\n\n    /**\n     * The approximate number of triangles in this Mesh.\n     *\n     * @type {Number}\n     */\n    get numTriangles() {\n        return this._numTriangles;\n    }\n\n    /**\n     * Sets if this Mesh is visible.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#visible} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#visibleObjects}.\n     *\n     * @type {Boolean}\n     */\n    set visible(visible) {\n        visible = visible !== false;\n        this._state.visible = visible;\n        if (this._isObject) {\n            this.scene._objectVisibilityUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is visible.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#visible} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#visibleObjects}.\n     *\n     * @type {Boolean}\n     */\n    get visible() {\n        return this._state.visible;\n    }\n\n    /**\n     * Sets if this Mesh is xrayed.\n     *\n     * XRayed appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#xrayMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#xrayed} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#xrayedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set xrayed(xrayed) {\n        xrayed = !!xrayed;\n        if (this._state.xrayed === xrayed) {\n            return;\n        }\n        this._state.xrayed = xrayed;\n        if (this._isObject) {\n            this.scene._objectXRayedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is xrayed.\n     *\n     * XRayed appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#xrayMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#xrayed} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#xrayedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get xrayed() {\n        return this._state.xrayed;\n    }\n\n    /**\n     * Sets if this Mesh is highlighted.\n     *\n     * Highlighted appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#highlightMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#highlighted} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#highlightedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set highlighted(highlighted) {\n        highlighted = !!highlighted;\n        if (highlighted === this._state.highlighted) {\n            return;\n        }\n        this._state.highlighted = highlighted;\n        if (this._isObject) {\n            this.scene._objectHighlightedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is highlighted.\n     *\n     * Highlighted appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#highlightMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#highlighted} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#highlightedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get highlighted() {\n        return this._state.highlighted;\n    }\n\n    /**\n     * Sets if this Mesh is selected.\n     *\n     * Selected appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#selectedMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#selected} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#selectedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set selected(selected) {\n        selected = !!selected;\n        if (selected === this._state.selected) {\n            return;\n        }\n        this._state.selected = selected;\n        if (this._isObject) {\n            this.scene._objectSelectedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is selected.\n     *\n     * Selected appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#selectedMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#selected} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#selectedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get selected() {\n        return this._state.selected;\n    }\n\n    /**\n     * Sets if this Mesh is edge-enhanced.\n     *\n     * Edge appearance is configured by the {@link EdgeMaterial} referenced by {@link Mesh#edgeMaterial}.\n     *\n     * @type {Boolean}\n     */\n    set edges(edges) {\n        edges = !!edges;\n        if (edges === this._state.edges) {\n            return;\n        }\n        this._state.edges = edges;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is edge-enhanced.\n     *\n     * Edge appearance is configured by the {@link EdgeMaterial} referenced by {@link Mesh#edgeMaterial}.\n     *\n     * @type {Boolean}\n     */\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     * Sets if this Mesh is culled.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set culled(value) {\n        this._state.culled = !!value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is culled.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get culled() {\n        return this._state.culled;\n    }\n\n    /**\n     * Sets if this Mesh is clippable.\n     *\n     * Clipping is done by the {@link SectionPlane}s in {@link Scene#sectionPlanes}.\n     *\n     * @type {Boolean}\n     */\n    set clippable(value) {\n        value = value !== false;\n        if (this._state.clippable === value) {\n            return;\n        }\n        this._state.clippable = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is clippable.\n     *\n     * Clipping is done by the {@link SectionPlane}s in {@link Scene#sectionPlanes}.\n     *\n     * @type {Boolean}\n     */\n    get clippable() {\n        return this._state.clippable;\n    }\n\n    /**\n     * Sets if this Mesh included in boundary calculations.\n     *\n     * @type {Boolean}\n     */\n    set collidable(value) {\n        value = value !== false;\n        if (value === this._state.collidable) {\n            return;\n        }\n        this._state.collidable = value;\n        this._setAABBDirty();\n        this.scene._aabbDirty = true;\n\n    }\n\n    /**\n     * Gets if this Mesh included in boundary calculations.\n     *\n     * @type {Boolean}\n     */\n    get collidable() {\n        return this._state.collidable;\n    }\n\n    /**\n     * Sets if this Mesh is pickable.\n     *\n     * Picking is done via calls to {@link Scene#pick}.\n     *\n     * @type {Boolean}\n     */\n    set pickable(value) {\n        value = value !== false;\n        if (this._state.pickable === value) {\n            return;\n        }\n        this._state.pickable = value;\n        // No need to trigger a render;\n        // state is only used when picking\n    }\n\n    /**\n     * Gets if this Mesh is pickable.\n     *\n     * Picking is done via calls to {@link Scene#pick}.\n     *\n     * @type {Boolean}\n     */\n    get pickable() {\n        return this._state.pickable;\n    }\n\n    /**\n     * Sets if this Mesh casts shadows.\n     *\n     * @type {Boolean}\n     */\n    set castsShadow(value) {\n        value = value !== false;\n        if (value === this._state.castsShadow) {\n            return;\n        }\n        this._state.castsShadow = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh casts shadows.\n     *\n     * @type {Boolean}\n     */\n    get castsShadow() {\n        return this._state.castsShadow;\n    }\n\n    /**\n     * Sets if this Mesh can have shadows cast upon it.\n     *\n     * @type {Boolean}\n     */\n    set receivesShadow(value) {\n        value = value !== false;\n        if (value === this._state.receivesShadow) {\n            return;\n        }\n        this._state.receivesShadow = value;\n        this._state.hash = value ? \"/mod/rs;\" : \"/mod;\";\n        this.fire(\"dirty\", this); // Now need to (re)compile objectRenderers to include/exclude shadow mapping\n    }\n\n    /**\n     * Gets if this Mesh can have shadows cast upon it.\n     *\n     * @type {Boolean}\n     */\n    get receivesShadow() {\n        return this._state.receivesShadow;\n    }\n\n    /**\n     * Gets if this Mesh can have Scalable Ambient Obscurance (SAO) applied to it.\n     *\n     * SAO is configured by {@link SAO}.\n     *\n     * @type {Boolean}\n     * @abstract\n     */\n    get saoEnabled() {\n        return false; // TODO: Support SAO on Meshes\n    }\n\n    /**\n     * Sets the RGB colorize color for this Mesh.\n     *\n     * Multiplies by rendered fragment colors.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     *\n     * @type {Number[]}\n     */\n    set colorize(value) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[3] = 1;\n        }\n        if (value) {\n            colorize[0] = value[0];\n            colorize[1] = value[1];\n            colorize[2] = value[2];\n        } else {\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        const colorized = (!!value);\n        this.scene._objectColorizeUpdated(this, colorized);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB colorize color for this Mesh.\n     *\n     * Multiplies by rendered fragment colors.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     *\n     * @type {Number[]}\n     */\n    get colorize() {\n        return this._state.colorize;\n    }\n\n    /**\n     * Sets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     *\n     * @type {Number}\n     */\n    set opacity(opacity) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        const opacityUpdated = (opacity !== null && opacity !== undefined);\n        colorize[3] = opacityUpdated ? opacity : 1.0;\n        this.scene._objectOpacityUpdated(this, opacityUpdated);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     *\n     * @type {Number}\n     */\n    get opacity() {\n        return this._state.colorize[3];\n    }\n\n    /**\n     * Gets if this Mesh is transparent.\n     * @returns {Boolean}\n     */\n    get transparent() {\n        return this._material.alphaMode === 2 /* blend */ || this._state.colorize[3] < 1\n    }\n\n    /**\n     * Sets the Mesh's rendering order relative to other Meshes.\n     *\n     * Default value is ````0````.\n     *\n     * This can be set on multiple transparent Meshes, to make them render in a specific order for correct alpha blending.\n     *\n     * @type {Number}\n     */\n    set layer(value) {\n        // TODO: Only accept rendering layer in range [0...MAX_layer]\n        value = value || 0;\n        value = Math.round(value);\n        if (value === this._state.layer) {\n            return;\n        }\n        this._state.layer = value;\n        this._renderer.needStateSort();\n    }\n\n    /**\n     * Gets the Mesh's rendering order relative to other Meshes.\n     *\n     * Default value is ````0````.\n     *\n     * This can be set on multiple transparent Meshes, to make them render in a specific order for correct alpha blending.\n     *\n     * @type {Number}\n     */\n    get layer() {\n        return this._state.layer;\n    }\n\n    /**\n     * Gets if the Node's position is stationary.\n     *\n     * When true, will disable the effect of {@link Camera} translations for this Mesh, while still allowing it to rotate. This is useful for skyboxes.\n     *\n     * @type {Boolean}\n     */\n    get stationary() {\n        return this._state.stationary;\n    }\n\n    /**\n     * Gets the Node's billboarding behaviour.\n     *\n     * Options are:\n     * * ````\"none\"```` -  (default) - No billboarding.\n     * * ````\"spherical\"```` - Mesh is billboarded to face the viewpoint, rotating both vertically and horizontally.\n     * * ````\"cylindrical\"```` - Mesh is billboarded to face the viewpoint, rotating only about its vertically axis. Use this mode for things like trees on a landscape.\n     * @type {String}\n     */\n    get billboard() {\n        return this._state.billboard;\n    }\n\n    /**\n     * Sets the Mesh's 3D World-space offset.\n     *\n     * The offset dynamically translates the Mesh in World-space.\n     *\n     * Default value is ````[0, 0, 0]````.\n     *\n     * Provide a null or undefined value to reset to the default value.\n     *\n     * @type {Number[]}\n     */\n    set offset(value) {\n        this._state.offset.set(value || [0, 0, 0]);\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's 3D World-space offset.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get offset() {\n        return this._state.offset;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Drawable members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that Mesh implements {@link Drawable}.\n     * @final\n     * @type {Boolean}\n     */\n    get isDrawable() {\n        return true;\n    }\n\n    /**\n     * Property with final value ````true```` to indicate that xeokit should render this Mesh in sorted order, relative to other Meshes.\n     *\n     * The sort order is determined by {@link Mesh#stateSortCompare}.\n     *\n     * Sorting is essential for rendering performance, so that xeokit is able to avoid applying runs of the same state changes to the GPU, ie. can collapse them.\n     *\n     * @type {Boolean}\n     */\n    get isStateSortable() {\n        return true;\n    }\n\n    /**\n     * Comparison function used by the renderer to determine the order in which xeokit should render the Mesh, relative to to other Meshes.\n     *\n     * xeokit requires this method because Mesh implements {@link Drawable}.\n     *\n     * Sorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same rendering state changes to the GPU, ie. can collapse them.\n     *\n     * @param {Mesh} mesh1\n     * @param {Mesh} mesh2\n     * @returns {number}\n     */\n    stateSortCompare(mesh1, mesh2) {\n        return (mesh1._state.layer - mesh2._state.layer)\n            || (mesh1._drawRenderer.id - mesh2._drawRenderer.id) // Program state\n            || (mesh1._material._state.id - mesh2._material._state.id) // Material state\n            || (mesh1._geometry._state.id - mesh2._geometry._state.id); // Geometry state\n    }\n\n    /** @private */\n    rebuildRenderFlags() {\n        this.renderFlags.reset();\n        if (!this._getActiveSectionPlanes()) {\n            this.renderFlags.culled = true;\n            return;\n        }\n        this.renderFlags.numLayers = 1;\n        this.renderFlags.numVisibleLayers = 1;\n        this.renderFlags.visibleLayers[0] = 0;\n        this._updateRenderFlags();\n    }\n\n    /**\n     * @private\n     */\n    _updateRenderFlags() {\n\n        const renderFlags = this.renderFlags;\n        const state = this._state;\n\n        if (state.xrayed) {\n            const xrayMaterial = this._xrayMaterial._state;\n            if (xrayMaterial.fill) {\n                if (xrayMaterial.fillAlpha < 1.0) {\n                    renderFlags.xrayedSilhouetteTransparent = true;\n                } else {\n                    renderFlags.xrayedSilhouetteOpaque = true;\n                }\n            }\n            if (xrayMaterial.edges) {\n                if (xrayMaterial.edgeAlpha < 1.0) {\n                    renderFlags.xrayedEdgesTransparent = true;\n                } else {\n                    renderFlags.xrayedEdgesOpaque = true;\n                }\n            }\n        } else {\n            const normalMaterial = this._material._state;\n            if (normalMaterial.alpha < 1.0 || state.colorize[3] < 1.0) {\n                renderFlags.colorTransparent = true;\n            } else {\n                renderFlags.colorOpaque = true;\n            }\n            if (state.edges) {\n                const edgeMaterial = this._edgeMaterial._state;\n                if (edgeMaterial.alpha < 1.0) {\n                    renderFlags.edgesTransparent = true;\n                } else {\n                    renderFlags.edgesOpaque = true;\n                }\n            }\n            if (state.selected) {\n                const selectedMaterial = this._selectedMaterial._state;\n                if (selectedMaterial.fill) {\n                    if (selectedMaterial.fillAlpha < 1.0) {\n                        renderFlags.selectedSilhouetteTransparent = true;\n                    } else {\n                        renderFlags.selectedSilhouetteOpaque = true;\n                    }\n                }\n                if (selectedMaterial.edges) {\n                    if (selectedMaterial.edgeAlpha < 1.0) {\n                        renderFlags.selectedEdgesTransparent = true;\n                    } else {\n                        renderFlags.selectedEdgesOpaque = true;\n                    }\n                }\n            } else if (state.highlighted) {\n                const highlightMaterial = this._highlightMaterial._state;\n                if (highlightMaterial.fill) {\n                    if (highlightMaterial.fillAlpha < 1.0) {\n                        renderFlags.highlightedSilhouetteTransparent = true;\n                    } else {\n                        renderFlags.highlightedSilhouetteOpaque = true;\n                    }\n                }\n                if (highlightMaterial.edges) {\n                    if (highlightMaterial.edgeAlpha < 1.0) {\n                        renderFlags.highlightedEdgesTransparent = true;\n                    } else {\n                        renderFlags.highlightedEdgesOpaque = true;\n                    }\n                }\n            }\n        }\n    }\n\n    _getActiveSectionPlanes() {\n\n        if (this._state.clippable) {\n\n            const sectionPlanes = this.scene._sectionPlanesState.sectionPlanes;\n            const numSectionPlanes = sectionPlanes.length;\n\n            if (numSectionPlanes > 0) {\n                for (let i = 0; i < numSectionPlanes; i++) {\n\n                    const sectionPlane = sectionPlanes[i];\n                    const renderFlags = this.renderFlags;\n\n                    if (!sectionPlane.active) {\n                        renderFlags.sectionPlanesActivePerLayer[i] = false;\n\n                    } else {\n\n                        if (this._state.rtcCenter) {\n\n                            const intersect = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].planeAABB3Intersect(sectionPlane.dir, sectionPlane.dist, this.aabb);\n                            const outside = (intersect === -1);\n\n                            if (outside) {\n                                return false;\n                            }\n\n                            const intersecting = (intersect === 0);\n                            renderFlags.sectionPlanesActivePerLayer[i] = intersecting;\n\n                        } else {\n                            renderFlags.sectionPlanesActivePerLayer[i] = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when xrayed.\n     *\n     * Mesh is xrayed when {@link Mesh#xrayed} is ````true````.\n     *\n     * Set to {@link Scene#xrayMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get xrayMaterial() {\n        return this._xrayMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when highlighted.\n     *\n     * Mesh is xrayed when {@link Mesh#highlighted} is ````true````.\n     *\n     * Set to {@link Scene#highlightMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get highlightMaterial() {\n        return this._highlightMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when selected.\n     *\n     * Mesh is xrayed when {@link Mesh#selected} is ````true````.\n     *\n     * Set to {@link Scene#selectedMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get selectedMaterial() {\n        return this._selectedMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when edges are enhanced.\n     *\n     * Mesh is xrayed when {@link Mesh#edges} is ````true````.\n     *\n     * Set to {@link Scene#edgeMaterial} by default.\n     *\n     * @type {EdgeMaterial}\n     */\n    get edgeMaterial() {\n        return this._edgeMaterial;\n    }\n\n    // ---------------------- NORMAL RENDERING -----------------------------------\n\n    /** @private  */\n    drawColorOpaque(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private  */\n    drawColorTransparent(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- RENDERING SAO POST EFFECT TARGETS --------------\n\n    // TODO\n\n    // ---------------------- EMPHASIS RENDERING -----------------------------------\n\n    /** @private  */\n    drawSilhouetteXRayed(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 0); // 0 == xray\n        }\n    }\n\n    /** @private  */\n    drawSilhouetteHighlighted(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    /** @private  */\n    drawSilhouetteSelected(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    // ---------------------- EDGES RENDERING -----------------------------------\n\n    /** @private  */\n    drawEdgesColorOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    /** @private  */\n    drawEdgesColorTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    /** @private  */\n    drawEdgesXRayed(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 0); // 0 == xray\n        }\n    }\n\n    /** @private  */\n    drawEdgesHighlighted(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    /** @private  */\n    drawEdgesSelected(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    // ---------------------- OCCLUSION CULL RENDERING -----------------------------------\n\n    /** @private  */\n    drawOcclusion(frameCtx) {\n        if (this._occlusionRenderer || (this._occlusionRenderer = _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__[\"OcclusionRenderer\"].get(this))) {\n            this._occlusionRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- SHADOW BUFFER RENDERING -----------------------------------\n\n    /** @private  */\n    drawShadow(frameCtx) {\n        if (this._shadowRenderer || (this._shadowRenderer = _shadow_ShadowRenderer_js__WEBPACK_IMPORTED_MODULE_9__[\"ShadowRenderer\"].get(this))) {\n            this._shadowRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- PICKING RENDERING ----------------------------------\n\n    /** @private  */\n    drawPickMesh(frameCtx) {\n        if (this._pickMeshRenderer || (this._pickMeshRenderer = _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__[\"PickMeshRenderer\"].get(this))) {\n            this._pickMeshRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private\n     */\n    canPickTriangle() {\n        return this._geometry.isReadableGeometry; // VBOGeometry does not support surface picking because it has no geometry data in browser memory\n    }\n\n    /** @private  */\n    drawPickTriangles(frameCtx) {\n        if (this._pickTriangleRenderer || (this._pickTriangleRenderer = _pick_PickTriangleRenderer_js__WEBPACK_IMPORTED_MODULE_7__[\"PickTriangleRenderer\"].get(this))) {\n            this._pickTriangleRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private */\n    pickTriangleSurface(pickViewMatrix, pickProjMatrix, pickResult) {\n        pickTriangleSurface(this, pickViewMatrix, pickProjMatrix, pickResult);\n    }\n\n    /** @private  */\n    drawPickVertices(frameCtx) {\n\n    }\n\n    /**\n     * @private\n     * @returns {PerformanceNode}\n     */\n    delegatePickedEntity() {\n        return this;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Component members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Destroys this Mesh.\n     */\n    destroy() {\n        super.destroy(); // xeokit.Object\n        this._putDrawRenderers();\n        this._putPickRenderers();\n        this._putOcclusionRenderer();\n        this.scene._renderer.putPickID(this._state.pickID); // TODO: somehow puch this down into xeokit framework?\n        if (this._isObject) {\n            this.scene._deregisterObject(this);\n            if (this._visible) {\n                this.scene._objectVisibilityUpdated(this, false);\n            }\n            if (this._xrayed) {\n                this.scene._objectXRayedUpdated(this, false);\n            }\n            if (this._selected) {\n                this.scene._objectSelectedUpdated(this, false);\n            }\n            if (this._highlighted) {\n                this.scene._objectHighlightedUpdated(this, false);\n            }\n            this.scene._objectColorizeUpdated(this, false);\n            this.scene._objectOpacityUpdated(this, false);\n            this.scene._objectOffsetUpdated(this, false);\n        }\n        if (this._isModel) {\n            this.scene._deregisterModel(this);\n        }\n        this.glRedraw();\n    }\n\n}\n\n\nconst pickTriangleSurface = (function () {\n\n    // Cached vars to avoid garbage collection\n\n    const localRayOrigin = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const localRayDir = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionA = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionB = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionC = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const triangleVertices = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const position = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const worldPos = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const viewPos = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const bary = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalA = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalB = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalC = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uva = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uvb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uvc = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec4a = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec4b = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec4c = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec3 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3b = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3c = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3d = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3e = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3f = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3g = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3h = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3i = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3j = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3k = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n    return function (mesh, pickViewMatrix, pickProjMatrix, pickResult) {\n\n        var primIndex = pickResult.primIndex;\n\n        if (primIndex !== undefined && primIndex !== null && primIndex > -1) {\n\n            const geometry = mesh.geometry._state;\n            const scene = mesh.scene;\n            const camera = scene.camera;\n            const canvas = scene.canvas;\n\n            if (geometry.primitiveName === \"triangles\") {\n\n                // Triangle picked; this only happens when the\n                // Mesh has a Geometry that has primitives of type \"triangle\"\n\n                pickResult.primitive = \"triangle\";\n\n                // Get the World-space positions of the triangle's vertices\n\n                const i = primIndex; // Indicates the first triangle index in the indices array\n\n                const indices = geometry.indices; // Indices into geometry arrays, not into shared VertexBufs\n                const positions = geometry.positions;\n\n                let ia3;\n                let ib3;\n                let ic3;\n\n                if (indices) {\n\n                    var ia = indices[i + 0];\n                    var ib = indices[i + 1];\n                    var ic = indices[i + 2];\n\n                    triangleVertices[0] = ia;\n                    triangleVertices[1] = ib;\n                    triangleVertices[2] = ic;\n\n                    pickResult.indices = triangleVertices;\n\n                    ia3 = ia * 3;\n                    ib3 = ib * 3;\n                    ic3 = ic * 3;\n\n                } else {\n\n                    ia3 = i * 3;\n                    ib3 = ia3 + 3;\n                    ic3 = ib3 + 3;\n                }\n\n                positionA[0] = positions[ia3 + 0];\n                positionA[1] = positions[ia3 + 1];\n                positionA[2] = positions[ia3 + 2];\n\n                positionB[0] = positions[ib3 + 0];\n                positionB[1] = positions[ib3 + 1];\n                positionB[2] = positions[ib3 + 2];\n\n                positionC[0] = positions[ic3 + 0];\n                positionC[1] = positions[ic3 + 1];\n                positionC[2] = positions[ic3 + 2];\n\n                if (geometry.compressGeometry) {\n\n                    // Decompress vertex positions\n\n                    const positionsDecodeMatrix = geometry.positionsDecodeMatrix;\n                    if (positionsDecodeMatrix) {\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionA, positionsDecodeMatrix, positionA);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionB, positionsDecodeMatrix, positionB);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionC, positionsDecodeMatrix, positionC);\n                    }\n                }\n\n                // Attempt to ray-pick the triangle in local space\n\n                let canvasPos;\n\n                if (pickResult.canvasPos) {\n                    canvasPos = pickResult.canvasPos;\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].canvasPosToLocalRay(canvas.canvas, pickViewMatrix, pickProjMatrix, mesh.worldMatrix, canvasPos, localRayOrigin, localRayDir);\n\n                } else if (pickResult.origin && pickResult.direction) {\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].worldRayToLocalRay(mesh.worldMatrix, pickResult.origin, pickResult.direction, localRayOrigin, localRayDir);\n                }\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(localRayDir);\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rayPlaneIntersect(localRayOrigin, localRayDir, positionA, positionB, positionC, position);\n\n                // Get Local-space cartesian coordinates of the ray-triangle intersection\n\n                pickResult.localPos = position;\n                pickResult.position = position;\n\n                // Get interpolated World-space coordinates\n\n                // Need to transform homogeneous coords\n\n                tempVec4a[0] = position[0];\n                tempVec4a[1] = position[1];\n                tempVec4a[2] = position[2];\n                tempVec4a[3] = 1;\n\n                // Get World-space cartesian coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(mesh.worldMatrix, tempVec4a, tempVec4b);\n\n                worldPos[0] = tempVec4b[0];\n                worldPos[1] = tempVec4b[1];\n                worldPos[2] = tempVec4b[2];\n\n                pickResult.worldPos = worldPos;\n\n                // Get View-space cartesian coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(camera.matrix, tempVec4b, tempVec4c);\n\n                viewPos[0] = tempVec4c[0];\n                viewPos[1] = tempVec4c[1];\n                viewPos[2] = tempVec4c[2];\n\n                pickResult.viewPos = viewPos;\n\n                // Get barycentric coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cartesianToBarycentric(position, positionA, positionB, positionC, bary);\n\n                pickResult.bary = bary;\n\n                // Get interpolated normal vector\n\n                const normals = geometry.normals;\n\n                if (normals) {\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex normals\n\n                        const ia2 = ia * 3;\n                        const ib2 = ib * 3;\n                        const ic2 = ic * 3;\n\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ia2, ia2 + 2), normalA);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ib2, ib2 + 2), normalB);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ic2, ic2 + 2), normalC);\n\n                    } else {\n\n                        normalA[0] = normals[ia3];\n                        normalA[1] = normals[ia3 + 1];\n                        normalA[2] = normals[ia3 + 2];\n\n                        normalB[0] = normals[ib3];\n                        normalB[1] = normals[ib3 + 1];\n                        normalB[2] = normals[ib3 + 2];\n\n                        normalC[0] = normals[ic3];\n                        normalC[1] = normals[ic3 + 1];\n                        normalC[2] = normals[ic3 + 2];\n                    }\n\n                    const normal = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalA, bary[0], tempVec3),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalB, bary[1], tempVec3b), tempVec3c),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalC, bary[2], tempVec3d), tempVec3e);\n\n                    pickResult.worldNormal = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec3(mesh.worldNormalMatrix, normal, tempVec3f));\n                }\n\n                // Get interpolated UV coordinates\n\n                const uvs = geometry.uv;\n\n                if (uvs) {\n\n                    uva[0] = uvs[(ia * 2)];\n                    uva[1] = uvs[(ia * 2) + 1];\n\n                    uvb[0] = uvs[(ib * 2)];\n                    uvb[1] = uvs[(ib * 2) + 1];\n\n                    uvc[0] = uvs[(ic * 2)];\n                    uvc[1] = uvs[(ic * 2) + 1];\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex UVs\n\n                        const uvDecodeMatrix = geometry.uvDecodeMatrix;\n                        if (uvDecodeMatrix) {\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uva, uvDecodeMatrix, uva);\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uvb, uvDecodeMatrix, uvb);\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uvc, uvDecodeMatrix, uvc);\n                        }\n                    }\n\n                    pickResult.uv = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uva, bary[0], tempVec3g),\n                            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uvb, bary[1], tempVec3h), tempVec3i),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uvc, bary[2], tempVec3j), tempVec3k);\n                }\n            }\n        }\n    }\n})();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js ***!
  \************************************************************************************/
/*! exports provided: DrawRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawRenderer\", function() { return DrawRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _DrawShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DrawShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_5__[\"math\"].vec3();\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\n/**\n * @private\n */\nconst DrawRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _DrawShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"DrawShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst drawRenderers = {};\n\nDrawRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [\n        scene.canvas.canvas.id,\n        (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n        scene._lightsState.getHash(),\n        scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._material._state.hash,\n        mesh._state.drawHash\n    ].join(\";\");\n    let renderer = drawRenderers[hash];\n    if (!renderer) {\n        renderer = new DrawRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        drawRenderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nDrawRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete drawRenderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nDrawRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nDrawRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const maxTextureUnits = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_TEXTURE_UNITS;\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const camera = scene.camera;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.viewNormalMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_6__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n\n        frameCtx.textureUnit = this._baseTextureUnit;\n\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n\n        if (frameCtx.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frameCtx.lineWidth = materialState.lineWidth;\n        }\n\n        if (this._uPointSize) {\n            gl.uniform1f(this._uPointSize, materialState.pointSize);\n        }\n\n        switch (materialState.type) {\n            case \"LambertMaterial\":\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialColor) {\n                    gl.uniform4f(this._uMaterialColor, materialState.color[0], materialState.color[1], materialState.color[2], materialState.alpha);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                break;\n\n            case \"PhongMaterial\":\n                if (this._uMaterialShininess) {\n                    gl.uniform1f(this._uMaterialShininess, materialState.shininess);\n                }\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0);\n                }\n                if (material._ambientMap && material._ambientMap._state.texture && this._uMaterialAmbientMap) {\n                    program.bindTexture(this._uMaterialAmbientMap, material._ambientMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMaterialAmbientMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMaterialAmbientMapMatrix, false, material._ambientMap._state.matrix);\n                    }\n                }\n                if (material._diffuseMap && material._diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, material._diffuseMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, material._diffuseMap._state.matrix);\n                    }\n                }\n                if (material._specularMap && material._specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, material._specularMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, material._specularMap._state.matrix);\n                    }\n                }\n                if (material._emissiveMap && material._emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, material._emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, material._emissiveMap._state.matrix);\n                    }\n                }\n                if (material._alphaMap && material._alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, material._alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, material._alphaMap._state.matrix);\n                    }\n                }\n                if (material._reflectivityMap && material._reflectivityMap._state.texture && this._uReflectivityMap) {\n                    program.bindTexture(this._uReflectivityMap, material._reflectivityMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    if (this._uReflectivityMapMatrix) {\n                        gl.uniformMatrix4fv(this._uReflectivityMapMatrix, false, material._reflectivityMap._state.matrix);\n                    }\n                }\n                if (material._normalMap && material._normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, material._normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, material._normalMap._state.matrix);\n                    }\n                }\n                if (material._occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, material._occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, material._occlusionMap._state.matrix);\n                    }\n                }\n                if (material._diffuseFresnel) {\n                    if (this._uDiffuseFresnelEdgeBias) {\n                        gl.uniform1f(this._uDiffuseFresnelEdgeBias, material._diffuseFresnel.edgeBias);\n                    }\n                    if (this._uDiffuseFresnelCenterBias) {\n                        gl.uniform1f(this._uDiffuseFresnelCenterBias, material._diffuseFresnel.centerBias);\n                    }\n                    if (this._uDiffuseFresnelEdgeColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelEdgeColor, material._diffuseFresnel.edgeColor);\n                    }\n                    if (this._uDiffuseFresnelCenterColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelCenterColor, material._diffuseFresnel.centerColor);\n                    }\n                    if (this._uDiffuseFresnelPower) {\n                        gl.uniform1f(this._uDiffuseFresnelPower, material._diffuseFresnel.power);\n                    }\n                }\n                if (material._specularFresnel) {\n                    if (this._uSpecularFresnelEdgeBias) {\n                        gl.uniform1f(this._uSpecularFresnelEdgeBias, material._specularFresnel.edgeBias);\n                    }\n                    if (this._uSpecularFresnelCenterBias) {\n                        gl.uniform1f(this._uSpecularFresnelCenterBias, material._specularFresnel.centerBias);\n                    }\n                    if (this._uSpecularFresnelEdgeColor) {\n                        gl.uniform3fv(this._uSpecularFresnelEdgeColor, material._specularFresnel.edgeColor);\n                    }\n                    if (this._uSpecularFresnelCenterColor) {\n                        gl.uniform3fv(this._uSpecularFresnelCenterColor, material._specularFresnel.centerColor);\n                    }\n                    if (this._uSpecularFresnelPower) {\n                        gl.uniform1f(this._uSpecularFresnelPower, material._specularFresnel.power);\n                    }\n                }\n                if (material._alphaFresnel) {\n                    if (this._uAlphaFresnelEdgeBias) {\n                        gl.uniform1f(this._uAlphaFresnelEdgeBias, material._alphaFresnel.edgeBias);\n                    }\n                    if (this._uAlphaFresnelCenterBias) {\n                        gl.uniform1f(this._uAlphaFresnelCenterBias, material._alphaFresnel.centerBias);\n                    }\n                    if (this._uAlphaFresnelEdgeColor) {\n                        gl.uniform3fv(this._uAlphaFresnelEdgeColor, material._alphaFresnel.edgeColor);\n                    }\n                    if (this._uAlphaFresnelCenterColor) {\n                        gl.uniform3fv(this._uAlphaFresnelCenterColor, material._alphaFresnel.centerColor);\n                    }\n                    if (this._uAlphaFresnelPower) {\n                        gl.uniform1f(this._uAlphaFresnelPower, material._alphaFresnel.power);\n                    }\n                }\n                if (material._reflectivityFresnel) {\n                    if (this._uReflectivityFresnelEdgeBias) {\n                        gl.uniform1f(this._uReflectivityFresnelEdgeBias, material._reflectivityFresnel.edgeBias);\n                    }\n                    if (this._uReflectivityFresnelCenterBias) {\n                        gl.uniform1f(this._uReflectivityFresnelCenterBias, material._reflectivityFresnel.centerBias);\n                    }\n                    if (this._uReflectivityFresnelEdgeColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelEdgeColor, material._reflectivityFresnel.edgeColor);\n                    }\n                    if (this._uReflectivityFresnelCenterColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelCenterColor, material._reflectivityFresnel.centerColor);\n                    }\n                    if (this._uReflectivityFresnelPower) {\n                        gl.uniform1f(this._uReflectivityFresnelPower, material._reflectivityFresnel.power);\n                    }\n                }\n                if (material._emissiveFresnel) {\n                    if (this._uEmissiveFresnelEdgeBias) {\n                        gl.uniform1f(this._uEmissiveFresnelEdgeBias, material._emissiveFresnel.edgeBias);\n                    }\n                    if (this._uEmissiveFresnelCenterBias) {\n                        gl.uniform1f(this._uEmissiveFresnelCenterBias, material._emissiveFresnel.centerBias);\n                    }\n                    if (this._uEmissiveFresnelEdgeColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelEdgeColor, material._emissiveFresnel.edgeColor);\n                    }\n                    if (this._uEmissiveFresnelCenterColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelCenterColor, material._emissiveFresnel.centerColor);\n                    }\n                    if (this._uEmissiveFresnelPower) {\n                        gl.uniform1f(this._uEmissiveFresnelPower, material._emissiveFresnel.power);\n                    }\n                }\n                break;\n\n            case \"MetallicMaterial\":\n                if (this._uBaseColor) {\n                    gl.uniform3fv(this._uBaseColor, materialState.baseColor);\n                }\n                if (this._uMaterialMetallic) {\n                    gl.uniform1f(this._uMaterialMetallic, materialState.metallic);\n                }\n                if (this._uMaterialRoughness) {\n                    gl.uniform1f(this._uMaterialRoughness, materialState.roughness);\n                }\n                if (this._uMaterialSpecularF0) {\n                    gl.uniform1f(this._uMaterialSpecularF0, materialState.specularF0);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const baseColorMap = material._baseColorMap;\n                if (baseColorMap && baseColorMap._state.texture && this._uBaseColorMap) {\n                    program.bindTexture(this._uBaseColorMap, baseColorMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uBaseColorMapMatrix) {\n                        gl.uniformMatrix4fv(this._uBaseColorMapMatrix, false, baseColorMap._state.matrix);\n                    }\n                }\n                const metallicMap = material._metallicMap;\n                if (metallicMap && metallicMap._state.texture && this._uMetallicMap) {\n                    program.bindTexture(this._uMetallicMap, metallicMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMetallicMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicMapMatrix, false, metallicMap._state.matrix);\n                    }\n                }\n                const roughnessMap = material._roughnessMap;\n                if (roughnessMap && roughnessMap._state.texture && this._uRoughnessMap) {\n                    program.bindTexture(this._uRoughnessMap, roughnessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uRoughnessMapMatrix, false, roughnessMap._state.matrix);\n                    }\n                }\n                const metallicRoughnessMap = material._metallicRoughnessMap;\n                if (metallicRoughnessMap && metallicRoughnessMap._state.texture && this._uMetallicRoughnessMap) {\n                    program.bindTexture(this._uMetallicRoughnessMap, metallicRoughnessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMetallicRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicRoughnessMapMatrix, false, metallicRoughnessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n\n            case \"SpecularMaterial\":\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialGlossiness) {\n                    gl.uniform1f(this._uMaterialGlossiness, materialState.glossiness);\n                }\n                if (this._uMaterialReflectivity) {\n                    gl.uniform1f(this._uMaterialReflectivity, materialState.reflectivity);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const diffuseMap = material._diffuseMap;\n                if (diffuseMap && diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, diffuseMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, diffuseMap._state.matrix);\n                    }\n                }\n                const specularMap = material._specularMap;\n                if (specularMap && specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, specularMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, specularMap._state.matrix);\n                    }\n                }\n                const glossinessMap = material._glossinessMap;\n                if (glossinessMap && glossinessMap._state.texture && this._uGlossinessMap) {\n                    program.bindTexture(this._uGlossinessMap, glossinessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uGlossinessMapMatrix, false, glossinessMap._state.matrix);\n                    }\n                }\n                const specularGlossinessMap = material._specularGlossinessMap;\n                if (specularGlossinessMap && specularGlossinessMap._state.texture && this._uSpecularGlossinessMap) {\n                    program.bindTexture(this._uSpecularGlossinessMap, specularGlossinessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularGlossinessMapMatrix, false, specularGlossinessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    if (this._uColorize) {\n        const colorize = meshState.colorize;\n        const lastColorize = this._lastColorize;\n        if (lastColorize[0] !== colorize[0] ||\n            lastColorize[1] !== colorize[1] ||\n            lastColorize[2] !== colorize[2] ||\n            lastColorize[3] !== colorize[3]) {\n            gl.uniform4fv(this._uColorize, colorize);\n            lastColorize[0] = colorize[0];\n            lastColorize[1] = colorize[1];\n            lastColorize[2] = colorize[2];\n            lastColorize[3] = colorize[3];\n        }\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aNormal) {\n            this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aUV) {\n            this._aUV.bindArrayBuffer(geometryState.uvBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aColor) {\n            this._aColor.bindArrayBuffer(geometryState.colorsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aFlags) {\n            this._aFlags.bindArrayBuffer(geometryState.flagsBuf);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    // Draw (indices bound in prev step)\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n        frameCtx.drawArrays++;\n    }\n};\n\nDrawRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const material = mesh._material;\n    const lightsState = scene._lightsState;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const materialState = mesh._material._state;\n\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uUVDecodeMatrix = program.getLocation(\"uvDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    this._uShadowViewMatrix = [];\n    this._uShadowProjMatrix = [];\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n\n        if (light.castsShadow) {\n            this._uShadowViewMatrix[i] = program.getLocation(\"shadowViewMatrix\" + i);\n            this._uShadowProjMatrix[i] = program.getLocation(\"shadowProjMatrix\" + i);\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0) {\n        this._uLightMap = \"lightMap\";\n    }\n\n    if (lightsState.reflectionMaps.length > 0) {\n        this._uReflectionMap = \"reflectionMap\";\n    }\n\n    this._uSectionPlanes = [];\n    const sectionPlanes = sectionPlanesState.sectionPlanes;\n    for (var i = 0, len = sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n\n    this._uPointSize = program.getLocation(\"pointSize\");\n\n    switch (materialState.type) {\n        case \"LambertMaterial\":\n            this._uMaterialColor = program.getLocation(\"materialColor\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            break;\n\n        case \"PhongMaterial\":\n            this._uMaterialAmbient = program.getLocation(\"materialAmbient\");\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            this._uMaterialShininess = program.getLocation(\"materialShininess\");\n            if (material._ambientMap) {\n                this._uMaterialAmbientMap = \"ambientMap\";\n                this._uMaterialAmbientMapMatrix = program.getLocation(\"ambientMapMatrix\");\n            }\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._reflectivityMap) {\n                this._uReflectivityMap = \"reflectivityMap\";\n                this._uReflectivityMapMatrix = program.getLocation(\"reflectivityMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._diffuseFresnel) {\n                this._uDiffuseFresnelEdgeBias = program.getLocation(\"diffuseFresnelEdgeBias\");\n                this._uDiffuseFresnelCenterBias = program.getLocation(\"diffuseFresnelCenterBias\");\n                this._uDiffuseFresnelEdgeColor = program.getLocation(\"diffuseFresnelEdgeColor\");\n                this._uDiffuseFresnelCenterColor = program.getLocation(\"diffuseFresnelCenterColor\");\n                this._uDiffuseFresnelPower = program.getLocation(\"diffuseFresnelPower\");\n            }\n            if (material._specularFresnel) {\n                this._uSpecularFresnelEdgeBias = program.getLocation(\"specularFresnelEdgeBias\");\n                this._uSpecularFresnelCenterBias = program.getLocation(\"specularFresnelCenterBias\");\n                this._uSpecularFresnelEdgeColor = program.getLocation(\"specularFresnelEdgeColor\");\n                this._uSpecularFresnelCenterColor = program.getLocation(\"specularFresnelCenterColor\");\n                this._uSpecularFresnelPower = program.getLocation(\"specularFresnelPower\");\n            }\n            if (material._alphaFresnel) {\n                this._uAlphaFresnelEdgeBias = program.getLocation(\"alphaFresnelEdgeBias\");\n                this._uAlphaFresnelCenterBias = program.getLocation(\"alphaFresnelCenterBias\");\n                this._uAlphaFresnelEdgeColor = program.getLocation(\"alphaFresnelEdgeColor\");\n                this._uAlphaFresnelCenterColor = program.getLocation(\"alphaFresnelCenterColor\");\n                this._uAlphaFresnelPower = program.getLocation(\"alphaFresnelPower\");\n            }\n            if (material._reflectivityFresnel) {\n                this._uReflectivityFresnelEdgeBias = program.getLocation(\"reflectivityFresnelEdgeBias\");\n                this._uReflectivityFresnelCenterBias = program.getLocation(\"reflectivityFresnelCenterBias\");\n                this._uReflectivityFresnelEdgeColor = program.getLocation(\"reflectivityFresnelEdgeColor\");\n                this._uReflectivityFresnelCenterColor = program.getLocation(\"reflectivityFresnelCenterColor\");\n                this._uReflectivityFresnelPower = program.getLocation(\"reflectivityFresnelPower\");\n            }\n            if (material._emissiveFresnel) {\n                this._uEmissiveFresnelEdgeBias = program.getLocation(\"emissiveFresnelEdgeBias\");\n                this._uEmissiveFresnelCenterBias = program.getLocation(\"emissiveFresnelCenterBias\");\n                this._uEmissiveFresnelEdgeColor = program.getLocation(\"emissiveFresnelEdgeColor\");\n                this._uEmissiveFresnelCenterColor = program.getLocation(\"emissiveFresnelCenterColor\");\n                this._uEmissiveFresnelPower = program.getLocation(\"emissiveFresnelPower\");\n            }\n            break;\n\n        case \"MetallicMaterial\":\n            this._uBaseColor = program.getLocation(\"materialBaseColor\");\n            this._uMaterialMetallic = program.getLocation(\"materialMetallic\");\n            this._uMaterialRoughness = program.getLocation(\"materialRoughness\");\n            this._uMaterialSpecularF0 = program.getLocation(\"materialSpecularF0\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._baseColorMap) {\n                this._uBaseColorMap = \"baseColorMap\";\n                this._uBaseColorMapMatrix = program.getLocation(\"baseColorMapMatrix\");\n            }\n            if (material._metallicMap) {\n                this._uMetallicMap = \"metallicMap\";\n                this._uMetallicMapMatrix = program.getLocation(\"metallicMapMatrix\");\n            }\n            if (material._roughnessMap) {\n                this._uRoughnessMap = \"roughnessMap\";\n                this._uRoughnessMapMatrix = program.getLocation(\"roughnessMapMatrix\");\n            }\n            if (material._metallicRoughnessMap) {\n                this._uMetallicRoughnessMap = \"metallicRoughnessMap\";\n                this._uMetallicRoughnessMapMatrix = program.getLocation(\"metallicRoughnessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n\n        case \"SpecularMaterial\":\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialGlossiness = program.getLocation(\"materialGlossiness\");\n            this._uMaterialReflectivity = program.getLocation(\"reflectivityFresnel\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._glossinessMap) {\n                this._uGlossinessMap = \"glossinessMap\";\n                this._uGlossinessMapMatrix = program.getLocation(\"glossinessMapMatrix\");\n            }\n            if (material._specularGlossinessMap) {\n                this._uSpecularGlossinessMap = \"materialSpecularGlossinessMap\";\n                this._uSpecularGlossinessMapMatrix = program.getLocation(\"materialSpecularGlossinessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n    }\n\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aUV = program.getAttribute(\"uv\");\n    this._aColor = program.getAttribute(\"color\");\n    this._aFlags = program.getAttribute(\"flags\");\n\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uColorize = program.getLocation(\"colorize\");\n    this._uOffset = program.getLocation(\"offset\");\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize = new Float32Array(4);\n\n    this._baseTextureUnit = 0;\n\n};\n\nDrawRenderer.prototype._bindProgram = function (frameCtx) {\n\n    const maxTextureUnits = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_TEXTURE_UNITS;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const project = scene.camera.project;\n    let light;\n\n    const program = this._program;\n\n    program.bind();\n\n    frameCtx.useProgram++;\n    frameCtx.textureUnit = 0;\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize[0] = -1;\n    this._lastColorize[1] = -1;\n    this._lastColorize[2] = -1;\n    this._lastColorize[3] = -1;\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    for (var i = 0, len = lightsState.lights.length; i < len; i++) {\n\n        light = lightsState.lights[i];\n\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n\n        } else {\n\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n\n            if (light.castsShadow) {\n                if (this._uShadowViewMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowViewMatrix[i], false, light.getShadowViewMatrix());\n                }\n                if (this._uShadowProjMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowProjMatrix[i], false, light.getShadowProjMatrix());\n                }\n                const shadowRenderBuf = light.getShadowRenderBuf();\n                if (shadowRenderBuf) {\n                    program.bindTexture(\"shadowMap\" + i, shadowRenderBuf.getTexture(), frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                }\n            }\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0 && lightsState.lightMaps[0].texture && this._uLightMap) {\n        program.bindTexture(this._uLightMap, lightsState.lightMaps[0].texture, frameCtx.textureUnit);\n        frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n        frameCtx.bindTexture++;\n    }\n\n    if (lightsState.reflectionMaps.length > 0 && lightsState.reflectionMaps[0].texture && this._uReflectionMap) {\n        program.bindTexture(this._uReflectionMap, lightsState.reflectionMaps[0].texture, frameCtx.textureUnit);\n        frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n        frameCtx.bindTexture++;\n    }\n\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n\n    this._baseTextureUnit = frameCtx.textureUnit;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvZHJhdy9EcmF3UmVuZGVyZXIuanM/MGY1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRXVDO0FBQ2dCO0FBQ1I7QUFDVjtBQUNTO0FBQ047QUFDZTs7QUFFdkQsa0JBQWtCLGtEQUFJOztBQUV0QixnQkFBZ0IsaURBQUcsR0FBRzs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFFQUFnQjtBQUM3QztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBSztBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBSztBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsd0RBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxzQ0FBc0M7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5RUFBYztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3Qix5REFBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSw0QkFBNEIsd0RBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvREFBb0QsU0FBUzs7QUFFN0Q7O0FBRUE7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tZXNoL2RyYXcvRHJhd1JlbmRlcmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIHhlb2xhYnMgLyBodHRwczovL2dpdGh1Yi5jb20veGVvbGFic1xuICovXG5cbmltcG9ydCB7TWFwfSBmcm9tIFwiLi4vLi4vdXRpbHMvTWFwLmpzXCI7XG5pbXBvcnQge0RyYXdTaGFkZXJTb3VyY2V9IGZyb20gXCIuL0RyYXdTaGFkZXJTb3VyY2UuanNcIjtcbmltcG9ydCB7UHJvZ3JhbX0gZnJvbSBcIi4uLy4uL3dlYmdsL1Byb2dyYW0uanNcIjtcbmltcG9ydCB7c3RhdHN9IGZyb20gJy4uLy4uL3N0YXRzLmpzJztcbmltcG9ydCB7V0VCR0xfSU5GT30gZnJvbSAnLi4vLi4vd2ViZ2xJbmZvLmpzJztcbmltcG9ydCB7bWF0aH0gZnJvbSBcIi4uLy4uL21hdGgvbWF0aC5qc1wiO1xuaW1wb3J0IHtnZXRQbGFuZVJUQ1Bvc30gZnJvbSBcIi4uLy4uL21hdGgvcnRjQ29vcmRzLmpzXCI7XG5cbmNvbnN0IHRlbXBWZWMzYSA9IG1hdGgudmVjMygpO1xuXG5jb25zdCBpZHMgPSBuZXcgTWFwKHt9KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBEcmF3UmVuZGVyZXIgPSBmdW5jdGlvbiAoaGFzaCwgbWVzaCkge1xuICAgIHRoaXMuaWQgPSBpZHMuYWRkSXRlbSh7fSk7XG4gICAgdGhpcy5faGFzaCA9IGhhc2g7XG4gICAgdGhpcy5fc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIHRoaXMuX3VzZUNvdW50ID0gMDtcbiAgICB0aGlzLl9zaGFkZXJTb3VyY2UgPSBuZXcgRHJhd1NoYWRlclNvdXJjZShtZXNoKTtcbiAgICB0aGlzLl9hbGxvY2F0ZShtZXNoKTtcbn07XG5cbmNvbnN0IGRyYXdSZW5kZXJlcnMgPSB7fTtcblxuRHJhd1JlbmRlcmVyLmdldCA9IGZ1bmN0aW9uIChtZXNoKSB7XG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IGhhc2ggPSBbXG4gICAgICAgIHNjZW5lLmNhbnZhcy5jYW52YXMuaWQsXG4gICAgICAgIChzY2VuZS5nYW1tYUlucHV0ID8gXCJnaTtcIiA6IFwiO1wiKSArIChzY2VuZS5nYW1tYU91dHB1dCA/IFwiZ29cIiA6IFwiXCIpLFxuICAgICAgICBzY2VuZS5fbGlnaHRzU3RhdGUuZ2V0SGFzaCgpLFxuICAgICAgICBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlLmdldEhhc2goKSxcbiAgICAgICAgbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmhhc2gsXG4gICAgICAgIG1lc2guX21hdGVyaWFsLl9zdGF0ZS5oYXNoLFxuICAgICAgICBtZXNoLl9zdGF0ZS5kcmF3SGFzaFxuICAgIF0uam9pbihcIjtcIik7XG4gICAgbGV0IHJlbmRlcmVyID0gZHJhd1JlbmRlcmVyc1toYXNoXTtcbiAgICBpZiAoIXJlbmRlcmVyKSB7XG4gICAgICAgIHJlbmRlcmVyID0gbmV3IERyYXdSZW5kZXJlcihoYXNoLCBtZXNoKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyLmVycm9ycykge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVuZGVyZXIuZXJyb3JzLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZHJhd1JlbmRlcmVyc1toYXNoXSA9IHJlbmRlcmVyO1xuICAgICAgICBzdGF0cy5tZW1vcnkucHJvZ3JhbXMrKztcbiAgICB9XG4gICAgcmVuZGVyZXIuX3VzZUNvdW50Kys7XG4gICAgcmV0dXJuIHJlbmRlcmVyO1xufTtcblxuRHJhd1JlbmRlcmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKC0tdGhpcy5fdXNlQ291bnQgPT09IDApIHtcbiAgICAgICAgaWRzLnJlbW92ZUl0ZW0odGhpcy5pZCk7XG4gICAgICAgIGlmICh0aGlzLl9wcm9ncmFtKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZHJhd1JlbmRlcmVyc1t0aGlzLl9oYXNoXTtcbiAgICAgICAgc3RhdHMubWVtb3J5LnByb2dyYW1zLS07XG4gICAgfVxufTtcblxuRHJhd1JlbmRlcmVyLnByb3RvdHlwZS53ZWJnbENvbnRleHRSZXN0b3JlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9ncmFtID0gbnVsbDtcbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuZHJhd01lc2ggPSBmdW5jdGlvbiAoZnJhbWVDdHgsIG1lc2gpIHtcblxuICAgIGlmICghdGhpcy5fcHJvZ3JhbSkge1xuICAgICAgICB0aGlzLl9hbGxvY2F0ZShtZXNoKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhUZXh0dXJlVW5pdHMgPSBXRUJHTF9JTkZPLk1BWF9URVhUVVJFX1VOSVRTO1xuICAgIGNvbnN0IHNjZW5lID0gbWVzaC5zY2VuZTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG1lc2guX21hdGVyaWFsO1xuICAgIGNvbnN0IGdsID0gc2NlbmUuY2FudmFzLmdsO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLl9wcm9ncmFtO1xuICAgIGNvbnN0IG1lc2hTdGF0ZSA9IG1lc2guX3N0YXRlO1xuICAgIGNvbnN0IG1hdGVyaWFsU3RhdGUgPSBtZXNoLl9tYXRlcmlhbC5fc3RhdGU7XG4gICAgY29uc3QgZ2VvbWV0cnlTdGF0ZSA9IG1lc2guX2dlb21ldHJ5Ll9zdGF0ZTtcbiAgICBjb25zdCBjYW1lcmEgPSBzY2VuZS5jYW1lcmE7XG4gICAgY29uc3QgcnRjQ2VudGVyID0gbWVzaC5ydGNDZW50ZXI7XG5cbiAgICBpZiAoZnJhbWVDdHgubGFzdFByb2dyYW1JZCAhPT0gdGhpcy5fcHJvZ3JhbS5pZCkge1xuICAgICAgICBmcmFtZUN0eC5sYXN0UHJvZ3JhbUlkID0gdGhpcy5fcHJvZ3JhbS5pZDtcbiAgICAgICAgdGhpcy5fYmluZFByb2dyYW0oZnJhbWVDdHgpO1xuICAgIH1cblxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVZpZXdNYXRyaXgsIGZhbHNlLCBydGNDZW50ZXIgPyBmcmFtZUN0eC5nZXRSVENWaWV3TWF0cml4KG1lc2hTdGF0ZS5ydGNDZW50ZXJIYXNoLCBydGNDZW50ZXIpIDogY2FtZXJhLnZpZXdNYXRyaXgpO1xuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVZpZXdOb3JtYWxNYXRyaXgsIGZhbHNlLCBjYW1lcmEudmlld05vcm1hbE1hdHJpeCk7XG5cbiAgICBpZiAobWVzaFN0YXRlLmNsaXBwYWJsZSkge1xuICAgICAgICBjb25zdCBudW1TZWN0aW9uUGxhbmVzID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDtcbiAgICAgICAgaWYgKG51bVNlY3Rpb25QbGFuZXMgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uUGxhbmVzID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyRmxhZ3MgPSBtZXNoLnJlbmRlckZsYWdzO1xuICAgICAgICAgICAgZm9yIChsZXQgc2VjdGlvblBsYW5lSW5kZXggPSAwOyBzZWN0aW9uUGxhbmVJbmRleCA8IG51bVNlY3Rpb25QbGFuZXM7IHNlY3Rpb25QbGFuZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uUGxhbmVVbmlmb3JtcyA9IHRoaXMuX3VTZWN0aW9uUGxhbmVzW3NlY3Rpb25QbGFuZUluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmUgPSByZW5kZXJGbGFncy5zZWN0aW9uUGxhbmVzQWN0aXZlUGVyTGF5ZXJbc2VjdGlvblBsYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaShzZWN0aW9uUGxhbmVVbmlmb3Jtcy5hY3RpdmUsIGFjdGl2ZSA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25QbGFuZSA9IHNlY3Rpb25QbGFuZXNbc2VjdGlvblBsYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHNlY3Rpb25QbGFuZVVuaWZvcm1zLnBvcywgcnRjQ2VudGVyID8gZ2V0UGxhbmVSVENQb3Moc2VjdGlvblBsYW5lLmRpc3QsIHNlY3Rpb25QbGFuZS5kaXIsIHJ0Y0NlbnRlciwgdGVtcFZlYzNhKSA6IHNlY3Rpb25QbGFuZS5wb3MpO1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHNlY3Rpb25QbGFuZVVuaWZvcm1zLmRpciwgc2VjdGlvblBsYW5lLmRpcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuaWQgIT09IHRoaXMuX2xhc3RNYXRlcmlhbElkKSB7XG5cbiAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSB0aGlzLl9iYXNlVGV4dHVyZVVuaXQ7XG5cbiAgICAgICAgY29uc3QgYmFja2ZhY2VzID0gbWF0ZXJpYWxTdGF0ZS5iYWNrZmFjZXM7XG4gICAgICAgIGlmIChmcmFtZUN0eC5iYWNrZmFjZXMgIT09IGJhY2tmYWNlcykge1xuICAgICAgICAgICAgaWYgKGJhY2tmYWNlcykge1xuICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZUN0eC5iYWNrZmFjZXMgPSBiYWNrZmFjZXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9udGZhY2UgPSBtYXRlcmlhbFN0YXRlLmZyb250ZmFjZTtcbiAgICAgICAgaWYgKGZyYW1lQ3R4LmZyb250ZmFjZSAhPT0gZnJvbnRmYWNlKSB7XG4gICAgICAgICAgICBpZiAoZnJvbnRmYWNlKSB7XG4gICAgICAgICAgICAgICAgZ2wuZnJvbnRGYWNlKGdsLkNDVyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmZyb250RmFjZShnbC5DVyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZUN0eC5mcm9udGZhY2UgPSBmcm9udGZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhbWVDdHgubGluZVdpZHRoICE9PSBtYXRlcmlhbFN0YXRlLmxpbmVXaWR0aCkge1xuICAgICAgICAgICAgZ2wubGluZVdpZHRoKG1hdGVyaWFsU3RhdGUubGluZVdpZHRoKTtcbiAgICAgICAgICAgIGZyYW1lQ3R4LmxpbmVXaWR0aCA9IG1hdGVyaWFsU3RhdGUubGluZVdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3VQb2ludFNpemUpIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UG9pbnRTaXplLCBtYXRlcmlhbFN0YXRlLnBvaW50U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG1hdGVyaWFsU3RhdGUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkxhbWJlcnRNYXRlcmlhbFwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxBbWJpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsQW1iaWVudCwgbWF0ZXJpYWxTdGF0ZS5hbWJpZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TWF0ZXJpYWxDb2xvciwgbWF0ZXJpYWxTdGF0ZS5jb2xvclswXSwgbWF0ZXJpYWxTdGF0ZS5jb2xvclsxXSwgbWF0ZXJpYWxTdGF0ZS5jb2xvclsyXSwgbWF0ZXJpYWxTdGF0ZS5hbHBoYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlLCBtYXRlcmlhbFN0YXRlLmVtaXNzaXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJQaG9uZ01hdGVyaWFsXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbFNoaW5pbmVzcykge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdU1hdGVyaWFsU2hpbmluZXNzLCBtYXRlcmlhbFN0YXRlLnNoaW5pbmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxBbWJpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsQW1iaWVudCwgbWF0ZXJpYWxTdGF0ZS5hbWJpZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbERpZmZ1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxEaWZmdXNlLCBtYXRlcmlhbFN0YXRlLmRpZmZ1c2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxTcGVjdWxhciwgbWF0ZXJpYWxTdGF0ZS5zcGVjdWxhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlLCBtYXRlcmlhbFN0YXRlLmVtaXNzaXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTW9kZUN1dG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgIDEuMCAqIG1hdGVyaWFsU3RhdGUuYWxwaGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFN0YXRlLmFscGhhTW9kZSA9PT0gMSA/IDEuMCA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsU3RhdGUuYWxwaGFDdXRvZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9hbWJpZW50TWFwICYmIG1hdGVyaWFsLl9hbWJpZW50TWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VNYXRlcmlhbEFtYmllbnRNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwLCBtYXRlcmlhbC5fYW1iaWVudE1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsQW1iaWVudE1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2FtYmllbnRNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlTWFwICYmIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VEaWZmdXNlTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdURpZmZ1c2VNYXAsIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCwgZmFsc2UsIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJNYXAgJiYgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VTcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VTcGVjdWxhck1hcCwgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNwZWN1bGFyTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVNYXAgJiYgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VFbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VFbWlzc2l2ZU1hcCwgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXAgJiYgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VBbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VBbHBoYU1hcCwgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUFscGhhTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcmVmbGVjdGl2aXR5TWFwICYmIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdVJlZmxlY3Rpdml0eU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VSZWZsZWN0aXZpdHlNYXAsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VSZWZsZWN0aXZpdHlNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVJlZmxlY3Rpdml0eU1hcE1hdHJpeCwgZmFsc2UsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9ub3JtYWxNYXAgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Tm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdU5vcm1hbE1hcCwgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU5vcm1hbE1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91Tm9ybWFsTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCAmJiBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VPY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91T2NjbHVzaW9uTWFwLCBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXgsIGZhbHNlLCBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZGlmZnVzZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdURpZmZ1c2VGcmVzbmVsRWRnZUJpYXMsIG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbC5lZGdlQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJCaWFzLCBtYXRlcmlhbC5fZGlmZnVzZUZyZXNuZWwuY2VudGVyQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91RGlmZnVzZUZyZXNuZWxFZGdlQ29sb3IsIG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbC5lZGdlQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJDb2xvciwgbWF0ZXJpYWwuX2RpZmZ1c2VGcmVzbmVsLmNlbnRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdURpZmZ1c2VGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91RGlmZnVzZUZyZXNuZWxQb3dlciwgbWF0ZXJpYWwuX2RpZmZ1c2VGcmVzbmVsLnBvd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyRnJlc25lbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzLCBtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsLmVkZ2VCaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91U3BlY3VsYXJGcmVzbmVsQ2VudGVyQmlhcywgbWF0ZXJpYWwuX3NwZWN1bGFyRnJlc25lbC5jZW50ZXJCaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91U3BlY3VsYXJGcmVzbmVsRWRnZUNvbG9yLCBtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsLmVkZ2VDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VTcGVjdWxhckZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91U3BlY3VsYXJGcmVzbmVsQ2VudGVyQ29sb3IsIG1hdGVyaWFsLl9zcGVjdWxhckZyZXNuZWwuY2VudGVyQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91U3BlY3VsYXJGcmVzbmVsUG93ZXIsIG1hdGVyaWFsLl9zcGVjdWxhckZyZXNuZWwucG93ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUJpYXMsIG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwuZWRnZUJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsQ2VudGVyQmlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJCaWFzLCBtYXRlcmlhbC5fYWxwaGFGcmVzbmVsLmNlbnRlckJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VBbHBoYUZyZXNuZWxFZGdlQ29sb3IsIG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwuZWRnZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhRnJlc25lbENlbnRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJDb2xvciwgbWF0ZXJpYWwuX2FscGhhRnJlc25lbC5jZW50ZXJDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlciwgbWF0ZXJpYWwuX2FscGhhRnJlc25lbC5wb3dlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdVJlZmxlY3Rpdml0eUZyZXNuZWxFZGdlQmlhcywgbWF0ZXJpYWwuX3JlZmxlY3Rpdml0eUZyZXNuZWwuZWRnZUJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckJpYXMsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlGcmVzbmVsLmNlbnRlckJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvciwgbWF0ZXJpYWwuX3JlZmxlY3Rpdml0eUZyZXNuZWwuZWRnZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVJlZmxlY3Rpdml0eUZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckNvbG9yLCBtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbC5jZW50ZXJDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbFBvd2VyLCBtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbC5wb3dlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQmlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQmlhcywgbWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbC5lZGdlQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxDZW50ZXJCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckJpYXMsIG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwuY2VudGVyQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUVtaXNzaXZlRnJlc25lbEVkZ2VDb2xvciwgbWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbC5lZGdlQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckNvbG9yLCBtYXRlcmlhbC5fZW1pc3NpdmVGcmVzbmVsLmNlbnRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyLCBtYXRlcmlhbC5fZW1pc3NpdmVGcmVzbmVsLnBvd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIk1ldGFsbGljTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUJhc2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VCYXNlQ29sb3IsIG1hdGVyaWFsU3RhdGUuYmFzZUNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbE1ldGFsbGljKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91TWF0ZXJpYWxNZXRhbGxpYywgbWF0ZXJpYWxTdGF0ZS5tZXRhbGxpYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxSb3VnaG5lc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbFJvdWdobmVzcywgbWF0ZXJpYWxTdGF0ZS5yb3VnaG5lc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCwgbWF0ZXJpYWxTdGF0ZS5zcGVjdWxhckYwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUsIG1hdGVyaWFsU3RhdGUuZW1pc3NpdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhTW9kZUN1dG9mZikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGYoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgMS4wICogbWF0ZXJpYWxTdGF0ZS5hbHBoYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsU3RhdGUuYWxwaGFNb2RlID09PSAxID8gMS4wIDogMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxTdGF0ZS5hbHBoYUN1dG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VDb2xvck1hcCA9IG1hdGVyaWFsLl9iYXNlQ29sb3JNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VDb2xvck1hcCAmJiBiYXNlQ29sb3JNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUJhc2VDb2xvck1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VCYXNlQ29sb3JNYXAsIGJhc2VDb2xvck1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUJhc2VDb2xvck1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91QmFzZUNvbG9yTWFwTWF0cml4LCBmYWxzZSwgYmFzZUNvbG9yTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFsbGljTWFwID0gbWF0ZXJpYWwuX21ldGFsbGljTWFwO1xuICAgICAgICAgICAgICAgIGlmIChtZXRhbGxpY01hcCAmJiBtZXRhbGxpY01hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91TWV0YWxsaWNNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TWV0YWxsaWNNYXAsIG1ldGFsbGljTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWV0YWxsaWNNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU1ldGFsbGljTWFwTWF0cml4LCBmYWxzZSwgbWV0YWxsaWNNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91Z2huZXNzTWFwID0gbWF0ZXJpYWwuX3JvdWdobmVzc01hcDtcbiAgICAgICAgICAgICAgICBpZiAocm91Z2huZXNzTWFwICYmIHJvdWdobmVzc01hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Um91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdVJvdWdobmVzc01hcCwgcm91Z2huZXNzTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91Um91Z2huZXNzTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VSb3VnaG5lc3NNYXBNYXRyaXgsIGZhbHNlLCByb3VnaG5lc3NNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWxsaWNSb3VnaG5lc3NNYXAgPSBtYXRlcmlhbC5fbWV0YWxsaWNSb3VnaG5lc3NNYXA7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGFsbGljUm91Z2huZXNzTWFwICYmIG1ldGFsbGljUm91Z2huZXNzTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcCwgbWV0YWxsaWNSb3VnaG5lc3NNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91TWV0YWxsaWNSb3VnaG5lc3NNYXBNYXRyaXgsIGZhbHNlLCBtZXRhbGxpY1JvdWdobmVzc01hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZW1pc3NpdmVNYXAgPSBtYXRlcmlhbC5fZW1pc3NpdmVNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGVtaXNzaXZlTWFwICYmIGVtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VFbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VFbWlzc2l2ZU1hcCwgZW1pc3NpdmVNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXgsIGZhbHNlLCBlbWlzc2l2ZU1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb2NjbHVzaW9uTWFwID0gbWF0ZXJpYWwuX29jY2x1c2lvbk1hcDtcbiAgICAgICAgICAgICAgICBpZiAob2NjbHVzaW9uTWFwICYmIG1hdGVyaWFsLl9vY2NsdXNpb25NYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdU9jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VPY2NsdXNpb25NYXAsIG9jY2x1c2lvbk1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU9jY2x1c2lvbk1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4LCBmYWxzZSwgb2NjbHVzaW9uTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhbHBoYU1hcCA9IG1hdGVyaWFsLl9hbHBoYU1hcDtcbiAgICAgICAgICAgICAgICBpZiAoYWxwaGFNYXAgJiYgYWxwaGFNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUFscGhhTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdUFscGhhTWFwLCBhbHBoYU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VBbHBoYU1hcE1hdHJpeCwgZmFsc2UsIGFscGhhTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxNYXAgPSBtYXRlcmlhbC5fbm9ybWFsTWFwO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxNYXAgJiYgbm9ybWFsTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VOb3JtYWxNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91Tm9ybWFsTWFwLCBub3JtYWxNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VOb3JtYWxNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU5vcm1hbE1hcE1hdHJpeCwgZmFsc2UsIG5vcm1hbE1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIlNwZWN1bGFyTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsRGlmZnVzZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbERpZmZ1c2UsIG1hdGVyaWFsU3RhdGUuZGlmZnVzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxTcGVjdWxhcikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbFNwZWN1bGFyLCBtYXRlcmlhbFN0YXRlLnNwZWN1bGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbEdsb3NzaW5lc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbEdsb3NzaW5lc3MsIG1hdGVyaWFsU3RhdGUuZ2xvc3NpbmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxSZWZsZWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbFJlZmxlY3Rpdml0eSwgbWF0ZXJpYWxTdGF0ZS5yZWZsZWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSwgbWF0ZXJpYWxTdGF0ZS5lbWlzc2l2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAxLjAgKiBtYXRlcmlhbFN0YXRlLmFscGhhLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxTdGF0ZS5hbHBoYU1vZGUgPT09IDEgPyAxLjAgOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFN0YXRlLmFscGhhQ3V0b2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgMC4wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZnVzZU1hcCA9IG1hdGVyaWFsLl9kaWZmdXNlTWFwO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmdXNlTWFwICYmIGRpZmZ1c2VNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdURpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91RGlmZnVzZU1hcCwgZGlmZnVzZU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdURpZmZ1c2VNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdURpZmZ1c2VNYXBNYXRyaXgsIGZhbHNlLCBkaWZmdXNlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWN1bGFyTWFwID0gbWF0ZXJpYWwuX3NwZWN1bGFyTWFwO1xuICAgICAgICAgICAgICAgIGlmIChzcGVjdWxhck1hcCAmJiBzcGVjdWxhck1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91U3BlY3VsYXJNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91U3BlY3VsYXJNYXAsIHNwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNwZWN1bGFyTWFwTWF0cml4LCBmYWxzZSwgc3BlY3VsYXJNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xvc3NpbmVzc01hcCA9IG1hdGVyaWFsLl9nbG9zc2luZXNzTWFwO1xuICAgICAgICAgICAgICAgIGlmIChnbG9zc2luZXNzTWFwICYmIGdsb3NzaW5lc3NNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUdsb3NzaW5lc3NNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91R2xvc3NpbmVzc01hcCwgZ2xvc3NpbmVzc01hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXgsIGZhbHNlLCBnbG9zc2luZXNzTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWN1bGFyR2xvc3NpbmVzc01hcCA9IG1hdGVyaWFsLl9zcGVjdWxhckdsb3NzaW5lc3NNYXA7XG4gICAgICAgICAgICAgICAgaWYgKHNwZWN1bGFyR2xvc3NpbmVzc01hcCAmJiBzcGVjdWxhckdsb3NzaW5lc3NNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VTcGVjdWxhckdsb3NzaW5lc3NNYXAsIHNwZWN1bGFyR2xvc3NpbmVzc01hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91U3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4LCBmYWxzZSwgc3BlY3VsYXJHbG9zc2luZXNzTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBlbWlzc2l2ZU1hcCA9IG1hdGVyaWFsLl9lbWlzc2l2ZU1hcDtcbiAgICAgICAgICAgICAgICBpZiAoZW1pc3NpdmVNYXAgJiYgZW1pc3NpdmVNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUVtaXNzaXZlTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdUVtaXNzaXZlTWFwLCBlbWlzc2l2ZU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCwgZmFsc2UsIGVtaXNzaXZlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvY2NsdXNpb25NYXAgPSBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwO1xuICAgICAgICAgICAgICAgIGlmIChvY2NsdXNpb25NYXAgJiYgb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VPY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91T2NjbHVzaW9uTWFwLCBvY2NsdXNpb25NYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU9jY2x1c2lvbk1hcE1hdHJpeCwgZmFsc2UsIG9jY2x1c2lvbk1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYWxwaGFNYXAgPSBtYXRlcmlhbC5fYWxwaGFNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhTWFwICYmIGFscGhhTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VBbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VBbHBoYU1hcCwgYWxwaGFNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91QWxwaGFNYXBNYXRyaXgsIGZhbHNlLCBhbHBoYU1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsTWFwID0gbWF0ZXJpYWwuX25vcm1hbE1hcDtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsTWFwICYmIG5vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Tm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdU5vcm1hbE1hcCwgbm9ybWFsTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91Tm9ybWFsTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VOb3JtYWxNYXBNYXRyaXgsIGZhbHNlLCBub3JtYWxNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdE1hdGVyaWFsSWQgPSBtYXRlcmlhbFN0YXRlLmlkO1xuICAgIH1cblxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU1vZGVsTWF0cml4LCBnbC5GQUxTRSwgbWVzaC53b3JsZE1hdHJpeCk7XG4gICAgaWYgKHRoaXMuX3VNb2RlbE5vcm1hbE1hdHJpeCkge1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VNb2RlbE5vcm1hbE1hdHJpeCwgZ2wuRkFMU0UsIG1lc2gud29ybGROb3JtYWxNYXRyaXgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91Q2xpcHBhYmxlKSB7XG4gICAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl91Q2xpcHBhYmxlLCBtZXNoU3RhdGUuY2xpcHBhYmxlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdUNvbG9yaXplKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yaXplID0gbWVzaFN0YXRlLmNvbG9yaXplO1xuICAgICAgICBjb25zdCBsYXN0Q29sb3JpemUgPSB0aGlzLl9sYXN0Q29sb3JpemU7XG4gICAgICAgIGlmIChsYXN0Q29sb3JpemVbMF0gIT09IGNvbG9yaXplWzBdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMV0gIT09IGNvbG9yaXplWzFdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMl0gIT09IGNvbG9yaXplWzJdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbM10gIT09IGNvbG9yaXplWzNdKSB7XG4gICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHRoaXMuX3VDb2xvcml6ZSwgY29sb3JpemUpO1xuICAgICAgICAgICAgbGFzdENvbG9yaXplWzBdID0gY29sb3JpemVbMF07XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMV0gPSBjb2xvcml6ZVsxXTtcbiAgICAgICAgICAgIGxhc3RDb2xvcml6ZVsyXSA9IGNvbG9yaXplWzJdO1xuICAgICAgICAgICAgbGFzdENvbG9yaXplWzNdID0gY29sb3JpemVbM107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VPZmZzZXQsIG1lc2hTdGF0ZS5vZmZzZXQpO1xuXG4gICAgLy8gQmluZCBWQk9zXG5cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5pZCAhPT0gdGhpcy5fbGFzdEdlb21ldHJ5SWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VQb3NpdGlvbnNEZWNvZGVNYXRyaXgpIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVBvc2l0aW9uc0RlY29kZU1hdHJpeCwgZmFsc2UsIGdlb21ldHJ5U3RhdGUucG9zaXRpb25zRGVjb2RlTWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdVVWRGVjb2RlTWF0cml4KSB7XG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMuX3VVVkRlY29kZU1hdHJpeCwgZmFsc2UsIGdlb21ldHJ5U3RhdGUudXZEZWNvZGVNYXRyaXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FQb3NpdGlvbi5iaW5kQXJyYXlCdWZmZXIoZ2VvbWV0cnlTdGF0ZS5wb3NpdGlvbnNCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FOb3JtYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FOb3JtYWwuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUubm9ybWFsc0J1Zik7XG4gICAgICAgICAgICBmcmFtZUN0eC5iaW5kQXJyYXkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYVVWKSB7XG4gICAgICAgICAgICB0aGlzLl9hVVYuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUudXZCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FDb2xvcikge1xuICAgICAgICAgICAgdGhpcy5fYUNvbG9yLmJpbmRBcnJheUJ1ZmZlcihnZW9tZXRyeVN0YXRlLmNvbG9yc0J1Zik7XG4gICAgICAgICAgICBmcmFtZUN0eC5iaW5kQXJyYXkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYUZsYWdzKSB7XG4gICAgICAgICAgICB0aGlzLl9hRmxhZ3MuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUuZmxhZ3NCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlb21ldHJ5U3RhdGUuaW5kaWNlc0J1Zikge1xuICAgICAgICAgICAgZ2VvbWV0cnlTdGF0ZS5pbmRpY2VzQnVmLmJpbmQoKTtcbiAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRBcnJheSsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RHZW9tZXRyeUlkID0gZ2VvbWV0cnlTdGF0ZS5pZDtcbiAgICB9XG5cbiAgICAvLyBEcmF3IChpbmRpY2VzIGJvdW5kIGluIHByZXYgc3RlcClcblxuICAgIGlmIChnZW9tZXRyeVN0YXRlLmluZGljZXNCdWYpIHtcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdlb21ldHJ5U3RhdGUucHJpbWl0aXZlLCBnZW9tZXRyeVN0YXRlLmluZGljZXNCdWYubnVtSXRlbXMsIGdlb21ldHJ5U3RhdGUuaW5kaWNlc0J1Zi5pdGVtVHlwZSwgMCk7XG4gICAgICAgIGZyYW1lQ3R4LmRyYXdFbGVtZW50cysrO1xuICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnlTdGF0ZS5wb3NpdGlvbnMpIHtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIGdlb21ldHJ5U3RhdGUucG9zaXRpb25zLm51bUl0ZW1zKTtcbiAgICAgICAgZnJhbWVDdHguZHJhd0FycmF5cysrO1xuICAgIH1cbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuX2FsbG9jYXRlID0gZnVuY3Rpb24gKG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBtZXNoLl9tYXRlcmlhbDtcbiAgICBjb25zdCBsaWdodHNTdGF0ZSA9IHNjZW5lLl9saWdodHNTdGF0ZTtcbiAgICBjb25zdCBzZWN0aW9uUGxhbmVzU3RhdGUgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlO1xuICAgIGNvbnN0IG1hdGVyaWFsU3RhdGUgPSBtZXNoLl9tYXRlcmlhbC5fc3RhdGU7XG5cbiAgICB0aGlzLl9wcm9ncmFtID0gbmV3IFByb2dyYW0oZ2wsIHRoaXMuX3NoYWRlclNvdXJjZSk7XG4gICAgaWYgKHRoaXMuX3Byb2dyYW0uZXJyb3JzKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5fcHJvZ3JhbS5lcnJvcnM7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuX3Byb2dyYW07XG4gICAgdGhpcy5fdVBvc2l0aW9uc0RlY29kZU1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJwb3NpdGlvbnNEZWNvZGVNYXRyaXhcIik7XG4gICAgdGhpcy5fdVVWRGVjb2RlTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInV2RGVjb2RlTWF0cml4XCIpO1xuICAgIHRoaXMuX3VNb2RlbE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtb2RlbE1hdHJpeFwiKTtcbiAgICB0aGlzLl91TW9kZWxOb3JtYWxNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibW9kZWxOb3JtYWxNYXRyaXhcIik7XG4gICAgdGhpcy5fdVZpZXdNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwidmlld01hdHJpeFwiKTtcbiAgICB0aGlzLl91Vmlld05vcm1hbE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJ2aWV3Tm9ybWFsTWF0cml4XCIpO1xuICAgIHRoaXMuX3VQcm9qTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInByb2pNYXRyaXhcIik7XG4gICAgdGhpcy5fdUdhbW1hRmFjdG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImdhbW1hRmFjdG9yXCIpO1xuICAgIHRoaXMuX3VMaWdodEFtYmllbnQgPSBbXTtcbiAgICB0aGlzLl91TGlnaHRDb2xvciA9IFtdO1xuICAgIHRoaXMuX3VMaWdodERpciA9IFtdO1xuICAgIHRoaXMuX3VMaWdodFBvcyA9IFtdO1xuICAgIHRoaXMuX3VMaWdodEF0dGVudWF0aW9uID0gW107XG4gICAgdGhpcy5fdVNoYWRvd1ZpZXdNYXRyaXggPSBbXTtcbiAgICB0aGlzLl91U2hhZG93UHJvak1hdHJpeCA9IFtdO1xuXG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3VMb2dEZXB0aEJ1ZkZDID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxvZ0RlcHRoQnVmRkNcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbGlnaHRzID0gbGlnaHRzU3RhdGUubGlnaHRzO1xuICAgIGxldCBsaWdodDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGlnaHQgPSBsaWdodHNbaV07XG4gICAgICAgIHN3aXRjaCAobGlnaHQudHlwZSkge1xuXG4gICAgICAgICAgICBjYXNlIFwiYW1iaWVudFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodEFtYmllbnRbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRBbWJpZW50XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiZGlyXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0Q29sb3JbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRDb2xvclwiICsgaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0UG9zW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHREaXJbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHREaXJcIiArIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwicG9pbnRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHRDb2xvcltpXSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJsaWdodENvbG9yXCIgKyBpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHRQb3NbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRQb3NcIiArIGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodERpcltpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0QXR0ZW51YXRpb25baV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRBdHRlbnVhdGlvblwiICsgaSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzcG90XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0Q29sb3JbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRDb2xvclwiICsgaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0UG9zW2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxpZ2h0UG9zXCIgKyBpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHREaXJbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHREaXJcIiArIGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodEF0dGVudWF0aW9uW2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxpZ2h0QXR0ZW51YXRpb25cIiArIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpZ2h0LmNhc3RzU2hhZG93KSB7XG4gICAgICAgICAgICB0aGlzLl91U2hhZG93Vmlld01hdHJpeFtpXSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzaGFkb3dWaWV3TWF0cml4XCIgKyBpKTtcbiAgICAgICAgICAgIHRoaXMuX3VTaGFkb3dQcm9qTWF0cml4W2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNoYWRvd1Byb2pNYXRyaXhcIiArIGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0TWFwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3VMaWdodE1hcCA9IFwibGlnaHRNYXBcIjtcbiAgICB9XG5cbiAgICBpZiAobGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl91UmVmbGVjdGlvbk1hcCA9IFwicmVmbGVjdGlvbk1hcFwiO1xuICAgIH1cblxuICAgIHRoaXMuX3VTZWN0aW9uUGxhbmVzID0gW107XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lcyA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3VTZWN0aW9uUGxhbmVzLnB1c2goe1xuICAgICAgICAgICAgYWN0aXZlOiBwcm9ncmFtLmdldExvY2F0aW9uKFwic2VjdGlvblBsYW5lQWN0aXZlXCIgKyBpKSxcbiAgICAgICAgICAgIHBvczogcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNlY3Rpb25QbGFuZVBvc1wiICsgaSksXG4gICAgICAgICAgICBkaXI6IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzZWN0aW9uUGxhbmVEaXJcIiArIGkpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX3VQb2ludFNpemUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicG9pbnRTaXplXCIpO1xuXG4gICAgc3dpdGNoIChtYXRlcmlhbFN0YXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIkxhbWJlcnRNYXRlcmlhbFwiOlxuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxDb2xvclwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsRW1pc3NpdmVcIik7XG4gICAgICAgICAgICB0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIlBob25nTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbEFtYmllbnQgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbWJpZW50XCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRGlmZnVzZSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbERpZmZ1c2VcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxTcGVjdWxhciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbFNwZWN1bGFyXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxFbWlzc2l2ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbHBoYU1vZGVDdXRvZmZcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxTaGluaW5lc3MgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxTaGluaW5lc3NcIik7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2FtYmllbnRNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwID0gXCJhbWJpZW50TWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsQW1iaWVudE1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbWJpZW50TWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VNYXAgPSBcImRpZmZ1c2VNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJkaWZmdXNlTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9zcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhck1hcCA9IFwic3BlY3VsYXJNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwic3BlY3VsYXJNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2VtaXNzaXZlTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlTWFwID0gXCJlbWlzc2l2ZU1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJlbWlzc2l2ZU1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXAgPSBcImFscGhhTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5TWFwID0gXCJyZWZsZWN0aXZpdHlNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5TWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInJlZmxlY3Rpdml0eU1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fbm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU5vcm1hbE1hcCA9IFwibm9ybWFsTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU5vcm1hbE1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJub3JtYWxNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXAgPSBcIm9jY2x1c2lvbk1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwib2NjbHVzaW9uTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsRWRnZUJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsQ2VudGVyQmlhcyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJkaWZmdXNlRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsRWRnZUNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsRWRnZUNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsQ2VudGVyQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsUG93ZXIgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZGlmZnVzZUZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhckZyZXNuZWxDZW50ZXJCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhckZyZXNuZWxFZGdlQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhckZyZXNuZWxQb3dlciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhckZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbHBoYUZyZXNuZWxFZGdlQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbHBoYUZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsRWRnZUJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQmlhcyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQmlhc1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsRWRnZUNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsUG93ZXIgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbFBvd2VyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsRWRnZUJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsRWRnZUJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsQ2VudGVyQmlhc1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsRWRnZUNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlRnJlc25lbEVkZ2VDb2xvclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlRnJlc25lbFBvd2VyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1ldGFsbGljTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgIHRoaXMuX3VCYXNlQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxCYXNlQ29sb3JcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxNZXRhbGxpYyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbE1ldGFsbGljXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsUm91Z2huZXNzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsUm91Z2huZXNzXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbFNwZWN1bGFyRjBcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbEVtaXNzaXZlXCIpO1xuICAgICAgICAgICAgdGhpcy5fdUFscGhhTW9kZUN1dG9mZiA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbEFscGhhTW9kZUN1dG9mZlwiKTtcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYmFzZUNvbG9yTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUJhc2VDb2xvck1hcCA9IFwiYmFzZUNvbG9yTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUJhc2VDb2xvck1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJiYXNlQ29sb3JNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1ldGFsbGljTWFwID0gXCJtZXRhbGxpY01hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VNZXRhbGxpY01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtZXRhbGxpY01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVJvdWdobmVzc01hcCA9IFwicm91Z2huZXNzTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVJvdWdobmVzc01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyb3VnaG5lc3NNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljUm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1ldGFsbGljUm91Z2huZXNzTWFwID0gXCJtZXRhbGxpY1JvdWdobmVzc01hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVNYXAgPSBcImVtaXNzaXZlTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9vY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91T2NjbHVzaW9uTWFwID0gXCJvY2NsdXNpb25NYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm9jY2x1c2lvbk1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXAgPSBcImFscGhhTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9ub3JtYWxNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91Tm9ybWFsTWFwID0gXCJub3JtYWxNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91Tm9ybWFsTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm5vcm1hbE1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJTcGVjdWxhck1hdGVyaWFsXCI6XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxEaWZmdXNlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsRGlmZnVzZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbFNwZWN1bGFyID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsU3BlY3VsYXJcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxHbG9zc2luZXNzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsR2xvc3NpbmVzc1wiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbFJlZmxlY3Rpdml0eSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxFbWlzc2l2ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbHBoYU1vZGVDdXRvZmZcIik7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2RpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RGlmZnVzZU1hcCA9IFwiZGlmZnVzZU1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyTWFwID0gXCJzcGVjdWxhck1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhck1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhck1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZ2xvc3NpbmVzc01hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VHbG9zc2luZXNzTWFwID0gXCJnbG9zc2luZXNzTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZ2xvc3NpbmVzc01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJHbG9zc2luZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcCA9IFwibWF0ZXJpYWxTcGVjdWxhckdsb3NzaW5lc3NNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91U3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsU3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VFbWlzc2l2ZU1hcCA9IFwiZW1pc3NpdmVNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXAgPSBcIm9jY2x1c2lvbk1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwib2NjbHVzaW9uTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9hbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1hcCA9IFwiYWxwaGFNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiYWxwaGFNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX25vcm1hbE1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VOb3JtYWxNYXAgPSBcIm5vcm1hbE1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VOb3JtYWxNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibm9ybWFsTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fYVBvc2l0aW9uID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcbiAgICB0aGlzLl9hTm9ybWFsID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJub3JtYWxcIik7XG4gICAgdGhpcy5fYVVWID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJ1dlwiKTtcbiAgICB0aGlzLl9hQ29sb3IgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZShcImNvbG9yXCIpO1xuICAgIHRoaXMuX2FGbGFncyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlKFwiZmxhZ3NcIik7XG5cbiAgICB0aGlzLl91Q2xpcHBhYmxlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImNsaXBwYWJsZVwiKTtcbiAgICB0aGlzLl91Q29sb3JpemUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiY29sb3JpemVcIik7XG4gICAgdGhpcy5fdU9mZnNldCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJvZmZzZXRcIik7XG5cbiAgICB0aGlzLl9sYXN0TWF0ZXJpYWxJZCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdFZlcnRleEJ1ZnNJZCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdEdlb21ldHJ5SWQgPSBudWxsO1xuXG4gICAgdGhpcy5fbGFzdENvbG9yaXplID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcblxuICAgIHRoaXMuX2Jhc2VUZXh0dXJlVW5pdCA9IDA7XG5cbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuX2JpbmRQcm9ncmFtID0gZnVuY3Rpb24gKGZyYW1lQ3R4KSB7XG5cbiAgICBjb25zdCBtYXhUZXh0dXJlVW5pdHMgPSBXRUJHTF9JTkZPLk1BWF9URVhUVVJFX1VOSVRTO1xuICAgIGNvbnN0IHNjZW5lID0gdGhpcy5fc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3QgbGlnaHRzU3RhdGUgPSBzY2VuZS5fbGlnaHRzU3RhdGU7XG4gICAgY29uc3QgcHJvamVjdCA9IHNjZW5lLmNhbWVyYS5wcm9qZWN0O1xuICAgIGxldCBsaWdodDtcblxuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLl9wcm9ncmFtO1xuXG4gICAgcHJvZ3JhbS5iaW5kKCk7XG5cbiAgICBmcmFtZUN0eC51c2VQcm9ncmFtKys7XG4gICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAwO1xuXG4gICAgdGhpcy5fbGFzdE1hdGVyaWFsSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RWZXJ0ZXhCdWZzSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RHZW9tZXRyeUlkID0gbnVsbDtcblxuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVswXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVsxXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVsyXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVszXSA9IC0xO1xuXG4gICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91UHJvak1hdHJpeCwgZmFsc2UsIHByb2plY3QubWF0cml4KTtcblxuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBsb2dEZXB0aEJ1ZkZDID0gMi4wIC8gKE1hdGgubG9nKHByb2plY3QuZmFyICsgMS4wKSAvIE1hdGguTE4yKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VMb2dEZXB0aEJ1ZkZDLCBsb2dEZXB0aEJ1ZkZDKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgbGlnaHQgPSBsaWdodHNTdGF0ZS5saWdodHNbaV07XG5cbiAgICAgICAgaWYgKHRoaXMuX3VMaWdodEFtYmllbnRbaV0pIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TGlnaHRBbWJpZW50W2ldLCBsaWdodC5jb2xvclswXSwgbGlnaHQuY29sb3JbMV0sIGxpZ2h0LmNvbG9yWzJdLCBsaWdodC5pbnRlbnNpdHkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHRDb2xvcltpXSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TGlnaHRDb2xvcltpXSwgbGlnaHQuY29sb3JbMF0sIGxpZ2h0LmNvbG9yWzFdLCBsaWdodC5jb2xvclsyXSwgbGlnaHQuaW50ZW5zaXR5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3VMaWdodFBvc1tpXSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUxpZ2h0UG9zW2ldLCBsaWdodC5wb3MpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHRBdHRlbnVhdGlvbltpXSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUxpZ2h0QXR0ZW51YXRpb25baV0sIGxpZ2h0LmF0dGVudWF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHREaXJbaV0pIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VMaWdodERpcltpXSwgbGlnaHQuZGlyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxpZ2h0LmNhc3RzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VTaGFkb3dWaWV3TWF0cml4W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNoYWRvd1ZpZXdNYXRyaXhbaV0sIGZhbHNlLCBsaWdodC5nZXRTaGFkb3dWaWV3TWF0cml4KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNoYWRvd1Byb2pNYXRyaXhbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91U2hhZG93UHJvak1hdHJpeFtpXSwgZmFsc2UsIGxpZ2h0LmdldFNoYWRvd1Byb2pNYXRyaXgoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNoYWRvd1JlbmRlckJ1ZiA9IGxpZ2h0LmdldFNoYWRvd1JlbmRlckJ1ZigpO1xuICAgICAgICAgICAgICAgIGlmIChzaGFkb3dSZW5kZXJCdWYpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZShcInNoYWRvd01hcFwiICsgaSwgc2hhZG93UmVuZGVyQnVmLmdldFRleHR1cmUoKSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCAmJiBsaWdodHNTdGF0ZS5saWdodE1hcHNbMF0udGV4dHVyZSAmJiB0aGlzLl91TGlnaHRNYXApIHtcbiAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TGlnaHRNYXAsIGxpZ2h0c1N0YXRlLmxpZ2h0TWFwc1swXS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgfVxuXG4gICAgaWYgKGxpZ2h0c1N0YXRlLnJlZmxlY3Rpb25NYXBzLmxlbmd0aCA+IDAgJiYgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHNbMF0udGV4dHVyZSAmJiB0aGlzLl91UmVmbGVjdGlvbk1hcCkge1xuICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VSZWZsZWN0aW9uTWFwLCBsaWdodHNTdGF0ZS5yZWZsZWN0aW9uTWFwc1swXS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3VHYW1tYUZhY3Rvcikge1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUdhbW1hRmFjdG9yLCBzY2VuZS5nYW1tYUZhY3Rvcik7XG4gICAgfVxuXG4gICAgdGhpcy5fYmFzZVRleHR1cmVVbml0ID0gZnJhbWVDdHgudGV4dHVyZVVuaXQ7XG59O1xuXG5leHBvcnQge0RyYXdSZW5kZXJlcn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js ***!
  \****************************************************************************************/
/*! exports provided: DrawShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawShaderSource\", function() { return DrawShaderSource; });\n/**\n * @private\n */\nconst DrawShaderSource = function (mesh) {\n    if (mesh._material._state.type === \"LambertMaterial\") {\n        this.vertex = buildVertexLambert(mesh);\n        this.fragment = buildFragmentLambert(mesh);\n    } else {\n        this.vertex = buildVertexDraw(mesh);\n        this.fragment = buildFragmentDraw(mesh);\n    }\n};\n\nconst TEXTURE_DECODE_FUNCS = {\n    \"linear\": \"linearToLinear\",\n    \"sRGB\": \"sRGBToLinear\",\n    \"gamma\": \"gammaToLinear\"\n};\n\nfunction getReceivesShadow(mesh) {\n    if (!mesh.receivesShadow) {\n        return false;\n    }\n    const lights = mesh.scene._lightsState.lights;\n    if (!lights || lights.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = lights.length; i < len; i++) {\n        if (lights[i].castsShadow) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction hasTextures(mesh) {\n    if (!mesh._geometry._state.uvBuf) {\n        return false;\n    }\n    const material = mesh._material;\n    return !!(material._ambientMap ||\n        material._occlusionMap ||\n        material._baseColorMap ||\n        material._diffuseMap ||\n        material._alphaMap ||\n        material._specularMap ||\n        material._glossinessMap ||\n        material._specularGlossinessMap ||\n        material._emissiveMap ||\n        material._metallicMap ||\n        material._roughnessMap ||\n        material._metallicRoughnessMap ||\n        material._reflectivityMap ||\n        material._normalMap);\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normalsBuf) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildVertexLambert(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const lightsState = mesh.scene._lightsState;\n    const geometryState = mesh._geometry._state;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!geometryState.compressGeometry;\n\n    const src = [];\n    src.push(\"// Lambertian drawing vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4 lightAmbient;\");\n    src.push(\"uniform vec4 materialColor;\");\n    src.push(\"uniform vec3 materialEmissive;\");\n    if (geometryState.normalsBuf) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (geometryState.normalsBuf) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (geometryState.normalsBuf) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (geometryState.normalsBuf) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (geometryState.normalsBuf) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = -normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = -normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"spot\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    //src.push(\"vColor = vec4((reflectedColor * materialColor) + (lightAmbient.rgb * lightAmbient.a), 1.0) * colorize;\");\n    src.push(\"vColor = vec4((lightAmbient.rgb * lightAmbient.a * materialColor.rgb) + materialEmissive.rgb + (reflectedColor * materialColor.rgb), materialColor.a) * colorize;\"); // TODO: How to have ambient bright enough for canvas BG but not too bright for scene?\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentLambert(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const solid =  false && false;\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n    const src = [];\n    src.push(\"// Lambertian drawing fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"    vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"    return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildVertexDraw(mesh) {\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const meshState = mesh._state;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const geometryState = mesh._geometry._state;\n    const lightsState = scene._lightsState;\n    let i;\n    let len;\n    let light;\n    const billboard = meshState.billboard;\n    const stationary = meshState.stationary;\n    const texturing = hasTextures(mesh);\n    const normals = hasNormals(mesh);\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const receivesShadow = getReceivesShadow(mesh);\n    const quantizedGeometry = !!geometryState.compressGeometry;\n    const src = [];\n    src.push(\"// Drawing vertex shader\");\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute  vec3 position;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"uniform  mat4 modelMatrix;\");\n    src.push(\"uniform  mat4 viewMatrix;\");\n    src.push(\"uniform  mat4 projMatrix;\");\n    src.push(\"varying  vec3 vViewPosition;\");\n    src.push(\"uniform  vec3 offset;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (lightsState.lightMaps.length > 0) {\n        src.push(\"varying    vec3 vWorldNormal;\");\n    }\n    if (normals) {\n        src.push(\"attribute  vec3 normal;\");\n        src.push(\"uniform    mat4 modelNormalMatrix;\");\n        src.push(\"uniform    mat4 viewNormalMatrix;\");\n        src.push(\"varying    vec3 vViewNormal;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (!(light.type === \"dir\" && light.space === \"view\")) {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    if (texturing) {\n        src.push(\"attribute vec2 uv;\");\n        src.push(\"varying vec2 vUV;\");\n        if (quantizedGeometry) {\n            src.push(\"uniform mat3 uvDecodeMatrix;\")\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"attribute vec4 color;\");\n        src.push(\"varying vec4 vColor;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    if (receivesShadow) {\n        src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"uniform mat4 shadowViewMatrix\" + i + \";\");\n                src.push(\"uniform mat4 shadowProjMatrix\" + i + \";\");\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n            }\n        }\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2    = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2     = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2           = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2          = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 worldNormal = (modelNormalMatrix2 * localNormal).xyz; \");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"vWorldNormal = worldNormal;\");\n        }\n        src.push(\"vViewNormal = normalize((viewNormalMatrix2 * vec4(worldNormal, 1.0)).xyz);\");\n        src.push(\"vec3 tmpVec3;\");\n        src.push(\"float lightDist;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Lights\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = vec3(viewMatrix2 * vec4(lightDir\" + i + \", 0.0) ).xyz;\");\n                    src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(-tmpVec3, 0.0);\");\n                }\n            }\n            if (light.type === \"point\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = (viewMatrix2 * vec4(lightPos\" + i + \", 1.0)).xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                } else {\n                    src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                }\n                src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(tmpVec3, lightDist);\");\n            }\n        }\n    }\n    if (texturing) {\n        if (quantizedGeometry) {\n            src.push(\"vUV = (uvDecodeMatrix * vec3(uv, 1.0)).xy;\");\n        } else {\n            src.push(\"vUV = uv;\");\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"vColor = color;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vViewPosition = viewPosition.xyz;\");\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n    }\n    src.push(\"gl_Position = clipPos;\");\n    if (receivesShadow) {\n        src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n        src.push(\"vec4 tempx; \");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"vShadowPosFromLight\" + i + \" = texUnitConverter * shadowProjMatrix\" + i + \" * (shadowViewMatrix\" + i + \" * worldPosition); \");\n            }\n        }\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentDraw(mesh) {\n\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const material = mesh._material;\n    const geometryState = mesh._geometry._state;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const lightsState = mesh.scene._lightsState;\n    const materialState = mesh._material._state;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const normals = hasNormals(mesh);\n    const uvs = geometryState.uvBuf;\n    const solid =  false && false;\n    const phongMaterial = (materialState.type === \"PhongMaterial\");\n    const metallicMaterial = (materialState.type === \"MetallicMaterial\");\n    const specularMaterial = (materialState.type === \"SpecularMaterial\");\n    const receivesShadow = getReceivesShadow(mesh);\n    const gammaInput = scene.gammaInput; // If set, then it expects that all textures and colors are premultiplied gamma. Default is false.\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n\n    let light;\n    const src = [];\n\n    src.push(\"// Drawing fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (receivesShadow) {\n        src.push(\"float unpackDepth (vec4 color) {\");\n        src.push(\"  const vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0 * 256.0), 1.0/(256.0*256.0*256.0));\");\n        src.push(\"  return dot(color, bitShift);\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // GAMMA CORRECTION\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform float gammaFactor;\");\n    src.push(\"vec4 linearToLinear( in vec4 value ) {\");\n    src.push(\"  return value;\");\n    src.push(\"}\");\n    src.push(\"vec4 sRGBToLinear( in vec4 value ) {\");\n    src.push(\"  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\");\n    src.push(\"}\");\n    src.push(\"vec4 gammaToLinear( in vec4 value) {\");\n    src.push(\"  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\");\n    src.push(\"}\");\n    if (gammaOutput) {\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // USER CLIP PLANES\n    //--------------------------------------------------------------------------------\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    if (normals) {\n\n        //--------------------------------------------------------------------------------\n        // LIGHT AND REFLECTION MAP INPUTS\n        // Define here so available globally to shader functions\n        //--------------------------------------------------------------------------------\n\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"uniform samplerCube lightMap;\");\n            src.push(\"uniform mat4 viewNormalMatrix;\");\n        }\n        if (lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform samplerCube reflectionMap;\");\n        }\n        if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform mat4 viewMatrix;\");\n        }\n\n        //--------------------------------------------------------------------------------\n        // SHADING FUNCTIONS\n        //--------------------------------------------------------------------------------\n\n        // CONSTANT DEFINITIONS\n\n        src.push(\"#define PI 3.14159265359\");\n        src.push(\"#define RECIPROCAL_PI 0.31830988618\");\n        src.push(\"#define RECIPROCAL_PI2 0.15915494\");\n        src.push(\"#define EPSILON 1e-6\");\n\n        src.push(\"#define saturate(a) clamp( a, 0.0, 1.0 )\");\n\n        // UTILITY DEFINITIONS\n\n        src.push(\"vec3 inverseTransformDirection(in vec3 dir, in mat4 matrix) {\");\n        src.push(\"   return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\");\n        src.push(\"}\");\n\n        // STRUCTURES\n\n        src.push(\"struct IncidentLight {\");\n        src.push(\"   vec3 color;\");\n        src.push(\"   vec3 direction;\");\n        src.push(\"};\");\n\n        src.push(\"struct ReflectedLight {\");\n        src.push(\"   vec3 diffuse;\");\n        src.push(\"   vec3 specular;\");\n        src.push(\"};\");\n\n        src.push(\"struct Geometry {\");\n        src.push(\"   vec3 position;\");\n        src.push(\"   vec3 viewNormal;\");\n        src.push(\"   vec3 worldNormal;\");\n        src.push(\"   vec3 viewEyeDir;\");\n        src.push(\"};\");\n\n        src.push(\"struct Material {\");\n        src.push(\"   vec3    diffuseColor;\");\n        src.push(\"   float   specularRoughness;\");\n        src.push(\"   vec3    specularColor;\");\n        src.push(\"   float   shine;\"); // Only used for Phong\n        src.push(\"};\");\n\n        // COMMON UTILS\n\n        if (phongMaterial) {\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePhongLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = \" + TEXTURE_DECODE_FUNCS[lightsState.lightMaps[0].encoding] + \"(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   vec3 radiance               = textureCube(reflectionMap, reflectVec).rgb * 0.2;\");\n                    src.push(\"   radiance *= PI;\");\n                    src.push(\"   reflectedLight.specular     += radiance;\");\n                }\n                src.push(\"}\");\n            }\n\n            src.push(\"void computePhongLighting(const in IncidentLight directLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, directLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * directLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += directLight.color * material.specularColor * pow(max(dot(reflect(-directLight.direction, -geometry.viewNormal), geometry.viewEyeDir), 0.0), material.shine);\");\n            src.push(\"}\");\n        }\n\n        if (metallicMaterial || specularMaterial) {\n\n            // IRRADIANCE EVALUATION\n\n            src.push(\"float GGXRoughnessToBlinnExponent(const in float ggxRoughness) {\");\n            src.push(\"   float r = ggxRoughness + 0.0001;\");\n            src.push(\"   return (2.0 / (r * r) - 2.0);\");\n            src.push(\"}\");\n\n            src.push(\"float getSpecularMIPLevel(const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n            src.push(\"   float maxMIPLevelScalar = float( maxMIPLevel );\");\n            src.push(\"   float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( ( blinnShininessExponent * blinnShininessExponent ) + 1.0 );\");\n            src.push(\"   return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\");\n            src.push(\"}\");\n\n            if (lightsState.reflectionMaps.length > 0) {\n                src.push(\"vec3 getLightProbeIndirectRadiance(const in vec3 reflectVec, const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n                src.push(\"   float mipLevel = 0.5 * getSpecularMIPLevel(blinnShininessExponent, maxMIPLevel);\"); //TODO: a random factor - fix this\n                src.push(\"   vec3 envMapColor = \" + TEXTURE_DECODE_FUNCS[lightsState.reflectionMaps[0].encoding] + \"(textureCube(reflectionMap, reflectVec, mipLevel)).rgb;\");\n                src.push(\"  return envMapColor;\");\n                src.push(\"}\");\n            }\n\n            // SPECULAR BRDF EVALUATION\n\n            src.push(\"vec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\");\n            src.push(\"   float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\");\n            src.push(\"   return ( 1.0 - specularColor ) * fresnel + specularColor;\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_Smith(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   return 1.0 / ( gl * gv );\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_SmithCorrelated(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   return 0.5 / max( gv + gl, EPSILON );\");\n            src.push(\"}\");\n\n            src.push(\"float D_GGX(const in float alpha, const in float dotNH) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float denom = ( dotNH * dotNH) * ( a2 - 1.0 ) + 1.0;\");\n            src.push(\"   return RECIPROCAL_PI * a2 / ( denom * denom);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX(const in IncidentLight incidentLight, const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float alpha = ( roughness * roughness );\");\n            src.push(\"   vec3 halfDir = normalize( incidentLight.direction + geometry.viewEyeDir );\");\n            src.push(\"   float dotNL = saturate( dot( geometry.viewNormal, incidentLight.direction ) );\");\n            src.push(\"   float dotNV = saturate( dot( geometry.viewNormal, geometry.viewEyeDir ) );\");\n            src.push(\"   float dotNH = saturate( dot( geometry.viewNormal, halfDir ) );\");\n            src.push(\"   float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\");\n            src.push(\"   vec3  F = F_Schlick( specularColor, dotLH );\");\n            src.push(\"   float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\");\n            src.push(\"   float D = D_GGX( alpha, dotNH );\");\n            src.push(\"   return F * (G * D);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX_Environment(const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float dotNV = saturate(dot(geometry.viewNormal, geometry.viewEyeDir));\");\n            src.push(\"   const vec4 c0 = vec4( -1, -0.0275, -0.572,  0.022);\");\n            src.push(\"   const vec4 c1 = vec4(  1,  0.0425,   1.04, -0.04);\");\n            src.push(\"   vec4 r = roughness * c0 + c1;\");\n            src.push(\"   float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\");\n            src.push(\"   vec2 AB    = vec2(-1.04, 1.04) * a004 + r.zw;\");\n            src.push(\"   return specularColor * AB.x + AB.y;\");\n            src.push(\"}\");\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePBRLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = sRGBToLinear(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                    //   src.push(\"   reflectedLight.diffuse = vec3(1.0, 0.0, 0.0);\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   reflectVec                  = inverseTransformDirection(reflectVec, viewMatrix);\");\n                    src.push(\"   float blinnExpFromRoughness = GGXRoughnessToBlinnExponent(material.specularRoughness);\");\n                    src.push(\"   vec3 radiance               = getLightProbeIndirectRadiance(reflectVec, blinnExpFromRoughness, 8);\");\n                    src.push(\"   vec3 specularBRDFContrib    = BRDF_Specular_GGX_Environment(geometry, material.specularColor, material.specularRoughness);\");\n                    src.push(\"   reflectedLight.specular     += radiance * specularBRDFContrib;\");\n                }\n                src.push(\"}\");\n            }\n\n            // MAIN LIGHTING COMPUTATION FUNCTION\n\n            src.push(\"void computePBRLighting(const in IncidentLight incidentLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, incidentLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * incidentLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += irradiance * BRDF_Specular_GGX(incidentLight, geometry, material.specularColor, material.specularRoughness);\");\n            src.push(\"}\");\n\n        } // (metallicMaterial || specularMaterial)\n\n    } // geometry.normals\n\n    //--------------------------------------------------------------------------------\n    // GEOMETRY INPUTS\n    //--------------------------------------------------------------------------------\n\n    src.push(\"varying vec3 vViewPosition;\");\n\n    if (geometryState.colors) {\n        src.push(\"varying vec4 vColor;\");\n    }\n\n    if (uvs &&\n        ((normals && material._normalMap)\n            || material._ambientMap\n            || material._baseColorMap\n            || material._diffuseMap\n            || material._emissiveMap\n            || material._metallicMap\n            || material._roughnessMap\n            || material._metallicRoughnessMap\n            || material._specularMap\n            || material._glossinessMap\n            || material._specularGlossinessMap\n            || material._occlusionMap\n            || material._alphaMap)) {\n        src.push(\"varying vec2 vUV;\");\n    }\n\n    if (normals) {\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"varying vec3 vWorldNormal;\");\n        }\n        src.push(\"varying vec3 vViewNormal;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL CHANNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (materialState.ambient) {\n        src.push(\"uniform vec3 materialAmbient;\");\n    }\n    if (materialState.baseColor) {\n        src.push(\"uniform vec3 materialBaseColor;\");\n    }\n    if (materialState.alpha !== undefined && materialState.alpha !== null) {\n        src.push(\"uniform vec4 materialAlphaModeCutoff;\"); // [alpha, alphaMode, alphaCutoff]\n    }\n    if (materialState.emissive) {\n        src.push(\"uniform vec3 materialEmissive;\");\n    }\n    if (materialState.diffuse) {\n        src.push(\"uniform vec3 materialDiffuse;\");\n    }\n    if (materialState.glossiness !== undefined && materialState.glossiness !== null) {\n        src.push(\"uniform float materialGlossiness;\");\n    }\n    if (materialState.shininess !== undefined && materialState.shininess !== null) {\n        src.push(\"uniform float materialShininess;\");  // Phong channel\n    }\n    if (materialState.specular) {\n        src.push(\"uniform vec3 materialSpecular;\");\n    }\n    if (materialState.metallic !== undefined && materialState.metallic !== null) {\n        src.push(\"uniform float materialMetallic;\");\n    }\n    if (materialState.roughness !== undefined && materialState.roughness !== null) {\n        src.push(\"uniform float materialRoughness;\");\n    }\n    if (materialState.specularF0 !== undefined && materialState.specularF0 !== null) {\n        src.push(\"uniform float materialSpecularF0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL TEXTURE INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (uvs && material._ambientMap) {\n        src.push(\"uniform sampler2D ambientMap;\");\n        if (material._ambientMap._state.matrix) {\n            src.push(\"uniform mat4 ambientMapMatrix;\");\n        }\n    }\n    if (uvs && material._baseColorMap) {\n        src.push(\"uniform sampler2D baseColorMap;\");\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"uniform mat4 baseColorMapMatrix;\");\n        }\n    }\n    if (uvs && material._diffuseMap) {\n        src.push(\"uniform sampler2D diffuseMap;\");\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"uniform mat4 diffuseMapMatrix;\");\n        }\n    }\n    if (uvs && material._emissiveMap) {\n        src.push(\"uniform sampler2D emissiveMap;\");\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"uniform mat4 emissiveMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicMap) {\n        src.push(\"uniform sampler2D metallicMap;\");\n        if (material._metallicMap._state.matrix) {\n            src.push(\"uniform mat4 metallicMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._roughnessMap) {\n        src.push(\"uniform sampler2D roughnessMap;\");\n        if (material._roughnessMap._state.matrix) {\n            src.push(\"uniform mat4 roughnessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicRoughnessMap) {\n        src.push(\"uniform sampler2D metallicRoughnessMap;\");\n        if (material._metallicRoughnessMap._state.matrix) {\n            src.push(\"uniform mat4 metallicRoughnessMapMatrix;\");\n        }\n    }\n    if (normals && material._normalMap) {\n        src.push(\"uniform sampler2D normalMap;\");\n        if (material._normalMap._state.matrix) {\n            src.push(\"uniform mat4 normalMapMatrix;\");\n        }\n        src.push(\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\");\n        src.push(\"      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\");\n        src.push(\"      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\");\n        src.push(\"      vec2 st0 = dFdx( uv.st );\");\n        src.push(\"      vec2 st1 = dFdy( uv.st );\");\n        src.push(\"      vec3 S = normalize( q0 * st1.t - q1 * st0.t );\");\n        src.push(\"      vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\");\n        src.push(\"      vec3 N = normalize( surf_norm );\");\n        src.push(\"      vec3 mapN = texture2D( normalMap, uv ).xyz * 2.0 - 1.0;\");\n        src.push(\"      mat3 tsn = mat3( S, T, N );\");\n        //     src.push(\"      mapN *= 3.0;\");\n        src.push(\"      return normalize( tsn * mapN );\");\n        src.push(\"}\");\n    }\n    if (uvs && material._occlusionMap) {\n        src.push(\"uniform sampler2D occlusionMap;\");\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"uniform mat4 occlusionMapMatrix;\");\n        }\n    }\n    if (uvs && material._alphaMap) {\n        src.push(\"uniform sampler2D alphaMap;\");\n        if (material._alphaMap._state.matrix) {\n            src.push(\"uniform mat4 alphaMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularMap) {\n        src.push(\"uniform sampler2D specularMap;\");\n        if (material._specularMap._state.matrix) {\n            src.push(\"uniform mat4 specularMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._glossinessMap) {\n        src.push(\"uniform sampler2D glossinessMap;\");\n        if (material._glossinessMap._state.matrix) {\n            src.push(\"uniform mat4 glossinessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularGlossinessMap) {\n        src.push(\"uniform sampler2D materialSpecularGlossinessMap;\");\n        if (material._specularGlossinessMap._state.matrix) {\n            src.push(\"uniform mat4 materialSpecularGlossinessMapMatrix;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL FRESNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (normals && (material._diffuseFresnel ||\n        material._specularFresnel ||\n        material._alphaFresnel ||\n        material._emissiveFresnel ||\n        material._reflectivityFresnel)) {\n        src.push(\"float fresnel(vec3 eyeDir, vec3 normal, float edgeBias, float centerBias, float power) {\");\n        src.push(\"    float fr = abs(dot(eyeDir, normal));\");\n        src.push(\"    float finalFr = clamp((fr - edgeBias) / (centerBias - edgeBias), 0.0, 1.0);\");\n        src.push(\"    return pow(finalFr, power);\");\n        src.push(\"}\");\n        if (material._diffuseFresnel) {\n            src.push(\"uniform float  diffuseFresnelCenterBias;\");\n            src.push(\"uniform float  diffuseFresnelEdgeBias;\");\n            src.push(\"uniform float  diffuseFresnelPower;\");\n            src.push(\"uniform vec3   diffuseFresnelCenterColor;\");\n            src.push(\"uniform vec3   diffuseFresnelEdgeColor;\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"uniform float  specularFresnelCenterBias;\");\n            src.push(\"uniform float  specularFresnelEdgeBias;\");\n            src.push(\"uniform float  specularFresnelPower;\");\n            src.push(\"uniform vec3   specularFresnelCenterColor;\");\n            src.push(\"uniform vec3   specularFresnelEdgeColor;\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"uniform float  alphaFresnelCenterBias;\");\n            src.push(\"uniform float  alphaFresnelEdgeBias;\");\n            src.push(\"uniform float  alphaFresnelPower;\");\n            src.push(\"uniform vec3   alphaFresnelCenterColor;\");\n            src.push(\"uniform vec3   alphaFresnelEdgeColor;\");\n        }\n        if (material._reflectivityFresnel) {\n            src.push(\"uniform float  materialSpecularF0FresnelCenterBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelEdgeBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelPower;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelCenterColor;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelEdgeColor;\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"uniform float  emissiveFresnelCenterBias;\");\n            src.push(\"uniform float  emissiveFresnelEdgeBias;\");\n            src.push(\"uniform float  emissiveFresnelPower;\");\n            src.push(\"uniform vec3   emissiveFresnelCenterColor;\");\n            src.push(\"uniform vec3   emissiveFresnelEdgeColor;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // LIGHT SOURCES\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform vec4   lightAmbient;\");\n\n    if (normals) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightAttenuation\" + i + \";\");\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            } else {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n    }\n\n    if (receivesShadow) {\n\n        // Variance castsShadow mapping filter\n\n        // src.push(\"float linstep(float low, float high, float v){\");\n        // src.push(\"      return clamp((v-low)/(high-low), 0.0, 1.0);\");\n        // src.push(\"}\");\n        //\n        // src.push(\"float VSM(sampler2D depths, vec2 uv, float compare){\");\n        // src.push(\"      vec2 moments = texture2D(depths, uv).xy;\");\n        // src.push(\"      float p = smoothstep(compare-0.02, compare, moments.x);\");\n        // src.push(\"      float variance = max(moments.y - moments.x*moments.x, -0.001);\");\n        // src.push(\"      float d = compare - moments.x;\");\n        // src.push(\"      float p_max = linstep(0.2, 1.0, variance / (variance + d*d));\");\n        // src.push(\"      return clamp(max(p, p_max), 0.0, 1.0);\");\n        // src.push(\"}\");\n\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n                src.push(\"uniform sampler2D shadowMap\" + i + \";\");\n            }\n        }\n    }\n\n    src.push(\"uniform vec4 colorize;\");\n\n    //================================================================================\n    // MAIN\n    //================================================================================\n\n    src.push(\"void main(void) {\");\n\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n\n    src.push(\"float occlusion = 1.0;\");\n\n    if (materialState.ambient) {\n        src.push(\"vec3 ambientColor = materialAmbient;\");\n    } else {\n        src.push(\"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.diffuse) {\n        src.push(\"vec3 diffuseColor = materialDiffuse;\");\n    } else if (materialState.baseColor) {\n        src.push(\"vec3 diffuseColor = materialBaseColor;\");\n    } else {\n        src.push(\"vec3 diffuseColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"diffuseColor *= vColor.rgb;\");\n    }\n\n    if (materialState.emissive) {\n        src.push(\"vec3 emissiveColor = materialEmissive;\"); // Emissive default is (0,0,0), so initializing here\n    } else {\n        src.push(\"vec3  emissiveColor = vec3(0.0, 0.0, 0.0);\");\n    }\n\n    if (materialState.specular) {\n        src.push(\"vec3 specular = materialSpecular;\");\n    } else {\n        src.push(\"vec3 specular = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.alpha !== undefined) {\n        src.push(\"float alpha = materialAlphaModeCutoff[0];\");\n    } else {\n        src.push(\"float alpha = 1.0;\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"alpha *= vColor.a;\");\n    }\n\n    if (materialState.glossiness !== undefined) {\n        src.push(\"float glossiness = materialGlossiness;\");\n    } else {\n        src.push(\"float glossiness = 1.0;\");\n    }\n\n    if (materialState.metallic !== undefined) {\n        src.push(\"float metallic = materialMetallic;\");\n    } else {\n        src.push(\"float metallic = 1.0;\");\n    }\n\n    if (materialState.roughness !== undefined) {\n        src.push(\"float roughness = materialRoughness;\");\n    } else {\n        src.push(\"float roughness = 1.0;\");\n    }\n\n    if (materialState.specularF0 !== undefined) {\n        src.push(\"float specularF0 = materialSpecularF0;\");\n    } else {\n        src.push(\"float specularF0 = 1.0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // TEXTURING\n    //--------------------------------------------------------------------------------\n\n    if (uvs && ((normals && material._normalMap)\n        || material._ambientMap\n        || material._baseColorMap\n        || material._diffuseMap\n        || material._occlusionMap\n        || material._emissiveMap\n        || material._metallicMap\n        || material._roughnessMap\n        || material._metallicRoughnessMap\n        || material._specularMap\n        || material._glossinessMap\n        || material._specularGlossinessMap\n        || material._alphaMap)) {\n        src.push(\"vec4 texturePos = vec4(vUV.s, vUV.t, 1.0, 1.0);\");\n        src.push(\"vec2 textureCoord;\");\n    }\n\n    if (uvs && material._ambientMap) {\n        if (material._ambientMap._state.matrix) {\n            src.push(\"textureCoord = (ambientMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 ambientTexel = texture2D(ambientMap, textureCoord).rgb;\");\n        src.push(\"ambientTexel = \" + TEXTURE_DECODE_FUNCS[material._ambientMap._state.encoding] + \"(ambientTexel);\");\n        src.push(\"ambientColor *= ambientTexel.rgb;\");\n    }\n\n    if (uvs && material._diffuseMap) {\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"textureCoord = (diffuseMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 diffuseTexel = texture2D(diffuseMap, textureCoord);\");\n        src.push(\"diffuseTexel = \" + TEXTURE_DECODE_FUNCS[material._diffuseMap._state.encoding] + \"(diffuseTexel);\");\n        src.push(\"diffuseColor *= diffuseTexel.rgb;\");\n        src.push(\"alpha *= diffuseTexel.a;\");\n    }\n\n    if (uvs && material._baseColorMap) {\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"textureCoord = (baseColorMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 baseColorTexel = texture2D(baseColorMap, textureCoord);\");\n        src.push(\"baseColorTexel = \" + TEXTURE_DECODE_FUNCS[material._baseColorMap._state.encoding] + \"(baseColorTexel);\");\n        src.push(\"diffuseColor *= baseColorTexel.rgb;\");\n        src.push(\"alpha *= baseColorTexel.a;\");\n    }\n\n    if (uvs && material._emissiveMap) {\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"textureCoord = (emissiveMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 emissiveTexel = texture2D(emissiveMap, textureCoord);\");\n        src.push(\"emissiveTexel = \" + TEXTURE_DECODE_FUNCS[material._emissiveMap._state.encoding] + \"(emissiveTexel);\");\n        src.push(\"emissiveColor = emissiveTexel.rgb;\");\n    }\n\n    if (uvs && material._alphaMap) {\n        if (material._alphaMap._state.matrix) {\n            src.push(\"textureCoord = (alphaMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"alpha *= texture2D(alphaMap, textureCoord).r;\");\n    }\n\n    if (uvs && material._occlusionMap) {\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"textureCoord = (occlusionMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"occlusion *= texture2D(occlusionMap, textureCoord).r;\");\n    }\n\n    if (normals && ((lightsState.lights.length > 0) || lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n\n        //--------------------------------------------------------------------------------\n        // SHADING\n        //--------------------------------------------------------------------------------\n\n        if (uvs && material._normalMap) {\n            if (material._normalMap._state.matrix) {\n                src.push(\"textureCoord = (normalMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 viewNormal = perturbNormal2Arb( vViewPosition, normalize(vViewNormal), textureCoord );\");\n        } else {\n            src.push(\"vec3 viewNormal = normalize(vViewNormal);\");\n        }\n\n        if (uvs && material._specularMap) {\n            if (material._specularMap._state.matrix) {\n                src.push(\"textureCoord = (specularMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"specular *= texture2D(specularMap, textureCoord).rgb;\");\n        }\n\n        if (uvs && material._glossinessMap) {\n            if (material._glossinessMap._state.matrix) {\n                src.push(\"textureCoord = (glossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"glossiness *= texture2D(glossinessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._specularGlossinessMap) {\n            if (material._specularGlossinessMap._state.matrix) {\n                src.push(\"textureCoord = (materialSpecularGlossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec4 specGlossRGB = texture2D(materialSpecularGlossinessMap, textureCoord).rgba;\"); // TODO: what if only RGB texture?\n            src.push(\"specular *= specGlossRGB.rgb;\");\n            src.push(\"glossiness *= specGlossRGB.a;\");\n        }\n\n        if (uvs && material._metallicMap) {\n            if (material._metallicMap._state.matrix) {\n                src.push(\"textureCoord = (metallicMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"metallic *= texture2D(metallicMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._roughnessMap) {\n            if (material._roughnessMap._state.matrix) {\n                src.push(\"textureCoord = (roughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"roughness *= texture2D(roughnessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._metallicRoughnessMap) {\n            if (material._metallicRoughnessMap._state.matrix) {\n                src.push(\"textureCoord = (metallicRoughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 metalRoughRGB = texture2D(metallicRoughnessMap, textureCoord).rgb;\");\n            src.push(\"metallic *= metalRoughRGB.b;\");\n            src.push(\"roughness *= metalRoughRGB.g;\");\n        }\n\n        src.push(\"vec3 viewEyeDir = normalize(-vViewPosition);\");\n\n        if (material._diffuseFresnel) {\n            src.push(\"float diffuseFresnel = fresnel(viewEyeDir, viewNormal, diffuseFresnelEdgeBias, diffuseFresnelCenterBias, diffuseFresnelPower);\");\n            src.push(\"diffuseColor *= mix(diffuseFresnelEdgeColor, diffuseFresnelCenterColor, diffuseFresnel);\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"float specularFresnel = fresnel(viewEyeDir, viewNormal, specularFresnelEdgeBias, specularFresnelCenterBias, specularFresnelPower);\");\n            src.push(\"specular *= mix(specularFresnelEdgeColor, specularFresnelCenterColor, specularFresnel);\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"float alphaFresnel = fresnel(viewEyeDir, viewNormal, alphaFresnelEdgeBias, alphaFresnelCenterBias, alphaFresnelPower);\");\n            src.push(\"alpha *= mix(alphaFresnelEdgeColor.r, alphaFresnelCenterColor.r, alphaFresnel);\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"float emissiveFresnel = fresnel(viewEyeDir, viewNormal, emissiveFresnelEdgeBias, emissiveFresnelCenterBias, emissiveFresnelPower);\");\n            src.push(\"emissiveColor *= mix(emissiveFresnelEdgeColor, emissiveFresnelCenterColor, emissiveFresnel);\");\n        }\n\n        src.push(\"if (materialAlphaModeCutoff[1] == 1.0 && alpha < materialAlphaModeCutoff[2]) {\"); // ie. (alphaMode == \"mask\" && alpha < alphaCutoff)\n        src.push(\"   discard;\"); // TODO: Discard earlier within this shader?\n        src.push(\"}\");\n\n        // PREPARE INPUTS FOR SHADER FUNCTIONS\n\n        src.push(\"IncidentLight  light;\");\n        src.push(\"Material       material;\");\n        src.push(\"Geometry       geometry;\");\n        src.push(\"ReflectedLight reflectedLight = ReflectedLight(vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0));\");\n        src.push(\"vec3           viewLightDir;\");\n\n        if (phongMaterial) {\n            src.push(\"material.diffuseColor      = diffuseColor;\");\n            src.push(\"material.specularColor     = specular;\");\n            src.push(\"material.shine             = materialShininess;\");\n        }\n\n        if (specularMaterial) {\n            src.push(\"float oneMinusSpecularStrength = 1.0 - max(max(specular.r, specular.g ),specular.b);\"); // Energy conservation\n            src.push(\"material.diffuseColor      = diffuseColor * oneMinusSpecularStrength;\");\n            src.push(\"material.specularRoughness = clamp( 1.0 - glossiness, 0.04, 1.0 );\");\n            src.push(\"material.specularColor     = specular;\");\n        }\n\n        if (metallicMaterial) {\n            src.push(\"float dielectricSpecular = 0.16 * specularF0 * specularF0;\");\n            src.push(\"material.diffuseColor      = diffuseColor * (1.0 - dielectricSpecular) * (1.0 - metallic);\");\n            src.push(\"material.specularRoughness = clamp(roughness, 0.04, 1.0);\");\n            src.push(\"material.specularColor     = mix(vec3(dielectricSpecular), diffuseColor, metallic);\");\n        }\n\n        src.push(\"geometry.position      = vViewPosition;\");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"geometry.worldNormal   = normalize(vWorldNormal);\");\n        }\n        src.push(\"geometry.viewNormal    = viewNormal;\");\n        src.push(\"geometry.viewEyeDir    = viewEyeDir;\");\n\n        // ENVIRONMENT AND REFLECTION MAP SHADING\n\n        if ((phongMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePhongLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        if ((specularMaterial || metallicMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePBRLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        // LIGHT SOURCE SHADING\n\n        src.push(\"float shadow = 1.0;\");\n\n        // if (receivesShadow) {\n        //\n        //     src.push(\"float lightDepth2 = clamp(length(lightPos)/40.0, 0.0, 1.0);\");\n        //     src.push(\"float illuminated = VSM(sLightDepth, lightUV, lightDepth2);\");\n        //\n        src.push(\"float shadowAcneRemover = 0.007;\");\n        src.push(\"vec3 fragmentDepth;\");\n        src.push(\"float texelSize = 1.0 / 1024.0;\");\n        src.push(\"float amountInLight = 0.0;\");\n        src.push(\"vec3 shadowCoord;\");\n        src.push('vec4 rgbaDepth;');\n        src.push(\"float depth;\");\n        // }\n\n        const numShadows = 0;\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n\n            const light = lightsState.lights[i];\n\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"viewLightDir = -normalize(lightDir\" + i + \");\");\n            } else if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - vViewPosition);\");\n                //src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                //src.push(\"lightDist = abs(length(tmpVec3));\");\n            } else {\n                src.push(\"viewLightDir = normalize(vViewLightReverseDirAndDist\" + i + \".xyz);\"); // If normal mapping, the fragment->light vector will be in tangent space\n            }\n\n            if (receivesShadow && light.castsShadow) {\n\n                // if (true) {\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //     src.push(\"lightDepth2 = clamp(length(vec3[0.0, 20.0, 20.0])/40.0, 0.0, 1.0);\");\n                //     src.push(\"castsShadow *= VSM(shadowMap' + i + ', shadowCoord, lightDepth2);\");\n                // }\n                //\n                // if (false) {\n                //\n                // PCF\n\n                src.push(\"shadow = 0.0;\");\n\n                src.push(\"fragmentDepth = vShadowPosFromLight\" + i + \".xyz;\");\n                src.push(\"fragmentDepth.z -= shadowAcneRemover;\");\n                src.push(\"for (int x = -3; x <= 3; x++) {\");\n                src.push(\"  for (int y = -3; y <= 3; y++) {\");\n                src.push(\"      float texelDepth = unpackDepth(texture2D(shadowMap\" + i + \", fragmentDepth.xy + vec2(x, y) * texelSize));\");\n                src.push(\"      if (fragmentDepth.z < texelDepth) {\");\n                src.push(\"          shadow += 1.0;\");\n                src.push(\"      }\");\n                src.push(\"  }\");\n                src.push(\"}\");\n\n                src.push(\"shadow = shadow / 9.0;\");\n\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\"); // a is intensity\n                //\n                // }\n                //\n                // if (false){\n                //\n                //     src.push(\"shadow = 1.0;\");\n                //\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.94201624, -0.39906216 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.94558609, -0.76890725 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.094184101, -0.92938870 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.34495938, 0.29387760 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //\n                //     src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\");\n                // }\n            } else {\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a );\"); // a is intensity\n            }\n\n            src.push(\"light.direction = viewLightDir;\");\n\n            if (phongMaterial) {\n                src.push(\"computePhongLighting(light, geometry, material, reflectedLight);\");\n            }\n\n            if (specularMaterial || metallicMaterial) {\n                src.push(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n            }\n        }\n\n        if (numShadows > 0) {\n            //src.push(\"shadow /= \" + (9 * numShadows) + \".0;\");\n        }\n\n        //src.push(\"reflectedLight.diffuse *= shadow;\");\n\n        // COMBINE TERMS\n\n        if (phongMaterial) {\n            src.push(\"vec3 outgoingLight = (lightAmbient.rgb * lightAmbient.a * diffuseColor) + ((occlusion * (( reflectedLight.diffuse + reflectedLight.specular)))) + emissiveColor;\");\n\n        } else {\n            src.push(\"vec3 outgoingLight = (occlusion * (reflectedLight.diffuse)) + (occlusion * reflectedLight.specular) + emissiveColor;\");\n        }\n\n    } else {\n\n        //--------------------------------------------------------------------------------\n        // NO SHADING - EMISSIVE and AMBIENT ONLY\n        //--------------------------------------------------------------------------------\n\n        src.push(\"ambientColor *= (lightAmbient.rgb * lightAmbient.a);\");\n\n        src.push(\"vec3 outgoingLight = emissiveColor + ambientColor;\");\n    }\n\n    src.push(\"gl_FragColor = vec4(outgoingLight, alpha) * colorize;\");\n\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(gl_FragColor, gammaFactor);\");\n    }\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n\n    src.push(\"}\");\n\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvZHJhdy9EcmF3U2hhZGVyU291cmNlLmpzPzViNGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qyx1Q0FBdUM7QUFDdkMsc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSx3Q0FBd0M7QUFDeEMseUNBQXlDO0FBQ3pDLDRDQUE0QztBQUM1QztBQUNBLHdDQUF3QztBQUN4QyxpREFBaUQ7QUFDakQsZ0RBQWdEO0FBQ2hELHdEQUF3RCxTQUFTO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hELCtFQUErRTtBQUMvRSwwQ0FBMEM7QUFDMUMsZ0hBQWdIO0FBQ2hILDJCQUEyQjtBQUMzQiw4Q0FBOEM7QUFDOUMsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDO0FBQ0EscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEMsbUJBQW1CO0FBQ25CO0FBQ0EsK0JBQStCO0FBQy9CLHVEQUF1RDtBQUN2RCxpQ0FBaUM7QUFDakM7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0EseUVBQXlFO0FBQ3pFLFNBQVM7QUFDVCwyREFBMkQ7QUFDM0Q7QUFDQSw4REFBOEQ7QUFDOUQsNERBQTREO0FBQzVEO0FBQ0EsNENBQTRDO0FBQzVDLDhDQUE4QztBQUM5QztBQUNBLGtGQUFrRjtBQUNsRjtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFLDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekMsNkNBQTZDO0FBQzdDO0FBQ0EsMkZBQTJGO0FBQzNGLG9EQUFvRDtBQUNwRCxtREFBbUQ7QUFDbkQsdURBQXVEO0FBQ3ZEO0FBQ0EsK0RBQStEO0FBQy9ELGlFQUFpRTtBQUNqRSxzRUFBc0U7QUFDdEUsS0FBSztBQUNMLCtEQUErRDtBQUMvRCxpRUFBaUU7QUFDakUsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQSwwR0FBMEc7QUFDMUc7QUFDQSx3REFBd0Q7QUFDeEQsdURBQXVEO0FBQ3ZELHFDQUFxQztBQUNyQztBQUNBLHdEQUF3RCxTQUFTO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRSxpQkFBaUI7QUFDakIseUdBQXlHO0FBQ3pHO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsOEZBQThGO0FBQzlGLGlCQUFpQjtBQUNqQiwwR0FBMEc7QUFDMUc7QUFDQSxhQUFhO0FBQ2I7QUFDQSwwRUFBMEU7QUFDMUUsaUJBQWlCO0FBQ2pCLHlHQUF5RztBQUN6RztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsNEVBQTRFO0FBQzVFLHVHQUF1RztBQUN2RztBQUNBO0FBQ0Esc0hBQXNIO0FBQ3RILCtLQUErSyxHQUFHO0FBQ2xMO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQSxvQ0FBb0M7QUFDcEMsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE1BQUssSUFBSSxLQUF1QjtBQUNsRCwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLGtDQUFrQztBQUNsQztBQUNBLHNDQUFzQztBQUN0QyxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBLDhDQUE4QztBQUM5QywyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qyx5Q0FBeUM7QUFDekMsc0VBQXNFLFNBQVM7QUFDL0UsK0RBQStEO0FBQy9ELDREQUE0RDtBQUM1RCw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBLDRDQUE0QztBQUM1QyxpRkFBaUY7QUFDakYsMEZBQTBGO0FBQzFGLG1CQUFtQjtBQUNuQjtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsc0VBQXNFLFNBQVM7QUFDL0Usd0RBQXdEO0FBQ3hELDJJQUEySTtBQUMzSSx1QkFBdUI7QUFDdkI7QUFDQSxxQ0FBcUMsU0FBUyxFQUFFO0FBQ2hEO0FBQ0Esc0RBQXNEO0FBQ3RELG1FQUFtRTtBQUNuRSxrQ0FBa0M7QUFDbEMseUJBQXlCO0FBQ3pCO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQsMENBQTBDO0FBQzFDLGdDQUFnQztBQUNoQyw2QkFBNkI7QUFDN0IsbUJBQW1COztBQUVuQjtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEUsS0FBSztBQUNMLHdDQUF3QztBQUN4QztBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0Esd0NBQXdDO0FBQ3hDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsMENBQTBDO0FBQzFDLG1DQUFtQztBQUNuQztBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsOENBQThDO0FBQzlDLDJDQUEyQztBQUMzQztBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsb0RBQW9EO0FBQ3BELG1EQUFtRDtBQUNuRCw4Q0FBOEM7QUFDOUMsd0RBQXdELFNBQVM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hELCtFQUErRTtBQUMvRSwwQ0FBMEM7QUFDMUMsZ0hBQWdIO0FBQ2hILDJCQUEyQjtBQUMzQiw4Q0FBOEM7QUFDOUMsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxtQ0FBbUM7QUFDbkM7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQSx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6QztBQUNBLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMsb0NBQW9DO0FBQ3BDLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EscUlBQXFJO0FBQ3JJLHdEQUF3RCxTQUFTLE9BQU87QUFDeEU7QUFDQSxpRUFBaUU7QUFDakUsaUVBQWlFO0FBQ2pFLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsdURBQXVEO0FBQ3ZELGlDQUFpQztBQUNqQztBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekUsU0FBUztBQUNULDJEQUEyRDtBQUMzRDtBQUNBLGlFQUFpRTtBQUNqRSxnRUFBZ0U7QUFDaEU7QUFDQSxzREFBc0Q7QUFDdEQsdURBQXVEO0FBQ3ZEO0FBQ0Esa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEUsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7QUFDQSwyRkFBMkY7QUFDM0Ysb0RBQW9EO0FBQ3BELG1EQUFtRDtBQUNuRCx1REFBdUQ7QUFDdkQ7QUFDQSwrREFBK0Q7QUFDL0QsaUVBQWlFO0FBQ2pFLHNFQUFzRTtBQUN0RSxLQUFLO0FBQ0wsK0RBQStEO0FBQy9ELGlFQUFpRTtBQUNqRSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLDRGQUE0RjtBQUM1RiwrQkFBK0I7QUFDL0Isa0NBQWtDO0FBQ2xDLHdEQUF3RCxTQUFTLE9BQU87QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGO0FBQzlGLHlGQUF5RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RztBQUM1RywrREFBK0Q7QUFDL0QsaUJBQWlCO0FBQ2pCLGlGQUFpRjtBQUNqRiwrREFBK0Q7QUFDL0Q7QUFDQSwwRkFBMEY7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSxTQUFTO0FBQ1QsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxrREFBa0Q7QUFDbEQsdURBQXVEO0FBQ3ZEO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0EscUlBQXFJO0FBQ3JJLDZCQUE2QjtBQUM3Qix3REFBd0QsU0FBUyxPQUFPO0FBQ3hFO0FBQ0Esb0pBQW9KO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE1BQUssSUFBSSxLQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QywwQ0FBMEM7O0FBRTFDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEM7QUFDQSxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0EsOENBQThDO0FBQzlDLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBLGtEQUFrRDtBQUNsRCw2R0FBNkc7QUFDN0csZ0RBQWdEO0FBQ2hELG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0NBQXdDO0FBQ3hDLG9EQUFvRDtBQUNwRCw2QkFBNkI7QUFDN0IsZUFBZTtBQUNmLGtEQUFrRDtBQUNsRCxrTUFBa007QUFDbE0sZUFBZTtBQUNmLGtEQUFrRDtBQUNsRCw4RUFBOEU7QUFDOUUsZUFBZTtBQUNmO0FBQ0EsNkVBQTZFO0FBQzdFLHdGQUF3RjtBQUN4RixtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQThDO0FBQzlDLHlDQUF5QztBQUN6Qyx1QkFBdUIsNkNBQTZDO0FBQ3BFLCtEQUErRDtBQUMvRCw0REFBNEQ7QUFDNUQsNERBQTREO0FBQzVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQ7QUFDbkQsb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBLDhDQUE4QztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsK0VBQStFO0FBQy9FLDJFQUEyRTtBQUMzRSxtQkFBbUI7O0FBRW5COztBQUVBLHdDQUF3QztBQUN4QyxnQ0FBZ0M7QUFDaEMsb0NBQW9DO0FBQ3BDLG9CQUFvQjs7QUFFcEIseUNBQXlDO0FBQ3pDLGtDQUFrQztBQUNsQyxtQ0FBbUM7QUFDbkMsb0JBQW9COztBQUVwQixtQ0FBbUM7QUFDbkMsbUNBQW1DO0FBQ25DLHFDQUFxQztBQUNyQyxzQ0FBc0M7QUFDdEMscUNBQXFDO0FBQ3JDLG9CQUFvQjs7QUFFcEIsbUNBQW1DO0FBQ25DLDBDQUEwQztBQUMxQywrQ0FBK0M7QUFDL0MsMkNBQTJDO0FBQzNDLG1DQUFtQyxHQUFHO0FBQ3RDLG9CQUFvQjs7QUFFcEI7O0FBRUE7O0FBRUE7O0FBRUEsc0pBQXNKOztBQUV0SjtBQUNBLG9LQUFvSztBQUNwSyxrREFBa0Q7QUFDbEQsbUdBQW1HO0FBQ25HLDJGQUEyRjtBQUMzRjtBQUNBO0FBQ0Esa0hBQWtIO0FBQ2xILGdIQUFnSDtBQUNoSCxnREFBZ0Q7QUFDaEQseUVBQXlFO0FBQ3pFO0FBQ0EsMkJBQTJCO0FBQzNCOztBQUVBLGtMQUFrTDtBQUNsTCxxR0FBcUc7QUFDckcsMEVBQTBFO0FBQzFFLHlHQUF5RztBQUN6RyxnTkFBZ047QUFDaE4sdUJBQXVCO0FBQ3ZCOztBQUVBOztBQUVBOztBQUVBLHNGQUFzRjtBQUN0Rix5REFBeUQ7QUFDekQsc0RBQXNEO0FBQ3RELHVCQUF1Qjs7QUFFdkIsa0hBQWtIO0FBQ2xILHdFQUF3RTtBQUN4RSx1SkFBdUo7QUFDdkosaUZBQWlGO0FBQ2pGLHVCQUF1Qjs7QUFFdkI7QUFDQSx5SkFBeUo7QUFDekosNkdBQTZHLEdBQUc7QUFDaEgsMktBQTJLO0FBQzNLLCtDQUErQztBQUMvQywyQkFBMkI7QUFDM0I7O0FBRUE7O0FBRUEseUZBQXlGO0FBQ3pGLHdGQUF3RjtBQUN4RixrRkFBa0Y7QUFDbEYsdUJBQXVCOztBQUV2QiwyR0FBMkc7QUFDM0csc0RBQXNEO0FBQ3RELDBGQUEwRjtBQUMxRiwwRkFBMEY7QUFDMUYsa0RBQWtEO0FBQ2xELHVCQUF1Qjs7QUFFdkIscUhBQXFIO0FBQ3JILHNEQUFzRDtBQUN0RCwwRkFBMEY7QUFDMUYsMEZBQTBGO0FBQzFGLDhEQUE4RDtBQUM5RCx1QkFBdUI7O0FBRXZCLCtFQUErRTtBQUMvRSxzREFBc0Q7QUFDdEQsNkVBQTZFO0FBQzdFLHNFQUFzRTtBQUN0RSx1QkFBdUI7O0FBRXZCLHVLQUF1SztBQUN2SyxpRUFBaUU7QUFDakUsbUdBQW1HO0FBQ25HLHVHQUF1RztBQUN2RyxtR0FBbUc7QUFDbkcsdUZBQXVGO0FBQ3ZGLDJGQUEyRjtBQUMzRixxRUFBcUU7QUFDckUsZ0ZBQWdGO0FBQ2hGLHlEQUF5RDtBQUN6RCw0Q0FBNEM7QUFDNUMsdUJBQXVCOztBQUV2Qiw2SUFBNkk7QUFDN0ksK0ZBQStGO0FBQy9GLDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0Usc0RBQXNEO0FBQ3RELHNGQUFzRjtBQUN0RixzRUFBc0U7QUFDdEUsNERBQTREO0FBQzVELHVCQUF1Qjs7QUFFdkI7O0FBRUEsb0pBQW9KO0FBQ3BKO0FBQ0EsaUhBQWlIO0FBQ2pILGtEQUFrRDtBQUNsRCxtR0FBbUc7QUFDbkcsMkZBQTJGO0FBQzNGLG1GQUFtRjtBQUNuRjtBQUNBO0FBQ0Esa0hBQWtIO0FBQ2xILGlIQUFpSDtBQUNqSCx1SEFBdUg7QUFDdkgsbUlBQW1JO0FBQ25JLDJKQUEySjtBQUMzSiwrRkFBK0Y7QUFDL0Y7QUFDQSwyQkFBMkI7QUFDM0I7O0FBRUE7O0FBRUEsa0xBQWtMO0FBQ2xMLHVHQUF1RztBQUN2Ryw0RUFBNEU7QUFDNUUseUdBQXlHO0FBQ3pHLGdLQUFnSztBQUNoSyx1QkFBdUI7O0FBRXZCLFNBQVM7O0FBRVQsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEseUNBQXlDOztBQUV6QztBQUNBLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DOztBQUVBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSwyQ0FBMkM7QUFDM0M7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLHVEQUF1RCxHQUFHO0FBQzFEO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQSxrREFBa0QsR0FBRztBQUNyRDtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQztBQUMvQztBQUNBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQSxtRkFBbUY7QUFDbkYsa0dBQWtHO0FBQ2xHLGtHQUFrRztBQUNsRyxpREFBaUQ7QUFDakQsaURBQWlEO0FBQ2pELHNFQUFzRTtBQUN0RSx1RUFBdUU7QUFDdkUsd0RBQXdEO0FBQ3hELCtFQUErRTtBQUMvRSxtREFBbUQ7QUFDbkQsMkNBQTJDO0FBQzNDLHVEQUF1RDtBQUN2RCxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBHQUEwRztBQUMxRywwREFBMEQ7QUFDMUQsaUdBQWlHO0FBQ2pHLGlEQUFpRDtBQUNqRCxtQkFBbUI7QUFDbkI7QUFDQSw4REFBOEQ7QUFDOUQsNERBQTREO0FBQzVELHlEQUF5RDtBQUN6RCwrREFBK0Q7QUFDL0QsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0QsNkRBQTZEO0FBQzdELDBEQUEwRDtBQUMxRCxnRUFBZ0U7QUFDaEUsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHVEQUF1RDtBQUN2RCw2REFBNkQ7QUFDN0QsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekUsdUVBQXVFO0FBQ3ZFLG9FQUFvRTtBQUNwRSwwRUFBMEU7QUFDMUUsd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0QsNkRBQTZEO0FBQzdELDBEQUEwRDtBQUMxRCxnRUFBZ0U7QUFDaEUsOERBQThEO0FBQzlEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQzs7QUFFMUM7QUFDQSx3REFBd0QsU0FBUyxPQUFPO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCxhQUFhO0FBQ2IsNEVBQTRFO0FBQzVFO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxtRUFBbUU7QUFDbkUsc0VBQXNFO0FBQ3RFLHNCQUFzQjtBQUN0QjtBQUNBLHlFQUF5RTtBQUN6RSxtRUFBbUU7QUFDbkUsa0ZBQWtGO0FBQ2xGLHlGQUF5RjtBQUN6Rix5REFBeUQ7QUFDekQsd0ZBQXdGO0FBQ3hGLGlFQUFpRTtBQUNqRSxzQkFBc0I7O0FBRXRCLHdEQUF3RCxTQUFTLE9BQU87QUFDeEU7QUFDQSxvRUFBb0U7QUFDcEUsK0RBQStEO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7O0FBRXBDO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7O0FBRS9CO0FBQ0Esa0NBQWtDO0FBQ2xDLHFDQUFxQztBQUNyQyx1QkFBdUIsNkNBQTZDO0FBQ3BFLHdEQUF3RDtBQUN4RCwySUFBMkk7QUFDM0ksdUJBQXVCO0FBQ3ZCO0FBQ0EscUNBQXFDLFNBQVMsRUFBRTtBQUNoRDtBQUNBLHNEQUFzRDtBQUN0RCxtRUFBbUU7QUFDbkUsa0NBQWtDO0FBQ2xDLHlCQUF5QjtBQUN6QjtBQUNBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBLHVEQUF1RDtBQUN2RCwwQ0FBMEM7QUFDMUMsZ0NBQWdDO0FBQ2hDLDZCQUE2QjtBQUM3QixtQkFBbUI7QUFDbkI7O0FBRUEsb0NBQW9DOztBQUVwQztBQUNBLHNEQUFzRDtBQUN0RCxLQUFLO0FBQ0wsMERBQTBEO0FBQzFEOztBQUVBO0FBQ0Esc0RBQXNEO0FBQ3RELEtBQUs7QUFDTCx3REFBd0Q7QUFDeEQsS0FBSztBQUNMLDBEQUEwRDtBQUMxRDs7QUFFQTtBQUNBLDZDQUE2QztBQUM3Qzs7QUFFQTtBQUNBLHdEQUF3RCxHQUFHO0FBQzNELEtBQUs7QUFDTCw0REFBNEQ7QUFDNUQ7O0FBRUE7QUFDQSxtREFBbUQ7QUFDbkQsS0FBSztBQUNMLHNEQUFzRDtBQUN0RDs7QUFFQTtBQUNBLDJEQUEyRDtBQUMzRCxLQUFLO0FBQ0wsb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0Esd0RBQXdEO0FBQ3hELEtBQUs7QUFDTCx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQSxvREFBb0Q7QUFDcEQsS0FBSztBQUNMLHVDQUF1QztBQUN2Qzs7QUFFQTtBQUNBLHNEQUFzRDtBQUN0RCxLQUFLO0FBQ0wsd0NBQXdDO0FBQ3hDOztBQUVBO0FBQ0Esd0RBQXdEO0FBQ3hELEtBQUs7QUFDTCx5Q0FBeUM7QUFDekM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFLFNBQVM7QUFDVCxtREFBbUQ7QUFDbkQ7QUFDQSw4RUFBOEU7QUFDOUUsa0hBQWtIO0FBQ2xILG1EQUFtRDtBQUNuRDs7QUFFQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFLFNBQVM7QUFDVCxtREFBbUQ7QUFDbkQ7QUFDQSwwRUFBMEU7QUFDMUUsa0hBQWtIO0FBQ2xILG1EQUFtRDtBQUNuRCwwQ0FBMEM7QUFDMUM7O0FBRUE7QUFDQTtBQUNBLDBFQUEwRTtBQUMxRSxTQUFTO0FBQ1QsbURBQW1EO0FBQ25EO0FBQ0EsOEVBQThFO0FBQzlFLHdIQUF3SDtBQUN4SCxxREFBcUQ7QUFDckQsNENBQTRDO0FBQzVDOztBQUVBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekUsU0FBUztBQUNULG1EQUFtRDtBQUNuRDtBQUNBLDRFQUE0RTtBQUM1RSxxSEFBcUg7QUFDckgsb0RBQW9EO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEUsU0FBUztBQUNULG1EQUFtRDtBQUNuRDtBQUNBLCtEQUErRDtBQUMvRDs7QUFFQTtBQUNBO0FBQ0EsMEVBQTBFO0FBQzFFLFNBQVM7QUFDVCxtREFBbUQ7QUFDbkQ7QUFDQSx1RUFBdUU7QUFDdkU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyRUFBMkU7QUFDM0UsYUFBYTtBQUNiLHVEQUF1RDtBQUN2RDtBQUNBLGlIQUFpSDtBQUNqSCxTQUFTO0FBQ1QsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQSw2RUFBNkU7QUFDN0UsYUFBYTtBQUNiLHVEQUF1RDtBQUN2RDtBQUNBLDJFQUEyRTtBQUMzRTs7QUFFQTtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FLGFBQWE7QUFDYix1REFBdUQ7QUFDdkQ7QUFDQSw2RUFBNkU7QUFDN0U7O0FBRUE7QUFDQTtBQUNBLCtGQUErRjtBQUMvRixhQUFhO0FBQ2IsdURBQXVEO0FBQ3ZEO0FBQ0Esc0dBQXNHLEdBQUc7QUFDekcsbURBQW1EO0FBQ25ELG1EQUFtRDtBQUNuRDs7QUFFQTtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFLGFBQWE7QUFDYix1REFBdUQ7QUFDdkQ7QUFDQSx5RUFBeUU7QUFDekU7O0FBRUE7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RSxhQUFhO0FBQ2IsdURBQXVEO0FBQ3ZEO0FBQ0EsMkVBQTJFO0FBQzNFOztBQUVBO0FBQ0E7QUFDQSxzRkFBc0Y7QUFDdEYsYUFBYTtBQUNiLHVEQUF1RDtBQUN2RDtBQUNBLDZGQUE2RjtBQUM3RixrREFBa0Q7QUFDbEQsbURBQW1EO0FBQ25EOztBQUVBLDhEQUE4RDs7QUFFOUQ7QUFDQSxvSkFBb0o7QUFDcEosOEdBQThHO0FBQzlHO0FBQ0E7QUFDQSx3SkFBd0o7QUFDeEosNkdBQTZHO0FBQzdHO0FBQ0E7QUFDQSw0SUFBNEk7QUFDNUkscUdBQXFHO0FBQ3JHO0FBQ0E7QUFDQSx3SkFBd0o7QUFDeEosa0hBQWtIO0FBQ2xIOztBQUVBLGdHQUFnRyxHQUFHO0FBQ25HLDZCQUE2QixHQUFHO0FBQ2hDLG1CQUFtQjs7QUFFbkI7O0FBRUEsdUNBQXVDO0FBQ3ZDLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUMsdUdBQXVHO0FBQ3ZHLDhDQUE4Qzs7QUFFOUM7QUFDQSxnRUFBZ0U7QUFDaEUsNERBQTREO0FBQzVELHFFQUFxRTtBQUNyRTs7QUFFQTtBQUNBLDBHQUEwRyxHQUFHO0FBQzdHLDJGQUEyRjtBQUMzRix3RkFBd0Y7QUFDeEYsNERBQTREO0FBQzVEOztBQUVBO0FBQ0EsZ0ZBQWdGO0FBQ2hGLGdIQUFnSDtBQUNoSCwrRUFBK0U7QUFDL0UseUdBQXlHO0FBQ3pHOztBQUVBLHlEQUF5RDtBQUN6RDtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBLHNEQUFzRDtBQUN0RCxzREFBc0Q7O0FBRXREOztBQUVBO0FBQ0EsbUZBQW1GO0FBQ25GOztBQUVBO0FBQ0EsaUZBQWlGO0FBQ2pGOztBQUVBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBLG9GQUFvRjtBQUNwRixvRkFBb0Y7QUFDcEY7QUFDQSxrREFBa0Q7QUFDbEQscUNBQXFDO0FBQ3JDLGlEQUFpRDtBQUNqRCw0Q0FBNEM7QUFDNUMsbUNBQW1DO0FBQ25DLGlDQUFpQztBQUNqQyw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQSx3REFBd0QsU0FBUzs7QUFFakU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkUsYUFBYTtBQUNiLHNGQUFzRjtBQUN0RiwrRUFBK0U7QUFDL0UsNkRBQTZEO0FBQzdELGFBQWE7QUFDYiw2RkFBNkYsR0FBRztBQUNoRzs7QUFFQTs7QUFFQTtBQUNBLDJIQUEySDtBQUMzSCxtR0FBbUc7QUFDbkcsa0dBQWtHO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUNBQXVDOztBQUV2QywyRUFBMkU7QUFDM0UsK0RBQStEO0FBQy9ELDBDQUEwQyxRQUFRLE9BQU87QUFDekQsNENBQTRDLFFBQVEsT0FBTztBQUMzRCx5SUFBeUk7QUFDekksbUVBQW1FO0FBQ25FLGtEQUFrRDtBQUNsRCxpQ0FBaUM7QUFDakMsNkJBQTZCO0FBQzdCLDJCQUEyQjs7QUFFM0IsZ0RBQWdEOztBQUVoRCxvR0FBb0csR0FBRztBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsMkhBQTJIO0FBQzNIO0FBQ0Esd0xBQXdMO0FBQ3hMLHVMQUF1TDtBQUN2TCx5TEFBeUw7QUFDekwsc0xBQXNMO0FBQ3RMO0FBQ0EsMkdBQTJHO0FBQzNHO0FBQ0EsYUFBYTtBQUNiLDRGQUE0RixHQUFHO0FBQy9GOztBQUVBLHFEQUFxRDs7QUFFckQ7QUFDQSwwRkFBMEY7QUFDMUY7O0FBRUE7QUFDQSx3RkFBd0Y7QUFDeEY7QUFDQTs7QUFFQTtBQUNBLDZEQUE2RDtBQUM3RDs7QUFFQSxxREFBcUQ7O0FBRXJEOztBQUVBO0FBQ0Esc0xBQXNMOztBQUV0TCxTQUFTO0FBQ1QsMElBQTBJO0FBQzFJOztBQUVBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHNFQUFzRTs7QUFFdEUsb0VBQW9FO0FBQ3BFOztBQUVBLG1FQUFtRTs7QUFFbkU7QUFDQSwwRUFBMEU7QUFDMUU7O0FBRUE7QUFDQSw2RUFBNkU7QUFDN0U7O0FBRUEsZUFBZTs7QUFFZjtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvZHJhdy9EcmF3U2hhZGVyU291cmNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBEcmF3U2hhZGVyU291cmNlID0gZnVuY3Rpb24gKG1lc2gpIHtcbiAgICBpZiAobWVzaC5fbWF0ZXJpYWwuX3N0YXRlLnR5cGUgPT09IFwiTGFtYmVydE1hdGVyaWFsXCIpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXggPSBidWlsZFZlcnRleExhbWJlcnQobWVzaCk7XG4gICAgICAgIHRoaXMuZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50TGFtYmVydChtZXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZlcnRleCA9IGJ1aWxkVmVydGV4RHJhdyhtZXNoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnREcmF3KG1lc2gpO1xuICAgIH1cbn07XG5cbmNvbnN0IFRFWFRVUkVfREVDT0RFX0ZVTkNTID0ge1xuICAgIFwibGluZWFyXCI6IFwibGluZWFyVG9MaW5lYXJcIixcbiAgICBcInNSR0JcIjogXCJzUkdCVG9MaW5lYXJcIixcbiAgICBcImdhbW1hXCI6IFwiZ2FtbWFUb0xpbmVhclwiXG59O1xuXG5mdW5jdGlvbiBnZXRSZWNlaXZlc1NoYWRvdyhtZXNoKSB7XG4gICAgaWYgKCFtZXNoLnJlY2VpdmVzU2hhZG93KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbGlnaHRzID0gbWVzaC5zY2VuZS5fbGlnaHRzU3RhdGUubGlnaHRzO1xuICAgIGlmICghbGlnaHRzIHx8IGxpZ2h0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChsaWdodHNbaV0uY2FzdHNTaGFkb3cpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFzVGV4dHVyZXMobWVzaCkge1xuICAgIGlmICghbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLnV2QnVmKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBtZXNoLl9tYXRlcmlhbDtcbiAgICByZXR1cm4gISEobWF0ZXJpYWwuX2FtYmllbnRNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX29jY2x1c2lvbk1hcCB8fFxuICAgICAgICBtYXRlcmlhbC5fYmFzZUNvbG9yTWFwIHx8XG4gICAgICAgIG1hdGVyaWFsLl9kaWZmdXNlTWFwIHx8XG4gICAgICAgIG1hdGVyaWFsLl9hbHBoYU1hcCB8fFxuICAgICAgICBtYXRlcmlhbC5fc3BlY3VsYXJNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX2dsb3NzaW5lc3NNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX3NwZWN1bGFyR2xvc3NpbmVzc01hcCB8fFxuICAgICAgICBtYXRlcmlhbC5fZW1pc3NpdmVNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX21ldGFsbGljTWFwIHx8XG4gICAgICAgIG1hdGVyaWFsLl9yb3VnaG5lc3NNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX21ldGFsbGljUm91Z2huZXNzTWFwIHx8XG4gICAgICAgIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAgfHxcbiAgICAgICAgbWF0ZXJpYWwuX25vcm1hbE1hcCk7XG59XG5cbmZ1bmN0aW9uIGhhc05vcm1hbHMobWVzaCkge1xuICAgIGNvbnN0IHByaW1pdGl2ZSA9IG1lc2guX2dlb21ldHJ5Ll9zdGF0ZS5wcmltaXRpdmVOYW1lO1xuICAgIGlmICgobWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmF1dG9WZXJ0ZXhOb3JtYWxzIHx8IG1lc2guX2dlb21ldHJ5Ll9zdGF0ZS5ub3JtYWxzQnVmKSAmJiAocHJpbWl0aXZlID09PSBcInRyaWFuZ2xlc1wiIHx8IHByaW1pdGl2ZSA9PT0gXCJ0cmlhbmdsZS1zdHJpcFwiIHx8IHByaW1pdGl2ZSA9PT0gXCJ0cmlhbmdsZS1mYW5cIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYnVpbGRWZXJ0ZXhMYW1iZXJ0KG1lc2gpIHtcblxuICAgIGNvbnN0IHNjZW5lID0gbWVzaC5zY2VuZTtcbiAgICBjb25zdCBzZWN0aW9uUGxhbmVzU3RhdGUgPSBtZXNoLnNjZW5lLl9zZWN0aW9uUGxhbmVzU3RhdGU7XG4gICAgY29uc3QgbGlnaHRzU3RhdGUgPSBtZXNoLnNjZW5lLl9saWdodHNTdGF0ZTtcbiAgICBjb25zdCBnZW9tZXRyeVN0YXRlID0gbWVzaC5fZ2VvbWV0cnkuX3N0YXRlO1xuICAgIGNvbnN0IGJpbGxib2FyZCA9IG1lc2guX3N0YXRlLmJpbGxib2FyZDtcbiAgICBjb25zdCBzdGF0aW9uYXJ5ID0gbWVzaC5fc3RhdGUuc3RhdGlvbmFyeTtcbiAgICBjb25zdCBjbGlwcGluZyA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgcXVhbnRpemVkR2VvbWV0cnkgPSAhIWdlb21ldHJ5U3RhdGUuY29tcHJlc3NHZW9tZXRyeTtcblxuICAgIGNvbnN0IHNyYyA9IFtdO1xuICAgIHNyYy5wdXNoKFwiLy8gTGFtYmVydGlhbiBkcmF3aW5nIHZlcnRleCBzaGFkZXJcIik7XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVwiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHByb2pNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0IGNvbG9yaXplO1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBvZmZzZXQ7XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBwb3NpdGlvbnNEZWNvZGVNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcIik7XG4gICAgfVxuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2V29ybGRQb3NpdGlvbjtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0IGxpZ2h0QW1iaWVudDtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzQgbWF0ZXJpYWxDb2xvcjtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgbWF0ZXJpYWxFbWlzc2l2ZTtcIik7XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUubm9ybWFsc0J1Zikge1xuICAgICAgICBzcmMucHVzaChcImF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG1vZGVsTm9ybWFsTWF0cml4O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgdmlld05vcm1hbE1hdHJpeDtcIik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaWdodHNTdGF0ZS5saWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0ID0gbGlnaHRzU3RhdGUubGlnaHRzW2ldO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiYW1iaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjNCBsaWdodENvbG9yXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiZGlyXCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodERpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodFBvc1wiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInNwb3RcIikge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0UG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0RGlyXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIG9jdERlY29kZSh2ZWMyIG9jdCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHZlYzMgdiA9IHZlYzMob2N0Lnh5LCAxLjAgLSBhYnMob2N0LngpIC0gYWJzKG9jdC55KSk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgaWYgKHYueiA8IDAuMCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICAgICB2Lnh5ID0gKDEuMCAtIGFicyh2Lnl4KSkgKiB2ZWMyKHYueCA+PSAwLjAgPyAxLjAgOiAtMS4wLCB2LnkgPj0gMC4wID8gMS4wIDogLTEuMCk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgfVwiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHJldHVybiBub3JtYWxpemUodik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZDb2xvcjtcIik7XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUucHJpbWl0aXZlTmFtZSA9PT0gXCJwb2ludHNcIikge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgcG9pbnRTaXplO1wiKTtcbiAgICB9XG4gICAgaWYgKGJpbGxib2FyZCA9PT0gXCJzcGhlcmljYWxcIiB8fCBiaWxsYm9hcmQgPT09IFwiY3lsaW5kcmljYWxcIikge1xuICAgICAgICBzcmMucHVzaChcInZvaWQgYmlsbGJvYXJkKGlub3V0IG1hdDQgbWF0KSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFswXVswXSA9IDEuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzBdWzFdID0gMC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMF1bMl0gPSAwLjA7XCIpO1xuICAgICAgICBpZiAoYmlsbGJvYXJkID09PSBcInNwaGVyaWNhbFwiKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVswXSA9IDAuMDtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVsxXSA9IDEuMDtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVsyXSA9IDAuMDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMl1bMF0gPSAwLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsyXVsxXSA9IDAuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzJdWzJdID0xLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IGxvY2FsUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAxLjApOyBcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IHdvcmxkUG9zaXRpb247XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcImxvY2FsUG9zaXRpb24gPSBwb3NpdGlvbnNEZWNvZGVNYXRyaXggKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUubm9ybWFsc0J1Zikge1xuICAgICAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbE5vcm1hbCA9IHZlYzQob2N0RGVjb2RlKG5vcm1hbC54eSksIDAuMCk7IFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbE5vcm1hbCA9IHZlYzQobm9ybWFsLCAwLjApOyBcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJtYXQ0IG1vZGVsTm9ybWFsTWF0cml4MiA9IG1vZGVsTm9ybWFsTWF0cml4O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJtYXQ0IHZpZXdOb3JtYWxNYXRyaXgyID0gdmlld05vcm1hbE1hdHJpeDtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwibWF0NCB2aWV3TWF0cml4MiA9IHZpZXdNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwibWF0NCBtb2RlbE1hdHJpeDIgPSBtb2RlbE1hdHJpeDtcIik7XG4gICAgaWYgKHN0YXRpb25hcnkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2aWV3TWF0cml4MlszXVswXSA9IHZpZXdNYXRyaXgyWzNdWzFdID0gdmlld01hdHJpeDJbM11bMl0gPSAwLjA7XCIpXG4gICAgfVxuICAgIGlmIChiaWxsYm9hcmQgPT09IFwic3BoZXJpY2FsXCIgfHwgYmlsbGJvYXJkID09PSBcImN5bGluZHJpY2FsXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJtYXQ0IG1vZGVsVmlld01hdHJpeCA9IHZpZXdNYXRyaXgyICogbW9kZWxNYXRyaXgyO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQobW9kZWxNYXRyaXgyKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKHZpZXdNYXRyaXgyKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsVmlld01hdHJpeCk7XCIpO1xuICAgICAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5ub3JtYWxzQnVmKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1hdDQgbW9kZWxWaWV3Tm9ybWFsTWF0cml4ID0gIHZpZXdOb3JtYWxNYXRyaXgyICogbW9kZWxOb3JtYWxNYXRyaXgyO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsTm9ybWFsTWF0cml4Mik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQodmlld05vcm1hbE1hdHJpeDIpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsVmlld05vcm1hbE1hdHJpeCk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4MiAqIGxvY2FsUG9zaXRpb247XCIpO1xuICAgICAgICBzcmMucHVzaChcIndvcmxkUG9zaXRpb24ueHl6ID0gd29ybGRQb3NpdGlvbi54eXogKyBvZmZzZXQ7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZlYzQgdmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXgyICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbi54eXogPSB3b3JsZFBvc2l0aW9uLnh5eiArIG9mZnNldDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCB2aWV3UG9zaXRpb24gID0gdmlld01hdHJpeDIgKiB3b3JsZFBvc2l0aW9uOyBcIik7XG4gICAgfVxuICAgIGlmIChnZW9tZXRyeVN0YXRlLm5vcm1hbHNCdWYpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHZpZXdOb3JtYWwgPSBub3JtYWxpemUoKHZpZXdOb3JtYWxNYXRyaXgyICogbW9kZWxOb3JtYWxNYXRyaXgyICogbG9jYWxOb3JtYWwpLnh5eik7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZlYzMgcmVmbGVjdGVkQ29sb3IgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1wiKTtcbiAgICBzcmMucHVzaChcInZlYzMgdmlld0xpZ2h0RGlyID0gdmVjMygwLjAsIDAuMCwgLTEuMCk7XCIpO1xuICAgIHNyYy5wdXNoKFwiZmxvYXQgbGFtYmVydGlhbiA9IDEuMDtcIik7XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUubm9ybWFsc0J1Zikge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaWdodCA9IGxpZ2h0c1N0YXRlLmxpZ2h0c1tpXTtcbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcImFtYmllbnRcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiZGlyXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobGlnaHQuc3BhY2UgPT09IFwidmlld1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidmlld0xpZ2h0RGlyID0gbm9ybWFsaXplKGxpZ2h0RGlyXCIgKyBpICsgXCIpO1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZSgodmlld01hdHJpeDIgKiB2ZWM0KGxpZ2h0RGlyXCIgKyBpICsgXCIsIDAuMCkpLnh5eik7XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlnaHQudHlwZSA9PT0gXCJwb2ludFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0LnNwYWNlID09PSBcInZpZXdcIikge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IC1ub3JtYWxpemUobGlnaHRQb3NcIiArIGkgKyBcIiAtIHZpZXdQb3NpdGlvbi54eXopO1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IC1ub3JtYWxpemUoKHZpZXdNYXRyaXgyICogdmVjNChsaWdodFBvc1wiICsgaSArIFwiLCAwLjApKS54eXopO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT09IFwic3BvdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0LnNwYWNlID09PSBcInZpZXdcIikge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZShsaWdodERpclwiICsgaSArIFwiKTtcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2aWV3TGlnaHREaXIgPSBub3JtYWxpemUoKHZpZXdNYXRyaXgyICogdmVjNChsaWdodERpclwiICsgaSArIFwiLCAwLjApKS54eXopO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3JjLnB1c2goXCJsYW1iZXJ0aWFuID0gbWF4KGRvdCgtdmlld05vcm1hbCwgdmlld0xpZ2h0RGlyKSwgMC4wKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInJlZmxlY3RlZENvbG9yICs9IGxhbWJlcnRpYW4gKiAobGlnaHRDb2xvclwiICsgaSArIFwiLnJnYiAqIGxpZ2h0Q29sb3JcIiArIGkgKyBcIi5hKTtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9zcmMucHVzaChcInZDb2xvciA9IHZlYzQoKHJlZmxlY3RlZENvbG9yICogbWF0ZXJpYWxDb2xvcikgKyAobGlnaHRBbWJpZW50LnJnYiAqIGxpZ2h0QW1iaWVudC5hKSwgMS4wKSAqIGNvbG9yaXplO1wiKTtcbiAgICBzcmMucHVzaChcInZDb2xvciA9IHZlYzQoKGxpZ2h0QW1iaWVudC5yZ2IgKiBsaWdodEFtYmllbnQuYSAqIG1hdGVyaWFsQ29sb3IucmdiKSArIG1hdGVyaWFsRW1pc3NpdmUucmdiICsgKHJlZmxlY3RlZENvbG9yICogbWF0ZXJpYWxDb2xvci5yZ2IpLCBtYXRlcmlhbENvbG9yLmEpICogY29sb3JpemU7XCIpOyAvLyBUT0RPOiBIb3cgdG8gaGF2ZSBhbWJpZW50IGJyaWdodCBlbm91Z2ggZm9yIGNhbnZhcyBCRyBidXQgbm90IHRvbyBicmlnaHQgZm9yIHNjZW5lP1xuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcInZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbjtcIik7XG4gICAgfVxuICAgIGlmIChnZW9tZXRyeVN0YXRlLnByaW1pdGl2ZU5hbWUgPT09IFwicG9pbnRzXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJnbF9Qb2ludFNpemUgPSBwb2ludFNpemU7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZlYzQgY2xpcFBvcyA9IHByb2pNYXRyaXggKiB2aWV3UG9zaXRpb247XCIpO1xuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCkge1xuICAgICAgICBzcmMucHVzaChcInZGcmFnRGVwdGggPSAxLjAgKyBjbGlwUG9zLnc7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcImdsX1Bvc2l0aW9uID0gY2xpcFBvcztcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnRMYW1iZXJ0KG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lc1N0YXRlID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZTtcbiAgICBjb25zdCBtYXRlcmlhbFN0YXRlID0gbWVzaC5fbWF0ZXJpYWwuX3N0YXRlO1xuICAgIGNvbnN0IGdlb21ldHJ5U3RhdGUgPSBtZXNoLl9nZW9tZXRyeS5fc3RhdGU7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBzZWN0aW9uUGxhbmVzU3RhdGUuc2VjdGlvblBsYW5lcy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IHNvbGlkID0gZmFsc2UgJiYgbWF0ZXJpYWxTdGF0ZS5iYWNrZmFjZXM7XG4gICAgY29uc3QgZ2FtbWFPdXRwdXQgPSBzY2VuZS5nYW1tYU91dHB1dDsgLy8gSWYgc2V0LCB0aGVuIGl0IGV4cGVjdHMgdGhhdCBhbGwgdGV4dHVyZXMgYW5kIGNvbG9ycyBuZWVkIHRvIGJlIG91dHB1dHRlZCBpbiBwcmVtdWx0aXBsaWVkIGdhbW1hLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgIGNvbnN0IHNyYyA9IFtdO1xuICAgIHNyYy5wdXNoKFwiLy8gTGFtYmVydGlhbiBkcmF3aW5nIGZyYWdtZW50IHNoYWRlclwiKTtcbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCIjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoIDogZW5hYmxlXCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcIiNpZmRlZiBHTF9GUkFHTUVOVF9QUkVDSVNJT05fSElHSFwiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gaGlnaHAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbHNlXCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbmRpZlwiKTtcbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcIik7XG4gICAgfVxuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2V29ybGRQb3NpdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBib29sIGNsaXBwYWJsZTtcIik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzZWN0aW9uUGxhbmVzU3RhdGUuc2VjdGlvblBsYW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGJvb2wgc2VjdGlvblBsYW5lQWN0aXZlXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lRGlyXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZDb2xvcjtcIik7XG4gICAgaWYgKGdhbW1hT3V0cHV0KSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBnYW1tYUZhY3RvcjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgIHZlYzQgbGluZWFyVG9HYW1tYSggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgICByZXR1cm4gdmVjNCggcG93KCB2YWx1ZS54eXosIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUudyApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZvaWQgbWFpbih2b2lkKSB7XCIpO1xuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcImlmIChjbGlwcGFibGUpIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICBmbG9hdCBkaXN0ID0gMC4wO1wiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImlmIChzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZGlzdCArPSBjbGFtcChkb3QoLXNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiLnh5eiwgdldvcmxkUG9zaXRpb24ueHl6IC0gc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCIueHl6KSwgMC4wLCAxMDAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgaWYgKGRpc3QgPiAwLjApIHsgZGlzY2FyZDsgfVwiKTtcbiAgICAgICAgaWYgKHNvbGlkKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgaWYgKGdsX0Zyb250RmFjaW5nID09IGZhbHNlKSB7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgICAgcmV0dXJuO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICB9XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICB9XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUucHJpbWl0aXZlTmFtZSA9PT0gXCJwb2ludHNcIikge1xuICAgICAgICBzcmMucHVzaChcInZlYzIgY3h5ID0gMi4wICogZ2xfUG9pbnRDb29yZCAtIDEuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgciA9IGRvdChjeHksIGN4eSk7XCIpO1xuICAgICAgICBzcmMucHVzaChcImlmIChyID4gMS4wKSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIGRpc2NhcmQ7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICB9XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0RlcHRoRVhUID0gbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcIik7XG4gICAgfVxuICAgIGlmIChnYW1tYU91dHB1dCkge1xuICAgICAgICBzcmMucHVzaChcImdsX0ZyYWdDb2xvciA9IGxpbmVhclRvR2FtbWEodkNvbG9yLCBnYW1tYUZhY3Rvcik7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0NvbG9yID0gdkNvbG9yO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVmVydGV4RHJhdyhtZXNoKSB7XG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IG1hdGVyaWFsID0gbWVzaC5fbWF0ZXJpYWw7XG4gICAgY29uc3QgbWVzaFN0YXRlID0gbWVzaC5fc3RhdGU7XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lc1N0YXRlID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZTtcbiAgICBjb25zdCBnZW9tZXRyeVN0YXRlID0gbWVzaC5fZ2VvbWV0cnkuX3N0YXRlO1xuICAgIGNvbnN0IGxpZ2h0c1N0YXRlID0gc2NlbmUuX2xpZ2h0c1N0YXRlO1xuICAgIGxldCBpO1xuICAgIGxldCBsZW47XG4gICAgbGV0IGxpZ2h0O1xuICAgIGNvbnN0IGJpbGxib2FyZCA9IG1lc2hTdGF0ZS5iaWxsYm9hcmQ7XG4gICAgY29uc3Qgc3RhdGlvbmFyeSA9IG1lc2hTdGF0ZS5zdGF0aW9uYXJ5O1xuICAgIGNvbnN0IHRleHR1cmluZyA9IGhhc1RleHR1cmVzKG1lc2gpO1xuICAgIGNvbnN0IG5vcm1hbHMgPSBoYXNOb3JtYWxzKG1lc2gpO1xuICAgIGNvbnN0IGNsaXBwaW5nID0gc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCByZWNlaXZlc1NoYWRvdyA9IGdldFJlY2VpdmVzU2hhZG93KG1lc2gpO1xuICAgIGNvbnN0IHF1YW50aXplZEdlb21ldHJ5ID0gISFnZW9tZXRyeVN0YXRlLmNvbXByZXNzR2VvbWV0cnk7XG4gICAgY29uc3Qgc3JjID0gW107XG4gICAgc3JjLnB1c2goXCIvLyBEcmF3aW5nIHZlcnRleCBzaGFkZXJcIik7XG4gICAgaWYgKG5vcm1hbHMgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcCkge1xuICAgICAgICBzcmMucHVzaChcIiNleHRlbnNpb24gR0xfT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzIDogZW5hYmxlXCIpO1xuICAgIH1cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCIjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoIDogZW5hYmxlXCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcImF0dHJpYnV0ZSAgdmVjMyBwb3NpdGlvbjtcIik7XG4gICAgaWYgKHF1YW50aXplZEdlb21ldHJ5KSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHBvc2l0aW9uc0RlY29kZU1hdHJpeDtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidW5pZm9ybSAgbWF0NCBtb2RlbE1hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtICBtYXQ0IHZpZXdNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSAgbWF0NCBwcm9qTWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInZhcnlpbmcgIHZlYzMgdlZpZXdQb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtICB2ZWMzIG9mZnNldDtcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XCIpO1xuICAgIH1cbiAgICBpZiAobGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nICAgIHZlYzMgdldvcmxkTm9ybWFsO1wiKTtcbiAgICB9XG4gICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgc3JjLnB1c2goXCJhdHRyaWJ1dGUgIHZlYzMgbm9ybWFsO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtICAgIG1hdDQgbW9kZWxOb3JtYWxNYXRyaXg7XCIpO1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gICAgbWF0NCB2aWV3Tm9ybWFsTWF0cml4O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nICAgIHZlYzMgdlZpZXdOb3JtYWw7XCIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBsaWdodCA9IGxpZ2h0c1N0YXRlLmxpZ2h0c1tpXTtcbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcImFtYmllbnRcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiZGlyXCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodERpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodFBvc1wiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInNwb3RcIikge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0UG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0RGlyXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEobGlnaHQudHlwZSA9PT0gXCJkaXJcIiAmJiBsaWdodC5zcGFjZSA9PT0gXCJ2aWV3XCIpKSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzQgdlZpZXdMaWdodFJldmVyc2VEaXJBbmREaXN0XCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIG9jdERlY29kZSh2ZWMyIG9jdCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHZlYzMgdiA9IHZlYzMob2N0Lnh5LCAxLjAgLSBhYnMob2N0LngpIC0gYWJzKG9jdC55KSk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgaWYgKHYueiA8IDAuMCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICAgICB2Lnh5ID0gKDEuMCAtIGFicyh2Lnl4KSkgKiB2ZWMyKHYueCA+PSAwLjAgPyAxLjAgOiAtMS4wLCB2LnkgPj0gMC4wID8gMS4wIDogLTEuMCk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgfVwiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHJldHVybiBub3JtYWxpemUodik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0ZXh0dXJpbmcpIHtcbiAgICAgICAgc3JjLnB1c2goXCJhdHRyaWJ1dGUgdmVjMiB1djtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWMyIHZVVjtcIik7XG4gICAgICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDMgdXZEZWNvZGVNYXRyaXg7XCIpXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUuY29sb3JzKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiYXR0cmlidXRlIHZlYzQgY29sb3I7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2Q29sb3I7XCIpO1xuICAgIH1cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5wcmltaXRpdmVOYW1lID09PSBcInBvaW50c1wiKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBwb2ludFNpemU7XCIpO1xuICAgIH1cbiAgICBpZiAoYmlsbGJvYXJkID09PSBcInNwaGVyaWNhbFwiIHx8IGJpbGxib2FyZCA9PT0gXCJjeWxpbmRyaWNhbFwiKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidm9pZCBiaWxsYm9hcmQoaW5vdXQgbWF0NCBtYXQpIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzBdWzBdID0gMS4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMF1bMV0gPSAwLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFswXVsyXSA9IDAuMDtcIik7XG4gICAgICAgIGlmIChiaWxsYm9hcmQgPT09IFwic3BoZXJpY2FsXCIpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzFdWzBdID0gMC4wO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzFdWzFdID0gMS4wO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzFdWzJdID0gMC4wO1wiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsyXVswXSA9IDAuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzJdWzFdID0gMC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMl1bMl0gPTEuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICB9XG4gICAgaWYgKHJlY2VpdmVzU2hhZG93KSB7XG4gICAgICAgIHNyYy5wdXNoKFwiY29uc3QgbWF0NCB0ZXhVbml0Q29udmVydGVyID0gbWF0NCgwLjUsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC41LCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuNSwgMC4wLCAwLjUsIDAuNSwgMC41LCAxLjApO1wiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpZ2h0c1N0YXRlLmxpZ2h0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgeyAvLyBMaWdodCBzb3VyY2VzXG4gICAgICAgICAgICBpZiAobGlnaHRzU3RhdGUubGlnaHRzW2ldLmNhc3RzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgc2hhZG93Vmlld01hdHJpeFwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzaGFkb3dQcm9qTWF0cml4XCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZTaGFkb3dQb3NGcm9tTGlnaHRcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3JjLnB1c2goXCJ2b2lkIG1haW4odm9pZCkge1wiKTtcbiAgICBzcmMucHVzaChcInZlYzQgbG9jYWxQb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEuMCk7IFwiKTtcbiAgICBzcmMucHVzaChcInZlYzQgd29ybGRQb3NpdGlvbjtcIik7XG4gICAgaWYgKHF1YW50aXplZEdlb21ldHJ5KSB7XG4gICAgICAgIHNyYy5wdXNoKFwibG9jYWxQb3NpdGlvbiA9IHBvc2l0aW9uc0RlY29kZU1hdHJpeCAqIGxvY2FsUG9zaXRpb247XCIpO1xuICAgIH1cbiAgICBpZiAobm9ybWFscykge1xuICAgICAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbE5vcm1hbCA9IHZlYzQob2N0RGVjb2RlKG5vcm1hbC54eSksIDAuMCk7IFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbE5vcm1hbCA9IHZlYzQobm9ybWFsLCAwLjApOyBcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJtYXQ0IG1vZGVsTm9ybWFsTWF0cml4MiAgICA9IG1vZGVsTm9ybWFsTWF0cml4O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJtYXQ0IHZpZXdOb3JtYWxNYXRyaXgyICAgICA9IHZpZXdOb3JtYWxNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcIm1hdDQgdmlld01hdHJpeDIgICAgICAgICAgID0gdmlld01hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJtYXQ0IG1vZGVsTWF0cml4MiAgICAgICAgICA9IG1vZGVsTWF0cml4O1wiKTtcbiAgICBpZiAoc3RhdGlvbmFyeSkge1xuICAgICAgICBzcmMucHVzaChcInZpZXdNYXRyaXgyWzNdWzBdID0gdmlld01hdHJpeDJbM11bMV0gPSB2aWV3TWF0cml4MlszXVsyXSA9IDAuMDtcIilcbiAgICB9XG4gICAgaWYgKGJpbGxib2FyZCA9PT0gXCJzcGhlcmljYWxcIiB8fCBiaWxsYm9hcmQgPT09IFwiY3lsaW5kcmljYWxcIikge1xuICAgICAgICBzcmMucHVzaChcIm1hdDQgbW9kZWxWaWV3TWF0cml4ID0gdmlld01hdHJpeDIgKiBtb2RlbE1hdHJpeDI7XCIpO1xuICAgICAgICBzcmMucHVzaChcImJpbGxib2FyZChtb2RlbE1hdHJpeDIpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQodmlld01hdHJpeDIpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQobW9kZWxWaWV3TWF0cml4KTtcIik7XG4gICAgICAgIGlmIChub3JtYWxzKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1hdDQgbW9kZWxWaWV3Tm9ybWFsTWF0cml4ID0gIHZpZXdOb3JtYWxNYXRyaXgyICogbW9kZWxOb3JtYWxNYXRyaXgyO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsTm9ybWFsTWF0cml4Mik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQodmlld05vcm1hbE1hdHJpeDIpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsVmlld05vcm1hbE1hdHJpeCk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4MiAqIGxvY2FsUG9zaXRpb247XCIpO1xuICAgICAgICBzcmMucHVzaChcIndvcmxkUG9zaXRpb24ueHl6ID0gd29ybGRQb3NpdGlvbi54eXogKyBvZmZzZXQ7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZlYzQgdmlld1Bvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXgyICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbi54eXogPSB3b3JsZFBvc2l0aW9uLnh5eiArIG9mZnNldDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCB2aWV3UG9zaXRpb24gID0gdmlld01hdHJpeDIgKiB3b3JsZFBvc2l0aW9uOyBcIik7XG4gICAgfVxuICAgIGlmIChub3JtYWxzKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyB3b3JsZE5vcm1hbCA9IChtb2RlbE5vcm1hbE1hdHJpeDIgKiBsb2NhbE5vcm1hbCkueHl6OyBcIik7XG4gICAgICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2V29ybGROb3JtYWwgPSB3b3JsZE5vcm1hbDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ2Vmlld05vcm1hbCA9IG5vcm1hbGl6ZSgodmlld05vcm1hbE1hdHJpeDIgKiB2ZWM0KHdvcmxkTm9ybWFsLCAxLjApKS54eXopO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHRtcFZlYzM7XCIpO1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IGxpZ2h0RGlzdDtcIik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaWdodHNTdGF0ZS5saWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsgLy8gTGlnaHRzXG4gICAgICAgICAgICBsaWdodCA9IGxpZ2h0c1N0YXRlLmxpZ2h0c1tpXTtcbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcImFtYmllbnRcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiZGlyXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobGlnaHQuc3BhY2UgPT09IFwid29ybGRcIikge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInRtcFZlYzMgPSB2ZWMzKHZpZXdNYXRyaXgyICogdmVjNChsaWdodERpclwiICsgaSArIFwiLCAwLjApICkueHl6O1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2Vmlld0xpZ2h0UmV2ZXJzZURpckFuZERpc3RcIiArIGkgKyBcIiA9IHZlYzQoLXRtcFZlYzMsIDAuMCk7XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobGlnaHQuc3BhY2UgPT09IFwid29ybGRcIikge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInRtcFZlYzMgPSAodmlld01hdHJpeDIgKiB2ZWM0KGxpZ2h0UG9zXCIgKyBpICsgXCIsIDEuMCkpLnh5eiAtIHZpZXdQb3NpdGlvbi54eXo7XCIpO1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcImxpZ2h0RGlzdCA9IGFicyhsZW5ndGgodG1wVmVjMykpO1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInRtcFZlYzMgPSBsaWdodFBvc1wiICsgaSArIFwiLnh5eiAtIHZpZXdQb3NpdGlvbi54eXo7XCIpO1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcImxpZ2h0RGlzdCA9IGFicyhsZW5ndGgodG1wVmVjMykpO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2Vmlld0xpZ2h0UmV2ZXJzZURpckFuZERpc3RcIiArIGkgKyBcIiA9IHZlYzQodG1wVmVjMywgbGlnaHREaXN0KTtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRleHR1cmluZykge1xuICAgICAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidlVWID0gKHV2RGVjb2RlTWF0cml4ICogdmVjMyh1diwgMS4wKSkueHk7XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2VVYgPSB1djtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGdlb21ldHJ5U3RhdGUuY29sb3JzKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidkNvbG9yID0gY29sb3I7XCIpO1xuICAgIH1cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5wcmltaXRpdmVOYW1lID09PSBcInBvaW50c1wiKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfUG9pbnRTaXplID0gcG9pbnRTaXplO1wiKTtcbiAgICB9XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCIgICB2Vmlld1Bvc2l0aW9uID0gdmlld1Bvc2l0aW9uLnh5ejtcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IGNsaXBQb3MgPSBwcm9qTWF0cml4ICogdmlld1Bvc2l0aW9uO1wiKTtcbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2RnJhZ0RlcHRoID0gMS4wICsgY2xpcFBvcy53O1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJnbF9Qb3NpdGlvbiA9IGNsaXBQb3M7XCIpO1xuICAgIGlmIChyZWNlaXZlc1NoYWRvdykge1xuICAgICAgICBzcmMucHVzaChcImNvbnN0IG1hdDQgdGV4VW5pdENvbnZlcnRlciA9IG1hdDQoMC41LCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuNSwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjUsIDAuMCwgMC41LCAwLjUsIDAuNSwgMS4wKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCB0ZW1weDsgXCIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7IC8vIExpZ2h0IHNvdXJjZXNcbiAgICAgICAgICAgIGlmIChsaWdodHNTdGF0ZS5saWdodHNbaV0uY2FzdHNTaGFkb3cpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInZTaGFkb3dQb3NGcm9tTGlnaHRcIiArIGkgKyBcIiA9IHRleFVuaXRDb252ZXJ0ZXIgKiBzaGFkb3dQcm9qTWF0cml4XCIgKyBpICsgXCIgKiAoc2hhZG93Vmlld01hdHJpeFwiICsgaSArIFwiICogd29ybGRQb3NpdGlvbik7IFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzcmMucHVzaChcIn1cIik7XG4gICAgcmV0dXJuIHNyYztcbn1cblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudERyYXcobWVzaCkge1xuXG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IGdsID0gc2NlbmUuY2FudmFzLmdsO1xuICAgIGNvbnN0IG1hdGVyaWFsID0gbWVzaC5fbWF0ZXJpYWw7XG4gICAgY29uc3QgZ2VvbWV0cnlTdGF0ZSA9IG1lc2guX2dlb21ldHJ5Ll9zdGF0ZTtcbiAgICBjb25zdCBzZWN0aW9uUGxhbmVzU3RhdGUgPSBtZXNoLnNjZW5lLl9zZWN0aW9uUGxhbmVzU3RhdGU7XG4gICAgY29uc3QgbGlnaHRzU3RhdGUgPSBtZXNoLnNjZW5lLl9saWdodHNTdGF0ZTtcbiAgICBjb25zdCBtYXRlcmlhbFN0YXRlID0gbWVzaC5fbWF0ZXJpYWwuX3N0YXRlO1xuICAgIGNvbnN0IGNsaXBwaW5nID0gc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBub3JtYWxzID0gaGFzTm9ybWFscyhtZXNoKTtcbiAgICBjb25zdCB1dnMgPSBnZW9tZXRyeVN0YXRlLnV2QnVmO1xuICAgIGNvbnN0IHNvbGlkID0gZmFsc2UgJiYgbWF0ZXJpYWxTdGF0ZS5iYWNrZmFjZXM7XG4gICAgY29uc3QgcGhvbmdNYXRlcmlhbCA9IChtYXRlcmlhbFN0YXRlLnR5cGUgPT09IFwiUGhvbmdNYXRlcmlhbFwiKTtcbiAgICBjb25zdCBtZXRhbGxpY01hdGVyaWFsID0gKG1hdGVyaWFsU3RhdGUudHlwZSA9PT0gXCJNZXRhbGxpY01hdGVyaWFsXCIpO1xuICAgIGNvbnN0IHNwZWN1bGFyTWF0ZXJpYWwgPSAobWF0ZXJpYWxTdGF0ZS50eXBlID09PSBcIlNwZWN1bGFyTWF0ZXJpYWxcIik7XG4gICAgY29uc3QgcmVjZWl2ZXNTaGFkb3cgPSBnZXRSZWNlaXZlc1NoYWRvdyhtZXNoKTtcbiAgICBjb25zdCBnYW1tYUlucHV0ID0gc2NlbmUuZ2FtbWFJbnB1dDsgLy8gSWYgc2V0LCB0aGVuIGl0IGV4cGVjdHMgdGhhdCBhbGwgdGV4dHVyZXMgYW5kIGNvbG9ycyBhcmUgcHJlbXVsdGlwbGllZCBnYW1tYS4gRGVmYXVsdCBpcyBmYWxzZS5cbiAgICBjb25zdCBnYW1tYU91dHB1dCA9IHNjZW5lLmdhbW1hT3V0cHV0OyAvLyBJZiBzZXQsIHRoZW4gaXQgZXhwZWN0cyB0aGF0IGFsbCB0ZXh0dXJlcyBhbmQgY29sb3JzIG5lZWQgdG8gYmUgb3V0cHV0dGVkIGluIHByZW11bHRpcGxpZWQgZ2FtbWEuIERlZmF1bHQgaXMgZmFsc2UuXG5cbiAgICBsZXQgbGlnaHQ7XG4gICAgY29uc3Qgc3JjID0gW107XG5cbiAgICBzcmMucHVzaChcIi8vIERyYXdpbmcgZnJhZ21lbnQgc2hhZGVyXCIpO1xuXG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVwiKTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFscyAmJiBtYXRlcmlhbC5fbm9ybWFsTWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcIik7XG4gICAgfVxuXG4gICAgc3JjLnB1c2goXCIjaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0hcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIGhpZ2hwIGludDtcIik7XG4gICAgc3JjLnB1c2goXCIjZWxzZVwiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1wiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBtZWRpdW1wIGludDtcIik7XG4gICAgc3JjLnB1c2goXCIjZW5kaWZcIik7XG5cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcIik7XG4gICAgfVxuXG4gICAgaWYgKHJlY2VpdmVzU2hhZG93KSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgdW5wYWNrRGVwdGggKHZlYzQgY29sb3IpIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICBjb25zdCB2ZWM0IGJpdFNoaWZ0ID0gdmVjNCgxLjAsIDEuMC8yNTYuMCwgMS4wLygyNTYuMCAqIDI1Ni4wKSwgMS4wLygyNTYuMCoyNTYuMCoyNTYuMCkpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgIHJldHVybiBkb3QoY29sb3IsIGJpdFNoaWZ0KTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gR0FNTUEgQ09SUkVDVElPTlxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBnYW1tYUZhY3RvcjtcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IGxpbmVhclRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1wiKTtcbiAgICBzcmMucHVzaChcIiAgcmV0dXJuIHZhbHVlO1wiKTtcbiAgICBzcmMucHVzaChcIn1cIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcIik7XG4gICAgc3JjLnB1c2goXCIgIHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiICogMC45NDc4NjcyOTg2ICsgdmVjMyggMC4wNTIxMzI3MDE0ICksIHZlYzMoIDIuNCApICksIHZhbHVlLnJnYiAqIDAuMDc3Mzk5MzgwOCwgdmVjMyggbGVzc1RoYW5FcXVhbCggdmFsdWUucmdiLCB2ZWMzKCAwLjA0MDQ1ICkgKSApICksIHZhbHVlLncgKTtcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCBnYW1tYVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwiICByZXR1cm4gdmVjNCggcG93KCB2YWx1ZS54eXosIHZlYzMoIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUudyApO1wiKTtcbiAgICBzcmMucHVzaChcIn1cIik7XG4gICAgaWYgKGdhbW1hT3V0cHV0KSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCBsaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICByZXR1cm4gdmVjNCggcG93KCB2YWx1ZS54eXosIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUudyApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBVU0VSIENMSVAgUExBTkVTXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGJvb2wgY2xpcHBhYmxlO1wiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWN0aW9uUGxhbmVzU3RhdGUuc2VjdGlvblBsYW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGJvb2wgc2VjdGlvblBsYW5lQWN0aXZlXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lRGlyXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbHMpIHtcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIExJR0hUIEFORCBSRUZMRUNUSU9OIE1BUCBJTlBVVFNcbiAgICAgICAgLy8gRGVmaW5lIGhlcmUgc28gYXZhaWxhYmxlIGdsb2JhbGx5IHRvIHNoYWRlciBmdW5jdGlvbnNcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHNhbXBsZXJDdWJlIGxpZ2h0TWFwO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHZpZXdOb3JtYWxNYXRyaXg7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaWdodHNTdGF0ZS5yZWZsZWN0aW9uTWFwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlckN1YmUgcmVmbGVjdGlvbk1hcDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0TWFwcy5sZW5ndGggPiAwIHx8IGxpZ2h0c1N0YXRlLnJlZmxlY3Rpb25NYXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBTSEFESU5HIEZVTkNUSU9OU1xuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgLy8gQ09OU1RBTlQgREVGSU5JVElPTlNcblxuICAgICAgICBzcmMucHVzaChcIiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1OVwiKTtcbiAgICAgICAgc3JjLnB1c2goXCIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFwiKTtcbiAgICAgICAgc3JjLnB1c2goXCIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTRcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiI2RlZmluZSBFUFNJTE9OIDFlLTZcIik7XG5cbiAgICAgICAgc3JjLnB1c2goXCIjZGVmaW5lIHNhdHVyYXRlKGEpIGNsYW1wKCBhLCAwLjAsIDEuMCApXCIpO1xuXG4gICAgICAgIC8vIFVUSUxJVFkgREVGSU5JVElPTlNcblxuICAgICAgICBzcmMucHVzaChcInZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbihpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXgpIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgcmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBkaXIsIDAuMCApICogbWF0cml4ICkueHl6ICk7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgLy8gU1RSVUNUVVJFU1xuXG4gICAgICAgIHNyYy5wdXNoKFwic3RydWN0IEluY2lkZW50TGlnaHQge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIGNvbG9yO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIGRpcmVjdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwifTtcIik7XG5cbiAgICAgICAgc3JjLnB1c2goXCJzdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIGRpZmZ1c2U7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgc3BlY3VsYXI7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn07XCIpO1xuXG4gICAgICAgIHNyYy5wdXNoKFwic3RydWN0IEdlb21ldHJ5IHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyBwb3NpdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyB2aWV3Tm9ybWFsO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIHdvcmxkTm9ybWFsO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIHZpZXdFeWVEaXI7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn07XCIpO1xuXG4gICAgICAgIHNyYy5wdXNoKFwic3RydWN0IE1hdGVyaWFsIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyAgICBkaWZmdXNlQ29sb3I7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0ICAgc3BlY3VsYXJSb3VnaG5lc3M7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgICAgc3BlY3VsYXJDb2xvcjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgICBzaGluZTtcIik7IC8vIE9ubHkgdXNlZCBmb3IgUGhvbmdcbiAgICAgICAgc3JjLnB1c2goXCJ9O1wiKTtcblxuICAgICAgICAvLyBDT01NT04gVVRJTFNcblxuICAgICAgICBpZiAocGhvbmdNYXRlcmlhbCkge1xuXG4gICAgICAgICAgICBpZiAobGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDAgfHwgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2b2lkIGNvbXB1dGVQaG9uZ0xpZ2h0TWFwcGluZyhjb25zdCBpbiBHZW9tZXRyeSBnZW9tZXRyeSwgY29uc3QgaW4gTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0TWFwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyBpcnJhZGlhbmNlID0gXCIgKyBURVhUVVJFX0RFQ09ERV9GVU5DU1tsaWdodHNTdGF0ZS5saWdodE1hcHNbMF0uZW5jb2RpbmddICsgXCIodGV4dHVyZUN1YmUobGlnaHRNYXAsIGdlb21ldHJ5LndvcmxkTm9ybWFsKSkucmdiO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICBpcnJhZGlhbmNlICo9IFBJO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIGRpZmZ1c2VCUkRGQ29udHJpYiA9IChSRUNJUFJPQ0FMX1BJICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yKTtcIik7XG4gICAgICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmVmbGVjdGVkTGlnaHQuZGlmZnVzZSArPSBpcnJhZGlhbmNlICogZGlmZnVzZUJSREZDb250cmliO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLnJlZmxlY3Rpb25NYXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIHJlZmxlY3RWZWMgICAgICAgICAgICAgPSByZWZsZWN0KC1nZW9tZXRyeS52aWV3RXllRGlyLCBnZW9tZXRyeS52aWV3Tm9ybWFsKTtcIik7XG4gICAgICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyByYWRpYW5jZSAgICAgICAgICAgICAgID0gdGV4dHVyZUN1YmUocmVmbGVjdGlvbk1hcCwgcmVmbGVjdFZlYykucmdiICogMC4yO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICByYWRpYW5jZSAqPSBQSTtcIik7XG4gICAgICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmVmbGVjdGVkTGlnaHQuc3BlY3VsYXIgICAgICs9IHJhZGlhbmNlO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcmMucHVzaChcInZvaWQgY29tcHV0ZVBob25nTGlnaHRpbmcoY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cnkgZ2VvbWV0cnksIGNvbnN0IGluIE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgZG90TkwgICAgID0gc2F0dXJhdGUoZG90KGdlb21ldHJ5LnZpZXdOb3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbikpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyBpcnJhZGlhbmNlID0gZG90TkwgKiBkaXJlY3RMaWdodC5jb2xvciAqIFBJO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmVmbGVjdGVkTGlnaHQuZGlmZnVzZSAgKz0gaXJyYWRpYW5jZSAqIChSRUNJUFJPQ0FMX1BJICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHJlZmxlY3RlZExpZ2h0LnNwZWN1bGFyICs9IGRpcmVjdExpZ2h0LmNvbG9yICogbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAqIHBvdyhtYXgoZG90KHJlZmxlY3QoLWRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgLWdlb21ldHJ5LnZpZXdOb3JtYWwpLCBnZW9tZXRyeS52aWV3RXllRGlyKSwgMC4wKSwgbWF0ZXJpYWwuc2hpbmUpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRhbGxpY01hdGVyaWFsIHx8IHNwZWN1bGFyTWF0ZXJpYWwpIHtcblxuICAgICAgICAgICAgLy8gSVJSQURJQU5DRSBFVkFMVUFUSU9OXG5cbiAgICAgICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KGNvbnN0IGluIGZsb2F0IGdneFJvdWdobmVzcykge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgciA9IGdneFJvdWdobmVzcyArIDAuMDAwMTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHJldHVybiAoMi4wIC8gKHIgKiByKSAtIDIuMCk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuXG4gICAgICAgICAgICBzcmMucHVzaChcImZsb2F0IGdldFNwZWN1bGFyTUlQTGV2ZWwoY29uc3QgaW4gZmxvYXQgYmxpbm5TaGluaW5lc3NFeHBvbmVudCwgY29uc3QgaW4gaW50IG1heE1JUExldmVsKSB7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBtYXhNSVBMZXZlbFNjYWxhciA9IGZsb2F0KCBtYXhNSVBMZXZlbCApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgZGVzaXJlZE1JUExldmVsID0gbWF4TUlQTGV2ZWxTY2FsYXIgLSAwLjc5MjQ4IC0gMC41ICogbG9nMiggKCBibGlublNoaW5pbmVzc0V4cG9uZW50ICogYmxpbm5TaGluaW5lc3NFeHBvbmVudCApICsgMS4wICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZXR1cm4gY2xhbXAoIGRlc2lyZWRNSVBMZXZlbCwgMC4wLCBtYXhNSVBMZXZlbFNjYWxhciApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgICAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLnJlZmxlY3Rpb25NYXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoY29uc3QgaW4gdmVjMyByZWZsZWN0VmVjLCBjb25zdCBpbiBmbG9hdCBibGlublNoaW5pbmVzc0V4cG9uZW50LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwpIHtcIik7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBtaXBMZXZlbCA9IDAuNSAqIGdldFNwZWN1bGFyTUlQTGV2ZWwoYmxpbm5TaGluaW5lc3NFeHBvbmVudCwgbWF4TUlQTGV2ZWwpO1wiKTsgLy9UT0RPOiBhIHJhbmRvbSBmYWN0b3IgLSBmaXggdGhpc1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyBlbnZNYXBDb2xvciA9IFwiICsgVEVYVFVSRV9ERUNPREVfRlVOQ1NbbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHNbMF0uZW5jb2RpbmddICsgXCIodGV4dHVyZUN1YmUocmVmbGVjdGlvbk1hcCwgcmVmbGVjdFZlYywgbWlwTGV2ZWwpKS5yZ2I7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICByZXR1cm4gZW52TWFwQ29sb3I7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU1BFQ1VMQVIgQlJERiBFVkFMVUFUSU9OXG5cbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjMyBGX1NjaGxpY2soY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBkb3RMSCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgZnJlc25lbCA9IGV4cDIoICggLTUuNTU0NzMgKiBkb3RMSCAtIDYuOTgzMTYgKSAqIGRvdExIICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZXR1cm4gKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiBmcmVzbmVsICsgc3BlY3VsYXJDb2xvcjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgR19HR1hfU21pdGgoY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROVikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgYTIgPSAoIGFscGhhICogYWxwaGEgKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGdsID0gZG90TkwgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqICggZG90TkwgKiBkb3ROTCApICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBndiA9IGRvdE5WICsgc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiAoIGRvdE5WICogZG90TlYgKSApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmV0dXJuIDEuMCAvICggZ2wgKiBndiApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgICAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBHX0dHWF9TbWl0aENvcnJlbGF0ZWQoY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROVikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgYTIgPSAoIGFscGhhICogYWxwaGEgKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqICggZG90TlYgKiBkb3ROViApICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBnbCA9IGRvdE5WICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiAoIGRvdE5MICogZG90TkwgKSApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmV0dXJuIDAuNSAvIG1heCggZ3YgKyBnbCwgRVBTSUxPTiApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgICAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBEX0dHWChjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkgpIHtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGEyID0gKCBhbHBoYSAqIGFscGhhICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBkZW5vbSA9ICggZG90TkggKiBkb3ROSCkgKiAoIGEyIC0gMS4wICkgKyAxLjA7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gKCBkZW5vbSAqIGRlbm9tKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjMyBCUkRGX1NwZWN1bGFyX0dHWChjb25zdCBpbiBJbmNpZGVudExpZ2h0IGluY2lkZW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJ5IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcykge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgYWxwaGEgPSAoIHJvdWdobmVzcyAqIHJvdWdobmVzcyApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjMyBoYWxmRGlyID0gbm9ybWFsaXplKCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiArIGdlb21ldHJ5LnZpZXdFeWVEaXIgKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkudmlld05vcm1hbCwgaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKSApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS52aWV3Tm9ybWFsLCBnZW9tZXRyeS52aWV3RXllRGlyICkgKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkudmlld05vcm1hbCwgaGFsZkRpciApICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBEID0gRF9HR1goIGFscGhhLCBkb3ROSCApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmV0dXJuIEYgKiAoRyAqIEQpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgICAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KGNvbnN0IGluIEdlb21ldHJ5IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcykge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZmxvYXQgZG90TlYgPSBzYXR1cmF0ZShkb3QoZ2VvbWV0cnkudmlld05vcm1hbCwgZ2VvbWV0cnkudmlld0V5ZURpcikpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgY29uc3QgdmVjNCBjMCA9IHZlYzQoIC0xLCAtMC4wMjc1LCAtMC41NzIsICAwLjAyMik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBjb25zdCB2ZWM0IGMxID0gdmVjNCggIDEsICAwLjA0MjUsICAgMS4wNCwgLTAuMDQpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgdmVjNCByID0gcm91Z2huZXNzICogYzAgKyBjMTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIGZsb2F0IGEwMDQgPSBtaW4oci54ICogci54LCBleHAyKC05LjI4ICogZG90TlYpKSAqIHIueCArIHIueTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzIgQUIgICAgPSB2ZWMyKC0xLjA0LCAxLjA0KSAqIGEwMDQgKyByLnp3O1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBBQi54ICsgQUIueTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCB8fCBsaWdodHNTdGF0ZS5yZWZsZWN0aW9uTWFwcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInZvaWQgY29tcHV0ZVBCUkxpZ2h0TWFwcGluZyhjb25zdCBpbiBHZW9tZXRyeSBnZW9tZXRyeSwgY29uc3QgaW4gTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XCIpO1xuICAgICAgICAgICAgICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgaXJyYWRpYW5jZSA9IHNSR0JUb0xpbmVhcih0ZXh0dXJlQ3ViZShsaWdodE1hcCwgZ2VvbWV0cnkud29ybGROb3JtYWwpKS5yZ2I7XCIpO1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgIGlycmFkaWFuY2UgKj0gUEk7XCIpO1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgZGlmZnVzZUJSREZDb250cmliID0gKFJFQ0lQUk9DQUxfUEkgKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3IpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZWZsZWN0ZWRMaWdodC5kaWZmdXNlICs9IGlycmFkaWFuY2UgKiBkaWZmdXNlQlJERkNvbnRyaWI7XCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyAgIHNyYy5wdXNoKFwiICAgcmVmbGVjdGVkTGlnaHQuZGlmZnVzZSA9IHZlYzMoMS4wLCAwLjAsIDAuMCk7XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgcmVmbGVjdFZlYyAgICAgICAgICAgICA9IHJlZmxlY3QoLWdlb21ldHJ5LnZpZXdFeWVEaXIsIGdlb21ldHJ5LnZpZXdOb3JtYWwpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZWZsZWN0VmVjICAgICAgICAgICAgICAgICAgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKHJlZmxlY3RWZWMsIHZpZXdNYXRyaXgpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBibGlubkV4cEZyb21Sb3VnaG5lc3MgPSBHR1hSb3VnaG5lc3NUb0JsaW5uRXhwb25lbnQobWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIHJhZGlhbmNlICAgICAgICAgICAgICAgPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZShyZWZsZWN0VmVjLCBibGlubkV4cEZyb21Sb3VnaG5lc3MsIDgpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICB2ZWMzIHNwZWN1bGFyQlJERkNvbnRyaWIgICAgPSBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudChnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MpO1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICByZWZsZWN0ZWRMaWdodC5zcGVjdWxhciAgICAgKz0gcmFkaWFuY2UgKiBzcGVjdWxhckJSREZDb250cmliO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNQUlOIExJR0hUSU5HIENPTVBVVEFUSU9OIEZVTkNUSU9OXG5cbiAgICAgICAgICAgIHNyYy5wdXNoKFwidm9pZCBjb21wdXRlUEJSTGlnaHRpbmcoY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyeSBnZW9tZXRyeSwgY29uc3QgaW4gTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBmbG9hdCBkb3ROTCAgICAgPSBzYXR1cmF0ZShkb3QoZ2VvbWV0cnkudmlld05vcm1hbCwgaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24pKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogaW5jaWRlbnRMaWdodC5jb2xvciAqIFBJO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgcmVmbGVjdGVkTGlnaHQuZGlmZnVzZSAgKz0gaXJyYWRpYW5jZSAqIChSRUNJUFJPQ0FMX1BJICogbWF0ZXJpYWwuZGlmZnVzZUNvbG9yKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIHJlZmxlY3RlZExpZ2h0LnNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0dHWChpbmNpZGVudExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgICAgICB9IC8vIChtZXRhbGxpY01hdGVyaWFsIHx8IHNwZWN1bGFyTWF0ZXJpYWwpXG5cbiAgICB9IC8vIGdlb21ldHJ5Lm5vcm1hbHNcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBHRU9NRVRSWSBJTlBVVFNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1wiKTtcblxuICAgIGlmIChnZW9tZXRyeVN0YXRlLmNvbG9ycykge1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2Q29sb3I7XCIpO1xuICAgIH1cblxuICAgIGlmICh1dnMgJiZcbiAgICAgICAgKChub3JtYWxzICYmIG1hdGVyaWFsLl9ub3JtYWxNYXApXG4gICAgICAgICAgICB8fCBtYXRlcmlhbC5fYW1iaWVudE1hcFxuICAgICAgICAgICAgfHwgbWF0ZXJpYWwuX2Jhc2VDb2xvck1hcFxuICAgICAgICAgICAgfHwgbWF0ZXJpYWwuX2RpZmZ1c2VNYXBcbiAgICAgICAgICAgIHx8IG1hdGVyaWFsLl9lbWlzc2l2ZU1hcFxuICAgICAgICAgICAgfHwgbWF0ZXJpYWwuX21ldGFsbGljTWFwXG4gICAgICAgICAgICB8fCBtYXRlcmlhbC5fcm91Z2huZXNzTWFwXG4gICAgICAgICAgICB8fCBtYXRlcmlhbC5fbWV0YWxsaWNSb3VnaG5lc3NNYXBcbiAgICAgICAgICAgIHx8IG1hdGVyaWFsLl9zcGVjdWxhck1hcFxuICAgICAgICAgICAgfHwgbWF0ZXJpYWwuX2dsb3NzaW5lc3NNYXBcbiAgICAgICAgICAgIHx8IG1hdGVyaWFsLl9zcGVjdWxhckdsb3NzaW5lc3NNYXBcbiAgICAgICAgICAgIHx8IG1hdGVyaWFsLl9vY2NsdXNpb25NYXBcbiAgICAgICAgICAgIHx8IG1hdGVyaWFsLl9hbHBoYU1hcCkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzIgdlVWO1wiKTtcbiAgICB9XG5cbiAgICBpZiAobm9ybWFscykge1xuICAgICAgICBpZiAobGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWMzIHZXb3JsZE5vcm1hbDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzMgdlZpZXdOb3JtYWw7XCIpO1xuICAgIH1cblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBNQVRFUklBTCBDSEFOTkVMIElOUFVUU1xuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIGlmIChtYXRlcmlhbFN0YXRlLmFtYmllbnQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgbWF0ZXJpYWxBbWJpZW50O1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuYmFzZUNvbG9yKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIG1hdGVyaWFsQmFzZUNvbG9yO1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuYWxwaGEgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFN0YXRlLmFscGhhICE9PSBudWxsKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0IG1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmO1wiKTsgLy8gW2FscGhhLCBhbHBoYU1vZGUsIGFscGhhQ3V0b2ZmXVxuICAgIH1cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5lbWlzc2l2ZSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBtYXRlcmlhbEVtaXNzaXZlO1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuZGlmZnVzZSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBtYXRlcmlhbERpZmZ1c2U7XCIpO1xuICAgIH1cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5nbG9zc2luZXNzICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxTdGF0ZS5nbG9zc2luZXNzICE9PSBudWxsKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBtYXRlcmlhbEdsb3NzaW5lc3M7XCIpO1xuICAgIH1cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFN0YXRlLnNoaW5pbmVzcyAhPT0gbnVsbCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgbWF0ZXJpYWxTaGluaW5lc3M7XCIpOyAgLy8gUGhvbmcgY2hhbm5lbFxuICAgIH1cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5zcGVjdWxhcikge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBtYXRlcmlhbFNwZWN1bGFyO1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUubWV0YWxsaWMgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFN0YXRlLm1ldGFsbGljICE9PSBudWxsKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBtYXRlcmlhbE1ldGFsbGljO1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUucm91Z2huZXNzICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxTdGF0ZS5yb3VnaG5lc3MgIT09IG51bGwpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IG1hdGVyaWFsUm91Z2huZXNzO1wiKTtcbiAgICB9XG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuc3BlY3VsYXJGMCAhPT0gdW5kZWZpbmVkICYmIG1hdGVyaWFsU3RhdGUuc3BlY3VsYXJGMCAhPT0gbnVsbCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgbWF0ZXJpYWxTcGVjdWxhckYwO1wiKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gTUFURVJJQUwgVEVYVFVSRSBJTlBVVFNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBpZiAodXZzICYmIG1hdGVyaWFsLl9hbWJpZW50TWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgYW1iaWVudE1hcDtcIik7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fYW1iaWVudE1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBhbWJpZW50TWFwTWF0cml4O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodXZzICYmIG1hdGVyaWFsLl9iYXNlQ29sb3JNYXApIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHNhbXBsZXIyRCBiYXNlQ29sb3JNYXA7XCIpO1xuICAgICAgICBpZiAobWF0ZXJpYWwuX2Jhc2VDb2xvck1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBiYXNlQ29sb3JNYXBNYXRyaXg7XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX2RpZmZ1c2VNYXApIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHNhbXBsZXIyRCBkaWZmdXNlTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IGRpZmZ1c2VNYXBNYXRyaXg7XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XCIpO1xuICAgICAgICBpZiAobWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IGVtaXNzaXZlTWFwTWF0cml4O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybWFscyAmJiB1dnMgJiYgbWF0ZXJpYWwuX21ldGFsbGljTWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgbWV0YWxsaWNNYXA7XCIpO1xuICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG1ldGFsbGljTWFwTWF0cml4O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybWFscyAmJiB1dnMgJiYgbWF0ZXJpYWwuX3JvdWdobmVzc01hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcIik7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fcm91Z2huZXNzTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHJvdWdobmVzc01hcE1hdHJpeDtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm1hbHMgJiYgdXZzICYmIG1hdGVyaWFsLl9tZXRhbGxpY1JvdWdobmVzc01hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIG1ldGFsbGljUm91Z2huZXNzTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9tZXRhbGxpY1JvdWdobmVzc01hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBtZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeDtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm1hbHMgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIG5vcm1hbE1hcDtcIik7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fbm9ybWFsTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG5vcm1hbE1hcE1hdHJpeDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHBlcnR1cmJOb3JtYWwyQXJiKCB2ZWMzIGV5ZV9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIHV2ICkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMzIHEwID0gdmVjMyggZEZkeCggZXllX3Bvcy54ICksIGRGZHgoIGV5ZV9wb3MueSApLCBkRmR4KCBleWVfcG9zLnogKSApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMyIHN0MCA9IGRGZHgoIHV2LnN0ICk7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgICAgIHZlYzIgc3QxID0gZEZkeSggdXYuc3QgKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgICAgdmVjMyBTID0gbm9ybWFsaXplKCBxMCAqIHN0MS50IC0gcTEgKiBzdDAudCApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMzIFQgPSBub3JtYWxpemUoIC1xMCAqIHN0MS5zICsgcTEgKiBzdDAucyApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMzIE4gPSBub3JtYWxpemUoIHN1cmZfbm9ybSApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgICB2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdXYgKS54eXogKiAyLjAgLSAxLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgICAgIG1hdDMgdHNuID0gbWF0MyggUywgVCwgTiApO1wiKTtcbiAgICAgICAgLy8gICAgIHNyYy5wdXNoKFwiICAgICAgbWFwTiAqPSAzLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgICAgIHJldHVybiBub3JtYWxpemUoIHRzbiAqIG1hcE4gKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICB9XG4gICAgaWYgKHV2cyAmJiBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgb2NjbHVzaW9uTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9vY2NsdXNpb25NYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgb2NjbHVzaW9uTWFwTWF0cml4O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodXZzICYmIG1hdGVyaWFsLl9hbHBoYU1hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9hbHBoYU1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBhbHBoYU1hcE1hdHJpeDtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm1hbHMgJiYgdXZzICYmIG1hdGVyaWFsLl9zcGVjdWxhck1hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9zcGVjdWxhck1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzcGVjdWxhck1hcE1hdHJpeDtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm1hbHMgJiYgdXZzICYmIG1hdGVyaWFsLl9nbG9zc2luZXNzTWFwKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgZ2xvc3NpbmVzc01hcDtcIik7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fZ2xvc3NpbmVzc01hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBnbG9zc2luZXNzTWFwTWF0cml4O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybWFscyAmJiB1dnMgJiYgbWF0ZXJpYWwuX3NwZWN1bGFyR2xvc3NpbmVzc01hcCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIG1hdGVyaWFsU3BlY3VsYXJHbG9zc2luZXNzTWFwO1wiKTtcbiAgICAgICAgaWYgKG1hdGVyaWFsLl9zcGVjdWxhckdsb3NzaW5lc3NNYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgbWF0ZXJpYWxTcGVjdWxhckdsb3NzaW5lc3NNYXBNYXRyaXg7XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIE1BVEVSSUFMIEZSRVNORUwgSU5QVVRTXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgaWYgKG5vcm1hbHMgJiYgKG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbCB8fFxuICAgICAgICBtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsIHx8XG4gICAgICAgIG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwgfHxcbiAgICAgICAgbWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbCB8fFxuICAgICAgICBtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbCkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBmcmVzbmVsKHZlYzMgZXllRGlyLCB2ZWMzIG5vcm1hbCwgZmxvYXQgZWRnZUJpYXMsIGZsb2F0IGNlbnRlckJpYXMsIGZsb2F0IHBvd2VyKSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgICBmbG9hdCBmciA9IGFicyhkb3QoZXllRGlyLCBub3JtYWwpKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgIGZsb2F0IGZpbmFsRnIgPSBjbGFtcCgoZnIgLSBlZGdlQmlhcykgLyAoY2VudGVyQmlhcyAtIGVkZ2VCaWFzKSwgMC4wLCAxLjApO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICAgcmV0dXJuIHBvdyhmaW5hbEZyLCBwb3dlcik7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fZGlmZnVzZUZyZXNuZWwpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCAgZGlmZnVzZUZyZXNuZWxDZW50ZXJCaWFzO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCAgZGlmZnVzZUZyZXNuZWxFZGdlQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIGRpZmZ1c2VGcmVzbmVsUG93ZXI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgICBkaWZmdXNlRnJlc25lbENlbnRlckNvbG9yO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzICAgZGlmZnVzZUZyZXNuZWxFZGdlQ29sb3I7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIHNwZWN1bGFyRnJlc25lbENlbnRlckJpYXM7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0ICBzcGVjdWxhckZyZXNuZWxFZGdlQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIHNwZWN1bGFyRnJlc25lbFBvd2VyO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzICAgc3BlY3VsYXJGcmVzbmVsQ2VudGVyQ29sb3I7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgICBzcGVjdWxhckZyZXNuZWxFZGdlQ29sb3I7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFGcmVzbmVsKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIGFscGhhRnJlc25lbENlbnRlckJpYXM7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0ICBhbHBoYUZyZXNuZWxFZGdlQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIGFscGhhRnJlc25lbFBvd2VyO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzICAgYWxwaGFGcmVzbmVsQ2VudGVyQ29sb3I7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgICBhbHBoYUZyZXNuZWxFZGdlQ29sb3I7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0ICBtYXRlcmlhbFNwZWN1bGFyRjBGcmVzbmVsQ2VudGVyQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIG1hdGVyaWFsU3BlY3VsYXJGMEZyZXNuZWxFZGdlQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIG1hdGVyaWFsU3BlY3VsYXJGMEZyZXNuZWxQb3dlcjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyAgIG1hdGVyaWFsU3BlY3VsYXJGMEZyZXNuZWxDZW50ZXJDb2xvcjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyAgIG1hdGVyaWFsU3BlY3VsYXJGMEZyZXNuZWxFZGdlQ29sb3I7XCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVGcmVzbmVsKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIGVtaXNzaXZlRnJlc25lbENlbnRlckJpYXM7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0ICBlbWlzc2l2ZUZyZXNuZWxFZGdlQmlhcztcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgIGVtaXNzaXZlRnJlc25lbFBvd2VyO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzICAgZW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3I7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgICBlbWlzc2l2ZUZyZXNuZWxFZGdlQ29sb3I7XCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIExJR0hUIFNPVVJDRVNcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjNCAgIGxpZ2h0QW1iaWVudDtcIik7XG5cbiAgICBpZiAobm9ybWFscykge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7IC8vIExpZ2h0IHNvdXJjZXNcbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0ID0gbGlnaHRzU3RhdGUubGlnaHRzW2ldO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiYW1iaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjNCBsaWdodENvbG9yXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwicG9pbnRcIikge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0QXR0ZW51YXRpb25cIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGlnaHQudHlwZSA9PT0gXCJkaXJcIiAmJiBsaWdodC5zcGFjZSA9PT0gXCJ2aWV3XCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodERpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInBvaW50XCIgJiYgbGlnaHQuc3BhY2UgPT09IFwidmlld1wiKSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgbGlnaHRQb3NcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZWaWV3TGlnaHRSZXZlcnNlRGlyQW5kRGlzdFwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZWNlaXZlc1NoYWRvdykge1xuXG4gICAgICAgIC8vIFZhcmlhbmNlIGNhc3RzU2hhZG93IG1hcHBpbmcgZmlsdGVyXG5cbiAgICAgICAgLy8gc3JjLnB1c2goXCJmbG9hdCBsaW5zdGVwKGZsb2F0IGxvdywgZmxvYXQgaGlnaCwgZmxvYXQgdil7XCIpO1xuICAgICAgICAvLyBzcmMucHVzaChcIiAgICAgIHJldHVybiBjbGFtcCgodi1sb3cpLyhoaWdoLWxvdyksIDAuMCwgMS4wKTtcIik7XG4gICAgICAgIC8vIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3JjLnB1c2goXCJmbG9hdCBWU00oc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSl7XCIpO1xuICAgICAgICAvLyBzcmMucHVzaChcIiAgICAgIHZlYzIgbW9tZW50cyA9IHRleHR1cmUyRChkZXB0aHMsIHV2KS54eTtcIik7XG4gICAgICAgIC8vIHNyYy5wdXNoKFwiICAgICAgZmxvYXQgcCA9IHNtb290aHN0ZXAoY29tcGFyZS0wLjAyLCBjb21wYXJlLCBtb21lbnRzLngpO1wiKTtcbiAgICAgICAgLy8gc3JjLnB1c2goXCIgICAgICBmbG9hdCB2YXJpYW5jZSA9IG1heChtb21lbnRzLnkgLSBtb21lbnRzLngqbW9tZW50cy54LCAtMC4wMDEpO1wiKTtcbiAgICAgICAgLy8gc3JjLnB1c2goXCIgICAgICBmbG9hdCBkID0gY29tcGFyZSAtIG1vbWVudHMueDtcIik7XG4gICAgICAgIC8vIHNyYy5wdXNoKFwiICAgICAgZmxvYXQgcF9tYXggPSBsaW5zdGVwKDAuMiwgMS4wLCB2YXJpYW5jZSAvICh2YXJpYW5jZSArIGQqZCkpO1wiKTtcbiAgICAgICAgLy8gc3JjLnB1c2goXCIgICAgICByZXR1cm4gY2xhbXAobWF4KHAsIHBfbWF4KSwgMC4wLCAxLjApO1wiKTtcbiAgICAgICAgLy8gc3JjLnB1c2goXCJ9XCIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaWdodHNTdGF0ZS5saWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsgLy8gTGlnaHQgc291cmNlc1xuICAgICAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0c1tpXS5jYXN0c1NoYWRvdykge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZTaGFkb3dQb3NGcm9tTGlnaHRcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHNhbXBsZXIyRCBzaGFkb3dNYXBcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjNCBjb2xvcml6ZTtcIik7XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gTUFJTlxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG5cbiAgICBpZiAoY2xpcHBpbmcpIHtcbiAgICAgICAgc3JjLnB1c2goXCJpZiAoY2xpcHBhYmxlKSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgZmxvYXQgZGlzdCA9IDAuMDtcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiaWYgKHNlY3Rpb25QbGFuZUFjdGl2ZVwiICsgaSArIFwiKSB7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBkaXN0ICs9IGNsYW1wKGRvdCgtc2VjdGlvblBsYW5lRGlyXCIgKyBpICsgXCIueHl6LCB2V29ybGRQb3NpdGlvbi54eXogLSBzZWN0aW9uUGxhbmVQb3NcIiArIGkgKyBcIi54eXopLCAwLjAsIDEwMDAuMCk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwiICBpZiAoZGlzdCA+IDAuMCkgeyBkaXNjYXJkOyB9XCIpO1xuICAgICAgICBpZiAoc29saWQpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICBpZiAoZ2xfRnJvbnRGYWNpbmcgPT0gZmFsc2UpIHtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICByZXR1cm47XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgIH1cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cblxuICAgIGlmIChnZW9tZXRyeVN0YXRlLnByaW1pdGl2ZU5hbWUgPT09IFwicG9pbnRzXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMyIGN4eSA9IDIuMCAqIGdsX1BvaW50Q29vcmQgLSAxLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IHIgPSBkb3QoY3h5LCBjeHkpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJpZiAociA+IDEuMCkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBkaXNjYXJkO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cblxuICAgIHNyYy5wdXNoKFwiZmxvYXQgb2NjbHVzaW9uID0gMS4wO1wiKTtcblxuICAgIGlmIChtYXRlcmlhbFN0YXRlLmFtYmllbnQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIGFtYmllbnRDb2xvciA9IG1hdGVyaWFsQW1iaWVudDtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIGFtYmllbnRDb2xvciA9IHZlYzMoMS4wLCAxLjAsIDEuMCk7XCIpO1xuICAgIH1cblxuICAgIGlmIChtYXRlcmlhbFN0YXRlLmRpZmZ1c2UpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIGRpZmZ1c2VDb2xvciA9IG1hdGVyaWFsRGlmZnVzZTtcIik7XG4gICAgfSBlbHNlIGlmIChtYXRlcmlhbFN0YXRlLmJhc2VDb2xvcikge1xuICAgICAgICBzcmMucHVzaChcInZlYzMgZGlmZnVzZUNvbG9yID0gbWF0ZXJpYWxCYXNlQ29sb3I7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyBkaWZmdXNlQ29sb3IgPSB2ZWMzKDEuMCwgMS4wLCAxLjApO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5jb2xvcnMpIHtcbiAgICAgICAgc3JjLnB1c2goXCJkaWZmdXNlQ29sb3IgKj0gdkNvbG9yLnJnYjtcIik7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuZW1pc3NpdmUpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIGVtaXNzaXZlQ29sb3IgPSBtYXRlcmlhbEVtaXNzaXZlO1wiKTsgLy8gRW1pc3NpdmUgZGVmYXVsdCBpcyAoMCwwLDApLCBzbyBpbml0aWFsaXppbmcgaGVyZVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyAgZW1pc3NpdmVDb2xvciA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XCIpO1xuICAgIH1cblxuICAgIGlmIChtYXRlcmlhbFN0YXRlLnNwZWN1bGFyKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyBzcGVjdWxhciA9IG1hdGVyaWFsU3BlY3VsYXI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyBzcGVjdWxhciA9IHZlYzMoMS4wLCAxLjAsIDEuMCk7XCIpO1xuICAgIH1cblxuICAgIGlmIChtYXRlcmlhbFN0YXRlLmFscGhhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBhbHBoYSA9IG1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmWzBdO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IGFscGhhID0gMS4wO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5jb2xvcnMpIHtcbiAgICAgICAgc3JjLnB1c2goXCJhbHBoYSAqPSB2Q29sb3IuYTtcIik7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuZ2xvc3NpbmVzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgZ2xvc3NpbmVzcyA9IG1hdGVyaWFsR2xvc3NpbmVzcztcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBnbG9zc2luZXNzID0gMS4wO1wiKTtcbiAgICB9XG5cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5tZXRhbGxpYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgbWV0YWxsaWMgPSBtYXRlcmlhbE1ldGFsbGljO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IG1ldGFsbGljID0gMS4wO1wiKTtcbiAgICB9XG5cbiAgICBpZiAobWF0ZXJpYWxTdGF0ZS5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsUm91Z2huZXNzO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IHJvdWdobmVzcyA9IDEuMDtcIik7XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuc3BlY3VsYXJGMCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgc3BlY3VsYXJGMCA9IG1hdGVyaWFsU3BlY3VsYXJGMDtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBzcGVjdWxhckYwID0gMS4wO1wiKTtcbiAgICB9XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gVEVYVFVSSU5HXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgaWYgKHV2cyAmJiAoKG5vcm1hbHMgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcClcbiAgICAgICAgfHwgbWF0ZXJpYWwuX2FtYmllbnRNYXBcbiAgICAgICAgfHwgbWF0ZXJpYWwuX2Jhc2VDb2xvck1hcFxuICAgICAgICB8fCBtYXRlcmlhbC5fZGlmZnVzZU1hcFxuICAgICAgICB8fCBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwXG4gICAgICAgIHx8IG1hdGVyaWFsLl9lbWlzc2l2ZU1hcFxuICAgICAgICB8fCBtYXRlcmlhbC5fbWV0YWxsaWNNYXBcbiAgICAgICAgfHwgbWF0ZXJpYWwuX3JvdWdobmVzc01hcFxuICAgICAgICB8fCBtYXRlcmlhbC5fbWV0YWxsaWNSb3VnaG5lc3NNYXBcbiAgICAgICAgfHwgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwXG4gICAgICAgIHx8IG1hdGVyaWFsLl9nbG9zc2luZXNzTWFwXG4gICAgICAgIHx8IG1hdGVyaWFsLl9zcGVjdWxhckdsb3NzaW5lc3NNYXBcbiAgICAgICAgfHwgbWF0ZXJpYWwuX2FscGhhTWFwKSkge1xuICAgICAgICBzcmMucHVzaChcInZlYzQgdGV4dHVyZVBvcyA9IHZlYzQodlVWLnMsIHZVVi50LCAxLjAsIDEuMCk7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZlYzIgdGV4dHVyZUNvb3JkO1wiKTtcbiAgICB9XG5cbiAgICBpZiAodXZzICYmIG1hdGVyaWFsLl9hbWJpZW50TWFwKSB7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fYW1iaWVudE1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChhbWJpZW50TWFwTWF0cml4ICogdGV4dHVyZVBvcykueHk7XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5O1wiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcInZlYzQgYW1iaWVudFRleGVsID0gdGV4dHVyZTJEKGFtYmllbnRNYXAsIHRleHR1cmVDb29yZCkucmdiO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJhbWJpZW50VGV4ZWwgPSBcIiArIFRFWFRVUkVfREVDT0RFX0ZVTkNTW21hdGVyaWFsLl9hbWJpZW50TWFwLl9zdGF0ZS5lbmNvZGluZ10gKyBcIihhbWJpZW50VGV4ZWwpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJhbWJpZW50Q29sb3IgKj0gYW1iaWVudFRleGVsLnJnYjtcIik7XG4gICAgfVxuXG4gICAgaWYgKHV2cyAmJiBtYXRlcmlhbC5fZGlmZnVzZU1hcCkge1xuICAgICAgICBpZiAobWF0ZXJpYWwuX2RpZmZ1c2VNYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAoZGlmZnVzZU1hcE1hdHJpeCAqIHRleHR1cmVQb3MpLnh5O1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidGV4dHVyZUNvb3JkID0gdGV4dHVyZVBvcy54eTtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ2ZWM0IGRpZmZ1c2VUZXhlbCA9IHRleHR1cmUyRChkaWZmdXNlTWFwLCB0ZXh0dXJlQ29vcmQpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJkaWZmdXNlVGV4ZWwgPSBcIiArIFRFWFRVUkVfREVDT0RFX0ZVTkNTW21hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS5lbmNvZGluZ10gKyBcIihkaWZmdXNlVGV4ZWwpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJkaWZmdXNlQ29sb3IgKj0gZGlmZnVzZVRleGVsLnJnYjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiYWxwaGEgKj0gZGlmZnVzZVRleGVsLmE7XCIpO1xuICAgIH1cblxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX2Jhc2VDb2xvck1hcCkge1xuICAgICAgICBpZiAobWF0ZXJpYWwuX2Jhc2VDb2xvck1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChiYXNlQ29sb3JNYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCBiYXNlQ29sb3JUZXhlbCA9IHRleHR1cmUyRChiYXNlQ29sb3JNYXAsIHRleHR1cmVDb29yZCk7XCIpO1xuICAgICAgICBzcmMucHVzaChcImJhc2VDb2xvclRleGVsID0gXCIgKyBURVhUVVJFX0RFQ09ERV9GVU5DU1ttYXRlcmlhbC5fYmFzZUNvbG9yTWFwLl9zdGF0ZS5lbmNvZGluZ10gKyBcIihiYXNlQ29sb3JUZXhlbCk7XCIpO1xuICAgICAgICBzcmMucHVzaChcImRpZmZ1c2VDb2xvciAqPSBiYXNlQ29sb3JUZXhlbC5yZ2I7XCIpO1xuICAgICAgICBzcmMucHVzaChcImFscGhhICo9IGJhc2VDb2xvclRleGVsLmE7XCIpO1xuICAgIH1cblxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwKSB7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVNYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAoZW1pc3NpdmVNYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCBlbWlzc2l2ZVRleGVsID0gdGV4dHVyZTJEKGVtaXNzaXZlTWFwLCB0ZXh0dXJlQ29vcmQpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJlbWlzc2l2ZVRleGVsID0gXCIgKyBURVhUVVJFX0RFQ09ERV9GVU5DU1ttYXRlcmlhbC5fZW1pc3NpdmVNYXAuX3N0YXRlLmVuY29kaW5nXSArIFwiKGVtaXNzaXZlVGV4ZWwpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJlbWlzc2l2ZUNvbG9yID0gZW1pc3NpdmVUZXhlbC5yZ2I7XCIpO1xuICAgIH1cblxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX2FscGhhTWFwKSB7XG4gICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAoYWxwaGFNYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwiYWxwaGEgKj0gdGV4dHVyZTJEKGFscGhhTWFwLCB0ZXh0dXJlQ29vcmQpLnI7XCIpO1xuICAgIH1cblxuICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX29jY2x1c2lvbk1hcCkge1xuICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChvY2NsdXNpb25NYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwib2NjbHVzaW9uICo9IHRleHR1cmUyRChvY2NsdXNpb25NYXAsIHRleHR1cmVDb29yZCkucjtcIik7XG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbHMgJiYgKChsaWdodHNTdGF0ZS5saWdodHMubGVuZ3RoID4gMCkgfHwgbGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDAgfHwgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkpIHtcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFNIQURJTkdcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcCkge1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9ub3JtYWxNYXAuX3N0YXRlLm1hdHJpeCkge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidGV4dHVyZUNvb3JkID0gKG5vcm1hbE1hcE1hdHJpeCAqIHRleHR1cmVQb3MpLnh5O1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5O1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjMyB2aWV3Tm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIHZWaWV3UG9zaXRpb24sIG5vcm1hbGl6ZSh2Vmlld05vcm1hbCksIHRleHR1cmVDb29yZCApO1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjMyB2aWV3Tm9ybWFsID0gbm9ybWFsaXplKHZWaWV3Tm9ybWFsKTtcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXZzICYmIG1hdGVyaWFsLl9zcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9zcGVjdWxhck1hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAoc3BlY3VsYXJNYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidGV4dHVyZUNvb3JkID0gdGV4dHVyZVBvcy54eTtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcInNwZWN1bGFyICo9IHRleHR1cmUyRChzcGVjdWxhck1hcCwgdGV4dHVyZUNvb3JkKS5yZ2I7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV2cyAmJiBtYXRlcmlhbC5fZ2xvc3NpbmVzc01hcCkge1xuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9nbG9zc2luZXNzTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChnbG9zc2luZXNzTWFwTWF0cml4ICogdGV4dHVyZVBvcykueHk7XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3JjLnB1c2goXCJnbG9zc2luZXNzICo9IHRleHR1cmUyRChnbG9zc2luZXNzTWFwLCB0ZXh0dXJlQ29vcmQpLnI7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV2cyAmJiBtYXRlcmlhbC5fc3BlY3VsYXJHbG9zc2luZXNzTWFwKSB7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyR2xvc3NpbmVzc01hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAobWF0ZXJpYWxTcGVjdWxhckdsb3NzaW5lc3NNYXBNYXRyaXggKiB0ZXh0dXJlUG9zKS54eTtcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidGV4dHVyZUNvb3JkID0gdGV4dHVyZVBvcy54eTtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcInZlYzQgc3BlY0dsb3NzUkdCID0gdGV4dHVyZTJEKG1hdGVyaWFsU3BlY3VsYXJHbG9zc2luZXNzTWFwLCB0ZXh0dXJlQ29vcmQpLnJnYmE7XCIpOyAvLyBUT0RPOiB3aGF0IGlmIG9ubHkgUkdCIHRleHR1cmU/XG4gICAgICAgICAgICBzcmMucHVzaChcInNwZWN1bGFyICo9IHNwZWNHbG9zc1JHQi5yZ2I7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJnbG9zc2luZXNzICo9IHNwZWNHbG9zc1JHQi5hO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX21ldGFsbGljTWFwKSB7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChtZXRhbGxpY01hcE1hdHJpeCAqIHRleHR1cmVQb3MpLnh5O1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5O1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNyYy5wdXNoKFwibWV0YWxsaWMgKj0gdGV4dHVyZTJEKG1ldGFsbGljTWFwLCB0ZXh0dXJlQ29vcmQpLnI7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV2cyAmJiBtYXRlcmlhbC5fcm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3JvdWdobmVzc01hcC5fc3RhdGUubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSAocm91Z2huZXNzTWFwTWF0cml4ICogdGV4dHVyZVBvcykueHk7XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IHRleHR1cmVQb3MueHk7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3JjLnB1c2goXCJyb3VnaG5lc3MgKj0gdGV4dHVyZTJEKHJvdWdobmVzc01hcCwgdGV4dHVyZUNvb3JkKS5yO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dnMgJiYgbWF0ZXJpYWwuX21ldGFsbGljUm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljUm91Z2huZXNzTWFwLl9zdGF0ZS5tYXRyaXgpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInRleHR1cmVDb29yZCA9IChtZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeCAqIHRleHR1cmVQb3MpLnh5O1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ0ZXh0dXJlQ29vcmQgPSB0ZXh0dXJlUG9zLnh5O1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNyYy5wdXNoKFwidmVjMyBtZXRhbFJvdWdoUkdCID0gdGV4dHVyZTJEKG1ldGFsbGljUm91Z2huZXNzTWFwLCB0ZXh0dXJlQ29vcmQpLnJnYjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1ldGFsbGljICo9IG1ldGFsUm91Z2hSR0IuYjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInJvdWdobmVzcyAqPSBtZXRhbFJvdWdoUkdCLmc7XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHZpZXdFeWVEaXIgPSBub3JtYWxpemUoLXZWaWV3UG9zaXRpb24pO1wiKTtcblxuICAgICAgICBpZiAobWF0ZXJpYWwuX2RpZmZ1c2VGcmVzbmVsKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImZsb2F0IGRpZmZ1c2VGcmVzbmVsID0gZnJlc25lbCh2aWV3RXllRGlyLCB2aWV3Tm9ybWFsLCBkaWZmdXNlRnJlc25lbEVkZ2VCaWFzLCBkaWZmdXNlRnJlc25lbENlbnRlckJpYXMsIGRpZmZ1c2VGcmVzbmVsUG93ZXIpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiZGlmZnVzZUNvbG9yICo9IG1peChkaWZmdXNlRnJlc25lbEVkZ2VDb2xvciwgZGlmZnVzZUZyZXNuZWxDZW50ZXJDb2xvciwgZGlmZnVzZUZyZXNuZWwpO1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyRnJlc25lbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBzcGVjdWxhckZyZXNuZWwgPSBmcmVzbmVsKHZpZXdFeWVEaXIsIHZpZXdOb3JtYWwsIHNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzLCBzcGVjdWxhckZyZXNuZWxDZW50ZXJCaWFzLCBzcGVjdWxhckZyZXNuZWxQb3dlcik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJzcGVjdWxhciAqPSBtaXgoc3BlY3VsYXJGcmVzbmVsRWRnZUNvbG9yLCBzcGVjdWxhckZyZXNuZWxDZW50ZXJDb2xvciwgc3BlY3VsYXJGcmVzbmVsKTtcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgYWxwaGFGcmVzbmVsID0gZnJlc25lbCh2aWV3RXllRGlyLCB2aWV3Tm9ybWFsLCBhbHBoYUZyZXNuZWxFZGdlQmlhcywgYWxwaGFGcmVzbmVsQ2VudGVyQmlhcywgYWxwaGFGcmVzbmVsUG93ZXIpO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiYWxwaGEgKj0gbWl4KGFscGhhRnJlc25lbEVkZ2VDb2xvci5yLCBhbHBoYUZyZXNuZWxDZW50ZXJDb2xvci5yLCBhbHBoYUZyZXNuZWwpO1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBlbWlzc2l2ZUZyZXNuZWwgPSBmcmVzbmVsKHZpZXdFeWVEaXIsIHZpZXdOb3JtYWwsIGVtaXNzaXZlRnJlc25lbEVkZ2VCaWFzLCBlbWlzc2l2ZUZyZXNuZWxDZW50ZXJCaWFzLCBlbWlzc2l2ZUZyZXNuZWxQb3dlcik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJlbWlzc2l2ZUNvbG9yICo9IG1peChlbWlzc2l2ZUZyZXNuZWxFZGdlQ29sb3IsIGVtaXNzaXZlRnJlc25lbENlbnRlckNvbG9yLCBlbWlzc2l2ZUZyZXNuZWwpO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNyYy5wdXNoKFwiaWYgKG1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmWzFdID09IDEuMCAmJiBhbHBoYSA8IG1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmWzJdKSB7XCIpOyAvLyBpZS4gKGFscGhhTW9kZSA9PSBcIm1hc2tcIiAmJiBhbHBoYSA8IGFscGhhQ3V0b2ZmKVxuICAgICAgICBzcmMucHVzaChcIiAgIGRpc2NhcmQ7XCIpOyAvLyBUT0RPOiBEaXNjYXJkIGVhcmxpZXIgd2l0aGluIHRoaXMgc2hhZGVyP1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgLy8gUFJFUEFSRSBJTlBVVFMgRk9SIFNIQURFUiBGVU5DVElPTlNcblxuICAgICAgICBzcmMucHVzaChcIkluY2lkZW50TGlnaHQgIGxpZ2h0O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJNYXRlcmlhbCAgICAgICBtYXRlcmlhbDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiR2VvbWV0cnkgICAgICAgZ2VvbWV0cnk7XCIpO1xuICAgICAgICBzcmMucHVzaChcIlJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQodmVjMygwLjAsMC4wLDAuMCksIHZlYzMoMC4wLDAuMCwwLjApKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjMyAgICAgICAgICAgdmlld0xpZ2h0RGlyO1wiKTtcblxuICAgICAgICBpZiAocGhvbmdNYXRlcmlhbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJtYXRlcmlhbC5kaWZmdXNlQ29sb3IgICAgICA9IGRpZmZ1c2VDb2xvcjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgICAgID0gc3BlY3VsYXI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJtYXRlcmlhbC5zaGluZSAgICAgICAgICAgICA9IG1hdGVyaWFsU2hpbmluZXNzO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGVjdWxhck1hdGVyaWFsKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImZsb2F0IG9uZU1pbnVzU3BlY3VsYXJTdHJlbmd0aCA9IDEuMCAtIG1heChtYXgoc3BlY3VsYXIuciwgc3BlY3VsYXIuZyApLHNwZWN1bGFyLmIpO1wiKTsgLy8gRW5lcmd5IGNvbnNlcnZhdGlvblxuICAgICAgICAgICAgc3JjLnB1c2goXCJtYXRlcmlhbC5kaWZmdXNlQ29sb3IgICAgICA9IGRpZmZ1c2VDb2xvciAqIG9uZU1pbnVzU3BlY3VsYXJTdHJlbmd0aDtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAoIDEuMCAtIGdsb3NzaW5lc3MsIDAuMDQsIDEuMCApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwibWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAgICAgPSBzcGVjdWxhcjtcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0YWxsaWNNYXRlcmlhbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBkaWVsZWN0cmljU3BlY3VsYXIgPSAwLjE2ICogc3BlY3VsYXJGMCAqIHNwZWN1bGFyRjA7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJtYXRlcmlhbC5kaWZmdXNlQ29sb3IgICAgICA9IGRpZmZ1c2VDb2xvciAqICgxLjAgLSBkaWVsZWN0cmljU3BlY3VsYXIpICogKDEuMCAtIG1ldGFsbGljKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIm1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzID0gY2xhbXAocm91Z2huZXNzLCAwLjA0LCAxLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwibWF0ZXJpYWwuc3BlY3VsYXJDb2xvciAgICAgPSBtaXgodmVjMyhkaWVsZWN0cmljU3BlY3VsYXIpLCBkaWZmdXNlQ29sb3IsIG1ldGFsbGljKTtcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzcmMucHVzaChcImdlb21ldHJ5LnBvc2l0aW9uICAgICAgPSB2Vmlld1Bvc2l0aW9uO1wiKTtcbiAgICAgICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0TWFwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImdlb21ldHJ5LndvcmxkTm9ybWFsICAgPSBub3JtYWxpemUodldvcmxkTm9ybWFsKTtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJnZW9tZXRyeS52aWV3Tm9ybWFsICAgID0gdmlld05vcm1hbDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2VvbWV0cnkudmlld0V5ZURpciAgICA9IHZpZXdFeWVEaXI7XCIpO1xuXG4gICAgICAgIC8vIEVOVklST05NRU5UIEFORCBSRUZMRUNUSU9OIE1BUCBTSEFESU5HXG5cbiAgICAgICAgaWYgKChwaG9uZ01hdGVyaWFsKSAmJiAobGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDAgfHwgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiY29tcHV0ZVBob25nTGlnaHRNYXBwaW5nKGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQpO1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc3BlY3VsYXJNYXRlcmlhbCB8fCBtZXRhbGxpY01hdGVyaWFsKSAmJiAobGlnaHRzU3RhdGUubGlnaHRNYXBzLmxlbmd0aCA+IDAgfHwgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiY29tcHV0ZVBCUkxpZ2h0TWFwcGluZyhnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0KTtcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMSUdIVCBTT1VSQ0UgU0hBRElOR1xuXG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgc2hhZG93ID0gMS4wO1wiKTtcblxuICAgICAgICAvLyBpZiAocmVjZWl2ZXNTaGFkb3cpIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIHNyYy5wdXNoKFwiZmxvYXQgbGlnaHREZXB0aDIgPSBjbGFtcChsZW5ndGgobGlnaHRQb3MpLzQwLjAsIDAuMCwgMS4wKTtcIik7XG4gICAgICAgIC8vICAgICBzcmMucHVzaChcImZsb2F0IGlsbHVtaW5hdGVkID0gVlNNKHNMaWdodERlcHRoLCBsaWdodFVWLCBsaWdodERlcHRoMik7XCIpO1xuICAgICAgICAvL1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IHNoYWRvd0FjbmVSZW1vdmVyID0gMC4wMDc7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZlYzMgZnJhZ21lbnREZXB0aDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiZmxvYXQgdGV4ZWxTaXplID0gMS4wIC8gMTAyNC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJmbG9hdCBhbW91bnRJbkxpZ2h0ID0gMC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHNoYWRvd0Nvb3JkO1wiKTtcbiAgICAgICAgc3JjLnB1c2goJ3ZlYzQgcmdiYURlcHRoOycpO1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IGRlcHRoO1wiKTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGNvbnN0IG51bVNoYWRvd3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0ID0gbGlnaHRzU3RhdGUubGlnaHRzW2ldO1xuXG4gICAgICAgICAgICBpZiAobGlnaHQudHlwZSA9PT0gXCJhbWJpZW50XCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcImRpclwiICYmIGxpZ2h0LnNwYWNlID09PSBcInZpZXdcIikge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidmlld0xpZ2h0RGlyID0gLW5vcm1hbGl6ZShsaWdodERpclwiICsgaSArIFwiKTtcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT09IFwicG9pbnRcIiAmJiBsaWdodC5zcGFjZSA9PT0gXCJ2aWV3XCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZShsaWdodFBvc1wiICsgaSArIFwiIC0gdlZpZXdQb3NpdGlvbik7XCIpO1xuICAgICAgICAgICAgICAgIC8vc3JjLnB1c2goXCJ0bXBWZWMzID0gbGlnaHRQb3NcIiArIGkgKyBcIi54eXogLSB2aWV3UG9zaXRpb24ueHl6O1wiKTtcbiAgICAgICAgICAgICAgICAvL3NyYy5wdXNoKFwibGlnaHREaXN0ID0gYWJzKGxlbmd0aCh0bXBWZWMzKSk7XCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZSh2Vmlld0xpZ2h0UmV2ZXJzZURpckFuZERpc3RcIiArIGkgKyBcIi54eXopO1wiKTsgLy8gSWYgbm9ybWFsIG1hcHBpbmcsIHRoZSBmcmFnbWVudC0+bGlnaHQgdmVjdG9yIHdpbGwgYmUgaW4gdGFuZ2VudCBzcGFjZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVjZWl2ZXNTaGFkb3cgJiYgbGlnaHQuY2FzdHNTaGFkb3cpIHtcblxuICAgICAgICAgICAgICAgIC8vIGlmICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHNyYy5wdXNoKCdzaGFkb3dDb29yZCA9ICh2U2hhZG93UG9zRnJvbUxpZ2h0JyArIGkgKyAnLnh5ei92U2hhZG93UG9zRnJvbUxpZ2h0JyArIGkgKyAnLncpLzIuMCArIDAuNTsnKTtcbiAgICAgICAgICAgICAgICAvLyAgICAgc3JjLnB1c2goXCJsaWdodERlcHRoMiA9IGNsYW1wKGxlbmd0aCh2ZWMzWzAuMCwgMjAuMCwgMjAuMF0pLzQwLjAsIDAuMCwgMS4wKTtcIik7XG4gICAgICAgICAgICAgICAgLy8gICAgIHNyYy5wdXNoKFwiY2FzdHNTaGFkb3cgKj0gVlNNKHNoYWRvd01hcCcgKyBpICsgJywgc2hhZG93Q29vcmQsIGxpZ2h0RGVwdGgyKTtcIik7XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gaWYgKGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBQQ0ZcblxuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwic2hhZG93ID0gMC4wO1wiKTtcblxuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiZnJhZ21lbnREZXB0aCA9IHZTaGFkb3dQb3NGcm9tTGlnaHRcIiArIGkgKyBcIi54eXo7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiZnJhZ21lbnREZXB0aC56IC09IHNoYWRvd0FjbmVSZW1vdmVyO1wiKTtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcImZvciAoaW50IHggPSAtMzsgeCA8PSAzOyB4KyspIHtcIik7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgIGZvciAoaW50IHkgPSAtMzsgeSA8PSAzOyB5KyspIHtcIik7XG4gICAgICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgICBmbG9hdCB0ZXhlbERlcHRoID0gdW5wYWNrRGVwdGgodGV4dHVyZTJEKHNoYWRvd01hcFwiICsgaSArIFwiLCBmcmFnbWVudERlcHRoLnh5ICsgdmVjMih4LCB5KSAqIHRleGVsU2l6ZSkpO1wiKTtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgICAgIGlmIChmcmFnbWVudERlcHRoLnogPCB0ZXhlbERlcHRoKSB7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICAgICAgIHNoYWRvdyArPSAxLjA7XCIpO1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICAgfVwiKTtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcIiAgfVwiKTtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInNoYWRvdyA9IHNoYWRvdyAvIDkuMDtcIik7XG5cbiAgICAgICAgICAgICAgICBzcmMucHVzaChcImxpZ2h0LmNvbG9yID0gIGxpZ2h0Q29sb3JcIiArIGkgKyBcIi5yZ2IgKiAobGlnaHRDb2xvclwiICsgaSArIFwiLmEgKiBzaGFkb3cpO1wiKTsgLy8gYSBpcyBpbnRlbnNpdHlcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIGlmIChmYWxzZSl7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgc3JjLnB1c2goXCJzaGFkb3cgPSAxLjA7XCIpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gICAgIHNyYy5wdXNoKCdzaGFkb3dDb29yZCA9ICh2U2hhZG93UG9zRnJvbUxpZ2h0JyArIGkgKyAnLnh5ei92U2hhZG93UG9zRnJvbUxpZ2h0JyArIGkgKyAnLncpLzIuMCArIDAuNTsnKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICBzcmMucHVzaCgnc2hhZG93IC09IChzaGFkb3dDb29yZC56ID4gdW5wYWNrRGVwdGgodGV4dHVyZTJEKHNoYWRvd01hcCcgKyBpICsgJywgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAtMC45NDIwMTYyNCwgLTAuMzk5MDYyMTYgKSAvIDcwMC4wKSkgKyAwLjAwMTUpID8gMC4yIDogMC4wOycpO1xuICAgICAgICAgICAgICAgIC8vICAgICBzcmMucHVzaCgnc2hhZG93IC09IChzaGFkb3dDb29yZC56ID4gdW5wYWNrRGVwdGgodGV4dHVyZTJEKHNoYWRvd01hcCcgKyBpICsgJywgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjk0NTU4NjA5LCAtMC43Njg5MDcyNSApIC8gNzAwLjApKSArIDAuMDAxNSkgPyAwLjIgOiAwLjA7Jyk7XG4gICAgICAgICAgICAgICAgLy8gICAgIHNyYy5wdXNoKCdzaGFkb3cgLT0gKHNoYWRvd0Nvb3JkLnogPiB1bnBhY2tEZXB0aCh0ZXh0dXJlMkQoc2hhZG93TWFwJyArIGkgKyAnLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIC0wLjA5NDE4NDEwMSwgLTAuOTI5Mzg4NzAgKSAvIDcwMC4wKSkgKyAwLjAwMTUpID8gMC4yIDogMC4wOycpO1xuICAgICAgICAgICAgICAgIC8vICAgICBzcmMucHVzaCgnc2hhZG93IC09IChzaGFkb3dDb29yZC56ID4gdW5wYWNrRGVwdGgodGV4dHVyZTJEKHNoYWRvd01hcCcgKyBpICsgJywgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjM0NDk1OTM4LCAwLjI5Mzg3NzYwICkgLyA3MDAuMCkpICsgMC4wMDE1KSA/IDAuMiA6IDAuMDsnKTtcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICBzcmMucHVzaChcImxpZ2h0LmNvbG9yID0gIGxpZ2h0Q29sb3JcIiArIGkgKyBcIi5yZ2IgKiAobGlnaHRDb2xvclwiICsgaSArIFwiLmEgKiBzaGFkb3cpO1wiKTtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwibGlnaHQuY29sb3IgPSAgbGlnaHRDb2xvclwiICsgaSArIFwiLnJnYiAqIChsaWdodENvbG9yXCIgKyBpICsgXCIuYSApO1wiKTsgLy8gYSBpcyBpbnRlbnNpdHlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3JjLnB1c2goXCJsaWdodC5kaXJlY3Rpb24gPSB2aWV3TGlnaHREaXI7XCIpO1xuXG4gICAgICAgICAgICBpZiAocGhvbmdNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiY29tcHV0ZVBob25nTGlnaHRpbmcobGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQpO1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNwZWN1bGFyTWF0ZXJpYWwgfHwgbWV0YWxsaWNNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwiY29tcHV0ZVBCUkxpZ2h0aW5nKGxpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0KTtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobnVtU2hhZG93cyA+IDApIHtcbiAgICAgICAgICAgIC8vc3JjLnB1c2goXCJzaGFkb3cgLz0gXCIgKyAoOSAqIG51bVNoYWRvd3MpICsgXCIuMDtcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvL3NyYy5wdXNoKFwicmVmbGVjdGVkTGlnaHQuZGlmZnVzZSAqPSBzaGFkb3c7XCIpO1xuXG4gICAgICAgIC8vIENPTUJJTkUgVEVSTVNcblxuICAgICAgICBpZiAocGhvbmdNYXRlcmlhbCkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIG91dGdvaW5nTGlnaHQgPSAobGlnaHRBbWJpZW50LnJnYiAqIGxpZ2h0QW1iaWVudC5hICogZGlmZnVzZUNvbG9yKSArICgob2NjbHVzaW9uICogKCggcmVmbGVjdGVkTGlnaHQuZGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LnNwZWN1bGFyKSkpKSArIGVtaXNzaXZlQ29sb3I7XCIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInZlYzMgb3V0Z29pbmdMaWdodCA9IChvY2NsdXNpb24gKiAocmVmbGVjdGVkTGlnaHQuZGlmZnVzZSkpICsgKG9jY2x1c2lvbiAqIHJlZmxlY3RlZExpZ2h0LnNwZWN1bGFyKSArIGVtaXNzaXZlQ29sb3I7XCIpO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gTk8gU0hBRElORyAtIEVNSVNTSVZFIGFuZCBBTUJJRU5UIE9OTFlcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIHNyYy5wdXNoKFwiYW1iaWVudENvbG9yICo9IChsaWdodEFtYmllbnQucmdiICogbGlnaHRBbWJpZW50LmEpO1wiKTtcblxuICAgICAgICBzcmMucHVzaChcInZlYzMgb3V0Z29pbmdMaWdodCA9IGVtaXNzaXZlQ29sb3IgKyBhbWJpZW50Q29sb3I7XCIpO1xuICAgIH1cblxuICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0NvbG9yID0gdmVjNChvdXRnb2luZ0xpZ2h0LCBhbHBoYSkgKiBjb2xvcml6ZTtcIik7XG5cbiAgICBpZiAoZ2FtbWFPdXRwdXQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb0dhbW1hKGdsX0ZyYWdDb2xvciwgZ2FtbWFGYWN0b3IpO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJnbF9GcmFnRGVwdGhFWFQgPSBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1wiKTtcbiAgICB9XG5cbiAgICBzcmMucHVzaChcIn1cIik7XG5cbiAgICByZXR1cm4gc3JjO1xufVxuXG5leHBvcnQge0RyYXdTaGFkZXJTb3VyY2V9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js ***!
  \*************************************************************************************************/
/*! exports provided: EmphasisEdgesRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisEdgesRenderer\", function() { return EmphasisEdgesRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _EmphasisEdgesShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EmphasisEdgesShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst EmphasisEdgesRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _EmphasisEdgesShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"EmphasisEdgesShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nEmphasisEdgesRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisEdgesRenderer(hash, mesh);\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisEdgesRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nEmphasisEdgesRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisEdgesRenderer.prototype.drawMesh = function (frameCtx, mesh, mode) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const camera = scene.camera;\n    const gl = scene.canvas.gl;\n    let materialState;\n    const meshState = mesh._state;\n    const geometry = mesh._geometry;\n    const geometryState = geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    switch (mode) {\n        case 0:\n            materialState = mesh._xrayMaterial._state;\n            break;\n        case 1:\n            materialState = mesh._highlightMaterial._state;\n            break;\n        case 2:\n            materialState = mesh._selectedMaterial._state;\n            break;\n        case 3:\n        default:\n            materialState = mesh._edgeMaterial._state;\n            break;\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        if (frameCtx.lineWidth !== materialState.edgeWidth) {\n            gl.lineWidth(materialState.edgeWidth);\n            frameCtx.lineWidth = materialState.edgeWidth;\n        }\n        if (this._uEdgeColor) {\n            const edgeColor = materialState.edgeColor;\n            const edgeAlpha = materialState.edgeAlpha;\n            gl.uniform4f(this._uEdgeColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n    let indicesBuf;\n    if (geometryState.primitive === gl.TRIANGLES) {\n        indicesBuf = geometry._getEdgeIndices();\n    } else if (geometryState.primitive === gl.LINES) {\n        indicesBuf = geometryState.indicesBuf;\n    }\n\n    if (indicesBuf) {\n        if (geometryState.id !== this._lastGeometryId) {\n            if (this._uPositionsDecodeMatrix) {\n                gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n            }\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frameCtx.bindArray++;\n            }\n            indicesBuf.bind();\n            frameCtx.bindArray++;\n            this._lastGeometryId = geometryState.id;\n        }\n\n        gl.drawElements(gl.LINES, indicesBuf.numItems, indicesBuf.itemType, 0);\n\n        frameCtx.drawElements++;\n    }\n};\n\nEmphasisEdgesRenderer.prototype._allocate = function (mesh) {\n\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n\n    const program = this._program;\n\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._uEdgeColor = program.getLocation(\"edgeColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uOffset = program.getLocation(\"offset\");\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisEdgesRenderer.prototype._bindProgram = function (frameCtx) {\n\n    const program = this._program;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const camera = scene.camera;\n    const project = camera.project;\n\n    program.bind();\n\n    frameCtx.useProgram++;\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js ***!
  \*****************************************************************************************************/
/*! exports provided: EmphasisEdgesShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisEdgesShaderSource\", function() { return EmphasisEdgesShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n/**\n * @private\n */\nclass EmphasisEdgesShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Edges drawing vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 edgeColor;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    src.push(\"vColor = edgeColor;\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Edges drawing fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js ***!
  \************************************************************************************************/
/*! exports provided: EmphasisFillRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisFillRenderer\", function() { return EmphasisFillRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _EmphasisFillShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EmphasisFillShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst EmphasisFillRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _EmphasisFillShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"EmphasisFillShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst xrayFillRenderers = {};\n\nEmphasisFillRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._sectionPlanesState.getHash(),\n        !!mesh._geometry._state.normalsBuf ? \"n\" : \"\",\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = xrayFillRenderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisFillRenderer(hash, mesh);\n        xrayFillRenderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisFillRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete xrayFillRenderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nEmphasisFillRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisFillRenderer.prototype.drawMesh = function (frameCtx, mesh, mode) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const camera = scene.camera;\n    const gl = scene.canvas.gl;\n    const materialState = mode === 0 ? mesh._xrayMaterial._state : (mode === 1 ? mesh._highlightMaterial._state : mesh._selectedMaterial._state);\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.viewNormalMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const fillColor = materialState.fillColor;\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        gl.uniform4f(this._uFillColor, fillColor[0], fillColor[1], fillColor[2], materialState.fillAlpha);\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aNormal) {\n            this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n            // gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            // frameCtx.drawElements++;\n        } else if (geometryState.positionsBuf) {\n            // gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            //  frameCtx.drawArrays++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positionsBuf) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positionsBuf.numItems);\n        frameCtx.drawArrays++;\n    }\n};\n\nEmphasisFillRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const lightsState = scene._lightsState;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n        const light = lightsState.lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n    this._uSectionPlanes = [];\n    for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._uFillColor = program.getLocation(\"fillColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisFillRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const camera = scene.camera;\n    const project = camera.project;\n    const program = this._program;\n    program.bind();\n    frameCtx.useProgram++;\n    frameCtx.textureUnit = 0;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    this._lastIndicesBufId = null;\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n        const light = lightsState.lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js ***!
  \****************************************************************************************************/
/*! exports provided: EmphasisFillShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisFillShaderSource\", function() { return EmphasisFillShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n/**\n * @private\n */\nclass EmphasisFillShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n\n    const scene = mesh.scene;\n    const lightsState = scene._lightsState;\n    const normals = hasNormals(mesh);\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n\n    src.push(\"// EmphasisFillShaderSource vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4   lightAmbient;\");\n    src.push(\"uniform vec4   fillColor;\");\n    if (normals) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (normals) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    // TODO: A blending mode for emphasis materials, to select add/multiply/mix\n    //src.push(\"vColor = vec4((mix(reflectedColor, fillColor.rgb, 0.7)), fillColor.a);\");\n    src.push(\"vColor = vec4(reflectedColor * fillColor.rgb, fillColor.a);\");\n    //src.push(\"vColor = vec4(reflectedColor + fillColor.rgb, fillColor.a);\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normalsBuf) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Lambertian drawing fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvZW1waGFzaXMvRW1waGFzaXNGaWxsU2hhZGVyU291cmNlLmpzP2MzZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQThDOztBQUU5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyx3REFBVTtBQUN6RDtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2QyxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEM7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLDhDQUE4QztBQUM5QyxZQUFZLHdEQUFVO0FBQ3RCLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSwwQ0FBMEM7QUFDMUMsdUNBQXVDO0FBQ3ZDO0FBQ0Esd0NBQXdDO0FBQ3hDLGlEQUFpRDtBQUNqRCxnREFBZ0Q7QUFDaEQsd0RBQXdELFNBQVM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRCwrRUFBK0U7QUFDL0UsMENBQTBDO0FBQzFDLGdIQUFnSDtBQUNoSCwyQkFBMkI7QUFDM0IsOENBQThDO0FBQzlDLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0Esa0RBQWtEO0FBQ2xELHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0EseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekM7QUFDQSxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDLG9DQUFvQztBQUNwQyxtQkFBbUI7QUFDbkI7QUFDQSwrQkFBK0I7QUFDL0IsdURBQXVEO0FBQ3ZELGlDQUFpQztBQUNqQztBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekUsU0FBUztBQUNULDJEQUEyRDtBQUMzRDtBQUNBLDhEQUE4RDtBQUM5RCw0REFBNEQ7QUFDNUQ7QUFDQSw0Q0FBNEM7QUFDNUMsOENBQThDO0FBQzlDO0FBQ0Esa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEUsMENBQTBDO0FBQzFDLHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7QUFDQSwyRkFBMkY7QUFDM0Ysb0RBQW9EO0FBQ3BELG1EQUFtRDtBQUNuRCx1REFBdUQ7QUFDdkQ7QUFDQSwrREFBK0Q7QUFDL0Qsc0VBQXNFO0FBQ3RFLEtBQUs7QUFDTCwrREFBK0Q7QUFDL0QsaUVBQWlFO0FBQ2pFLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0EsMEdBQTBHO0FBQzFHO0FBQ0Esd0RBQXdEO0FBQ3hELHVEQUF1RDtBQUN2RCxxQ0FBcUM7QUFDckM7QUFDQSx3REFBd0QsU0FBUztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUUsaUJBQWlCO0FBQ2pCLHlHQUF5RztBQUN6RztBQUNBLGFBQWE7QUFDYjtBQUNBLDZGQUE2RjtBQUM3RixpQkFBaUI7QUFDakIseUdBQXlHO0FBQ3pHO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUUsdUdBQXVHO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRjtBQUN0Rix5RUFBeUU7QUFDekUsMkVBQTJFO0FBQzNFO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSxZQUFZLHdEQUFVO0FBQ3RCLG1EQUFtRDtBQUNuRCxTQUFTO0FBQ1QsNkZBQTZGO0FBQzdGLDZDQUE2QztBQUM3QztBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsK0NBQStDLHdEQUFVO0FBQ3pEO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDO0FBQ0Esc0NBQXNDO0FBQ3RDLG9DQUFvQztBQUNwQzs7QUFFQSwrQ0FBK0Msd0RBQVU7QUFDekQsOENBQThDO0FBQzlDLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBLDRDQUE0QztBQUM1Qyw2RUFBNkU7QUFDN0Usd0ZBQXdGO0FBQ3hGLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLHlDQUF5QztBQUN6QyxzRUFBc0UsU0FBUztBQUMvRSwrREFBK0Q7QUFDL0QsNERBQTREO0FBQzVELDREQUE0RDtBQUM1RDtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLCtCQUErQjtBQUMvQjtBQUNBLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsc0VBQXNFLFNBQVM7QUFDL0Usd0RBQXdEO0FBQ3hELDJJQUEySTtBQUMzSSx1QkFBdUI7QUFDdkI7QUFDQSxxQ0FBcUMsU0FBUyxFQUFFO0FBQ2hELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELDBDQUEwQztBQUMxQyxnQ0FBZ0M7QUFDaEMsNkJBQTZCO0FBQzdCLG1CQUFtQjtBQUNuQjtBQUNBLCtDQUErQyx3REFBVTtBQUN6RCw2RUFBNkU7QUFDN0U7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRSxLQUFLO0FBQ0wsd0NBQXdDO0FBQ3hDO0FBQ0EsZUFBZTtBQUNmO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvbWVzaC9lbXBoYXNpcy9FbXBoYXNpc0ZpbGxTaGFkZXJTb3VyY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1dFQkdMX0lORk99IGZyb20gXCIuLi8uLi93ZWJnbEluZm8uanNcIjtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBFbXBoYXNpc0ZpbGxTaGFkZXJTb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKG1lc2gpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXggPSBidWlsZFZlcnRleChtZXNoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQobWVzaCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFZlcnRleChtZXNoKSB7XG5cbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgbGlnaHRzU3RhdGUgPSBzY2VuZS5fbGlnaHRzU3RhdGU7XG4gICAgY29uc3Qgbm9ybWFscyA9IGhhc05vcm1hbHMobWVzaCk7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBxdWFudGl6ZWRHZW9tZXRyeSA9ICEhbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmNvbXByZXNzR2VvbWV0cnk7XG4gICAgY29uc3QgYmlsbGJvYXJkID0gbWVzaC5fc3RhdGUuYmlsbGJvYXJkO1xuICAgIGNvbnN0IHN0YXRpb25hcnkgPSBtZXNoLl9zdGF0ZS5zdGF0aW9uYXJ5O1xuICAgIGNvbnN0IHNyYyA9IFtdO1xuXG4gICAgc3JjLnB1c2goXCIvLyBFbXBoYXNpc0ZpbGxTaGFkZXJTb3VyY2UgdmVydGV4IHNoYWRlclwiKTtcbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQgJiYgV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiI2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVwiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IHByb2pNYXRyaXg7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0IGNvbG9yaXplO1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBvZmZzZXQ7XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBwb3NpdGlvbnNEZWNvZGVNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XCIpO1xuICAgICAgICBpZiAoV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzQgICBsaWdodEFtYmllbnQ7XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0ICAgZmlsbENvbG9yO1wiKTtcbiAgICBpZiAobm9ybWFscykge1xuICAgICAgICBzcmMucHVzaChcImF0dHJpYnV0ZSB2ZWMzIG5vcm1hbDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG1vZGVsTm9ybWFsTWF0cml4O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgdmlld05vcm1hbE1hdHJpeDtcIik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaWdodHNTdGF0ZS5saWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0ID0gbGlnaHRzU3RhdGUubGlnaHRzW2ldO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiYW1iaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjNCBsaWdodENvbG9yXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IFwiZGlyXCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodERpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInBvaW50XCIpIHtcbiAgICAgICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBsaWdodFBvc1wiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcInNwb3RcIikge1xuICAgICAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIGxpZ2h0UG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIG9jdERlY29kZSh2ZWMyIG9jdCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHZlYzMgdiA9IHZlYzMob2N0Lnh5LCAxLjAgLSBhYnMob2N0LngpIC0gYWJzKG9jdC55KSk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgaWYgKHYueiA8IDAuMCkge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgICAgICB2Lnh5ID0gKDEuMCAtIGFicyh2Lnl4KSkgKiB2ZWMyKHYueCA+PSAwLjAgPyAxLjAgOiAtMS4wLCB2LnkgPj0gMC4wID8gMS4wIDogLTEuMCk7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICAgfVwiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgIHJldHVybiBub3JtYWxpemUodik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZDb2xvcjtcIik7XG4gICAgaWYgKGJpbGxib2FyZCA9PT0gXCJzcGhlcmljYWxcIiB8fCBiaWxsYm9hcmQgPT09IFwiY3lsaW5kcmljYWxcIikge1xuICAgICAgICBzcmMucHVzaChcInZvaWQgYmlsbGJvYXJkKGlub3V0IG1hdDQgbWF0KSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFswXVswXSA9IDEuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzBdWzFdID0gMC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMF1bMl0gPSAwLjA7XCIpO1xuICAgICAgICBpZiAoYmlsbGJvYXJkID09PSBcInNwaGVyaWNhbFwiKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVswXSA9IDAuMDtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVsxXSA9IDEuMDtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsxXVsyXSA9IDAuMDtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMl1bMF0gPSAwLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsyXVsxXSA9IDAuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzJdWzJdID0xLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIn1cIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IGxvY2FsUG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLCAxLjApOyBcIik7XG4gICAgc3JjLnB1c2goXCJ2ZWM0IHdvcmxkUG9zaXRpb247XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcImxvY2FsUG9zaXRpb24gPSBwb3NpdGlvbnNEZWNvZGVNYXRyaXggKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgaWYgKHF1YW50aXplZEdlb21ldHJ5KSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInZlYzQgbG9jYWxOb3JtYWwgPSB2ZWM0KG9jdERlY29kZShub3JtYWwueHkpLCAwLjApOyBcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInZlYzQgbG9jYWxOb3JtYWwgPSB2ZWM0KG5vcm1hbCwgMC4wKTsgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwibWF0NCBtb2RlbE5vcm1hbE1hdHJpeDIgPSBtb2RlbE5vcm1hbE1hdHJpeDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwibWF0NCB2aWV3Tm9ybWFsTWF0cml4MiA9IHZpZXdOb3JtYWxNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcIm1hdDQgdmlld01hdHJpeDIgPSB2aWV3TWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcIm1hdDQgbW9kZWxNYXRyaXgyID0gbW9kZWxNYXRyaXg7XCIpO1xuICAgIGlmIChzdGF0aW9uYXJ5KSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmlld01hdHJpeDJbM11bMF0gPSB2aWV3TWF0cml4MlszXVsxXSA9IHZpZXdNYXRyaXgyWzNdWzJdID0gMC4wO1wiKVxuICAgIH1cbiAgICBpZiAoYmlsbGJvYXJkID09PSBcInNwaGVyaWNhbFwiIHx8IGJpbGxib2FyZCA9PT0gXCJjeWxpbmRyaWNhbFwiKSB7XG4gICAgICAgIHNyYy5wdXNoKFwibWF0NCBtb2RlbFZpZXdNYXRyaXggPSB2aWV3TWF0cml4MiAqIG1vZGVsTWF0cml4MjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiYmlsbGJvYXJkKG1vZGVsTWF0cml4Mik7XCIpO1xuICAgICAgICBzcmMucHVzaChcImJpbGxib2FyZCh2aWV3TWF0cml4Mik7XCIpO1xuICAgICAgICBzcmMucHVzaChcImJpbGxib2FyZChtb2RlbFZpZXdNYXRyaXgpO1wiKTtcbiAgICAgICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwibWF0NCBtb2RlbFZpZXdOb3JtYWxNYXRyaXggPSAgdmlld05vcm1hbE1hdHJpeDIgKiBtb2RlbE5vcm1hbE1hdHJpeDI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQobW9kZWxOb3JtYWxNYXRyaXgyKTtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcImJpbGxib2FyZCh2aWV3Tm9ybWFsTWF0cml4Mik7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQobW9kZWxWaWV3Tm9ybWFsTWF0cml4KTtcIik7XG4gICAgICAgIH1cbiAgICAgICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXgyICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmVjNCB2aWV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzcmMucHVzaChcIndvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeDIgKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uLnh5eiA9IHdvcmxkUG9zaXRpb24ueHl6ICsgb2Zmc2V0O1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWM0IHZpZXdQb3NpdGlvbiAgPSB2aWV3TWF0cml4MiAqIHdvcmxkUG9zaXRpb247IFwiKTtcbiAgICB9XG4gICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMzIHZpZXdOb3JtYWwgPSBub3JtYWxpemUoKHZpZXdOb3JtYWxNYXRyaXgyICogbW9kZWxOb3JtYWxNYXRyaXgyICogbG9jYWxOb3JtYWwpLnh5eik7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZlYzMgcmVmbGVjdGVkQ29sb3IgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1wiKTtcbiAgICBzcmMucHVzaChcInZlYzMgdmlld0xpZ2h0RGlyID0gdmVjMygwLjAsIDAuMCwgLTEuMCk7XCIpO1xuICAgIHNyYy5wdXNoKFwiZmxvYXQgbGFtYmVydGlhbiA9IDEuMDtcIik7XG4gICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpZ2h0c1N0YXRlLmxpZ2h0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGlnaHQgPSBsaWdodHNTdGF0ZS5saWdodHNbaV07XG4gICAgICAgICAgICBpZiAobGlnaHQudHlwZSA9PT0gXCJhbWJpZW50XCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaWdodC50eXBlID09PSBcImRpclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0LnNwYWNlID09PSBcInZpZXdcIikge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZShsaWdodERpclwiICsgaSArIFwiKTtcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2aWV3TGlnaHREaXIgPSBub3JtYWxpemUoKHZpZXdNYXRyaXgyICogdmVjNChsaWdodERpclwiICsgaSArIFwiLCAwLjApKS54eXopO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpZ2h0LnR5cGUgPT09IFwicG9pbnRcIikge1xuICAgICAgICAgICAgICAgIGlmIChsaWdodC5zcGFjZSA9PT0gXCJ2aWV3XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3JjLnB1c2goXCJ2aWV3TGlnaHREaXIgPSBub3JtYWxpemUobGlnaHRQb3NcIiArIGkgKyBcIiAtIHZpZXdQb3NpdGlvbi54eXopO1wiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcmMucHVzaChcInZpZXdMaWdodERpciA9IG5vcm1hbGl6ZSgodmlld01hdHJpeDIgKiB2ZWM0KGxpZ2h0UG9zXCIgKyBpICsgXCIsIDAuMCkpLnh5eik7XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcmMucHVzaChcImxhbWJlcnRpYW4gPSBtYXgoZG90KC12aWV3Tm9ybWFsLCB2aWV3TGlnaHREaXIpLCAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwicmVmbGVjdGVkQ29sb3IgKz0gbGFtYmVydGlhbiAqIChsaWdodENvbG9yXCIgKyBpICsgXCIucmdiICogbGlnaHRDb2xvclwiICsgaSArIFwiLmEpO1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUT0RPOiBBIGJsZW5kaW5nIG1vZGUgZm9yIGVtcGhhc2lzIG1hdGVyaWFscywgdG8gc2VsZWN0IGFkZC9tdWx0aXBseS9taXhcbiAgICAvL3NyYy5wdXNoKFwidkNvbG9yID0gdmVjNCgobWl4KHJlZmxlY3RlZENvbG9yLCBmaWxsQ29sb3IucmdiLCAwLjcpKSwgZmlsbENvbG9yLmEpO1wiKTtcbiAgICBzcmMucHVzaChcInZDb2xvciA9IHZlYzQocmVmbGVjdGVkQ29sb3IgKiBmaWxsQ29sb3IucmdiLCBmaWxsQ29sb3IuYSk7XCIpO1xuICAgIC8vc3JjLnB1c2goXCJ2Q29sb3IgPSB2ZWM0KHJlZmxlY3RlZENvbG9yICsgZmlsbENvbG9yLnJnYiwgZmlsbENvbG9yLmEpO1wiKTtcbiAgICBpZiAoY2xpcHBpbmcpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb247XCIpO1xuICAgIH1cbiAgICBpZiAobWVzaC5fZ2VvbWV0cnkuX3N0YXRlLnByaW1pdGl2ZU5hbWUgPT09IFwicG9pbnRzXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJnbF9Qb2ludFNpemUgPSBwb2ludFNpemU7XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZlYzQgY2xpcFBvcyA9IHByb2pNYXRyaXggKiB2aWV3UG9zaXRpb247XCIpO1xuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCkge1xuICAgICAgICBpZiAoV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInZGcmFnRGVwdGggPSAxLjAgKyBjbGlwUG9zLnc7XCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJjbGlwUG9zLnogPSBsb2cyKCBtYXgoIDFlLTYsIGNsaXBQb3MudyArIDEuMCApICkgKiBsb2dEZXB0aEJ1ZkZDIC0gMS4wO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiY2xpcFBvcy56ICo9IGNsaXBQb3MudztcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3JjLnB1c2goXCJnbF9Qb3NpdGlvbiA9IGNsaXBQb3M7XCIpO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICByZXR1cm4gc3JjO1xufVxuXG5mdW5jdGlvbiBoYXNOb3JtYWxzKG1lc2gpIHtcbiAgICBjb25zdCBwcmltaXRpdmUgPSBtZXNoLl9nZW9tZXRyeS5fc3RhdGUucHJpbWl0aXZlTmFtZTtcbiAgICBpZiAoKG1lc2guX2dlb21ldHJ5Ll9zdGF0ZS5hdXRvVmVydGV4Tm9ybWFscyB8fCBtZXNoLl9nZW9tZXRyeS5fc3RhdGUubm9ybWFsc0J1ZikgJiYgKHByaW1pdGl2ZSA9PT0gXCJ0cmlhbmdsZXNcIiB8fCBwcmltaXRpdmUgPT09IFwidHJpYW5nbGUtc3RyaXBcIiB8fCBwcmltaXRpdmUgPT09IFwidHJpYW5nbGUtZmFuXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQobWVzaCkge1xuXG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IHNlY3Rpb25QbGFuZXNTdGF0ZSA9IG1lc2guc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZTtcbiAgICBjb25zdCBnYW1tYU91dHB1dCA9IG1lc2guc2NlbmUuZ2FtbWFPdXRwdXQ7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBzZWN0aW9uUGxhbmVzU3RhdGUuc2VjdGlvblBsYW5lcy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IHNyYyA9IFtdO1xuXG4gICAgc3JjLnB1c2goXCIvLyBMYW1iZXJ0aWFuIGRyYXdpbmcgZnJhZ21lbnQgc2hhZGVyXCIpO1xuXG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkICYmIFdFQkdMX0lORk8uU1VQUE9SVEVEX0VYVEVOU0lPTlNbXCJFWFRfZnJhZ19kZXB0aFwiXSkge1xuICAgICAgICBzcmMucHVzaChcIiNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGVcIik7XG4gICAgfVxuXG4gICAgc3JjLnB1c2goXCIjaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0hcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIGhpZ2hwIGludDtcIik7XG4gICAgc3JjLnB1c2goXCIjZWxzZVwiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1wiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBtZWRpdW1wIGludDtcIik7XG4gICAgc3JjLnB1c2goXCIjZW5kaWZcIik7XG5cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQgJiYgV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XCIpO1xuICAgIH1cblxuICAgIGlmIChnYW1tYU91dHB1dCkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gZmxvYXQgZ2FtbWFGYWN0b3I7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZlYzQgbGluZWFyVG9HYW1tYSggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgcmV0dXJuIHZlYzQoIHBvdyggdmFsdWUueHl6LCB2ZWMzKCAxLjAgLyBnYW1tYUZhY3RvciApICksIHZhbHVlLncgKTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICB9XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGJvb2wgY2xpcHBhYmxlO1wiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gYm9vbCBzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBzZWN0aW9uUGxhbmVQb3NcIiArIGkgKyBcIjtcIik7XG4gICAgICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBzZWN0aW9uUGxhbmVEaXJcIiArIGkgKyBcIjtcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzQgdkNvbG9yO1wiKTtcbiAgICBzcmMucHVzaChcInZvaWQgbWFpbih2b2lkKSB7XCIpO1xuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcImlmIChjbGlwcGFibGUpIHtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICBmbG9hdCBkaXN0ID0gMC4wO1wiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImlmIChzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZGlzdCArPSBjbGFtcChkb3QoLXNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiLnh5eiwgdldvcmxkUG9zaXRpb24ueHl6IC0gc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCIueHl6KSwgMC4wLCAxMDAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgaWYgKGRpc3QgPiAwLjApIHsgZGlzY2FyZDsgfVwiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBpZiAobWVzaC5fZ2VvbWV0cnkuX3N0YXRlLnByaW1pdGl2ZU5hbWUgPT09IFwicG9pbnRzXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2ZWMyIGN4eSA9IDIuMCAqIGdsX1BvaW50Q29vcmQgLSAxLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcImZsb2F0IHIgPSBkb3QoY3h5LCBjeHkpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJpZiAociA+IDEuMCkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBkaXNjYXJkO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQgJiYgV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0RlcHRoRVhUID0gbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcIik7XG4gICAgfVxuICAgIGlmIChnYW1tYU91dHB1dCkge1xuICAgICAgICBzcmMucHVzaChcImdsX0ZyYWdDb2xvciA9IGxpbmVhclRvR2FtbWEodkNvbG9yLCBnYW1tYUZhY3Rvcik7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0NvbG9yID0gdkNvbG9yO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmV4cG9ydCB7RW1waGFzaXNGaWxsU2hhZGVyU291cmNlfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js ***!
  \**********************************************************************************************/
/*! exports provided: OcclusionRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionRenderer\", function() { return OcclusionRenderer; });\n/* harmony import */ var _OcclusionShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OcclusionShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3();\n\n// No ID, because there is exactly one PickMeshRenderer per scene\n\n/**\n * @private\n */\nconst OcclusionRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _OcclusionShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"OcclusionShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nOcclusionRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new OcclusionRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nOcclusionRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nOcclusionRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nOcclusionRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    const camera = scene.camera;\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n    }\n};\n\nOcclusionRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nOcclusionRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const project = scene.camera.project;\n    const gl = scene.canvas.gl;\n    this._program.bind();\n    frameCtx.useProgram++;\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js ***!
  \**************************************************************************************************/
/*! exports provided: OcclusionShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionShaderSource\", function() { return OcclusionShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n/**\n * @private\n */\nclass OcclusionShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Mesh occlusion vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix2 * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Mesh occlusion fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"void main(void) {\");\n\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n\n    src.push(\"   gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0); \");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n\n    src.push(\"}\");\n\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js ***!
  \****************************************************************************************/
/*! exports provided: PickMeshRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickMeshRenderer\", function() { return PickMeshRenderer; });\n/* harmony import */ var _PickMeshShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PickMeshShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3();\n\n// No ID, because there is exactly one PickMeshRenderer per scene\n\n/**\n * @private\n */\nconst PickMeshRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _PickMeshShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"PickMeshShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickMeshRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickMeshRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickMeshRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nPickMeshRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickMeshRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCPickViewMatrix(meshState.rtcCenterHash, rtcCenter) : frameCtx.pickViewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frameCtx.pickProjMatrix);\n    gl.uniformMatrix4fv(this._uModelMatrix, false, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    // Mesh-indexed color\n    var pickID = mesh._state.pickID;\n    const a = pickID >> 24 & 0xFF;\n    const b = pickID >> 16 & 0xFF;\n    const g = pickID >> 8 & 0xFF;\n    const r = pickID & 0xFF;\n    gl.uniform4f(this._uPickColor, r / 255, g / 255, b / 255, a / 255);\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n    }\n};\n\nPickMeshRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uPickColor = program.getLocation(\"pickColor\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastGeometryId = null;\n};\n\nPickMeshRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const project = scene.camera.project;\n    this._program.bind();\n    frameCtx.useProgram++;\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    this._lastMaterialId = null;\n    this._lastGeometryId = null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js ***!
  \********************************************************************************************/
/*! exports provided: PickMeshShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickMeshShaderSource\", function() { return PickMeshShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n/**\n * @private\n */\nclass PickMeshShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Mesh picking vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"varying vec4 vViewPosition;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix2 * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Mesh picking fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    src.push(\"uniform vec4 pickColor;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    src.push(\"   gl_FragColor = pickColor; \");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvcGljay9QaWNrTWVzaFNoYWRlclNvdXJjZS5qcz9lNGJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7QUFFOEM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHdEQUFVO0FBQ3pEO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMsdUNBQXVDO0FBQ3ZDLHNDQUFzQztBQUN0QyxzQ0FBc0M7QUFDdEMseUNBQXlDO0FBQ3pDLGtDQUFrQztBQUNsQztBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsWUFBWSx3REFBVTtBQUN0QiwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xELHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0EseUNBQXlDO0FBQ3pDLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekM7QUFDQSxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDLG9DQUFvQztBQUNwQyxtQkFBbUI7QUFDbkI7QUFDQSwrQkFBK0I7QUFDL0IsdURBQXVEO0FBQ3ZEO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0EsNENBQTRDO0FBQzVDLDhDQUE4QztBQUM5QztBQUNBLGtGQUFrRjtBQUNsRjtBQUNBO0FBQ0Esb0VBQW9FO0FBQ3BFLDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekM7QUFDQSxtRUFBbUU7QUFDbkUsZ0VBQWdFO0FBQ2hFLGlFQUFpRTtBQUNqRTtBQUNBLG9EQUFvRDtBQUNwRDtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBLFlBQVksd0RBQVU7QUFDdEIsbURBQW1EO0FBQ25ELFNBQVM7QUFDVCw2RkFBNkY7QUFDN0YsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHdEQUFVO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEM7QUFDQSxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDO0FBQ0EsK0NBQStDLHdEQUFVO0FBQ3pELDhDQUE4QztBQUM5QywyQ0FBMkM7QUFDM0M7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQSx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDLHVCQUF1Qiw2Q0FBNkM7QUFDcEUsK0RBQStEO0FBQy9ELDREQUE0RDtBQUM1RCw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckMsdUJBQXVCLDZDQUE2QztBQUNwRSx3REFBd0Q7QUFDeEQsMklBQTJJO0FBQzNJLHVCQUF1QjtBQUN2QjtBQUNBLHFDQUFxQyxTQUFTLEVBQUU7QUFDaEQsbUJBQW1CO0FBQ25CO0FBQ0EsK0NBQStDLHdEQUFVO0FBQ3pELDZFQUE2RTtBQUM3RTtBQUNBLDBDQUEwQztBQUMxQyxlQUFlO0FBQ2Y7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tZXNoL3BpY2svUGlja01lc2hTaGFkZXJTb3VyY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgeGVvbGFicyAvIGh0dHBzOi8vZ2l0aHViLmNvbS94ZW9sYWJzXG4gKi9cblxuaW1wb3J0IHtXRUJHTF9JTkZPfSBmcm9tIFwiLi4vLi4vd2ViZ2xJbmZvLmpzXCI7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUGlja01lc2hTaGFkZXJTb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKG1lc2gpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXggPSBidWlsZFZlcnRleChtZXNoKTtcbiAgICAgICAgdGhpcy5mcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQobWVzaCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBidWlsZFZlcnRleChtZXNoKSB7XG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IGNsaXBwaW5nID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3QgcXVhbnRpemVkR2VvbWV0cnkgPSAhIW1lc2guX2dlb21ldHJ5Ll9zdGF0ZS5jb21wcmVzc0dlb21ldHJ5O1xuICAgIGNvbnN0IGJpbGxib2FyZCA9IG1lc2guX3N0YXRlLmJpbGxib2FyZDtcbiAgICBjb25zdCBzdGF0aW9uYXJ5ID0gbWVzaC5fc3RhdGUuc3RhdGlvbmFyeTtcbiAgICBjb25zdCBzcmMgPSBbXTtcbiAgICBzcmMucHVzaChcIi8vIE1lc2ggcGlja2luZyB2ZXJ0ZXggc2hhZGVyXCIpO1xuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCAmJiBXRUJHTF9JTkZPLlNVUFBPUlRFRF9FWFRFTlNJT05TW1wiRVhUX2ZyYWdfZGVwdGhcIl0pIHtcbiAgICAgICAgc3JjLnB1c2goXCIjZXh0ZW5zaW9uIEdMX0VYVF9mcmFnX2RlcHRoIDogZW5hYmxlXCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgcHJvak1hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzQgdlZpZXdQb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgb2Zmc2V0O1wiKTtcbiAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIG1hdDQgcG9zaXRpb25zRGVjb2RlTWF0cml4O1wiKTtcbiAgICB9XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1wiKTtcbiAgICAgICAgaWYgKFdFQkdMX0lORk8uU1VQUE9SVEVEX0VYVEVOU0lPTlNbXCJFWFRfZnJhZ19kZXB0aFwiXSkge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChiaWxsYm9hcmQgPT09IFwic3BoZXJpY2FsXCIgfHwgYmlsbGJvYXJkID09PSBcImN5bGluZHJpY2FsXCIpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2b2lkIGJpbGxib2FyZChpbm91dCBtYXQ0IG1hdCkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMF1bMF0gPSAxLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFswXVsxXSA9IDAuMDtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzBdWzJdID0gMC4wO1wiKTtcbiAgICAgICAgaWYgKGJpbGxib2FyZCA9PT0gXCJzcGhlcmljYWxcIikge1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMV1bMF0gPSAwLjA7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMV1bMV0gPSAxLjA7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMV1bMl0gPSAwLjA7XCIpO1xuICAgICAgICB9XG4gICAgICAgIHNyYy5wdXNoKFwiICAgbWF0WzJdWzBdID0gMC4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgICBtYXRbMl1bMV0gPSAwLjA7XCIpO1xuICAgICAgICBzcmMucHVzaChcIiAgIG1hdFsyXVsyXSA9MS4wO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZvaWQgbWFpbih2b2lkKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbFBvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4wKTsgXCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcImxvY2FsUG9zaXRpb24gPSBwb3NpdGlvbnNEZWNvZGVNYXRyaXggKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCJtYXQ0IHZpZXdNYXRyaXgyID0gdmlld01hdHJpeDtcIik7XG4gICAgc3JjLnB1c2goXCJtYXQ0IG1vZGVsTWF0cml4MiA9IG1vZGVsTWF0cml4O1wiKTtcbiAgICBpZiAoc3RhdGlvbmFyeSkge1xuICAgICAgICBzcmMucHVzaChcInZpZXdNYXRyaXgyWzNdWzBdID0gdmlld01hdHJpeDJbM11bMV0gPSB2aWV3TWF0cml4MlszXVsyXSA9IDAuMDtcIilcbiAgICB9XG4gICAgaWYgKGJpbGxib2FyZCA9PT0gXCJzcGhlcmljYWxcIiB8fCBiaWxsYm9hcmQgPT09IFwiY3lsaW5kcmljYWxcIikge1xuICAgICAgICBzcmMucHVzaChcIm1hdDQgbW9kZWxWaWV3TWF0cml4ID0gdmlld01hdHJpeDIgKiBtb2RlbE1hdHJpeDI7XCIpO1xuICAgICAgICBzcmMucHVzaChcImJpbGxib2FyZChtb2RlbE1hdHJpeDIpO1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCJiaWxsYm9hcmQodmlld01hdHJpeDIpO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCIgICB2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeDIgKiBsb2NhbFBvc2l0aW9uO1wiKTtcbiAgICBzcmMucHVzaChcIiAgIHdvcmxkUG9zaXRpb24ueHl6ID0gd29ybGRQb3NpdGlvbi54eXogKyBvZmZzZXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwiICAgdmVjNCB2aWV3UG9zaXRpb24gPSB2aWV3TWF0cml4MiAqIHdvcmxkUG9zaXRpb247XCIpO1xuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcIiAgIHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbjtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidmVjNCBjbGlwUG9zID0gcHJvak1hdHJpeCAqIHZpZXdQb3NpdGlvbjtcIik7XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIGlmIChXRUJHTF9JTkZPLlNVUFBPUlRFRF9FWFRFTlNJT05TW1wiRVhUX2ZyYWdfZGVwdGhcIl0pIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidkZyYWdEZXB0aCA9IDEuMCArIGNsaXBQb3MudztcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImNsaXBQb3MueiA9IGxvZzIoIG1heCggMWUtNiwgY2xpcFBvcy53ICsgMS4wICkgKSAqIGxvZ0RlcHRoQnVmRkMgLSAxLjA7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJjbGlwUG9zLnogKj0gY2xpcFBvcy53O1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzcmMucHVzaChcImdsX1Bvc2l0aW9uID0gY2xpcFBvcztcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQobWVzaCkge1xuICAgIGNvbnN0IHNjZW5lID0gbWVzaC5zY2VuZTtcbiAgICBjb25zdCBzZWN0aW9uUGxhbmVzU3RhdGUgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlO1xuICAgIGNvbnN0IGNsaXBwaW5nID0gc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBzcmMgPSBbXTtcbiAgICBzcmMucHVzaChcIi8vIE1lc2ggcGlja2luZyBmcmFnbWVudCBzaGFkZXJcIik7XG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkICYmIFdFQkdMX0lORk8uU1VQUE9SVEVEX0VYVEVOU0lPTlNbXCJFWFRfZnJhZ19kZXB0aFwiXSkge1xuICAgICAgICBzcmMucHVzaChcIiNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGVcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwiI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdIXCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1wiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBoaWdocCBpbnQ7XCIpO1xuICAgIHNyYy5wdXNoKFwiI2Vsc2VcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gbWVkaXVtcCBpbnQ7XCIpO1xuICAgIHNyYy5wdXNoKFwiI2VuZGlmXCIpO1xuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCAmJiBXRUJHTF9JTkZPLlNVUFBPUlRFRF9FWFRFTlNJT05TW1wiRVhUX2ZyYWdfZGVwdGhcIl0pIHtcbiAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGZsb2F0IGxvZ0RlcHRoQnVmRkM7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWM0IHBpY2tDb2xvcjtcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBib29sIGNsaXBwYWJsZTtcIik7XG4gICAgICAgIHNyYy5wdXNoKFwidmFyeWluZyB2ZWM0IHZXb3JsZFBvc2l0aW9uO1wiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWN0aW9uUGxhbmVzU3RhdGUuc2VjdGlvblBsYW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIGJvb2wgc2VjdGlvblBsYW5lQWN0aXZlXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICAgICAgc3JjLnB1c2goXCJ1bmlmb3JtIHZlYzMgc2VjdGlvblBsYW5lRGlyXCIgKyBpICsgXCI7XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiaWYgKGNsaXBwYWJsZSkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgIGZsb2F0IGRpc3QgPSAwLjA7XCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImlmIChzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZGlzdCArPSBjbGFtcChkb3QoLXNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiLnh5eiwgdldvcmxkUG9zaXRpb24ueHl6IC0gc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCIueHl6KSwgMC4wLCAxMDAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgaWYgKGRpc3QgPiAwLjApIHsgZGlzY2FyZDsgfVwiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBpZiAoc2NlbmUubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlckVuYWJsZWQgJiYgV0VCR0xfSU5GTy5TVVBQT1JURURfRVhURU5TSU9OU1tcIkVYVF9mcmFnX2RlcHRoXCJdKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiZ2xfRnJhZ0RlcHRoRVhUID0gbG9nMiggdkZyYWdEZXB0aCApICogbG9nRGVwdGhCdWZGQyAqIDAuNTtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwiICAgZ2xfRnJhZ0NvbG9yID0gcGlja0NvbG9yOyBcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmV4cG9ydCB7UGlja01lc2hTaGFkZXJTb3VyY2V9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js ***!
  \********************************************************************************************/
/*! exports provided: PickTriangleRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickTriangleRenderer\", function() { return PickTriangleRenderer; });\n/* harmony import */ var _PickTriangleShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PickTriangleShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst PickTriangleRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _PickTriangleShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"PickTriangleShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickTriangleRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickTriangleRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickTriangleRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nPickTriangleRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickTriangleRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometry = mesh._geometry;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n    const backfaces = materialState.backfaces;\n    const frontface = materialState.frontface;\n    const project = scene.camera.project;\n    const positionsBuf = geometry._getPickTrianglePositions();\n    const pickColorsBuf = geometry._getPickTriangleColors();\n\n    this._program.bind();\n\n    frameCtx.useProgram++;\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCPickViewMatrix(meshState.rtcCenterHash, rtcCenter) : frameCtx.pickViewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_3__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frameCtx.pickProjMatrix);\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        gl.uniform1f(this._uZFar, scene.camera.project.far);\n    }\n\n    if (frameCtx.backfaces !== backfaces) {\n        if (backfaces) {\n            gl.disable(gl.CULL_FACE);\n        } else {\n            gl.enable(gl.CULL_FACE);\n        }\n        frameCtx.backfaces = backfaces;\n    }\n    if (frameCtx.frontface !== frontface) {\n        if (frontface) {\n            gl.frontFace(gl.CCW);\n        } else {\n            gl.frontFace(gl.CW);\n        }\n        frameCtx.frontface = frontface;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, false, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n    if (this._uPositionsDecodeMatrix) {\n        gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        this._aPosition.bindArrayBuffer(positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n    } else {\n        this._aPosition.bindArrayBuffer(positionsBuf);\n    }\n    pickColorsBuf.bind();\n    gl.enableVertexAttribArray(this._aColor.location);\n    gl.vertexAttribPointer(this._aColor.location, pickColorsBuf.itemSize, pickColorsBuf.itemType, true, 0, 0); // Normalize\n    gl.drawArrays(geometryState.primitive, 0, positionsBuf.numItems / 3);\n};\n\nPickTriangleRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aColor = program.getAttribute(\"color\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n};\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js ***!
  \************************************************************************************************/
/*! exports provided: PickTriangleShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickTriangleShaderSource\", function() { return PickTriangleShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @private\n */\n\n\nclass PickTriangleShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Surface picking vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix * localPosition; \");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vColor = color;\");\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Surface picking fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    src.push(\"varying vec4 vColor;\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (let i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    src.push(\"   gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js ***!
  \****************************************************************************************/
/*! exports provided: ShadowRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShadowRenderer\", function() { return ShadowRenderer; });\n/* harmony import */ var _ShadowShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ShadowShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n\n\n\n\n/**\n * @private\n */\nconst ShadowRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _ShadowShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"ShadowShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nShadowRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [scene.canvas.canvas.id, scene._sectionPlanesState.getHash(), mesh._geometry._state.hash, mesh._state.hash].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new ShadowRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nShadowRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nShadowRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nShadowRenderer.prototype.drawMesh = function (frame, mesh) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frame.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frame.frontface = frontface;\n        }\n        if (frame.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frame.lineWidth = materialState.lineWidth;\n        }\n        if (this._uPointSize) {\n            gl.uniform1i(this._uPointSize, materialState.pointSize);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh.vertexBufs;\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the preceding VertexBufs chunk\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nShadowRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    this._scene = scene;\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uShadowViewMatrix = program.getLocation(\"shadowViewMatrix\");\n    this._uShadowProjMatrix = program.getLocation(\"shadowProjMatrix\");\n    this._uSectionPlanes = {};\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nShadowRenderer.prototype._bindProgram = function (frame) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n    this._program.bind();\n    frame.useProgram++;\n    gl.uniformMatrix4fv(this._uShadowViewMatrix, false, frame.shadowViewMatrix);\n    gl.uniformMatrix4fv(this._uShadowProjMatrix, false, frame.shadowProjMatrix);\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    if (sectionPlanesState.sectionPlanes.length > 0) {\n        let sectionPlaneUniforms;\n        let uSectionPlaneActive;\n        let sectionPlane;\n        let uSectionPlanePos;\n        let uSectionPlaneDir;\n        for (let i = 0, len = this._uSectionPlanes.length; i < len; i++) {\n            sectionPlaneUniforms = this._uSectionPlanes[i];\n            uSectionPlaneActive = sectionPlaneUniforms.active;\n            sectionPlane = sectionPlanesState.sectionPlanes[i];\n            if (uSectionPlaneActive) {\n                gl.uniform1i(uSectionPlaneActive, sectionPlane.active);\n            }\n            uSectionPlanePos = sectionPlaneUniforms.pos;\n            if (uSectionPlanePos) {\n                gl.uniform3fv(sectionPlaneUniforms.pos, sectionPlane.pos);\n            }\n            uSectionPlaneDir = sectionPlaneUniforms.dir;\n            if (uSectionPlaneDir) {\n                gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n            }\n        }\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js ***!
  \********************************************************************************************/
/*! exports provided: ShadowShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShadowShaderSource\", function() { return ShadowShaderSource; });\n/**\n * @private\n */\nclass ShadowShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const src = [];\n    src.push(\"// Mesh shadow vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 shadowViewMatrix;\");\n    src.push(\"uniform mat4 shadowProjMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"worldPosition = modelMatrix * localPosition;\");\n    src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"vec4 viewPosition  = shadowViewMatrix * worldPosition; \");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = shadowProjMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Mesh shadow fragment shader\");\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"vec4 encodeFloat( const in float depth ) {\");\n    src.push(\"  const vec4 bitShift = vec4(256 * 256 * 256, 256 * 256, 256, 1.0);\");\n    src.push(\"  const vec4 bitMask = vec4(0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\");\n    src.push(\"  vec4 comp = fract(depth * bitShift);\");\n    src.push(\"  comp -= comp.xxyz * bitMask;\");\n    src.push(\"  return comp;\");\n    src.push(\"}\");\n\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = encodeFloat(gl_FragCoord.z);\");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvc2hhZG93L1NoYWRvd1NoYWRlclNvdXJjZS5qcz84MzU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2Qyw0Q0FBNEM7QUFDNUMsNENBQTRDO0FBQzVDLGtDQUFrQztBQUNsQztBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsK0JBQStCO0FBQy9CLHVEQUF1RDtBQUN2RCxpQ0FBaUM7QUFDakM7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQSwwREFBMEQ7QUFDMUQsNkRBQTZEO0FBQzdELG9FQUFvRTtBQUNwRTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLCtEQUErRDtBQUMvRCxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEM7QUFDQSxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0EseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qyx1QkFBdUIsNkNBQTZDO0FBQ3BFLCtEQUErRDtBQUMvRCw0REFBNEQ7QUFDNUQsNERBQTREO0FBQzVEO0FBQ0E7O0FBRUEsd0RBQXdEO0FBQ3hELGlGQUFpRjtBQUNqRixvRkFBb0Y7QUFDcEYsb0RBQW9EO0FBQ3BELDRDQUE0QztBQUM1Qyw0QkFBNEI7QUFDNUIsZUFBZTs7QUFFZiwrQkFBK0I7QUFDL0I7QUFDQSxrQ0FBa0M7QUFDbEMscUNBQXFDO0FBQ3JDLHVCQUF1Qiw2Q0FBNkM7QUFDcEUsd0RBQXdEO0FBQ3hELDJJQUEySTtBQUMzSSx1QkFBdUI7QUFDdkI7QUFDQSxxQ0FBcUMsU0FBUyxFQUFFO0FBQ2hELG1CQUFtQjtBQUNuQjtBQUNBLHlEQUF5RDtBQUN6RCxlQUFlO0FBQ2Y7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tZXNoL3NoYWRvdy9TaGFkb3dTaGFkZXJTb3VyY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFNoYWRvd1NoYWRlclNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IobWVzaCkge1xuICAgICAgICB0aGlzLnZlcnRleCA9IGJ1aWxkVmVydGV4KG1lc2gpO1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gYnVpbGRGcmFnbWVudChtZXNoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVmVydGV4KG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBxdWFudGl6ZWRHZW9tZXRyeSA9ICEhbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmNvbXByZXNzR2VvbWV0cnk7XG4gICAgY29uc3Qgc3JjID0gW107XG4gICAgc3JjLnB1c2goXCIvLyBNZXNoIHNoYWRvdyB2ZXJ0ZXggc2hhZGVyXCIpO1xuICAgIHNyYy5wdXNoKFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzaGFkb3dWaWV3TWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzaGFkb3dQcm9qTWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBvZmZzZXQ7XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBwb3NpdGlvbnNEZWNvZGVNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBpZiAoY2xpcHBpbmcpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzQgdldvcmxkUG9zaXRpb247XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZvaWQgbWFpbih2b2lkKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbFBvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4wKTsgXCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCB3b3JsZFBvc2l0aW9uO1wiKTtcbiAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJsb2NhbFBvc2l0aW9uID0gcG9zaXRpb25zRGVjb2RlTWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uLnh5eiA9IHdvcmxkUG9zaXRpb24ueHl6ICsgb2Zmc2V0O1wiKTtcbiAgICBzcmMucHVzaChcInZlYzQgdmlld1Bvc2l0aW9uICA9IHNoYWRvd1ZpZXdNYXRyaXggKiB3b3JsZFBvc2l0aW9uOyBcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCIgICBnbF9Qb3NpdGlvbiA9IHNoYWRvd1Byb2pNYXRyaXggKiB2aWV3UG9zaXRpb247XCIpO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICByZXR1cm4gc3JjO1xufVxuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lc1N0YXRlID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZTtcbiAgICBjb25zdCBjbGlwcGluZyA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3Qgc3JjID0gW107XG4gICAgc3JjLnB1c2goXCIvLyBNZXNoIHNoYWRvdyBmcmFnbWVudCBzaGFkZXJcIik7XG5cbiAgICBzcmMucHVzaChcIiNpZmRlZiBHTF9GUkFHTUVOVF9QUkVDSVNJT05fSElHSFwiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gaGlnaHAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbHNlXCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbmRpZlwiKTtcblxuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gYm9vbCBjbGlwcGFibGU7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2V29ybGRQb3NpdGlvbjtcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBib29sIHNlY3Rpb25QbGFuZUFjdGl2ZVwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIHNlY3Rpb25QbGFuZVBvc1wiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIHNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNyYy5wdXNoKFwidmVjNCBlbmNvZGVGbG9hdCggY29uc3QgaW4gZmxvYXQgZGVwdGggKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwiICBjb25zdCB2ZWM0IGJpdFNoaWZ0ID0gdmVjNCgyNTYgKiAyNTYgKiAyNTYsIDI1NiAqIDI1NiwgMjU2LCAxLjApO1wiKTtcbiAgICBzcmMucHVzaChcIiAgY29uc3QgdmVjNCBiaXRNYXNrID0gdmVjNCgwLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAsIDEuMCAvIDI1Ni4wKTtcIik7XG4gICAgc3JjLnB1c2goXCIgIHZlYzQgY29tcCA9IGZyYWN0KGRlcHRoICogYml0U2hpZnQpO1wiKTtcbiAgICBzcmMucHVzaChcIiAgY29tcCAtPSBjb21wLnh4eXogKiBiaXRNYXNrO1wiKTtcbiAgICBzcmMucHVzaChcIiAgcmV0dXJuIGNvbXA7XCIpO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiaWYgKGNsaXBwYWJsZSkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgIGZsb2F0IGRpc3QgPSAwLjA7XCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImlmIChzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZGlzdCArPSBjbGFtcChkb3QoLXNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiLnh5eiwgdldvcmxkUG9zaXRpb24ueHl6IC0gc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCIueHl6KSwgMC4wLCAxMDAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgaWYgKGRpc3QgPiAwLjApIHsgZGlzY2FyZDsgfVwiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcImdsX0ZyYWdDb2xvciA9IGVuY29kZUZsb2F0KGdsX0ZyYWdDb29yZC56KTtcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmV4cG9ydCB7U2hhZG93U2hhZGVyU291cmNlfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/metriqs/Metriqs.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/metriqs/Metriqs.js ***!
  \*****************************************************************************/
/*! exports provided: Metrics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Metrics\", function() { return Metrics; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n//----------------------------------------------------------------------------------------------------------------------\n// This file is named \"Metriqs.js\" because \"Metrics.js\" is blocked by uBlock Origin (https://en.wikipedia.org/wiki/UBlock_Origin)\n//----------------------------------------------------------------------------------------------------------------------\n\n\n\n\nconst unitsInfo = {\n    meters: {\n        abbrev: \"m\"\n    },\n    metres: {\n        abbrev: \"m\"\n    },\n    centimeters: {\n        abbrev: \"cm\"\n    },\n    centimetres: {\n        abbrev: \"cm\"\n    },\n    millimeters: {\n        abbrev: \"mm\"\n    },\n    millimetres: {\n        abbrev: \"mm\"\n    },\n    yards: {\n        abbrev: \"yd\"\n    },\n    feet: {\n        abbrev: \"ft\"\n    },\n    inches: {\n        abbrev: \"in\"\n    }\n};\n\n/**\n * @desc Configures its {@link Scene}'s measurement unit and mapping between the Real-space and World-space 3D Cartesian coordinate systems.\n *\n *\n * ## Overview\n *\n * * Located at {@link Scene#metrics}.\n * * {@link Metrics#units} configures the Real-space unit type, which is ````\"meters\"```` by default.\n * * {@link Metrics#scale} configures the number of Real-space units represented by each unit within the World-space 3D coordinate system. This is ````1.0```` by default.\n * * {@link Metrics#origin} configures the 3D Real-space origin, in current Real-space units, at which this {@link Scene}'s World-space coordinate origin sits, This is ````[0,0,0]```` by default.\n *\n * ## Usage\n *\n * Let's load a model using an {@link XKTLoaderPlugin}, then configure the Real-space unit type and the coordinate\n * mapping between the Real-space and World-space 3D coordinate systems.\n *\n * ````JavaScript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {XKTLoaderPlugin} from \"../src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [-2.37, 18.97, -26.12];\n * viewer.scene.camera.look = [10.97, 5.82, -11.22];\n * viewer.scene.camera.up = [0.36, 0.83, 0.40];\n *\n * const xktLoader = new XKTLoaderPlugin(viewer);\n *\n * const model = xktLoader.load({\n *     src: \"./models/xkt/duplex/duplex.xkt\"\n * });\n *\n * const metrics = viewer.scene.metrics;\n *\n * metrics.units = \"meters\";\n * metrics.scale = 10.0;\n * metrics.origin = [100.0, 0.0, 200.0];\n * ````\n */\nclass Metrics extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._units = \"meters\";\n        this._scale = 1.0;\n        this._origin = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3([0, 0, 0]);\n\n        this.units = cfg.units;\n        this.scale = cfg.scale;\n        this.origin = cfg.origin;\n    }\n\n    /**\n     * Gets info about the supported Real-space unit types.\n     *\n     * This will be:\n     *\n     * ````javascript\n     * {\n     *      {\n     *          meters: {\n     *              abbrev: \"m\"\n     *          },\n     *          metres: {\n     *              abbrev: \"m\"\n     *          },\n     *          centimeters: {\n     *              abbrev: \"cm\"\n     *          },\n     *          centimetres: {\n     *              abbrev: \"cm\"\n     *          },\n     *          millimeters: {\n     *              abbrev: \"mm\"\n     *          },\n     *          millimetres: {\n     *              abbrev: \"mm\"\n     *          },\n     *          yards: {\n     *              abbrev: \"yd\"\n     *          },\n     *          feet: {\n     *              abbrev: \"ft\"\n     *          },\n     *          inches: {\n     *              abbrev: \"in\"\n     *          }\n     *      }\n     * }\n     * ````\n     *\n     * @type {*}\n     */\n    get unitsInfo() {\n        return unitsInfo;\n    }\n\n    /**\n     * Sets the {@link Scene}'s Real-space unit type.\n     *\n     * Accepted values are ````\"meters\"````, ````\"centimeters\"````, ````\"millimeters\"````, ````\"metres\"````, ````\"centimetres\"````, ````\"millimetres\"````, ````\"yards\"````, ````\"feet\"```` and ````\"inches\"````.\n     *\n     * @emits ````\"units\"```` event on change, with the value of this property.\n     * @type {String}\n     */\n    set units(value) {\n        if (!value) {\n            value = \"meters\";\n        }\n        const info = unitsInfo[value];\n        if (!info) {\n            this.error(\"Unsupported value for 'units': \" + value + \" defaulting to 'meters'\");\n            value = \"meters\";\n        }\n        this._units = value;\n        this.fire(\"units\", this._units);\n    }\n\n    /**\n     * Gets the {@link Scene}'s Real-space unit type.\n     *\n     * @type {String}\n     */\n    get units() {\n        return this._units;\n    }\n\n    /**\n     * Sets the number of Real-space units represented by each unit of the {@link Scene}'s World-space coordinate system.\n     *\n     * For example, if {@link Metrics#units} is ````\"meters\"````, and there are ten meters per World-space coordinate system unit, then ````scale```` would have a value of ````10.0````.\n     *\n     * @emits ````\"scale\"```` event on change, with the value of this property.\n     * @type {Number}\n     */\n    set scale(value) {\n        value = value || 1;\n        if (value <= 0) {\n            this.error(\"scale value should be larger than zero\");\n            return;\n        }\n        this._scale = value;\n        this.fire(\"scale\", this._scale);\n    }\n\n    /**\n     * Gets the number of Real-space units represented by each unit of the {@link Scene}'s World-space coordinate system.\n     *\n     * @type {Number}\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the Real-space 3D origin, in Real-space units, at which this {@link Scene}'s World-space coordinate origin ````[0,0,0]```` sits.\n     *\n     * @emits \"origin\" event on change, with the value of this property.\n     * @type {Number[]}\n     */\n    set origin(value) {\n        if (!value) {\n            this._origin[0] = 0;\n            this._origin[1] = 0;\n            this._origin[2] = 0;\n            return;\n        }\n        this._origin[0] = value[0];\n        this._origin[1] = value[1];\n        this._origin[2] = value[2];\n        this.fire(\"origin\", this._origin);\n    }\n\n    /**\n     * Gets the 3D Real-space origin, in Real-space units, at which this {@link Scene}'s World-space coordinate origin ````[0,0,0]```` sits.\n     *\n     * @type {Number[]}\n     */\n    get origin() {\n        return this._origin;\n    }\n\n    /**\n     * Converts a 3D position from World-space to Real-space.\n     *\n     * This is equivalent to ````realPos = #origin + (worldPos * #scale)````.\n     *\n     * @param {Number[]} worldPos World-space 3D position, in World coordinate system units.\n     * @param {Number[]} [realPos] Destination for Real-space 3D position.\n     * @returns {Number[]} Real-space 3D position, in units indicated by {@link Metrics#units}.\n     */\n    worldToRealPos(worldPos, realPos = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3(3)) {\n        realPos[0] = this._origin[0] + (this._scale * worldPos[0]);\n        realPos[1] = this._origin[1] + (this._scale * worldPos[1]);\n        realPos[2] = this._origin[2] + (this._scale * worldPos[2]);\n    }\n\n    /**\n     * Converts a 3D position from Real-space to World-space.\n     *\n     * This is equivalent to ````worldPos = (worldPos - #origin) / #scale````.\n     *\n     * @param {Number[]} realPos Real-space 3D position.\n     * @param {Number[]} [worldPos] Destination for World-space 3D position.\n     * @returns {Number[]} World-space 3D position.\n     */\n    realToWorldPos(realPos, worldPos = _math_math_js__WEBPACK_IMPORTED_MODULE_1__[\"math\"].vec3(3)) {\n        worldPos[0] = (realPos[0] - this._origin[0]) / this._scale;\n        worldPos[1] = (realPos[1] - this._origin[1]) / this._scale;\n        worldPos[2] = (realPos[2] - this._origin[2]) / this._scale;\n        return worldPos;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/metriqs/Metriqs.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/postfx/SAO.js":
/*!************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/postfx/SAO.js ***!
  \************************************************************************/
/*! exports provided: SAO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SAO\", function() { return SAO; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n\n/**\n * @desc Configures Scalable Ambient Obscurance (SAO) for a {@link Scene}.\n *\n *  <a href=\"https://xeokit.github.io/xeokit-sdk/examples/#postEffects_SAO_OTCConferenceCenter\"><img src=\"http://xeokit.io/img/docs/SAO/saoEnabledDisabled.gif\"></a>\n *\n * [[Run this example](https://xeokit.github.io/xeokit-sdk/examples/#postEeffects_SAO_OTCConferenceCenter)]\n *\n * ## Overview\n *\n * SAO approximates [Ambient Occlusion](https://en.wikipedia.org/wiki/Ambient_occlusion) in realtime. It darkens creases, cavities and surfaces\n * that are close to each other, which tend to be occluded from ambient light and appear darker.\n *\n * The animated GIF above shows the effect as we repeatedly enable and disable SAO. When SAO is enabled, we can see darkening\n * in regions such as the corners, and the crevices between stairs. This increases the amount of detail we can see when ambient\n * light is high, or when objects have uniform colors across their surfaces. Run the example to experiment with the various\n * SAO configurations.\n *\n * xeokit's implementation of SAO is based on the paper [Scalable Ambient Obscurance](https://research.nvidia.com/sites/default/files/pubs/2012-06_Scalable-Ambient-Obscurance/McGuire12SAO.pdf).\n *\n * ## Caveats\n *\n * Currently, SAO only works with perspective and orthographic projections. Therefore, to use SAO, make sure {@link Camera#projection} is\n * either \"perspective\" or \"ortho\".\n *\n * {@link SAO#scale} and {@link SAO#intensity} must be tuned to the distance\n * between {@link Perspective#near} and {@link Perspective#far}, or the distance\n * between {@link Ortho#near} and {@link Ortho#far}, depending on which of those two projections the {@link Camera} is currently\n * using. Use the [live example](https://xeokit.github.io/xeokit-sdk/examples/#postEeffects_SAO_OTCConferenceCenter) to get a\n * feel for that.\n *\n * ## Usage\n *\n * In the example below, we'll start by logging a warning message to the console if SAO is not supported by the\n * system.\n *\n *Then we'll enable and configure SAO, position the camera, and configure the near and far perspective and orthographic\n * clipping planes. Finally, we'll use {@link XKTLoaderPlugin} to load the OTC Conference Center model.\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {XKTLoaderPlugin} from \"../src/plugins/XKTLoaderPlugin/XKTLoaderPlugin.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\",\n *     transparent: true\n * });\n *\n * const sao = viewer.scene.sao;\n *\n * if (!sao.supported) {\n *     sao.warn(\"SAO is not supported on this system - ignoring SAO configs\")\n * }\n *\n * sao.enabled = true; // Enable SAO - only works if supported (see above)\n * sao.intensity = 0.15;\n * sao.bias = 0.5;\n * sao.scale = 1.0;\n * sao.minResolution = 0.0;\n * sao.numSamples = 10;\n * sao.kernelRadius = 100;\n * sao.blendCutoff = 0.1;\n *\n * const camera = viewer.scene.camera;\n *\n * camera.eye = [3.69, 5.83, -23.98];\n * camera.look = [84.31, -29.88, -116.21];\n * camera.up = [0.18, 0.96, -0.21];\n *\n * camera.perspective.near = 0.1;\n * camera.perspective.far = 2000.0;\n *\n * camera.ortho.near = 0.1;\n * camera.ortho.far = 2000.0;\n * camera.projection = \"perspective\";\n *\n * const xktLoader = new XKTLoaderPlugin(viewer);\n *\n * const model = xktLoader.load({\n *     id: \"myModel\",\n *     src: \"./models/xkt/OTCConferenceCenter/OTCConferenceCenter.xkt\",\n *     metaModelSrc: \"./metaModels/OTCConferenceCenter/metaModel.json\",\n *     edges: true\n * });\n * ````\n *\n * [[Run this example](https://xeokit.github.io/xeokit-sdk/examples/#postEeffects_SAO_OTCConferenceCenter)]\n *\n * ## Efficiency\n *\n * SAO can incur some rendering overhead, especially on objects that are viewed close to the camera. For this reason,\n * it's recommended to use a low value for {@link SAO#kernelRadius}.  A low radius will sample pixels that are close\n * to the source pixel, which will allow the GPU to efficiently cache those pixels. When {@link Camera#projection} is \"perspective\",\n * objects near to the viewpoint will use larger radii than farther pixels. Therefore, computing  SAO for close objects\n * is more expensive than for objects far away, that occupy fewer pixels on the canvas.\n *\n * ## Selectively enabling SAO for models\n *\n * When loading multiple models into a Scene, we sometimes only want SAO on the models that are actually going to\n * show it, such as the architecture or structure, and not show SAO on models that won't show it well, such as the\n * electrical wiring, or plumbing.\n *\n * To illustrate, lets load some of the models for the West Riverside Hospital. We'll enable SAO on the structure model,\n * but disable it on the electrical and plumbing.\n *\n * This will only apply SAO to those models if {@link SAO#supported} and {@link SAO#enabled} are both true.\n *\n * Note, by the way, how we load the models in sequence. Since XKTLoaderPlugin uses scratch memory as part of its loading\n * process, this allows the plugin to reuse that same memory across multiple loads, instead of having to create multiple\n * pools of scratch memory.\n *\n * ````javascript\n * const structure = xktLoader.load({\n *      id: \"structure\",\n *      src: \"./models/xkt/WestRiverSideHospital/structure.xkt\",\n *      metaModelSrc: \"./metaModels/WestRiverSideHospital/structure.json\",\n *      edges: true,\n *      saoEnabled: true\n *  });\n *\n *  structure.on(\"loaded\", () => {\n *\n *      const electrical = xktLoader.load({\n *          id: \"electrical\",\n *          src: \"./models/xkt/WestRiverSideHospital/electrical.xkt\",\n *          metaModelSrc: \"./metaModels/WestRiverSideHospital/electrical.json\",\n *          edges: true\n *      });\n *\n *      electrical.on(\"loaded\", () => {\n *\n *          const plumbing = xktLoader.load({\n *              id: \"plumbing\",\n *              src: \"./models/xkt/WestRiverSideHospital/plumbing.xkt\",\n *              metaModelSrc: \"./metaModels/WestRiverSideHospital/plumbing.json\",\n *                  edges: true\n *              });\n *          });\n *      });\n * });\n * ````\n *\n * ## Disabling SAO while camera is moving\n *\n * For smoother interaction with large models on low-power hardware, we can disable SAO while the {@link Camera} is moving:\n *\n * ````javascript\n * const timeoutDuration = 150; // Milliseconds\n * var timer = timeoutDuration;\n * var saoDisabled = false;\n *\n * const onCameraMatrix = scene.camera.on(\"matrix\", () => {\n *     timer = timeoutDuration;\n *     if (!saoDisabled) {\n *         scene.sao.enabled = false;\n *         saoDisabled = true;\n *     }\n * });\n *\n * const onSceneTick = scene.on(\"tick\", (tickEvent) => {\n *     if (!saoDisabled) {\n *         return;\n *     }\n *     timer -= tickEvent.deltaTime; // Milliseconds\n *     if (timer <= 0) {\n *         if (saoDisabled) {\n *             scene.sao.enabled = true;\n *             saoDisabled = false;\n *         }\n *     }\n * });\n * ````\n *\n * [[Run this example](https://xeokit.github.io/xeokit-sdk/examples/#techniques_nonInteractiveQuality)]\n */\nclass SAO extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /** @private */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._supported = _webglInfo_js__WEBPACK_IMPORTED_MODULE_1__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"]; // For computing normals in SAO fragment shader\n\n        this.enabled = cfg.enabled;\n        this.kernelRadius = cfg.kernelRadius;\n        this.intensity = cfg.intensity;\n        this.bias = cfg.bias;\n        this.scale = cfg.scale;\n        this.minResolution = cfg.minResolution;\n        this.numSamples = cfg.numSamples;\n        this.blur = cfg.blur;\n        this.blendCutoff = cfg.blendCutoff;\n        this.blendFactor = cfg.blendFactor;\n    }\n\n    /**\n     * Gets whether or not SAO is supported by this browser and GPU.\n     *\n     * Even when enabled, SAO will only work if supported.\n     *\n     * @type {Boolean}\n     */\n    get supported() {\n        return this._supported;\n    }\n\n    /**\n     * Sets whether SAO is enabled for the {@link Scene}.\n     *\n     * Even when enabled, SAO will only work if supported.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set enabled(value) {\n        value = !!value;\n        if (this._enabled === value) {\n            return;\n        }\n        this._enabled = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether SAO is enabled for the {@link Scene}.\n     *\n     * Even when enabled, SAO will only apply if supported.\n     *\n     * Default value is ````false````.\n     * \n     * @type {Boolean}\n     */\n    get enabled() {\n        return this._enabled;\n    }\n\n    /**\n     * Returns true if SAO is currently possible, where it is supported, enabled, and the current scene state is compatible.\n     * Called internally by renderer logic.\n     * @private\n     * @returns {boolean}\n     */\n    get possible() {\n        if (!this._supported) {\n            return false;\n        }\n        if (!this._enabled) {\n            return false;\n        }\n        const projection = this.scene.camera.projection;\n        if (projection === \"customProjection\") {\n            return false;\n        }\n        if (projection === \"frustum\") {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @private\n     * @returns {boolean|*}\n     */\n    get active() {\n        return this._active;\n    }\n\n    /**\n     * Sets the maximum area that SAO takes into account when checking for possible occlusion for each fragment.\n     *\n     * Default value is ````100.0````.\n     *\n     * @type {Number}\n     */\n    set kernelRadius(value) {\n        if (value === undefined || value === null) {\n            value = 100.0;\n        }\n        if (this._kernelRadius === value) {\n            return;\n        }\n        this._kernelRadius = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the maximum area that SAO takes into account when checking for possible occlusion for each fragment.\n     *\n     * Default value is ````100.0````.\n     * \n     * @type {Number}\n     */\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    /**\n     * Sets the degree of darkening (ambient obscurance) produced by the SAO effect.\n     *\n     * Default value is ````0.15````.\n     *\n     * @type {Number}\n     */\n    set intensity(value) {\n        if (value === undefined || value === null) {\n            value = 0.15;\n        }\n        if (this._intensity === value) {\n            return;\n        }\n        this._intensity = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the degree of darkening (ambient obscurance) produced by the SAO effect.\n     *\n     * Default value is ````0.15````.\n     * \n     * @type {Number}\n     */\n    get intensity() {\n        return this._intensity;\n    }\n\n    /**\n     * Sets the SAO bias.\n     *\n     * Default value is ````0.5````.\n     *\n     * @type {Number}\n     */\n    set bias(value) {\n        if (value === undefined || value === null) {\n            value = 0.5;\n        }\n        if (this._bias === value) {\n            return;\n        }\n        this._bias = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the SAO bias.\n     *\n     * Default value is ````0.5````.\n     *\n     * @type {Number}\n     */\n    get bias() {\n        return this._bias;\n    }\n\n    /**\n     * Sets the SAO occlusion scale.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    set scale(value) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (this._scale === value) {\n            return;\n        }\n        this._scale = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the SAO occlusion scale.\n     *\n     * Default value is ````1.0````.\n     *\n     * @type {Number}\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the SAO minimum resolution.\n     *\n     * Default value is ````0.0````.\n     *\n     * @type {Number}\n     */\n    set minResolution(value) {\n        if (value === undefined || value === null) {\n            value = 0.0;\n        }\n        if (this._minResolution === value) {\n            return;\n        }\n        this._minResolution = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the SAO minimum resolution.\n     *\n     * Default value is ````0.0````.\n     *\n     * @type {Number}\n     */\n    get minResolution() {\n        return this._minResolution;\n    }\n\n    /**\n     * Sets the number of SAO samples.\n     *\n     * Default value is ````10````.\n     *\n     * Update this sparingly, since it causes a shader recompile.\n     *\n     * @type {Number}\n     */\n    set numSamples(value) {\n        if (value === undefined || value === null) {\n            value = 10;\n        }\n        if (this._numSamples === value) {\n            return;\n        }\n        this._numSamples = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the number of SAO samples.\n     *\n     * Default value is ````10````.\n     *\n     * @type {Number}\n     */\n    get numSamples() {\n        return this._numSamples;\n    }\n\n    /**\n     * Sets whether Guassian blur is enabled.\n     *\n     * Default value is ````true````.\n     *\n     * @type {Boolean}\n     */\n    set blur(value) {\n        value = (value !== false);\n        if (this._blur === value) {\n            return;\n        }\n        this._blur = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether Guassian blur is enabled.\n     *\n     * Default value is ````true````.\n     *\n     * @type {Boolean}\n     */\n    get blur() {\n        return this._blur;\n    }\n\n    /**\n     * Sets the SAO blend cutoff.\n     *\n     * Default value is ````0.3````.\n     *\n     * Normally you don't need to alter this.\n     *\n     * @type {Number}\n     */\n    set blendCutoff(value) {\n        if (value === undefined || value === null) {\n            value = 0.3;\n        }\n        if (this._blendCutoff === value) {\n            return;\n        }\n        this._blendCutoff = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the SAO blend cutoff.\n     *\n     * Default value is ````0.3````.\n     *\n     * Normally you don't need to alter this.\n     *\n     * @type {Number}\n     */\n    get blendCutoff() {\n        return this._blendCutoff;\n    }\n\n    /**\n     * Sets the SAO blend factor.\n     *\n     * Default value is ````1.0````.\n     *\n     * Normally you don't need to alter this.\n     *\n     * @type {Number}\n     */\n    set blendFactor(value) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (this._blendFactor === value) {\n            return;\n        }\n        this._blendFactor = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the SAO blend scale.\n     *\n     * Default value is ````1.0````.\n     *\n     * Normally you don't need to alter this.\n     *\n     * @type {Number}\n     */\n    get blendFactor() {\n        return this._blendFactor;\n    }\n\n    /**\n     * Destroys this component.\n     */\n    destroy() {\n        super.destroy();\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/postfx/SAO.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/scene/Scene.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/scene/Scene.js ***!
  \*************************************************************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _canvas_Canvas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../canvas/Canvas.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/canvas/Canvas.js\");\n/* harmony import */ var _webgl_Renderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webgl/Renderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Renderer.js\");\n/* harmony import */ var _input_Input_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../input/Input.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/input/Input.js\");\n/* harmony import */ var _viewport_Viewport_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../viewport/Viewport.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/viewport/Viewport.js\");\n/* harmony import */ var _camera_Camera_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../camera/Camera.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/camera/Camera.js\");\n/* harmony import */ var _lights_DirLight_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../lights/DirLight.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/DirLight.js\");\n/* harmony import */ var _lights_AmbientLight_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../lights/AmbientLight.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/lights/AmbientLight.js\");\n/* harmony import */ var _geometry_ReadableGeometry_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../geometry/ReadableGeometry.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/ReadableGeometry.js\");\n/* harmony import */ var _geometry_builders_buildBoxGeometry_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../geometry/builders/buildBoxGeometry.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildBoxGeometry.js\");\n/* harmony import */ var _materials_PhongMaterial_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../materials/PhongMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PhongMaterial.js\");\n/* harmony import */ var _materials_EmphasisMaterial_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../materials/EmphasisMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EmphasisMaterial.js\");\n/* harmony import */ var _materials_EdgeMaterial_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../materials/EdgeMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/EdgeMaterial.js\");\n/* harmony import */ var _metriqs_Metriqs_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../metriqs/Metriqs.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/metriqs/Metriqs.js\");\n/* harmony import */ var _postfx_SAO_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../postfx/SAO.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/postfx/SAO.js\");\n/* harmony import */ var _materials_PointsMaterial_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../materials/PointsMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/PointsMaterial.js\");\n/* harmony import */ var _materials_LinesMaterial_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../materials/LinesMaterial.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/materials/LinesMaterial.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Enables runtime check for redundant calls to object state update methods, eg. Scene#_objectVisibilityUpdated\nconst ASSERT_OBJECT_STATE_UPDATE = false;\n\n// Cached vars to avoid garbage collection\n\nfunction getEntityIDMap(scene, entityIds) {\n    const map = {};\n    let entityId;\n    let entity;\n    for (let i = 0, len = entityIds.length; i < len; i++) {\n        entityId = entityIds[i];\n        entity = scene.component[entityId];\n        if (!entity) {\n            scene.warn(\"pick(): Component not found: \" + entityId);\n            continue;\n        }\n        if (!entity.isEntity) {\n            scene.warn(\"pick(): Component is not an Entity: \" + entityId);\n            continue;\n        }\n        map[entityId] = true;\n    }\n    return map;\n}\n\n/**\n * Fired whenever a debug message is logged on a component within this Scene.\n * @event log\n * @param {String} value The debug message\n */\n\n/**\n * Fired whenever an error is logged on a component within this Scene.\n * @event error\n * @param {String} value The error message\n */\n\n/**\n * Fired whenever a warning is logged on a component within this Scene.\n * @event warn\n * @param {String} value The warning message\n */\n\n/**\n * @desc Contains the components that comprise a 3D scene.\n *\n * * A {@link Viewer} has a single Scene, which it provides in {@link Viewer#scene}.\n * * Plugins like {@link AxisGizmoPlugin} also have their own private Scenes.\n * * Each Scene has a corresponding {@link MetaScene}, which the Viewer provides in {@link Viewer#metaScene}.\n *\n * ## Getting a Viewer's Scene\n *\n * ````javascript\n * var scene = viewer.scene;\n * ````\n *\n * ## Creating and accessing Scene components\n *\n * As a brief introduction to creating Scene components, we'll create a {@link Mesh} that has a\n * {@link buildTorusGeometry} and a {@link PhongMaterial}:\n *\n * ````javascript\n * var teapotMesh = new Mesh(scene, {\n *     id: \"myMesh\",                               // <<---------- ID automatically generated if not provided\n *     geometry: new TorusGeometry(scene),\n *     material: new PhongMaterial(scene, {\n *         id: \"myMaterial\",\n *         diffuse: [0.2, 0.2, 1.0]\n *     })\n * });\n *\n * teapotMesh.scene.camera.eye = [45, 45, 45];\n * ````\n *\n * Find components by ID in their Scene's {@link Scene#components} map:\n *\n * ````javascript\n * var teapotMesh = scene.components[\"myMesh\"];\n * teapotMesh.visible = false;\n *\n * var teapotMaterial = scene.components[\"myMaterial\"];\n * teapotMaterial.diffuse = [1,0,0]; // Change to red\n * ````\n *\n * A Scene also has a map of component instances for each {@link Component} subtype:\n *\n * ````javascript\n * var meshes = scene.types[\"Mesh\"];\n * var teapotMesh = meshes[\"myMesh\"];\n * teapotMesh.xrayed = true;\n *\n * var phongMaterials = scene.types[\"PhongMaterial\"];\n * var teapotMaterial = phongMaterials[\"myMaterial\"];\n * teapotMaterial.diffuse = [0,1,0]; // Change to green\n * ````\n *\n * See {@link Node}, {@link Node} and {@link Model} for how to create and access more sophisticated content.\n *\n * ## Controlling the camera\n *\n * Use the Scene's {@link Camera} to control the current viewpoint and projection:\n *\n * ````javascript\n * var camera = myScene.camera;\n *\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n *\n * camera.projection = \"perspective\";\n * camera.perspective.fov = 45;\n * //...\n * ````\n *\n * ## Managing the canvas\n *\n * The Scene's {@link Canvas} component provides various conveniences relevant to the WebGL canvas, such\n * as firing resize events etc:\n *\n * ````javascript\n * var canvas = scene.canvas;\n *\n * canvas.on(\"boundary\", function(boundary) {\n *     //...\n * });\n * ````\n *\n * ## Picking\n *\n * Use {@link Scene#pick} to pick and raycast entites.\n *\n * For example, to pick a point on the surface of the closest entity at the given canvas coordinates:\n *\n * ````javascript\n * var pickResult = scene.pick({\n *      pickSurface: true,\n *      canvasPos: [23, 131]\n * });\n *\n * if (pickResult) { // Picked an entity\n *\n *     var entity = pickResult.entity;\n *\n *     var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n *     var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n *     var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n *     var localPos = pickResult.localPos; // Float64Array containing the picked Local-space position on the triangle\n *     var worldPos = pickResult.worldPos; // Float64Array containing the picked World-space position on the triangle\n *     var viewPos = pickResult.viewPos; // Float64Array containing the picked View-space position on the triangle\n *     var bary = pickResult.bary; // Float64Array containing the picked barycentric position within the triangle\n *     var normal = pickResult.normal; // Float64Array containing the interpolated normal vector at the picked position on the triangle\n *     var uv = pickResult.uv; // Float64Array containing the interpolated UV coordinates at the picked position on the triangle\n * }\n * ````\n *\n * ## Pick masking\n *\n * We can use {@link Scene#pick}'s ````includeEntities```` and ````excludeEntities````  options to mask which {@link Mesh}es we attempt to pick.\n *\n * This is useful for picking through things, to pick only the Entities of interest.\n *\n * To pick only Entities ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Entities that are\n * in the way, as if they weren't there:\n *\n * ````javascript\n * var pickResult = scene.pick({\n *      canvasPos: [23, 131],\n *      includeEntities: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (pickResult) {\n *       // Entity will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var entity = pickResult.entity;\n * }\n * ````\n *\n * To pick any pickable Entity, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\n * Entities if they happen to be in the way:\n *\n * ````javascript\n * var pickResult = scene.pick({\n *      canvasPos: [23, 131],\n *      excludeEntities: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (pickResult) {\n *       // Entity will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var entity = pickResult.entity;\n * }\n * ````\n *\n * See {@link Scene#pick} for more info on picking.\n *\n * ## Querying and tracking boundaries\n *\n * Getting a Scene's World-space axis-aligned boundary (AABB):\n *\n * ````javascript\n * var aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n * ````\n *\n * Subscribing to updates to the AABB, which occur whenever {@link Entity}s are transformed, their\n * {@link ReadableGeometry}s have been updated, or the {@link Camera} has moved:\n *\n * ````javascript\n * scene.on(\"boundary\", function() {\n *      var aabb = scene.aabb;\n * });\n * ````\n *\n * Getting the AABB of the {@link Entity}s with the given IDs:\n *\n * ````JavaScript\n * scene.getAABB(); // Gets collective boundary of all Entities in the scene\n * scene.getAABB(\"saw\"); // Gets boundary of an Object\n * scene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of two Objects\n * ````\n *\n * See {@link Scene#getAABB} and {@link Entity} for more info on querying and tracking boundaries.\n *\n * ## Managing the viewport\n *\n * The Scene's {@link Viewport} component manages the WebGL viewport:\n *\n * ````javascript\n * var viewport = scene.viewport\n * viewport.boundary = [0, 0, 500, 400];;\n * ````\n *\n * ## Controlling rendering\n *\n * You can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\n * scene to multiple viewports, such as for stereo effects.\n *\n * In the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\n * with a callback that intercepts the Scene before each render and sets its {@link Viewport} to a\n * different portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\n * two views to be shown on the canvas at the same time.\n *\n * ````Javascript\n * var viewport = scene.viewport;\n *\n * // Configure Scene to render twice for each frame\n * scene.passes = 2; // Default is 1\n * scene.clearEachPass = false; // Default is false\n *\n * // Render to a separate viewport on each render\n *\n * var viewport = scene.viewport;\n * viewport.autoBoundary = false;\n *\n * scene.on(\"rendering\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n *              break;\n *\n *          case 1:\n *              viewport.boundary = [200, 0, 200, 200];\n *              break;\n *      }\n * });\n *\n * // We can also intercept the Scene after each render,\n * // (though we're not using this for anything here)\n * scene.on(\"rendered\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              break;\n *\n *          case 1:\n *              break;\n *      }\n * });\n * ````\n *\n * ## Gamma correction\n *\n * Within its shaders, xeokit performs shading calculations in linear space.\n *\n * By default, the Scene expects color textures (eg. {@link PhongMaterial#diffuseMap},\n * {@link MetallicMaterial#baseColorMap} and {@link SpecularMaterial#diffuseMap}) to\n * be in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\n * always expected to be in linear space.\n *\n * By default, the Scene will also gamma-correct its rendered output.\n *\n * You can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n *\n * ````javascript\n * scene.gammaInput = false;\n * ````\n *\n * You would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\n * leave that enabled:\n *\n * ````javascript\n * scene.gammaOutput = true;\n * ````\n *\n * See {@link Texture} for more information on texture encoding and gamma.\n *\n * @class Scene\n */\nclass Scene extends _Component_js__WEBPACK_IMPORTED_MODULE_3__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Scene\";\n    }\n\n    /**\n     * @private\n     * @constructor\n     * @param {Viewer} viewer The Viewer this Scene belongs to.\n     * @param {Object} cfg Scene configuration.\n     * @param {String} [cfg.canvasId]  ID of an existing HTML canvas for the {@link Scene#canvas} - either this or canvasElement is mandatory. When both values are given, the element reference is always preferred to the ID.\n     * @param {HTMLCanvasElement} [cfg.canvasElement] Reference of an existing HTML canvas for the {@link Scene#canvas} - either this or canvasId is mandatory. When both values are given, the element reference is always preferred to the ID.\n     * @throws {String} Throws an exception when both canvasId or canvasElement are missing or they aren't pointing to a valid HTMLCanvasElement.\n     */\n    constructor(viewer, cfg = {}) {\n\n        super(null, cfg);\n\n        const canvas = cfg.canvasElement || document.getElementById(cfg.canvasId);\n\n        if (!(canvas instanceof HTMLCanvasElement)) {\n            throw \"Mandatory config expected: valid canvasId or canvasElement\";\n        }\n\n        const transparent = (!!cfg.transparent);\n        const alphaDepthMask = (!!cfg.alphaDepthMask);\n\n        this._aabbDirty = true;\n\n        /**\n         * The {@link Viewer} this Scene belongs to.\n         * @type {Viewer}\n         */\n        this.viewer = viewer;\n\n        /** Decremented each frame, triggers occlusion test for occludable {@link Marker}s when zero.\n         * @private\n         * @type {number}\n         */\n        this.occlusionTestCountdown = 0;\n\n        /**\n         The number of models currently loading.\n\n         @property loading\n         @final\n         @type {Number}\n         */\n        this.loading = 0;\n\n        /**\n         The epoch time (in milliseconds since 1970) when this Scene was instantiated.\n\n         @property timeCreated\n         @final\n         @type {Number}\n         */\n        this.startTime = (new Date()).getTime();\n\n        /**\n         * Map of {@link Entity}s that represent models.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id} when {@link Entity#isModel} is ````true````.\n         *\n         * @property models\n         * @final\n         * @type {{String:Entity}}\n         */\n        this.models = {};\n\n        /**\n         * Map of {@link Entity}s that represents objects.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id} when {@link Entity#isObject} is ````true````.\n         *\n         * @property objects\n         * @final\n         * @type {{String:Entity}}\n         */\n        this.objects = {};\n        this._numObjects = 0;\n\n        /**\n         * Map of currently visible {@link Entity}s that represent objects.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true````, and is visible when {@link Entity#visible} is true.\n         *\n         * @property visibleObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.visibleObjects = {};\n        this._numVisibleObjects = 0;\n\n        /**\n         * Map of currently xrayed {@link Entity}s that represent objects.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true````, and is xrayed when {@link Entity#xrayed} is true.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property xrayedObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.xrayedObjects = {};\n        this._numXRayedObjects = 0;\n\n        /**\n         * Map of currently highlighted {@link Entity}s that represent objects.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true```` is true, and is highlighted when {@link Entity#highlighted} is true.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property highlightedObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.highlightedObjects = {};\n        this._numHighlightedObjects = 0;\n\n        /**\n         * Map of currently selected {@link Entity}s that represent objects.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is true, and is selected while {@link Entity#selected} is true.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property selectedObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.selectedObjects = {};\n        this._numSelectedObjects = 0;\n\n        /**\n         * Map of currently colorized {@link Entity}s that represent objects.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true````.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property colorizedObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.colorizedObjects = {};\n        this._numColorizedObjects = 0;\n\n        /**\n         * Map of {@link Entity}s that represent objects whose opacity was updated.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true````.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property opacityObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.opacityObjects = {};\n        this._numOpacityObjects = 0;\n\n        /**\n         * Map of {@link Entity}s that represent objects whose {@link Entity#offset}s were updated.\n         *\n         * An Entity represents an object if {@link Entity#isObject} is ````true````.\n         *\n         * Each {@link Entity} is mapped here by {@link Entity#id}.\n         *\n         * @property offsetObjects\n         * @final\n         * @type {{String:Object}}\n         */\n        this.offsetObjects = {};\n        this._numOffsetObjects = 0;\n\n        // Cached ID arrays, lazy-rebuilt as needed when stale after map updates\n\n        /**\n         Lazy-regenerated ID lists.\n         */\n        this._modelIds = null;\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._xrayedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n        this._colorizedObjectIds = null;\n        this._opacityObjectIds = null;\n        this._offsetObjectIds = null;\n\n        this._collidables = {}; // Components that contribute to the Scene AABB\n        this._compilables = {}; // Components that require shader compilation\n\n        this._needRecompile = false;\n\n        /**\n         * For each {@link Component} type, a map of IDs to {@link Component} instances of that type.\n         *\n         * @type {{String:{String:Component}}}\n         */\n        this.types = {};\n\n        /**\n         * The {@link Component}s within this Scene, each mapped to its {@link Component#id}.\n         *\n         * *@type {{String:Component}}\n         */\n        this.components = {};\n\n        /**\n         * The {@link SectionPlane}s in this Scene, each mapped to its {@link SectionPlane#id}.\n         *\n         * @type {{String:SectionPlane}}\n         */\n        this.sectionPlanes = {};\n\n        /**\n         * The {@link Light}s in this Scene, each mapped to its {@link Light#id}.\n         *\n         * @type {{String:Light}}\n         */\n        this.lights = {};\n\n        /**\n         * The {@link LightMap}s in this Scene, each mapped to its {@link LightMap#id}.\n         *\n         * @type {{String:LightMap}}\n         */\n        this.lightMaps = {};\n\n        /**\n         * The {@link ReflectionMap}s in this Scene, each mapped to its {@link ReflectionMap#id}.\n         *\n         * @type {{String:ReflectionMap}}\n         */\n        this.reflectionMaps = {};\n\n        /**\n         * The real world offset for this Scene\n         *\n         * @type {Number[]}\n         */\n        this.realWorldOffset = cfg.realWorldOffset || new Float64Array([0, 0, 0]);\n\n        /**\n         * Manages the HTML5 canvas for this Scene.\n         *\n         * @type {Canvas}\n         */\n        this.canvas = new _canvas_Canvas_js__WEBPACK_IMPORTED_MODULE_4__[\"Canvas\"](this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            canvas: canvas,\n            spinnerElementId: cfg.spinnerElementId,\n            transparent: transparent,\n            backgroundColor: cfg.backgroundColor,\n            webgl2: cfg.webgl2 !== false,\n            contextAttr: cfg.contextAttr || {},\n            clearColorAmbient: cfg.clearColorAmbient,\n            premultipliedAlpha: cfg.premultipliedAlpha\n        });\n\n        this.canvas.on(\"boundary\", () => {\n            this.glRedraw();\n        });\n\n        this.canvas.on(\"webglContextFailed\", () => {\n            alert(\"xeokit failed to find WebGL!\");\n        });\n\n        this._renderer = new _webgl_Renderer_js__WEBPACK_IMPORTED_MODULE_5__[\"Renderer\"](this, {\n            transparent: transparent,\n            alphaDepthMask: alphaDepthMask\n        });\n\n        this._sectionPlanesState = new (function () {\n\n            this.sectionPlanes = [];\n\n            this.clippingCaps = false;\n\n            let hash = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const sectionPlanes = this.sectionPlanes;\n                if (sectionPlanes.length === 0) {\n                    return this.hash = \";\";\n                }\n                let sectionPlane;\n\n                const hashParts = [];\n                for (let i = 0, len = sectionPlanes.length; i < len; i++) {\n                    sectionPlane = sectionPlanes[i];\n                    hashParts.push(\"cp\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addSectionPlane = function (sectionPlane) {\n                this.sectionPlanes.push(sectionPlane);\n                hash = null;\n            };\n\n            this.removeSectionPlane = function (sectionPlane) {\n                for (let i = 0, len = this.sectionPlanes.length; i < len; i++) {\n                    if (this.sectionPlanes[i].id === sectionPlane.id) {\n                        this.sectionPlanes.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n        })();\n\n        this._lightsState = new (function () {\n\n            const DEFAULT_AMBIENT = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([0, 0, 0]);\n            const ambientColor = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3();\n\n            this.lights = [];\n            this.reflectionMaps = [];\n            this.lightMaps = [];\n\n            let hash = null;\n            let ambientLight = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const hashParts = [];\n                const lights = this.lights;\n                let light;\n                for (let i = 0, len = lights.length; i < len; i++) {\n                    light = lights[i];\n                    hashParts.push(\"/\");\n                    hashParts.push(light.type);\n                    hashParts.push((light.space === \"world\") ? \"w\" : \"v\");\n                    if (light.castsShadow) {\n                        hashParts.push(\"sh\");\n                    }\n                }\n                if (this.lightMaps.length > 0) {\n                    hashParts.push(\"/lm\");\n                }\n                if (this.reflectionMaps.length > 0) {\n                    hashParts.push(\"/rm\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addLight = function (state) {\n                this.lights.push(state);\n                ambientLight = null;\n                hash = null;\n            };\n\n            this.removeLight = function (state) {\n                for (let i = 0, len = this.lights.length; i < len; i++) {\n                    const light = this.lights[i];\n                    if (light.id === state.id) {\n                        this.lights.splice(i, 1);\n                        if (ambientLight && ambientLight.id === state.id) {\n                            ambientLight = null;\n                        }\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addReflectionMap = function (state) {\n                this.reflectionMaps.push(state);\n                hash = null;\n            };\n\n            this.removeReflectionMap = function (state) {\n                for (let i = 0, len = this.reflectionMaps.length; i < len; i++) {\n                    if (this.reflectionMaps[i].id === state.id) {\n                        this.reflectionMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addLightMap = function (state) {\n                this.lightMaps.push(state);\n                hash = null;\n            };\n\n            this.removeLightMap = function (state) {\n                for (let i = 0, len = this.lightMaps.length; i < len; i++) {\n                    if (this.lightMaps[i].id === state.id) {\n                        this.lightMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.getAmbientColor = function () {\n                if (!ambientLight) {\n                    for (let i = 0, len = this.lights.length; i < len; i++) {\n                        const light = this.lights[i];\n                        if (light.type === \"ambient\") {\n                            ambientLight = light;\n                            break;\n                        }\n                    }\n                }\n                if (ambientLight) {\n                    const color = ambientLight.color;\n                    const intensity = ambientLight.intensity;\n                    ambientColor[0] = color[0] * intensity;\n                    ambientColor[1] = color[1] * intensity;\n                    ambientColor[2] = color[2] * intensity;\n                    return ambientColor;\n                } else {\n                    return DEFAULT_AMBIENT;\n                }\n            };\n\n        })();\n\n        /**\n         * Publishes input events that occur on this Scene's canvas.\n         *\n         * @property input\n         * @type {Input}\n         * @final\n         */\n        this.input = new _input_Input_js__WEBPACK_IMPORTED_MODULE_6__[\"Input\"](this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            element: this.canvas.canvas\n        });\n\n        /**\n         * Configures this Scene's units of measurement and coordinate mapping between Real-space and World-space 3D coordinate systems.\n         *\n         * @property metrics\n         * @type {Metrics}\n         * @final\n         */\n        this.metrics = new _metriqs_Metriqs_js__WEBPACK_IMPORTED_MODULE_16__[\"Metrics\"](this, {\n            units: cfg.units,\n            scale: cfg.scale,\n            origin: cfg.origin\n        });\n\n        /** Configures Scalable Ambient Obscurance (SAO) for this Scene.\n         * @type {SAO}\n         * @final\n         */\n        this.sao = new _postfx_SAO_js__WEBPACK_IMPORTED_MODULE_17__[\"SAO\"](this, {\n            enabled: cfg.saoEnabled\n        });\n\n        this.ticksPerRender = cfg.ticksPerRender;\n        this.ticksPerOcclusionTest = cfg.ticksPerOcclusionTest;\n        this.passes = cfg.passes;\n        this.clearEachPass = cfg.clearEachPass;\n        this.gammaInput = cfg.gammaInput;\n        this.gammaOutput = cfg.gammaOutput;\n        this.gammaFactor = cfg.gammaFactor;\n\n        this._entityOffsetsEnabled = !!cfg.entityOffsetsEnabled;\n        this._logarithmicDepthBufferEnabled = !!cfg.logarithmicDepthBufferEnabled;\n\n        this._pbrEnabled = !!cfg.pbrEnabled;\n\n        // Register Scene on xeokit\n        // Do this BEFORE we add components below\n        _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"]._addScene(this);\n\n        this._initDefaults();\n\n        // Global components\n\n        this._viewport = new _viewport_Viewport_js__WEBPACK_IMPORTED_MODULE_7__[\"Viewport\"](this, {\n            id: \"default.viewport\",\n            autoBoundary: true,\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        this._camera = new _camera_Camera_js__WEBPACK_IMPORTED_MODULE_8__[\"Camera\"](this, {\n            id: \"default.camera\",\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        // Default lights\n\n        new _lights_AmbientLight_js__WEBPACK_IMPORTED_MODULE_10__[\"AmbientLight\"](this, {\n            color: [0.9, 0.9, 0.9],\n            intensity: 0.9\n        });\n\n        new _lights_DirLight_js__WEBPACK_IMPORTED_MODULE_9__[\"DirLight\"](this, {\n            dir: [0.8, -.5, -0.5],\n            color: [0.67, 0.67, 1.0],\n            intensity: 0.7,\n            space: \"world\"\n        });\n\n        new _lights_DirLight_js__WEBPACK_IMPORTED_MODULE_9__[\"DirLight\"](this, {\n            dir: [-0.8, -1.0, 0.5],\n            color: [1, 1, .9],\n            intensity: 0.9,\n            space: \"world\"\n        });\n\n        this._camera.on(\"dirty\", () => {\n            this._renderer.imageDirty();\n        });\n    }\n\n    _initDefaults() {\n\n        // Call this Scene's property accessors to lazy-init their properties\n\n        let dummy; // Keeps Codacy happy\n\n        dummy = this.geometry;\n        dummy = this.material;\n        dummy = this.xrayMaterial;\n        dummy = this.edgeMaterial;\n        dummy = this.selectedMaterial;\n        dummy = this.highlightMaterial;\n    }\n\n    _addComponent(component) {\n        if (component.id) { // Manual ID\n            if (this.components[component.id]) {\n                this.error(\"Component \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(component.id) + \" already exists in Scene - ignoring ID, will randomly-generate instead\");\n                component.id = null;\n            }\n        }\n        if (!component.id) { // Auto ID\n            if (window.nextID === undefined) {\n                window.nextID = 0;\n            }\n            //component.id = math.createUUID();\n            component.id = \"__\" + window.nextID++;\n            while (this.components[component.id]) {\n                component.id = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].createUUID();\n            }\n        }\n        this.components[component.id] = component;\n\n        // Register for class type\n        const type = component.type;\n        let types = this.types[component.type];\n        if (!types) {\n            types = this.types[type] = {};\n        }\n        types[component.id] = component;\n\n        if (component.compile) {\n            this._compilables[component.id] = component;\n        }\n        if (component.isDrawable) {\n            this._renderer.addDrawable(component.id, component);\n            this._collidables[component.id] = component;\n        }\n    }\n\n    _removeComponent(component) {\n        var id = component.id;\n        var type = component.type;\n        delete this.components[id];\n        // Unregister for types\n        const types = this.types[type];\n        if (types) {\n            delete types[id];\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isEmptyObject(types)) {\n                delete this.types[type];\n            }\n        }\n        if (component.compile) {\n            delete this._compilables[component.id];\n        }\n        if (component.isDrawable) {\n            this._renderer.removeDrawable(component.id);\n            delete this._collidables[component.id];\n        }\n    }\n\n    // Methods below are called by various component types to register themselves on their\n    // Scene. Violates Hollywood Principle, where we could just filter on type in _addComponent,\n    // but this is faster than checking the type of each component in such a filter.\n\n    _sectionPlaneCreated(sectionPlane) {\n        this.sectionPlanes[sectionPlane.id] = sectionPlane;\n        this.scene._sectionPlanesState.addSectionPlane(sectionPlane._state);\n        this.scene.fire(\"sectionPlaneCreated\", sectionPlane, true /* Don't retain event */);\n        this._needRecompile = true;\n    }\n\n    _lightCreated(light) {\n        this.lights[light.id] = light;\n        this.scene._lightsState.addLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapCreated(lightMap) {\n        this.lightMaps[lightMap.id] = lightMap;\n        this.scene._lightsState.addLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapCreated(reflectionMap) {\n        this.reflectionMaps[reflectionMap.id] = reflectionMap;\n        this.scene._lightsState.addReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _sectionPlaneDestroyed(sectionPlane) {\n        delete this.sectionPlanes[sectionPlane.id];\n        this.scene._sectionPlanesState.removeSectionPlane(sectionPlane._state);\n        this.scene.fire(\"sectionPlaneDestroyed\", sectionPlane, true /* Don't retain event */);\n        this._needRecompile = true;\n    }\n\n    _lightDestroyed(light) {\n        delete this.lights[light.id];\n        this.scene._lightsState.removeLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapDestroyed(lightMap) {\n        delete this.lightMaps[lightMap.id];\n        this.scene._lightsState.removeLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapDestroyed(reflectionMap) {\n        delete this.reflectionMaps[reflectionMap.id];\n        this.scene._lightsState.removeReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _registerModel(entity) {\n        this.models[entity.id] = entity;\n        this._modelIds = null; // Lazy regenerate\n    }\n\n    _deregisterModel(entity) {\n        delete this.models[entity.id];\n        this._modelIds = null; // Lazy regenerate\n    }\n\n    _registerObject(entity) {\n        this.objects[entity.id] = entity;\n        this._numObjects++;\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _deregisterObject(entity) {\n        delete this.objects[entity.id];\n        this._numObjects--;\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _objectVisibilityUpdated(entity, notify = true) {\n        if (entity.visible) {\n            if (ASSERT_OBJECT_STATE_UPDATE && this.visibleObjects[entity.id]) {\n                console.error(\"Redundant object visibility update (visible=true)\");\n                return;\n            }\n            this.visibleObjects[entity.id] = entity;\n            this._numVisibleObjects++;\n        } else {\n            if (ASSERT_OBJECT_STATE_UPDATE && (!this.visibleObjects[entity.id])) {\n                console.error(\"Redundant object visibility update (visible=false)\");\n                return;\n            }\n            delete this.visibleObjects[entity.id];\n            this._numVisibleObjects--;\n        }\n        this._visibleObjectIds = null; // Lazy regenerate\n        if (notify) {\n            this.fire(\"objectVisibility\", entity, true);\n        }\n    }\n\n    _objectXRayedUpdated(entity) {\n        if (entity.xrayed) {\n            if (ASSERT_OBJECT_STATE_UPDATE && this.xrayedObjects[entity.id]) {\n                console.error(\"Redundant object xray update (xrayed=true)\");\n                return;\n            }\n            this.xrayedObjects[entity.id] = entity;\n            this._numXRayedObjects++;\n        } else {\n            if (ASSERT_OBJECT_STATE_UPDATE && (!this.xrayedObjects[entity.id])) {\n                console.error(\"Redundant object xray update (xrayed=false)\");\n                return;\n            }\n            delete this.xrayedObjects[entity.id];\n            this._numXRayedObjects--;\n        }\n        this._xrayedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectHighlightedUpdated(entity) {\n        if (entity.highlighted) {\n            if (ASSERT_OBJECT_STATE_UPDATE && this.highlightedObjects[entity.id]) {\n                console.error(\"Redundant object highlight update (highlighted=true)\");\n                return;\n            }\n            this.highlightedObjects[entity.id] = entity;\n            this._numHighlightedObjects++;\n        } else {\n            if (ASSERT_OBJECT_STATE_UPDATE && (!this.highlightedObjects[entity.id])) {\n                console.error(\"Redundant object highlight update (highlighted=false)\");\n                return;\n            }\n            delete this.highlightedObjects[entity.id];\n            this._numHighlightedObjects--;\n        }\n        this._highlightedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectSelectedUpdated(entity) {\n        if (entity.selected) {\n            if (ASSERT_OBJECT_STATE_UPDATE && this.selectedObjects[entity.id]) {\n                console.error(\"Redundant object select update (selected=true)\");\n                return;\n            }\n            this.selectedObjects[entity.id] = entity;\n            this._numSelectedObjects++;\n        } else {\n            if (ASSERT_OBJECT_STATE_UPDATE && (!this.selectedObjects[entity.id])) {\n                console.error(\"Redundant object select update (selected=false)\");\n                return;\n            }\n            delete this.selectedObjects[entity.id];\n            this._numSelectedObjects--;\n        }\n        this._selectedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectColorizeUpdated(entity, colorized) {\n        if (colorized) {\n            this.colorizedObjects[entity.id] = entity;\n            this._numColorizedObjects++;\n        } else {\n            delete this.colorizedObjects[entity.id];\n            this._numColorizedObjects--;\n        }\n        this._colorizedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectOpacityUpdated(entity, opacityUpdated) {\n        if (opacityUpdated) {\n            this.opacityObjects[entity.id] = entity;\n            this._numOpacityObjects++;\n        } else {\n            delete this.opacityObjects[entity.id];\n            this._numOpacityObjects--;\n        }\n        this._opacityObjectIds = null; // Lazy regenerate\n    }\n\n    _objectOffsetUpdated(entity, offset) {\n        if (!offset || offset[0] === 0 && offset[1] === 0 && offset[2] === 0) {\n            this.offsetObjects[entity.id] = entity;\n            this._numOffsetObjects++;\n        } else {\n            delete this.offsetObjects[entity.id];\n            this._numOffsetObjects--;\n        }\n        this._offsetObjectIds = null; // Lazy regenerate\n    }\n\n    _webglContextLost() {\n        //  this.loading++;\n        this.canvas.spinner.processes++;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextLost) {\n                    component._webglContextLost();\n                }\n            }\n        }\n        this._renderer.webglContextLost();\n    }\n\n    _webglContextRestored() {\n        const gl = this.canvas.gl;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextRestored) {\n                    component._webglContextRestored(gl);\n                }\n            }\n        }\n        this._renderer.webglContextRestored(gl);\n        //this.loading--;\n        this.canvas.spinner.processes--;\n    }\n\n    /**\n     * Whether {@link Entity#offset} is enabled.\n     *\n     * This is set via the {@link Viewer} constructor and is ````false```` by default.\n     *\n     * @returns {Boolean} True if {@link Entity#offset} is enabled.\n     */\n    get entityOffsetsEnabled() {\n        return this._entityOffsetsEnabled;\n    }\n\n    /**\n     * Whether logarithmic depth buffer is enabled.\n     *\n     * This is set via the {@link Viewer} constructor and is ````false```` by default.\n     *\n     * @returns {Boolean} True if logarithmic depth buffer is enabled.\n     */\n    get logarithmicDepthBufferEnabled() {\n        return this._logarithmicDepthBufferEnabled;\n    }\n\n    /**\n     * Sets whether physically-based rendering is enabled.\n     *\n     * Default is ````false````.\n     *\n     * @returns {Boolean} True if quality rendering is enabled.\n     */\n    set pbrEnabled(pbrEnabled) {\n        this._pbrEnabled = !!pbrEnabled;\n        this.glRedraw();\n    }\n    \n    /**\n     * Sets whether quality rendering is enabled.\n     *\n     * Default is ````false````.\n     *\n     * @returns {Boolean} True if quality rendering is enabled.\n     */\n    get pbrEnabled() {\n        return this._pbrEnabled;\n    }\n    \n    /**\n     * Performs an occlusion test on all {@link Marker}s in this {@link Scene}.\n     *\n     * Sets each {@link Marker#visible} ````true```` if the Marker is currently not occluded by any opaque {@link Entity}s\n     * in the Scene, or ````false```` if an Entity is occluding it.\n     */\n    doOcclusionTest() {\n        if (this._needRecompile) {\n            this._recompile();\n            this._needRecompile = false;\n        }\n        this._renderer.doOcclusionTest();\n    }\n\n    /**\n     * Renders a single frame of this Scene.\n     *\n     * The Scene will periodically render itself after any updates, but you can call this method to force a render\n     * if required.\n     *\n     * @param {Boolean} [forceRender=false] Forces a render when true, otherwise only renders if something has changed in this Scene\n     * since the last render.\n     */\n    render(forceRender) {\n\n        if (forceRender) {\n            _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].runTasks();\n        }\n\n        const renderEvent = {\n            sceneId: null,\n            pass: 0\n        };\n\n        if (this._needRecompile) {\n            this._recompile();\n            this._renderer.imageDirty();\n            this._needRecompile = false;\n        }\n\n        renderEvent.sceneId = this.id;\n\n        const passes = this._passes;\n        const clearEachPass = this._clearEachPass;\n        let pass;\n        let clear;\n\n        for (pass = 0; pass < passes; pass++) {\n\n            renderEvent.pass = pass;\n\n            /**\n             * Fired when about to render a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we are about to render (see {@link Scene#passes}).\n             */\n            this.fire(\"rendering\", renderEvent, true);\n\n            clear = clearEachPass || (pass === 0);\n\n            this._renderer.render({pass: pass, clear: clear, force: forceRender});\n\n            /**\n             * Fired when we have just rendered a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we rendered (see {@link Scene#passes}).\n             */\n            this.fire(\"rendered\", renderEvent, true);\n        }\n\n        this._saveAmbientColor();\n    }\n\n    _recompile() {\n        for (const id in this._compilables) {\n            if (this._compilables.hasOwnProperty(id)) {\n                this._compilables[id].compile();\n            }\n        }\n        this._renderer.shadowsDirty();\n        this.fire(\"compile\", this, true);\n    }\n\n    _saveAmbientColor() {\n        const canvas = this.canvas;\n        if (!canvas.transparent && !canvas.backgroundImage && !canvas.backgroundColor) {\n            const ambientColor = this._lightsState.getAmbientColor();\n            if (!this._lastAmbientColor ||\n                this._lastAmbientColor[0] !== ambientColor[0] ||\n                this._lastAmbientColor[1] !== ambientColor[1] ||\n                this._lastAmbientColor[2] !== ambientColor[2] ||\n                this._lastAmbientColor[3] !== ambientColor[3]) {\n                canvas.backgroundColor = ambientColor;\n                if (!this._lastAmbientColor) {\n                    this._lastAmbientColor = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4([0, 0, 0, 1]);\n                }\n                this._lastAmbientColor.set(ambientColor);\n            }\n        } else {\n            this._lastAmbientColor = null;\n        }\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#models}.\n     *\n     * @type {String[]}\n     */\n    get modelIds() {\n        if (!this._modelIds) {\n            this._modelIds = Object.keys(this.models);\n        }\n        return this._modelIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#objects}.\n     *\n     * @type {Number}\n     */\n    get numObjects() {\n        return this._numObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#objects}.\n     *\n     * @type {String[]}\n     */\n    get objectIds() {\n        if (!this._objectIds) {\n            this._objectIds = Object.keys(this.objects);\n        }\n        return this._objectIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#visibleObjects}.\n     *\n     * @type {Number}\n     */\n    get numVisibleObjects() {\n        return this._numVisibleObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#visibleObjects}.\n     *\n     * @type {String[]}\n     */\n    get visibleObjectIds() {\n        if (!this._visibleObjectIds) {\n            this._visibleObjectIds = Object.keys(this.visibleObjects);\n        }\n        return this._visibleObjectIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#xrayedObjects}.\n     *\n     * @type {Number}\n     */\n    get numXRayedObjects() {\n        return this._numXRayedObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#xrayedObjects}.\n     *\n     * @type {String[]}\n     */\n    get xrayedObjectIds() {\n        if (!this._xrayedObjectIds) {\n            this._xrayedObjectIds = Object.keys(this.xrayedObjects);\n        }\n        return this._xrayedObjectIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#highlightedObjects}.\n     *\n     * @type {Number}\n     */\n    get numHighlightedObjects() {\n        return this._numHighlightedObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#highlightedObjects}.\n     *\n     * @type {String[]}\n     */\n    get highlightedObjectIds() {\n        if (!this._highlightedObjectIds) {\n            this._highlightedObjectIds = Object.keys(this.highlightedObjects);\n        }\n        return this._highlightedObjectIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#selectedObjects}.\n     *\n     * @type {Number}\n     */\n    get numSelectedObjects() {\n        return this._numSelectedObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#selectedObjects}.\n     *\n     * @type {String[]}\n     */\n    get selectedObjectIds() {\n        if (!this._selectedObjectIds) {\n            this._selectedObjectIds = Object.keys(this.selectedObjects);\n        }\n        return this._selectedObjectIds;\n    }\n\n    /**\n     * Gets the number of {@link Entity}s in {@link Scene#colorizedObjects}.\n     *\n     * @type {Number}\n     */\n    get numColorizedObjects() {\n        return this._numColorizedObjects;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#colorizedObjects}.\n     *\n     * @type {String[]}\n     */\n    get colorizedObjectIds() {\n        if (!this._colorizedObjectIds) {\n            this._colorizedObjectIds = Object.keys(this.colorizedObjects);\n        }\n        return this._colorizedObjectIds;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#opacityObjects}.\n     *\n     * @type {String[]}\n     */\n    get opacityObjectIds() {\n        if (!this._opacityObjectIds) {\n            this._opacityObjectIds = Object.keys(this.opacityObjects);\n        }\n        return this._opacityObjectIds;\n    }\n\n    /**\n     * Gets the IDs of the {@link Entity}s in {@link Scene#offsetObjects}.\n     *\n     * @type {String[]}\n     */\n    get offsetObjectIds() {\n        if (!this._offsetObjectIds) {\n            this._offsetObjectIds = Object.keys(this.offsetObjects);\n        }\n        return this._offsetObjectIds;\n    }\n\n    /**\n     * Sets the number of \"ticks\" that happen between each render or this Scene.\n     *\n     * Default value is ````1````.\n     *\n     * @type {Number}\n     */\n    set ticksPerRender(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'ticksPerRender': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._ticksPerRender) {\n            return;\n        }\n        this._ticksPerRender = value;\n    }\n\n    /**\n     * Gets the number of \"ticks\" that happen between each render or this Scene.\n     *\n     * Default value is ````1````.\n     *\n     * @type {Number}\n     */\n    get ticksPerRender() {\n        return this._ticksPerRender;\n    }\n\n    /**\n     * Sets the number of \"ticks\" that happen between occlusion testing for {@link Marker}s.\n     *\n     * Default value is ````20````.\n     *\n     * @type {Number}\n     */\n    set ticksPerOcclusionTest(value) {\n        if (value === undefined || value === null) {\n            value = 20;\n        } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'ticksPerOcclusionTest': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 20;\n        }\n        if (value === this._ticksPerOcclusionTest) {\n            return;\n        }\n        this._ticksPerOcclusionTest = value;\n    }\n\n    /**\n     * Gets the number of \"ticks\" that happen between each render of this Scene.\n     *\n     * Default value is ````1````.\n     *\n     * @type {Number}\n     */\n    get ticksPerOcclusionTest() {\n        return this._ticksPerOcclusionTest;\n    }\n\n    /**\n     * Sets the number of times this Scene renders per frame.\n     *\n     * Default value is ````1````.\n     *\n     * @type {Number}\n     */\n    set passes(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'passes': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._passes) {\n            return;\n        }\n        this._passes = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the number of times this Scene renders per frame.\n     *\n     * Default value is ````1````.\n     *\n     * @type {Number}\n     */\n    get passes() {\n        return this._passes;\n    }\n\n    /**\n     * When {@link Scene#passes} is greater than ````1````, indicates whether or not to clear the canvas before each pass (````true````) or just before the first pass (````false````).\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set clearEachPass(value) {\n        value = !!value;\n        if (value === this._clearEachPass) {\n            return;\n        }\n        this._clearEachPass = value;\n        this.glRedraw();\n    }\n\n    /**\n     * When {@link Scene#passes} is greater than ````1````, indicates whether or not to clear the canvas before each pass (````true````) or just before the first pass (````false````).\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get clearEachPass() {\n        return this._clearEachPass;\n    }\n\n    /**\n     * Sets whether or not {@link Scene} should expect all {@link Texture}s and colors to have pre-multiplied gamma.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set gammaInput(value) {\n        value = value !== false;\n        if (value === this._renderer.gammaInput) {\n            return;\n        }\n        this._renderer.gammaInput = value;\n        this._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether or not {@link Scene} should expect all {@link Texture}s and colors to have pre-multiplied gamma.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get gammaInput() {\n        return this._renderer.gammaInput;\n    }\n\n    /**\n     * Sets whether or not to render pixels with pre-multiplied gama.\n     *\n     * Default value is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set gammaOutput(value) {\n        value = !!value;\n        if (value === this._renderer.gammaOutput) {\n            return;\n        }\n        this._renderer.gammaOutput = value;\n        this._needRecompile = true;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets whether or not to render pixels with pre-multiplied gama.\n     *\n     * Default value is ````true````.\n     *\n     * @type {Boolean}\n     */\n    get gammaOutput() {\n        return this._renderer.gammaOutput;\n    }\n\n    /**\n     * Sets the gamma factor to use when {@link Scene#gammaOutput} is set true.\n     *\n     * Default value is ````2.2````.\n     *\n     * @type {Number}\n     */\n    set gammaFactor(value) {\n        value = (value === undefined || value === null) ? 2.2 : value;\n        if (value === this._renderer.gammaFactor) {\n            return;\n        }\n        this._renderer.gammaFactor = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the gamma factor to use when {@link Scene#gammaOutput} is set true.\n     *\n     * Default value is ````2.2````.\n     *\n     * @type {Number}\n     */\n    get gammaFactor() {\n        return this._renderer.gammaFactor;\n    }\n\n    /**\n     * Gets the default {@link Geometry} for this Scene, which is a {@link ReadableGeometry} with a unit-sized box shape.\n     *\n     * Has {@link ReadableGeometry#id} set to \"default.geometry\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#geometry} set to this {@link ReadableGeometry} by default.\n     *\n     * @type {ReadableGeometry}\n     */\n    get geometry() {\n        return this.components[\"default.geometry\"] || Object(_geometry_builders_buildBoxGeometry_js__WEBPACK_IMPORTED_MODULE_12__[\"buildBoxGeometry\"])(_geometry_ReadableGeometry_js__WEBPACK_IMPORTED_MODULE_11__[\"ReadableGeometry\"], this, {\n            id: \"default.geometry\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the default {@link Material} for this Scene, which is a {@link PhongMaterial}.\n     *\n     * Has {@link PhongMaterial#id} set to \"default.material\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#material} set to this {@link PhongMaterial} by default.\n     *\n     * @type {PhongMaterial}\n     */\n    get material() {\n        return this.components[\"default.material\"] || new _materials_PhongMaterial_js__WEBPACK_IMPORTED_MODULE_13__[\"PhongMaterial\"](this, {\n            id: \"default.material\",\n            emissive: [0.4, 0.4, 0.4], // Visible by default on geometry without normals\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the default xraying {@link EmphasisMaterial} for this Scene.\n     *\n     * Has {@link EmphasisMaterial#id} set to \"default.xrayMaterial\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#xrayMaterial} set to this {@link EmphasisMaterial} by default.\n     *\n     * {@link Mesh}s are xrayed while {@link Mesh#xrayed} is ````true````.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get xrayMaterial() {\n        return this.components[\"default.xrayMaterial\"] || new _materials_EmphasisMaterial_js__WEBPACK_IMPORTED_MODULE_14__[\"EmphasisMaterial\"](this, {\n            id: \"default.xrayMaterial\",\n            preset: \"sepia\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the default highlight {@link EmphasisMaterial} for this Scene.\n     *\n     * Has {@link EmphasisMaterial#id} set to \"default.highlightMaterial\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#highlightMaterial} set to this {@link EmphasisMaterial} by default.\n     *\n     * {@link Mesh}s are highlighted while {@link Mesh#highlighted} is ````true````.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get highlightMaterial() {\n        return this.components[\"default.highlightMaterial\"] || new _materials_EmphasisMaterial_js__WEBPACK_IMPORTED_MODULE_14__[\"EmphasisMaterial\"](this, {\n            id: \"default.highlightMaterial\",\n            preset: \"yellowHighlight\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the default selection {@link EmphasisMaterial} for this Scene.\n     *\n     * Has {@link EmphasisMaterial#id} set to \"default.selectedMaterial\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#highlightMaterial} set to this {@link EmphasisMaterial} by default.\n     *\n     * {@link Mesh}s are highlighted while {@link Mesh#highlighted} is ````true````.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get selectedMaterial() {\n        return this.components[\"default.selectedMaterial\"] || new _materials_EmphasisMaterial_js__WEBPACK_IMPORTED_MODULE_14__[\"EmphasisMaterial\"](this, {\n            id: \"default.selectedMaterial\",\n            preset: \"greenSelected\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the default {@link EdgeMaterial} for this Scene.\n     *\n     * Has {@link EdgeMaterial#id} set to \"default.edgeMaterial\".\n     *\n     * {@link Mesh}s in this Scene have {@link Mesh#edgeMaterial} set to this {@link EdgeMaterial} by default.\n     *\n     * {@link Mesh}s have their edges emphasized while {@link Mesh#edges} is ````true````.\n     *\n     * @type {EdgeMaterial}\n     */\n    get edgeMaterial() {\n        return this.components[\"default.edgeMaterial\"] || new _materials_EdgeMaterial_js__WEBPACK_IMPORTED_MODULE_15__[\"EdgeMaterial\"](this, {\n            id: \"default.edgeMaterial\",\n            preset: \"default\",\n            edgeColor: [0.0, 0.0, 0.0],\n            edgeAlpha: 1.0,\n            edgeWidth: 1,\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the {@link PointsMaterial} for this Scene.\n     *\n     * @type {PointsMaterial}\n     */\n    get pointsMaterial() {\n        return this.components[\"default.pointsMaterial\"] || new _materials_PointsMaterial_js__WEBPACK_IMPORTED_MODULE_18__[\"PointsMaterial\"](this, {\n            id: \"default.pointsMaterial\",\n            preset: \"default\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the {@link LinesMaterial} for this Scene.\n     *\n     * @type {LinesMaterial}\n     */\n    get linesMaterial() {\n        return this.components[\"default.linesMaterial\"] || new _materials_LinesMaterial_js__WEBPACK_IMPORTED_MODULE_19__[\"LinesMaterial\"](this, {\n            id: \"default.linesMaterial\",\n            preset: \"default\",\n            dontClear: true\n        });\n    }\n\n    /**\n     * Gets the {@link Viewport} for this Scene.\n     *\n     * @type Viewport\n     */\n    get viewport() {\n        return this._viewport;\n    }\n\n    /**\n     * Gets the {@link Camera} for this Scene.\n     *\n     * @type {Camera}\n     */\n    get camera() {\n        return this._camera;\n    }\n\n    /**\n     * Gets the World-space 3D center of this Scene.\n     *\n     *@type {Number[]}\n     */\n    get center() {\n        if (this._aabbDirty || !this._center) {\n            if (!this._center || !this._center) {\n                this._center = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3();\n            }\n            const aabb = this.aabb;\n            this._center[0] = (aabb[0] + aabb[3]) / 2;\n            this._center[1] = (aabb[1] + aabb[4]) / 2;\n            this._center[2] = (aabb[2] + aabb[5]) / 2;\n        }\n        return this._center;\n    }\n\n    /**\n     * Gets the World-space axis-aligned 3D boundary (AABB) of this Scene.\n     *\n     * The AABB is represented by a six-element Float64Array containing the min/max extents of the axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n     *\n     * When the Scene has no content, will be ````[-100,-100,-100,100,100,100]````.\n     *\n     * @type {Number[]}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            if (!this._aabb) {\n                this._aabb = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].AABB3();\n            }\n            let xmin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n            let ymin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n            let zmin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n            let xmax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n            let ymax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n            let zmax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n            let aabb;\n            const collidables = this._collidables;\n            let collidable;\n            let valid = false;\n            for (const collidableId in collidables) {\n                if (collidables.hasOwnProperty(collidableId)) {\n                    collidable = collidables[collidableId];\n                    if (collidable.collidable === false) {\n                        continue;\n                    }\n                    aabb = collidable.aabb;\n                    if (aabb[0] < xmin) {\n                        xmin = aabb[0];\n                    }\n                    if (aabb[1] < ymin) {\n                        ymin = aabb[1];\n                    }\n                    if (aabb[2] < zmin) {\n                        zmin = aabb[2];\n                    }\n                    if (aabb[3] > xmax) {\n                        xmax = aabb[3];\n                    }\n                    if (aabb[4] > ymax) {\n                        ymax = aabb[4];\n                    }\n                    if (aabb[5] > zmax) {\n                        zmax = aabb[5];\n                    }\n                    valid = true;\n                }\n            }\n            if (!valid) {\n                xmin = -100;\n                ymin = -100;\n                zmin = -100;\n                xmax = 100;\n                ymax = 100;\n                zmax = 100;\n            }\n            this._aabb[0] = xmin;\n            this._aabb[1] = ymin;\n            this._aabb[2] = zmin;\n            this._aabb[3] = xmax;\n            this._aabb[4] = ymax;\n            this._aabb[5] = zmax;\n            this._aabbDirty = false;\n        }\n        return this._aabb;\n    }\n\n    _setAABBDirty() {\n        //if (!this._aabbDirty) {\n        this._aabbDirty = true;\n        this.fire(\"boundary\");\n        // }\n    }\n\n    /**\n     * Attempts to pick an {@link Entity} in this Scene.\n     *\n     * Ignores {@link Entity}s with {@link Entity#pickable} set ````false````.\n     *\n     * When an {@link Entity} is picked, fires a \"pick\" event on the {@link Entity} with the pick result as parameters.\n     *\n     * Picking the {@link Entity} at the given canvas coordinates:\n\n     * ````javascript\n     * var pickResult = scene.pick({\n     *          canvasPos: [23, 131]\n     *       });\n     *\n     * if (pickResult) { // Picked an Entity\n     *         var entity = pickResult.entity;\n     *     }\n     * ````\n     *\n     * Picking, with a ray cast through the canvas, hits an {@link Entity}:\n     *\n     * ````javascript\n     * var pickResult = scene.pick({\n     *         pickSurface: true,\n     *         canvasPos: [23, 131]\n     *      });\n     *\n     * if (pickResult) { // Picked an Entity\n     *\n     *     var entity = pickResult.entity;\n     *\n     *     if (pickResult.primitive === \"triangle\") {\n     *\n     *         // Picked a triangle on the entity surface\n     *\n     *         var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array\n     *         var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n     *         var localPos = pickResult.localPos; // Float64Array containing the picked Local-space position on the triangle\n     *         var worldPos = pickResult.worldPos; // Float64Array containing the picked World-space position on the triangle\n     *         var viewPos = pickResult.viewPos; // Float64Array containing the picked View-space position on the triangle\n     *         var bary = pickResult.bary; // Float64Array containing the picked barycentric position within the triangle\n     *         var worldNormal = pickResult.worldNormal; // Float64Array containing the interpolated World-space normal vector at the picked position on the triangle\n     *         var uv = pickResult.uv; // Float64Array containing the interpolated UV coordinates at the picked position on the triangle\n     *\n     *     } else if (pickResult.worldPos && pickResult.worldNormal) {\n     *\n     *         // Picked a point and normal on the entity surface\n     *\n     *         var worldPos = pickResult.worldPos; // Float64Array containing the picked World-space position on the Entity surface\n     *         var worldNormal = pickResult.worldNormal; // Float64Array containing the picked World-space normal vector on the Entity Surface\n     *     }\n     * }\n     * ````\n     *\n     * Picking the {@link Entity} that intersects an arbitrarily-aligned World-space ray:\n     *\n     * ````javascript\n     * var pickResult = scene.pick({\n     *       pickSurface: true,   // Picking with arbitrarily-positioned ray\n     *       origin: [0,0,-5],    // Ray origin\n     *       direction: [0,0,1]   // Ray direction\n     * });\n     *\n     * if (pickResult) { // Picked an Entity with the ray\n     *\n     *       var entity = pickResult.entity;\n     *\n     *       if (pickResult.primitive == \"triangle\") {\n     *\n     *          // Picked a triangle on the entity surface\n     *\n     *           var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n     *           var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array\n     *           var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n     *           var localPos = pickResult.localPos; // Float64Array containing the picked Local-space position on the triangle\n     *           var worldPos = pickResult.worldPos; // Float64Array containing the picked World-space position on the triangle\n     *           var viewPos = pickResult.viewPos; // Float64Array containing the picked View-space position on the triangle\n     *           var bary = pickResult.bary; // Float64Array containing the picked barycentric position within the triangle\n     *           var worldNormal = pickResult.worldNormal; // Float64Array containing the interpolated World-space normal vector at the picked position on the triangle\n     *           var uv = pickResult.uv; // Float64Array containing the interpolated UV coordinates at the picked position on the triangle\n     *           var origin = pickResult.origin; // Float64Array containing the World-space ray origin\n     *           var direction = pickResult.direction; // Float64Array containing the World-space ray direction\n     *\n     *     } else if (pickResult.worldPos && pickResult.worldNormal) {\n     *\n     *         // Picked a point and normal on the entity surface\n     *\n     *         var worldPos = pickResult.worldPos; // Float64Array containing the picked World-space position on the Entity surface\n     *         var worldNormal = pickResult.worldNormal; // Float64Array containing the picked World-space normal vector on the Entity Surface\n     *     }\n     * }\n     *  ````\n     *\n     * @param {*} params Picking parameters.\n     * @param {Boolean} [params.pickSurface=false] Whether to find the picked position on the surface of the Entity.\n     * @param {Boolean} [params.pickSurfaceNormal=false] Whether to find the picked normal on the surface of the Entity. Only works if ````pickSurface```` is given.\n     * @param {Number[]} [params.canvasPos] Canvas-space coordinates. When ray-picking, this will override the **origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position, directly along the negative View-space Z-axis.\n     * @param {Number[]} [params.origin] World-space ray origin when ray-picking. Ignored when canvasPos given.\n     * @param {Number[]} [params.direction] World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given.\n     * @param {Number[]} [params.matrix] 4x4 transformation matrix to define the World-space ray origin and direction, as an alternative to ````origin```` and ````direction````.\n     * @param {String[]} [params.includeEntities] IDs of {@link Entity}s to restrict picking to. When given, ignores {@link Entity}s whose IDs are not in this list.\n     * @param {String[]} [params.excludeEntities] IDs of {@link Entity}s to ignore. When given, will pick *through* these {@link Entity}s, as if they were not there.\n     * @param {PickResult} [pickResult] Holds the results of the pick attempt. Will use the Scene's singleton PickResult if you don't supply your own.\n     * @returns {PickResult} Holds results of the pick attempt, returned when an {@link Entity} is picked, else null. See method comments for description.\n     */\n    pick(params, pickResult) {\n\n        if (this.canvas.boundary[2] === 0 || this.canvas.boundary[3] === 0) {\n            this.error(\"Picking not allowed while canvas has zero width or height\");\n            return null;\n        }\n\n        params = params || {};\n\n        params.pickSurface = params.pickSurface || params.rayPick; // Backwards compatibility\n\n        if (!params.canvasPos && !params.matrix && (!params.origin || !params.direction)) {\n            this.warn(\"picking without canvasPos, matrix, or ray origin and direction\");\n        }\n\n        const includeEntities = params.includeEntities || params.include; // Backwards compat\n        if (includeEntities) {\n            params.includeEntityIds = getEntityIDMap(this, includeEntities);\n        }\n\n        const excludeEntities = params.excludeEntities || params.exclude; // Backwards compat\n        if (excludeEntities) {\n            params.excludeEntityIds = getEntityIDMap(this, excludeEntities);\n        }\n\n        if (this._needRecompile) {\n            this._recompile();\n            this._renderer.imageDirty();\n            this._needRecompile = false;\n        }\n\n        pickResult = this._renderer.pick(params, pickResult);\n\n        if (pickResult) {\n            if (pickResult.entity && pickResult.entity.fire) {\n                pickResult.entity.fire(\"picked\", pickResult); // TODO: PerformanceModelNode doesn't fire events\n            }\n            return pickResult;\n        }\n    }\n\n    /**\n     * Destroys all non-default {@link Component}s in this Scene.\n     */\n    clear() {\n        var component;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                component = this.components[id];\n                if (!component._dontClear) { // Don't destroy components like Camera, Input, Viewport etc.\n                    component.destroy();\n                }\n            }\n        }\n    }\n\n    /**\n     * Destroys all {@link Light}s in this Scene..\n     */\n    clearLights() {\n        const ids = Object.keys(this.lights);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.lights[ids[i]].destroy();\n        }\n    }\n\n    /**\n     * Destroys all {@link SectionPlane}s in this Scene.\n     */\n    clearSectionPlanes() {\n        const ids = Object.keys(this.sectionPlanes);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.sectionPlanes[ids[i]].destroy();\n        }\n    }\n\n    /**\n     * Gets the collective axis-aligned boundary (AABB) of a batch of {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which {@link Entity#isObject} is registered by {@link Entity#id} in {@link Scene#visibleObjects}.\n     *\n     * Each {@link Entity} is only included in the AABB when {@link Entity#collidable} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @returns {[Number, Number, Number, Number, Number, Number]} An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````.\n     */\n    getAABB(ids) {\n        if (ids === undefined) {\n            return this.aabb;\n        }\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isString(ids)) {\n            const entity = this.objects[ids];\n            if (entity && entity.aabb) { // A Component subclass with an AABB\n                return entity.aabb;\n            }\n            ids = [ids]; // Must be an entity type\n        }\n        if (ids.length === 0) {\n            return this.aabb;\n        }\n        let xmin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n        let ymin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n        let zmin = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MAX_DOUBLE;\n        let xmax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n        let ymax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n        let zmax = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].MIN_DOUBLE;\n        let valid;\n        this.withObjects(ids, entity => {\n                if (entity.collidable) {\n                    const aabb = entity.aabb;\n                    if (aabb[0] < xmin) {\n                        xmin = aabb[0];\n                    }\n                    if (aabb[1] < ymin) {\n                        ymin = aabb[1];\n                    }\n                    if (aabb[2] < zmin) {\n                        zmin = aabb[2];\n                    }\n                    if (aabb[3] > xmax) {\n                        xmax = aabb[3];\n                    }\n                    if (aabb[4] > ymax) {\n                        ymax = aabb[4];\n                    }\n                    if (aabb[5] > zmax) {\n                        zmax = aabb[5];\n                    }\n                    valid = true;\n                }\n            }\n        );\n        if (valid) {\n            const aabb2 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].AABB3();\n            aabb2[0] = xmin;\n            aabb2[1] = ymin;\n            aabb2[2] = zmin;\n            aabb2[3] = xmax;\n            aabb2[4] = ymax;\n            aabb2[5] = zmax;\n            return aabb2;\n        } else {\n            return this.aabb; // Scene AABB\n        }\n    }\n\n    /**\n     * Batch-updates {@link Entity#visible} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which both {@link Entity#isObject} and {@link Entity#visible} are ````true```` is\n     * registered by {@link Entity#id} in {@link Scene#visibleObjects}.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} visible Whether or not to cull.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsVisible(ids, visible) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.visible !== visible);\n            entity.visible = visible;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#collidable} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} collidable Whether or not to cull.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsCollidable(ids, collidable) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.collidable !== collidable);\n            entity.collidable = collidable;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#culled} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} culled Whether or not to cull.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsCulled(ids, culled) {\n        return this.withObjects(ids, this.objects, entity => {\n            const changed = (entity.culled !== culled);\n            entity.culled = culled;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#selected} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which both {@link Entity#isObject} and {@link Entity#selected} are ````true```` is\n     * registered by {@link Entity#id} in {@link Scene#selectedObjects}.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} selected Whether or not to highlight.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsSelected(ids, selected) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.selected !== selected);\n            entity.selected = selected;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#highlighted} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which both {@link Entity#isObject} and {@link Entity#highlighted} are ````true```` is\n     * registered by {@link Entity#id} in {@link Scene#highlightedObjects}.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} highlighted Whether or not to highlight.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsHighlighted(ids, highlighted) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.highlighted !== highlighted);\n            entity.highlighted = highlighted;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#xrayed} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which both {@link Entity#isObject} and {@link Entity#xrayed} are ````true```` is\n     * registered by {@link Entity#id} in {@link Scene#xrayedObjects}.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} xrayed Whether or not to xray.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsXRayed(ids, xrayed) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.xrayed !== xrayed);\n            entity.xrayed = xrayed;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#edges} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} edges Whether or not to show edges.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsEdges(ids, edges) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.edges !== edges);\n            entity.edges = edges;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#colorize} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Number[]} [colorize=(1,1,1)] RGB colorize factors, multiplied by the rendered pixel colors.\n     * @returns {Boolean} True if any {@link Entity}s changed opacity, else false if all updates were redundant and not applied.\n     */\n    setObjectsColorized(ids, colorize) {\n        return this.withObjects(ids, entity => {\n            entity.colorize = colorize;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#opacity} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Number} [opacity=1.0] Opacity factor, multiplied by the rendered pixel alphas.\n     * @returns {Boolean} True if any {@link Entity}s changed opacity, else false if all updates were redundant and not applied.\n     */\n    setObjectsOpacity(ids, opacity) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.opacity !== opacity);\n            entity.opacity = opacity;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#pickable} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Boolean} pickable Whether or not to enable picking.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    setObjectsPickable(ids, pickable) {\n        return this.withObjects(ids, entity => {\n            const changed = (entity.pickable !== pickable);\n            entity.pickable = pickable;\n            return changed;\n        });\n    }\n\n    /**\n     * Batch-updates {@link Entity#offset} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Number[]} [offset] 3D offset vector.\n     */\n    setObjectsOffset(ids, offset) {\n        this.withObjects(ids, entity => {\n            entity.offset = offset;\n        });\n    }\n\n    /**\n     * Iterates with a callback over {@link Entity#visible} on {@link Entity}s that represent objects.\n     *\n     * An {@link Entity} represents an object when {@link Entity#isObject} is ````true````.\n     *\n     * Each {@link Entity} on which both {@link Entity#isObject} and {@link Entity#visible} are ````true```` is\n     * registered by {@link Entity#id} in {@link Scene#visibleObjects}.\n     *\n     * @param {String[]} ids Array of {@link Entity#id} values.\n     * @param {Function} callback Callback to execute on eacn {@link Entity}.\n     * @returns {Boolean} True if any {@link Entity}s were updated, else false if all updates were redundant and not applied.\n     */\n    withObjects(ids, callback) {\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isString(ids)) {\n            ids = [ids];\n        }\n        let changed = false;\n        for (let i = 0, len = ids.length; i < len; i++) {\n            const id = ids[i];\n            let entity = this.objects[id];\n            if (entity) {\n                changed = callback(entity) || changed;\n            } else {\n                const modelIds = this.modelIds;\n                for (let i = 0, len = modelIds.length; i < len; i++) {\n                    const modelId = modelIds[i];\n                    const globalObjectId = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].globalizeObjectId(modelId, id);\n                    entity = this.objects[globalObjectId];\n                    if (entity) {\n                        changed = callback(entity) || changed;\n                    }\n                }\n            }\n        }\n        return changed;\n    }\n\n    /**\n     * Destroys this Scene.\n     */\n    destroy() {\n\n        super.destroy();\n\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                this.components[id].destroy();\n            }\n        }\n\n        this.canvas.gl = null;\n\n        // Memory leak prevention\n        this.components = null;\n        this.models = null;\n        this.objects = null;\n        this.visibleObjects = null;\n        this.xrayedObjects = null;\n        this.highlightedObjects = null;\n        this.selectedObjects = null;\n        this.colorizedObjects = null;\n        this.opacityObjects = null;\n        this.sectionPlanes = null;\n        this.lights = null;\n        this.lightMaps = null;\n        this.reflectionMaps = null;\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._xrayedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n        this._colorizedObjectIds = null;\n        this.types = null;\n        this.components = null;\n        this.canvas = null;\n        this._renderer = null;\n        this.input = null;\n        this._viewport = null;\n        this._camera = null;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/scene/Scene.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js ***!
  \*******************************************************************/
/*! exports provided: stats */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stats\", function() { return stats; });\n/**\n * xeokit runtime statistics.\n * @private\n * @type {{components: {models: number, objects: number, scenes: number, meshes: number}, memory: {indices: number, uvs: number, textures: number, materials: number, transforms: number, positions: number, programs: number, normals: number, meshes: number, colors: number}, build: {version: string}, client: {browser: string}, frame: {frameCount: number, useProgram: number, bindTexture: number, drawElements: number, bindArray: number, tasksRun: number, fps: number, drawArrays: number, tasksScheduled: number}}}\n */\nconst stats = {\n    build: {\n        version: \"0.8\"\n    },\n    client: {\n        browser: (navigator && navigator.userAgent) ? navigator.userAgent : \"n/a\"\n    },\n\n    components: {\n        scenes: 0,\n        models: 0,\n        meshes: 0,\n        objects: 0\n    },\n    memory: {\n        meshes: 0,\n        positions: 0,\n        colors: 0,\n        normals: 0,\n        uvs: 0,\n        indices: 0,\n        textures: 0,\n        transforms: 0,\n        materials: 0,\n        programs: 0\n    },\n    frame: {\n        frameCount: 0,\n        fps: 0,\n        useProgram: 0,\n        bindTexture: 0,\n        bindArray: 0,\n        drawElements: 0,\n        drawArrays: 0,\n        tasksRun: 0,\n        tasksScheduled: 0\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3N0YXRzLmpzPzg0NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYSxnRUFBZ0UsV0FBVyw0S0FBNEssVUFBVSxnQkFBZ0IsV0FBVyxnQkFBZ0IsVUFBVTtBQUM5VTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3N0YXRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB4ZW9raXQgcnVudGltZSBzdGF0aXN0aWNzLlxuICogQHByaXZhdGVcbiAqIEB0eXBlIHt7Y29tcG9uZW50czoge21vZGVsczogbnVtYmVyLCBvYmplY3RzOiBudW1iZXIsIHNjZW5lczogbnVtYmVyLCBtZXNoZXM6IG51bWJlcn0sIG1lbW9yeToge2luZGljZXM6IG51bWJlciwgdXZzOiBudW1iZXIsIHRleHR1cmVzOiBudW1iZXIsIG1hdGVyaWFsczogbnVtYmVyLCB0cmFuc2Zvcm1zOiBudW1iZXIsIHBvc2l0aW9uczogbnVtYmVyLCBwcm9ncmFtczogbnVtYmVyLCBub3JtYWxzOiBudW1iZXIsIG1lc2hlczogbnVtYmVyLCBjb2xvcnM6IG51bWJlcn0sIGJ1aWxkOiB7dmVyc2lvbjogc3RyaW5nfSwgY2xpZW50OiB7YnJvd3Nlcjogc3RyaW5nfSwgZnJhbWU6IHtmcmFtZUNvdW50OiBudW1iZXIsIHVzZVByb2dyYW06IG51bWJlciwgYmluZFRleHR1cmU6IG51bWJlciwgZHJhd0VsZW1lbnRzOiBudW1iZXIsIGJpbmRBcnJheTogbnVtYmVyLCB0YXNrc1J1bjogbnVtYmVyLCBmcHM6IG51bWJlciwgZHJhd0FycmF5czogbnVtYmVyLCB0YXNrc1NjaGVkdWxlZDogbnVtYmVyfX19XG4gKi9cbmNvbnN0IHN0YXRzID0ge1xuICAgIGJ1aWxkOiB7XG4gICAgICAgIHZlcnNpb246IFwiMC44XCJcbiAgICB9LFxuICAgIGNsaWVudDoge1xuICAgICAgICBicm93c2VyOiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6IFwibi9hXCJcbiAgICB9LFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBzY2VuZXM6IDAsXG4gICAgICAgIG1vZGVsczogMCxcbiAgICAgICAgbWVzaGVzOiAwLFxuICAgICAgICBvYmplY3RzOiAwXG4gICAgfSxcbiAgICBtZW1vcnk6IHtcbiAgICAgICAgbWVzaGVzOiAwLFxuICAgICAgICBwb3NpdGlvbnM6IDAsXG4gICAgICAgIGNvbG9yczogMCxcbiAgICAgICAgbm9ybWFsczogMCxcbiAgICAgICAgdXZzOiAwLFxuICAgICAgICBpbmRpY2VzOiAwLFxuICAgICAgICB0ZXh0dXJlczogMCxcbiAgICAgICAgdHJhbnNmb3JtczogMCxcbiAgICAgICAgbWF0ZXJpYWxzOiAwLFxuICAgICAgICBwcm9ncmFtczogMFxuICAgIH0sXG4gICAgZnJhbWU6IHtcbiAgICAgICAgZnJhbWVDb3VudDogMCxcbiAgICAgICAgZnBzOiAwLFxuICAgICAgICB1c2VQcm9ncmFtOiAwLFxuICAgICAgICBiaW5kVGV4dHVyZTogMCxcbiAgICAgICAgYmluZEFycmF5OiAwLFxuICAgICAgICBkcmF3RWxlbWVudHM6IDAsXG4gICAgICAgIGRyYXdBcnJheXM6IDAsXG4gICAgICAgIHRhc2tzUnVuOiAwLFxuICAgICAgICB0YXNrc1NjaGVkdWxlZDogMFxuICAgIH1cbn07XG5cbmV4cG9ydCB7c3RhdHN9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js ***!
  \*******************************************************************/
/*! exports provided: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return utils; });\n/**\n * @private\n */\nfunction xmlToJson(node, attributeRenamer) {\n    if (node.nodeType === node.TEXT_NODE) {\n        var v = node.nodeValue;\n        if (v.match(/^\\s+$/) === null) {\n            return v;\n        }\n    } else if (node.nodeType === node.ELEMENT_NODE ||\n        node.nodeType === node.DOCUMENT_NODE) {\n        var json = {type: node.nodeName, children: []};\n\n        if (node.nodeType === node.ELEMENT_NODE) {\n            for (var j = 0; j < node.attributes.length; j++) {\n                var attribute = node.attributes[j];\n                var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                json[nm] = attribute.nodeValue;\n            }\n        }\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n            var item = node.childNodes[i];\n            var j = xmlToJson(item, attributeRenamer);\n            if (j) json.children.push(j);\n        }\n\n        return json;\n    }\n}\n\n/**\n * @private\n */\nfunction clone(ob) {\n    return JSON.parse(JSON.stringify(ob));\n}\n\n/**\n * @private\n */\nvar guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\n/**\n * @private\n */\nfunction b64(v, len) {\n    var r = (!len || len === 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n}\n\n/**\n * @private\n */\nfunction compressGuid(g) {\n    var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n        return parseInt(g.substr(i, 2), 16);\n    });\n    return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n        return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n    }).join(\"\");\n}\n\n/**\n * @private\n */\nfunction findNodeOfType(m, t) {\n    var li = [];\n    var _ = function (n) {\n        if (n.type === t) li.push(n);\n        (n.children || []).forEach(function (c) {\n            _(c);\n        });\n    };\n    _(m);\n    return li;\n}\n\n/**\n * @private\n */\nfunction timeout(dt) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(resolve, dt);\n    });\n}\n\n/**\n * @private\n */\nfunction httpRequest(args) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(args.method || \"GET\", args.url, true);\n        xhr.onload = function (e) {\n            console.log(args.url, xhr.readyState, xhr.status);\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseXML);\n                } else {\n                    reject(xhr.statusText);\n                }\n            }\n        };\n        xhr.send(null);\n    });\n}\n\n/**\n * @private\n */\nconst queryString = function () {\n    // This function is anonymous, is executed immediately and\n    // the return value is assigned to QueryString!\n    var query_string = {};\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        // If first entry with this name\n        if (typeof query_string[pair[0]] === \"undefined\") {\n            query_string[pair[0]] = decodeURIComponent(pair[1]);\n            // If second entry with this name\n        } else if (typeof query_string[pair[0]] === \"string\") {\n            var arr = [query_string[pair[0]], decodeURIComponent(pair[1])];\n            query_string[pair[0]] = arr;\n            // If third or later entry with this name\n        } else {\n            query_string[pair[0]].push(decodeURIComponent(pair[1]));\n        }\n    }\n    return query_string;\n}();\n\n/**\n * @private\n */\nfunction loadJSON(url, ok, err) {\n    // Avoid checking ok and err on each use.\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n\n    var request = new XMLHttpRequest();\n    request.overrideMimeType(\"application/json\");\n    request.open('GET', url, true);\n    request.addEventListener('load', function (event) {\n        var response = event.target.response;\n        if (this.status === 200) {\n            var json;\n            try {\n                json = JSON.parse(response);\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n            ok(json);\n        } else if (this.status === 0) {\n            // Some browsers return HTTP Status 0 when using non-http protocol\n            // e.g. 'file://' or 'data://'. Handle as success.\n            console.warn('loadFile: HTTP Status 0 received.');\n            try {\n                ok(JSON.parse(response));\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n        } else {\n            err(event);\n        }\n    }, false);\n\n    request.addEventListener('error', function (event) {\n        err(event);\n    }, false);\n    request.send(null);\n}\n\n/**\n * @private\n */\nfunction loadArraybuffer(url, ok, err) {\n    // Check for data: URI\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n    const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n    const dataUriRegexResult = url.match(dataUriRegex);\n    if (dataUriRegexResult) { // Safari can't handle data URIs through XMLHttpRequest\n        const isBase64 = !!dataUriRegexResult[2];\n        var data = dataUriRegexResult[3];\n        data = window.decodeURIComponent(data);\n        if (isBase64) {\n            data = window.atob(data);\n        }\n        try {\n            const buffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(buffer);\n            for (var i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n            }\n            window.setTimeout(function () {\n                ok(buffer);\n            }, 0);\n        } catch (error) {\n            window.setTimeout(function () {\n                err(error);\n            }, 0);\n        }\n    } else {\n        const request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onreadystatechange = function () {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    ok(request.response);\n                } else {\n                    err('loadArrayBuffer error : ' + request.response);\n                }\n            }\n        };\n        request.send(null);\n    }\n}\n\n/**\n Tests if the given object is an array\n @private\n */\nfunction isArray(value) {\n    return value && !(value.propertyIsEnumerable('length')) && typeof value === 'object' && typeof value.length === 'number';\n}\n\n/**\n Tests if the given value is a string\n @param value\n @returns {boolean}\n @private\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\n/**\n Tests if the given value is a number\n @param value\n @returns {boolean}\n @private\n */\nfunction isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n/**\n Tests if the given value is an ID\n @param value\n @returns {boolean}\n @private\n */\nfunction isID(value) {\n    return utils.isString(value) || utils.isNumeric(value);\n}\n\n/**\n Tests if the given components are the same, where the components can be either IDs or instances.\n @param c1\n @param c2\n @returns {boolean}\n @private\n */\nfunction isSameComponent(c1, c2) {\n    if (!c1 || !c2) {\n        return false;\n    }\n    const id1 = (utils.isNumeric(c1) || utils.isString(c1)) ? `${c1}` : c1.id;\n    const id2 = (utils.isNumeric(c2) || utils.isString(c2)) ? `${c2}` : c2.id;\n    return id1 === id2;\n}\n\n/**\n Tests if the given value is a function\n @param value\n @returns {boolean}\n @private\n */\nfunction isFunction(value) {\n    return (typeof value === \"function\");\n}\n\n/**\n Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.\n @param value\n @returns {boolean}\n @private\n */\nfunction isObject(value) {\n    const objectConstructor = {}.constructor;\n    return (!!value && value.constructor === objectConstructor);\n}\n\n/** Returns a shallow copy\n */\nfunction copy(o) {\n    return utils.apply(o, {});\n}\n\n/** Add properties of o to o2, overwriting them on o2 if already there\n */\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n Add non-null/defined properties of o to o2\n @private\n */\nfunction apply2(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o[name] !== undefined && o[name] !== null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Add properties of o to o2 where undefined or null on o2\n @private\n */\nfunction applyIf(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o2[name] === undefined || o2[name] === null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Returns true if the given map is empty.\n @param obj\n @returns {boolean}\n @private\n */\nfunction isEmptyObject(obj) {\n    for (const name in obj) {\n        if (obj.hasOwnProperty(name)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\n This is useful for logging IDs.\n\n @param {Number| String} id The ID\n @returns {String}\n @private\n */\nfunction inQuotes(id) {\n    return utils.isNumeric(id) ? (`${id}`) : (`'${id}'`);\n}\n\n/**\n Returns the concatenation of two typed arrays.\n @param a\n @param b\n @returns {*|a}\n @private\n */\nfunction concat(a, b) {\n    const c = new a.constructor(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n}\n\nfunction flattenParentChildHierarchy(root) {\n    var list = [];\n\n    function visit(node) {\n        node.id = node.uuid;\n        delete node.oid;\n        list.push(node);\n        var children = node.children;\n\n        if (children) {\n            for (var i = 0, len = children.length; i < len; i++) {\n                const child = children[i];\n                child.parent = node.id;\n                visit(children[i]);\n            }\n        }\n        node.children = [];\n    }\n\n    visit(root);\n    return list;\n}\n\n/**\n * @private\n */\nconst utils = {\n    xmlToJson: xmlToJson,\n    clone: clone,\n    compressGuid: compressGuid,\n    findNodeOfType: findNodeOfType,\n    timeout: timeout,\n    httpRequest: httpRequest,\n    loadJSON: loadJSON,\n    loadArraybuffer: loadArraybuffer,\n    queryString: queryString,\n    isArray: isArray,\n    isString: isString,\n    isNumeric: isNumeric,\n    isID: isID,\n    isSameComponent: isSameComponent,\n    isFunction: isFunction,\n    isObject: isObject,\n    copy: copy,\n    apply: apply,\n    apply2: apply2,\n    applyIf: applyIf,\n    isEmptyObject: isEmptyObject,\n    inQuotes: inQuotes,\n    concat: concat,\n    flattenParentChildHierarchy: flattenParentChildHierarchy\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js ***!
  \***********************************************************************/
/*! exports provided: Map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Map\", function() { return Map; });\n/** @private */\nclass Map {\n\n    constructor(items, baseId) {\n        this.items = items || [];\n        this._lastUniqueId = (baseId || 0) + 1;\n    }\n\n    /**\n     * Usage:\n     *\n     * id = myMap.addItem(\"foo\") // ID internally generated\n     * id = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"\n     */\n    addItem() {\n        let item;\n        if (arguments.length === 2) {\n            const id = arguments[0];\n            item = arguments[1];\n            if (this.items[id]) { // Won't happen if given ID is string\n                throw \"ID clash: '\" + id + \"'\";\n            }\n            this.items[id] = item;\n            return id;\n\n        } else {\n            item = arguments[0] || {};\n            while (true) {\n                const findId = this._lastUniqueId++;\n                if (!this.items[findId]) {\n                    this.items[findId] = item;\n                    return findId;\n                }\n            }\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items[id];\n        delete this.items[id];\n        return item;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL01hcC5qcz84ZDZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS91dGlscy9NYXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHByaXZhdGUgKi9cbmNsYXNzIE1hcCB7XG5cbiAgICBjb25zdHJ1Y3RvcihpdGVtcywgYmFzZUlkKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcyB8fCBbXTtcbiAgICAgICAgdGhpcy5fbGFzdFVuaXF1ZUlkID0gKGJhc2VJZCB8fCAwKSArIDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBpZCA9IG15TWFwLmFkZEl0ZW0oXCJmb29cIikgLy8gSUQgaW50ZXJuYWxseSBnZW5lcmF0ZWRcbiAgICAgKiBpZCA9IG15TWFwLmFkZEl0ZW0oXCJmb29cIiwgXCJiYXJcIikgLy8gSUQgaXMgXCJmb29cIlxuICAgICAqL1xuICAgIGFkZEl0ZW0oKSB7XG4gICAgICAgIGxldCBpdGVtO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBpdGVtID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXNbaWRdKSB7IC8vIFdvbid0IGhhcHBlbiBpZiBnaXZlbiBJRCBpcyBzdHJpbmdcbiAgICAgICAgICAgICAgICB0aHJvdyBcIklEIGNsYXNoOiAnXCIgKyBpZCArIFwiJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpZF0gPSBpdGVtO1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtID0gYXJndW1lbnRzWzBdIHx8IHt9O1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5kSWQgPSB0aGlzLl9sYXN0VW5pcXVlSWQrKztcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXRlbXNbZmluZElkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2ZpbmRJZF0gPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaWQpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1tpZF07XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbn1cblxuZXhwb3J0IHtNYXB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js ***!
  \*************************************************************************/
/*! exports provided: Queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Queue\", function() { return Queue; });\n// Fast queue that avoids using potentially inefficient array .shift() calls\n// Based on https://github.com/creationix/fastqueue\n\n/** @private */\nclass Queue {\n\n    constructor() {\n\n        this._head = [];\n        this._headLength = 0;\n        this._tail = [];\n        this._index = 0;\n        this._length = 0;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    shift() {\n        if (this._index >= this._headLength) {\n            const t = this._head;\n            t.length = 0;\n            this._head = this._tail;\n            this._tail = t;\n            this._index = 0;\n            this._headLength = this._head.length;\n            if (!this._headLength) {\n                return;\n            }\n        }\n        const value = this._head[this._index];\n        if (this._index < 0) {\n            delete this._head[this._index++];\n        }\n        else {\n            this._head[this._index++] = undefined;\n        }\n        this._length--;\n        return value;\n    }\n\n    push(item) {\n        this._length++;\n        this._tail.push(item);\n        return this;\n    };\n\n    unshift(item) {\n        this._head[--this._index] = item;\n        this._length++;\n        return this;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL1F1ZXVlLmpzP2Y5YzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL1F1ZXVlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmFzdCBxdWV1ZSB0aGF0IGF2b2lkcyB1c2luZyBwb3RlbnRpYWxseSBpbmVmZmljaWVudCBhcnJheSAuc2hpZnQoKSBjYWxsc1xuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvZmFzdHF1ZXVlXG5cbi8qKiBAcHJpdmF0ZSAqL1xuY2xhc3MgUXVldWUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgdGhpcy5faGVhZCA9IFtdO1xuICAgICAgICB0aGlzLl9oZWFkTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IFtdO1xuICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgICB9XG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IHRoaXMuX2hlYWRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gdDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRMZW5ndGggPSB0aGlzLl9oZWFkLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICghdGhpcy5faGVhZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2hlYWRbdGhpcy5faW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5faW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGVhZFt0aGlzLl9pbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRbdGhpcy5faW5kZXgrK10gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdXNoKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgICAgIHRoaXMuX3RhaWwucHVzaChpdGVtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHVuc2hpZnQoaXRlbSkge1xuICAgICAgICB0aGlzLl9oZWFkWy0tdGhpcy5faW5kZXhdID0gaXRlbTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IHtRdWV1ZX07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/viewport/Viewport.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/viewport/Viewport.js ***!
  \*******************************************************************************/
/*! exports provided: Viewport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Viewport\", function() { return Viewport; });\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/**\n * @desc controls the canvas viewport for a {@link Scene}.\n *\n * * One Viewport per scene.\n * * You can configure a Scene to render multiple times per frame, while setting the Viewport to different extents on each render.\n * * Make a Viewport automatically size to its {@link Scene} {@link Canvas} by setting its {@link Viewport#autoBoundary} ````true````.\n *\n *\n * Configuring the Scene to render twice on each frame, each time to a separate viewport:\n *\n * ````Javascript\n * // Load glTF model\n * var model = new xeokit.GLTFModel({\n    src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n });\n\n var scene = model.scene;\n var viewport = scene.viewport;\n\n // Configure Scene to render twice for each frame\n scene.passes = 2; // Default is 1\n scene.clearEachPass = false; // Default is false\n\n // Render to a separate viewport on each render\n\n var viewport = scene.viewport;\n viewport.autoBoundary = false;\n\n scene.on(\"rendering\", function (e) {\n     switch (e.pass) {\n         case 0:\n             viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n             break;\n\n         case 1:\n             viewport.boundary = [200, 0, 200, 200];\n             break;\n     }\n });\n ````\n\n @class Viewport\n @module xeokit\n @submodule rendering\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n @param {*} [cfg] Viewport configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent\n {@link Scene}, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Viewport.\n @param [cfg.boundary] {Number[]} Canvas-space Viewport boundary, given as\n (min, max, width, height). Defaults to the size of the parent\n {@link Scene} {@link Canvas}.\n @param [cfg.autoBoundary=false] {Boolean} Indicates if this Viewport's {@link Viewport#boundary}\n automatically synchronizes with the size of the parent {@link Scene} {@link Canvas}.\n\n @extends Component\n */\n\n\n\nclass Viewport extends _Component_js__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Viewport\";\n    }\n\n    /**\n     @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderState\"]({\n            boundary: [0, 0, 100, 100]\n        });\n\n        this.boundary = cfg.boundary;\n        this.autoBoundary = cfg.autoBoundary;\n    }\n\n\n    /**\n     * Sets the canvas-space boundary of this Viewport, indicated as ````[min, max, width, height]````.\n     *\n     * When {@link Viewport#autoBoundary} is ````true````, ignores calls to this method and automatically synchronizes with {@link Canvas#boundary}.\n     *\n     * Fires a \"boundary\"\" event on change.\n     *\n     * Defaults to the {@link Canvas} extents.\n     *\n     * @param {Number[]} value New Viewport extents.\n     */\n    set boundary(value) {\n\n        if (this._autoBoundary) {\n            return;\n        }\n\n        if (!value) {\n\n            const canvasBoundary = this.scene.canvas.boundary;\n\n            const width = canvasBoundary[2];\n            const height = canvasBoundary[3];\n\n            value = [0, 0, width, height];\n        }\n\n        this._state.boundary = value;\n\n        this.glRedraw();\n\n        /**\n         Fired whenever this Viewport's {@link Viewport#boundary} property changes.\n\n         @event boundary\n         @param value {Boolean} The property's new value\n         */\n        this.fire(\"boundary\", this._state.boundary);\n    }\n\n    /**\n     * Gets the canvas-space boundary of this Viewport, indicated as ````[min, max, width, height]````.\n     *\n     * @returns {Number[]} The Viewport extents.\n     */\n    get boundary() {\n        return this._state.boundary;\n    }\n\n    /**\n     * Sets if {@link Viewport#boundary} automatically synchronizes with {@link Canvas#boundary}.\n     *\n     * Default is ````false````.\n     *\n     * @param {Boolean} value Set true to automatically sycnhronize.\n     */\n    set autoBoundary(value) {\n\n        value = !!value;\n\n        if (value === this._autoBoundary) {\n            return;\n        }\n\n        this._autoBoundary = value;\n\n        if (this._autoBoundary) {\n            this._onCanvasSize = this.scene.canvas.on(\"boundary\",\n                function (boundary) {\n\n                    const width = boundary[2];\n                    const height = boundary[3];\n\n                    this._state.boundary = [0, 0, width, height];\n\n                    this.glRedraw();\n\n                    /**\n                     Fired whenever this Viewport's {@link Viewport#boundary} property changes.\n\n                     @event boundary\n                     @param value {Boolean} The property's new value\n                     */\n                    this.fire(\"boundary\", this._state.boundary);\n\n                }, this);\n\n        } else if (this._onCanvasSize) {\n            this.scene.canvas.off(this._onCanvasSize);\n            this._onCanvasSize = null;\n        }\n\n        /**\n         Fired whenever this Viewport's {@link autoBoundary/autoBoundary} property changes.\n\n         @event autoBoundary\n         @param value The property's new value\n         */\n        this.fire(\"autoBoundary\", this._autoBoundary);\n    }\n\n    /**\n     * Gets if {@link Viewport#boundary} automatically synchronizes with {@link Canvas#boundary}.\n     *\n     * Default is ````false````.\n     *\n     * @returns {Boolean} Returns ````true```` when automatically sycnhronizing.\n     */\n    get autoBoundary() {\n        return this._autoBoundary;\n    }\n\n    _getState() {\n        return this._state;\n    }\n\n    /**\n     * @private\n     */\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/viewport/Viewport.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js ***!
  \****************************************************************************/
/*! exports provided: ArrayBuf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrayBuf\", function() { return ArrayBuf; });\n/**\n * @desc Represents a WebGL ArrayBuffer.\n *\n * @private\n */\nclass ArrayBuf {\n\n    constructor(gl, type, data, numItems, itemSize, usage, normalized, stride, offset) {\n\n        this._gl = gl;\n        this.type = type;\n        this.allocated = false;\n\n        switch (data.constructor) {\n\n            case Uint8Array:\n                this.itemType = gl.UNSIGNED_BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case Int8Array:\n                this.itemType = gl.BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case  Uint16Array:\n                this.itemType = gl.UNSIGNED_SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case  Int16Array:\n                this.itemType = gl.SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case Uint32Array:\n                this.itemType = gl.UNSIGNED_INT;\n                this.itemByteSize = 4;\n                break;\n\n            case Int32Array:\n                this.itemType = gl.INT;\n                this.itemByteSize = 4;\n                break;\n\n            default:\n                this.itemType = gl.FLOAT;\n                this.itemByteSize = 4;\n        }\n\n        this.usage = usage;\n        this.length = 0;\n        this.dataLength = numItems;\n        this.numItems = 0;\n        this.itemSize = itemSize;\n        this.normalized = !!normalized;\n        this.stride = stride || 0;\n        this.offset = offset || 0;\n\n        this._allocate(data);\n    }\n\n    _allocate(data) {\n        this.allocated = false;\n        this._handle = this._gl.createBuffer();\n        if (!this._handle) {\n            throw \"Failed to allocate WebGL ArrayBuffer\";\n        }\n        if (this._handle) {\n            this._gl.bindBuffer(this.type, this._handle);\n            this._gl.bufferData(this.type, data.length > this.dataLength ? data.slice(0, this.dataLength) : data, this.usage);\n            this._gl.bindBuffer(this.type, null);\n            this.length = data.length;\n            this.numItems = this.length / this.itemSize;\n            this.allocated = true;\n        }\n    }\n\n    setData(data, offset) {\n        if (!this.allocated) {\n            return;\n        }\n        if (data.length + (offset || 0) > this.length) {            // Needs reallocation\n            this.destroy();\n            this._allocate(data);\n        } else {            // No reallocation needed\n            this._gl.bindBuffer(this.type, this._handle);\n            if (offset || offset === 0) {\n                this._gl.bufferSubData(this.type, offset * this.itemByteSize, data);\n            } else {\n                this._gl.bufferData(this.type, data, this.usage);\n            }\n            this._gl.bindBuffer(this.type, null);\n        }\n    }\n\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.bindBuffer(this.type, this._handle);\n    }\n\n    unbind() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.bindBuffer(this.type, null);\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.deleteBuffer(this._handle);\n        this._handle = null;\n        this.allocated = false;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL0FycmF5QnVmLmpzPzdmYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0EsU0FBUyxPQUFPO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9BcnJheUJ1Zi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRlc2MgUmVwcmVzZW50cyBhIFdlYkdMIEFycmF5QnVmZmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEFycmF5QnVmIHtcblxuICAgIGNvbnN0cnVjdG9yKGdsLCB0eXBlLCBkYXRhLCBudW1JdGVtcywgaXRlbVNpemUsIHVzYWdlLCBub3JtYWxpemVkLCBzdHJpZGUsIG9mZnNldCkge1xuXG4gICAgICAgIHRoaXMuX2dsID0gZ2w7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuYWxsb2NhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLmNvbnN0cnVjdG9yKSB7XG5cbiAgICAgICAgICAgIGNhc2UgVWludDhBcnJheTpcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1UeXBlID0gZ2wuVU5TSUdORURfQllURTtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1CeXRlU2l6ZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgSW50OEFycmF5OlxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVR5cGUgPSBnbC5CWVRFO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUJ5dGVTaXplID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAgVWludDE2QXJyYXk6XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVHlwZSA9IGdsLlVOU0lHTkVEX1NIT1JUO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUJ5dGVTaXplID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAgSW50MTZBcnJheTpcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1UeXBlID0gZ2wuU0hPUlQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQnl0ZVNpemUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFVpbnQzMkFycmF5OlxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbVR5cGUgPSBnbC5VTlNJR05FRF9JTlQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtQnl0ZVNpemUgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIEludDMyQXJyYXk6XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVHlwZSA9IGdsLklOVDtcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1CeXRlU2l6ZSA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtVHlwZSA9IGdsLkZMT0FUO1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbUJ5dGVTaXplID0gNDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXNhZ2UgPSB1c2FnZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmRhdGFMZW5ndGggPSBudW1JdGVtcztcbiAgICAgICAgdGhpcy5udW1JdGVtcyA9IDA7XG4gICAgICAgIHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVkID0gISFub3JtYWxpemVkO1xuICAgICAgICB0aGlzLnN0cmlkZSA9IHN0cmlkZSB8fCAwO1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2FsbG9jYXRlKGRhdGEpO1xuICAgIH1cblxuICAgIF9hbGxvY2F0ZShkYXRhKSB7XG4gICAgICAgIHRoaXMuYWxsb2NhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2hhbmRsZSA9IHRoaXMuX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAoIXRoaXMuX2hhbmRsZSkge1xuICAgICAgICAgICAgdGhyb3cgXCJGYWlsZWQgdG8gYWxsb2NhdGUgV2ViR0wgQXJyYXlCdWZmZXJcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFuZGxlKSB7XG4gICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMudHlwZSwgdGhpcy5faGFuZGxlKTtcbiAgICAgICAgICAgIHRoaXMuX2dsLmJ1ZmZlckRhdGEodGhpcy50eXBlLCBkYXRhLmxlbmd0aCA+IHRoaXMuZGF0YUxlbmd0aCA/IGRhdGEuc2xpY2UoMCwgdGhpcy5kYXRhTGVuZ3RoKSA6IGRhdGEsIHRoaXMudXNhZ2UpO1xuICAgICAgICAgICAgdGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLnR5cGUsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMubnVtSXRlbXMgPSB0aGlzLmxlbmd0aCAvIHRoaXMuaXRlbVNpemU7XG4gICAgICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGEsIG9mZnNldCkge1xuICAgICAgICBpZiAoIXRoaXMuYWxsb2NhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoICsgKG9mZnNldCB8fCAwKSA+IHRoaXMubGVuZ3RoKSB7ICAgICAgICAgICAgLy8gTmVlZHMgcmVhbGxvY2F0aW9uXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuX2FsbG9jYXRlKGRhdGEpO1xuICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgIC8vIE5vIHJlYWxsb2NhdGlvbiBuZWVkZWRcbiAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy50eXBlLCB0aGlzLl9oYW5kbGUpO1xuICAgICAgICAgICAgaWYgKG9mZnNldCB8fCBvZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9nbC5idWZmZXJTdWJEYXRhKHRoaXMudHlwZSwgb2Zmc2V0ICogdGhpcy5pdGVtQnl0ZVNpemUsIGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9nbC5idWZmZXJEYXRhKHRoaXMudHlwZSwgZGF0YSwgdGhpcy51c2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMudHlwZSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWxsb2NhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLnR5cGUsIHRoaXMuX2hhbmRsZSk7XG4gICAgfVxuXG4gICAgdW5iaW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMuYWxsb2NhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLnR5cGUsIG51bGwpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICghdGhpcy5hbGxvY2F0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nbC5kZWxldGVCdWZmZXIodGhpcy5faGFuZGxlKTtcbiAgICAgICAgdGhpcy5faGFuZGxlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbGxvY2F0ZWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7QXJyYXlCdWZ9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js ***!
  \*****************************************************************************/
/*! exports provided: Attribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Attribute\", function() { return Attribute; });\n/**\n * @desc Represents a WebGL vertex attribute buffer (VBO).\n * @private\n * @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Attribute {\n\n    constructor(gl, location) {\n        this._gl = gl;\n        this.location = location;\n    }\n\n    bindArrayBuffer(arrayBuf) {\n        if (!arrayBuf) {\n            return;\n        }\n        arrayBuf.bind();\n        this._gl.enableVertexAttribArray(this.location);\n        this._gl.vertexAttribPointer(this.location, arrayBuf.itemSize, arrayBuf.itemType, arrayBuf.normalized, arrayBuf.stride, arrayBuf.offset);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL0F0dHJpYnV0ZS5qcz8xMmE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvd2ViZ2wvQXR0cmlidXRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzYyBSZXByZXNlbnRzIGEgV2ViR0wgdmVydGV4IGF0dHJpYnV0ZSBidWZmZXIgKFZCTykuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAqL1xuY2xhc3MgQXR0cmlidXRlIHtcblxuICAgIGNvbnN0cnVjdG9yKGdsLCBsb2NhdGlvbikge1xuICAgICAgICB0aGlzLl9nbCA9IGdsO1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgYmluZEFycmF5QnVmZmVyKGFycmF5QnVmKSB7XG4gICAgICAgIGlmICghYXJyYXlCdWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhcnJheUJ1Zi5iaW5kKCk7XG4gICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xuICAgICAgICB0aGlzLl9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMubG9jYXRpb24sIGFycmF5QnVmLml0ZW1TaXplLCBhcnJheUJ1Zi5pdGVtVHlwZSwgYXJyYXlCdWYubm9ybWFsaXplZCwgYXJyYXlCdWYuc3RyaWRlLCBhcnJheUJ1Zi5vZmZzZXQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtBdHRyaWJ1dGV9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/FrameContext.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/FrameContext.js ***!
  \********************************************************************************/
/*! exports provided: FrameContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrameContext\", function() { return FrameContext; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n\n\n\n/**\n * @desc Provides rendering context to {@link Drawable\"}s as xeokit renders them for a frame.\n *\n * Also creates RTC viewing and picking matrices, caching and reusing matrices within each frame.\n *\n * @private\n */\nclass FrameContext {\n\n    constructor(scene) {\n\n        this._scene = scene;\n\n        this._matPool = [];\n        this._matPoolNextFreeIndex = 0;\n\n        this._rtcViewMats = {};\n        this._rtcPickViewMats = {};\n\n        this.reset();\n    }\n\n    /**\n     * Called by the renderer before each frame.\n     * @private\n     */\n    reset() {\n\n        this._matPoolNextFreeIndex = 0;\n        this._rtcViewMats = {};\n        this._rtcPickViewMats = {};\n\n        /**\n         * The WebGL rendering context.\n         * @type {WebGLRenderingContext}\n         */\n        this.gl = this._scene.canvas.gl;\n\n        /**\n         * ID of the last {@link WebGLProgram} that was bound during the current frame.\n         * @property lastProgramId\n         * @type {Number}\n         */\n        this.lastProgramId = null;\n\n        /**\n         * Whether to render a quality representation for triangle surfaces.\n         *\n         * When ````false````, we'll render them with a fast vertex-shaded Gouraud-shaded representation, which\n         * is great for zillions of objects.\n         *\n         * When ````true````, we'll render them at a better visual quality, using smooth, per-fragment shading\n         * and a more realistic lighting model.\n         *\n         * @property quality\n         * @default false\n         * @type {Boolean}\n         */\n        this.pbrEnabled = false;\n\n        /**\n         * Whether SAO is currently enabled during the current frame.\n         * @property withSAO\n         * @default false\n         * @type {Boolean}\n         */\n        this.withSAO = false;\n\n        /**\n         * Whether backfaces are currently enabled during the current frame.\n         * @property backfaces\n         * @default false\n         * @type {Boolean}\n         */\n        this.backfaces = false;\n\n        /**\n         * The vertex winding order for what we currently consider to be a backface during current\n         * frame: true == \"cw\", false == \"ccw\".\n         * @property frontFace\n         * @default true\n         * @type {Boolean}\n         */\n        this.frontface = true;\n\n        /**\n         * The next available texture unit to bind a {@link Texture} to.\n         * @defauilt 0\n         * @property textureUnit\n         * @type {number}\n         */\n        this.textureUnit = 0;\n\n        /**\n         * Performance statistic that counts how many times the renderer has called ````gl.drawElements()```` has been\n         * called so far within the current frame.\n         * @default 0\n         * @property drawElements\n         * @type {number}\n         */\n        this.drawElements = 0;\n\n        /**\n         * Performance statistic that counts how many times ````gl.drawArrays()```` has been called so far within\n         * the current frame.\n         * @default 0\n         * @property drawArrays\n         * @type {number}\n         */\n        this.drawArrays = 0;\n\n        /**\n         * Performance statistic that counts how many times ````gl.useProgram()```` has been called so far within\n         * the current frame.\n         * @default 0\n         * @property useProgram\n         * @type {number}\n         */\n        this.useProgram = 0;\n\n        /**\n         * Statistic that counts how many times ````gl.bindTexture()```` has been called so far within the current frame.\n         * @default 0\n         * @property bindTexture\n         * @type {number}\n         */\n        this.bindTexture = 0;\n\n        /**\n         * Counts how many times the renderer has called ````gl.bindArray()```` so far within the current frame.\n         * @defaulr 0\n         * @property bindArray\n         * @type {number}\n         */\n        this.bindArray = 0;\n\n        /**\n         * Indicates which pass the renderer is currently rendering.\n         *\n         * See {@link Scene/passes:property\"}}Scene#passes{{/crossLink}}, which configures how many passes we render\n         * per frame, which typically set to ````2```` when rendering a stereo view.\n         *\n         * @property pass\n         * @type {number}\n         */\n        this.pass = 0;\n\n        /**\n         * The 4x4 viewing transform matrix the renderer is currently using when rendering castsShadows.\n         *\n         * This sets the viewpoint to look from the point of view of each {@link DirLight}\n         * or {@link PointLight} that casts a shadow.\n         *\n         * @property shadowViewMatrix\n         * @type {Number[]}\n         */\n        this.shadowViewMatrix = null;\n\n        /**\n         * The 4x4 viewing projection matrix the renderer is currently using when rendering shadows.\n         *\n         * @property shadowProjMatrix\n         * @type {Number[]}\n         */\n        this.shadowProjMatrix = null;\n\n        /**\n         * The 4x4 viewing transform matrix the renderer is currently using when rendering a ray-pick.\n         *\n         * This sets the viewpoint to look along the ray given to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}\n         * when picking with a ray.\n         *\n         * @property pickViewMatrix\n         * @type {Number[]}\n         */\n        this.pickViewMatrix = null;\n\n        /**\n         * The 4x4 orthographic projection transform matrix the renderer is currently using when rendering a ray-pick.\n         *\n         * @property pickProjMatrix\n         * @type {Number[]}\n         */\n        this.pickProjMatrix = null;\n\n        /**\n         * Distance to the near clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n         *\n         * @property pickZNear\n         * @type {Number|*}\n         */\n        this.pickZNear = 0.01;\n\n        /**\n         * Distance to the far clipping plane when rendering depth fragments for GPU-accelerated 3D picking.\n         *\n         * @property pickZFar\n         * @type {Number|*}\n         */\n        this.pickZFar = 5000;\n\n        /**\n         * Whether or not the renderer is currently picking invisible objects.\n         *\n         * @property pickInvisible\n         * @type {Number}\n         */\n        this.pickInvisible = false;\n\n        /** The current line width.\n         *\n         * @property lineWidth\n         * @type Number\n         */\n        this.lineWidth = 1;\n    }\n\n    /**\n     * Get View matrix for the given RTC center.\n     */\n    getRTCViewMatrix(rtcCenterHash, rtcCenter) {\n        let rtcViewMat = this._rtcViewMats[rtcCenterHash];\n        if (!rtcViewMat) {\n            rtcViewMat = this._getNewMat();\n            Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_1__[\"createRTCViewMat\"])(this._scene.camera.viewMatrix, rtcCenter, rtcViewMat);\n            this._rtcViewMats[rtcCenterHash] = rtcViewMat;\n        }\n        return rtcViewMat;\n    }\n\n    /**\n     * Get picking View RTC matrix for the given RTC center.\n     */\n    getRTCPickViewMatrix(rtcCenterHash, rtcCenter) {\n        let rtcPickViewMat = this._rtcPickViewMats[rtcCenterHash];\n        if (!rtcPickViewMat) {\n            rtcPickViewMat = this._getNewMat();\n            const pickViewMat = this.pickViewMatrix || this._scene.camera.viewMatrix;\n            Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_1__[\"createRTCViewMat\"])(pickViewMat, rtcCenter, rtcPickViewMat);\n            this._rtcPickViewMats[rtcCenterHash] = rtcPickViewMat;\n        }\n        return rtcPickViewMat;\n    }\n\n    _getNewMat() {\n        let mat = this._matPool[this._matPoolNextFreeIndex];\n        if (!mat) {\n            mat = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n            this._matPool[this._matPoolNextFreeIndex] = mat;\n        }\n        this._matPoolNextFreeIndex++;\n        return mat;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/FrameContext.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/PickResult.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/PickResult.js ***!
  \******************************************************************************/
/*! exports provided: PickResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickResult\", function() { return PickResult; });\n/**\n * @desc Pick result returned by {@link Scene#pick}.\n *\n */\nclass PickResult {\n\n    /**\n     * @private\n     * @param value\n     */\n    constructor() {\n\n        /**\n         * Picked entity.\n         * Null when no entity was picked.\n         * @property entity\n         * @type {Entity|*}\n         */\n        this.entity = null;\n\n        /**\n         * Type of primitive that was picked - usually \"triangle\".\n         * Null when no primitive was picked.\n         * @property primitive\n         * @type {String}\n         */\n        this.primitive = null;\n\n        /**\n         * Index of primitive that was picked.\n         * -1 when no entity was picked.\n         * @property primIndex\n         * @type {number}\n         */\n        this.primIndex = -1;\n\n        this._canvasPos = new Int16Array([0, 0]);\n        this._origin = new Float64Array([0, 0, 0]);\n        this._direction = new Float64Array([0, 0, 0]);\n        this._indices = new Int32Array(3);\n        this._localPos = new Float64Array([0, 0, 0]);\n        this._worldPos = new Float64Array([0, 0, 0]);\n        this._viewPos = new Float64Array([0, 0, 0]);\n        this._bary = new Float64Array([0, 0, 0]);\n        this._worldNormal = new Float64Array([0, 0, 0]);\n        this._uv = new Float64Array([0, 0]);\n\n        this.reset();\n    }\n\n    /**\n     * Canvas coordinates when picking with a 2D pointer.\n     * @property canvasPos\n     * @type {Number[]}\n     */\n    get canvasPos() {\n        return this._gotCanvasPos ? this._canvasPos : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set canvasPos(value) {\n        if (value) {\n            this._canvasPos[0] = value[0];\n            this._canvasPos[1] = value[1];\n            this._gotCanvasPos = true;\n        } else {\n            this._gotCanvasPos = false;\n        }\n    }\n\n    /**\n     * World-space 3D ray origin when raypicked.\n     * @property origin\n     * @type {Number[]}\n     */\n    get origin() {\n        return this._gotOrigin ? this._origin : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set origin(value) {\n        if (value) {\n            this._origin[0] = value[0];\n            this._origin[1] = value[1];\n            this._origin[2] = value[2];\n            this._gotOrigin = true;\n        } else {\n            this._gotOrigin = false;\n        }\n    }\n\n    /**\n     * World-space 3D ray direction when raypicked.\n     * @property direction\n     * @type {Number[]}\n     */\n    get direction() {\n        return this._gotDirection ? this._direction : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set direction(value) {\n        if (value) {\n            this._direction[0] = value[0];\n            this._direction[1] = value[1];\n            this._direction[2] = value[2];\n            this._gotDirection = true;\n        } else {\n            this._gotDirection = false;\n        }\n    }\n    \n    /**\n     * Picked triangle's vertex indices.\n     * Only defined when an entity and triangle was picked.\n     * @property indices\n     * @type {Int32Array}\n     */\n    get indices() {\n        return this.entity && this._gotIndices ? this._indices : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set indices(value) {\n        if (value) {\n            this._indices[0] = value[0];\n            this._indices[1] = value[1];\n            this._indices[2] = value[2];\n            this._gotIndices = true;\n        } else {\n            this._gotIndices = false;\n        }\n    }\n\n    /**\n     * Picked Local-space point on surface.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property localPos\n     * @type {Number[]}\n     */\n    get localPos() {\n        return this.entity && this._gotLocalPos ? this._localPos : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set localPos(value) {\n        if (value) {\n            this._localPos[0] = value[0];\n            this._localPos[1] = value[1];\n            this._localPos[2] = value[2];\n            this._gotLocalPos = true;\n        } else {\n            this._gotLocalPos = false;\n        }\n    }\n\n    /**\n     * Picked World-space point on surface.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property worldPos\n     * @type {Number[]}\n     */\n    get worldPos() {\n        return this.entity && this._gotWorldPos ? this._worldPos : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set worldPos(value) {\n        if (value) {\n            this._worldPos[0] = value[0];\n            this._worldPos[1] = value[1];\n            this._worldPos[2] = value[2];\n            this._gotWorldPos = true;\n        } else {\n            this._gotWorldPos = false;\n        }\n    }\n\n    /**\n     * Picked View-space point on surface.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property viewPos\n     * @type {Number[]}\n     */\n    get viewPos() {\n        return this.entity && this._gotViewPos ? this._viewPos : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set viewPos(value) {\n        if (value) {\n            this._viewPos[0] = value[0];\n            this._viewPos[1] = value[1];\n            this._viewPos[2] = value[2];\n            this._gotViewPos = true;\n        } else {\n            this._gotViewPos = false;\n        }\n    }\n\n    /**\n     * Barycentric coordinate within picked triangle.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property bary\n     * @type {Number[]}\n     */\n    get bary() {\n        return this.entity && this._gotBary ? this._bary : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set bary(value) {\n        if (value) {\n            this._bary[0] = value[0];\n            this._bary[1] = value[1];\n            this._bary[2] = value[2];\n            this._gotBary = true;\n        } else {\n            this._gotBary = false;\n        }\n    }\n\n    /**\n     * Normal vector at picked position on surface.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property worldNormal\n     * @type {Number[]}\n     */\n    get worldNormal() {\n        return this.entity && this._gotWorldNormal ? this._worldNormal : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set worldNormal(value) {\n        if (value) {\n            this._worldNormal[0] = value[0];\n            this._worldNormal[1] = value[1];\n            this._worldNormal[2] = value[2];\n            this._gotWorldNormal = true;\n        } else {\n            this._gotWorldNormal = false;\n        }\n    }\n\n    /**\n     * UV coordinates at picked position on surface.\n     * Only defined when an entity and a point on its surface was picked.\n     * @property uv\n     * @type {Number[]}\n     */\n    get uv() {\n        return this.entity && this._gotUV ? this._uv : null;\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    set uv(value) {\n        if (value) {\n            this._uv[0] = value[0];\n            this._uv[1] = value[1];\n            this._gotUV = true;\n        } else {\n            this._gotUV = false;\n        }\n    }\n\n    /**\n     * @private\n     * @param value\n     */\n    reset() {\n        this.entity = null;\n        this.primIndex = -1;\n        this.primitive = null;\n        this._gotCanvasPos = false;\n        this._gotOrigin = false;\n        this._gotDirection = false;\n        this._gotIndices = false;\n        this._gotLocalPos = false;\n        this._gotWorldPos = false;\n        this._gotViewPos = false;\n        this._gotBary = false;\n        this._gotWorldNormal = false;\n        this._gotUV = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1BpY2tSZXN1bHQuanM/MWQwYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQSxrQ0FBa0MsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9QaWNrUmVzdWx0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzYyBQaWNrIHJlc3VsdCByZXR1cm5lZCBieSB7QGxpbmsgU2NlbmUjcGlja30uXG4gKlxuICovXG5jbGFzcyBQaWNrUmVzdWx0IHtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBpY2tlZCBlbnRpdHkuXG4gICAgICAgICAqIE51bGwgd2hlbiBubyBlbnRpdHkgd2FzIHBpY2tlZC5cbiAgICAgICAgICogQHByb3BlcnR5IGVudGl0eVxuICAgICAgICAgKiBAdHlwZSB7RW50aXR5fCp9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVudGl0eSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR5cGUgb2YgcHJpbWl0aXZlIHRoYXQgd2FzIHBpY2tlZCAtIHVzdWFsbHkgXCJ0cmlhbmdsZVwiLlxuICAgICAgICAgKiBOdWxsIHdoZW4gbm8gcHJpbWl0aXZlIHdhcyBwaWNrZWQuXG4gICAgICAgICAqIEBwcm9wZXJ0eSBwcmltaXRpdmVcbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHJpbWl0aXZlID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5kZXggb2YgcHJpbWl0aXZlIHRoYXQgd2FzIHBpY2tlZC5cbiAgICAgICAgICogLTEgd2hlbiBubyBlbnRpdHkgd2FzIHBpY2tlZC5cbiAgICAgICAgICogQHByb3BlcnR5IHByaW1JbmRleFxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcmltSW5kZXggPSAtMTtcblxuICAgICAgICB0aGlzLl9jYW52YXNQb3MgPSBuZXcgSW50MTZBcnJheShbMCwgMF0pO1xuICAgICAgICB0aGlzLl9vcmlnaW4gPSBuZXcgRmxvYXQ2NEFycmF5KFswLCAwLCAwXSk7XG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IG5ldyBGbG9hdDY0QXJyYXkoWzAsIDAsIDBdKTtcbiAgICAgICAgdGhpcy5faW5kaWNlcyA9IG5ldyBJbnQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLl9sb2NhbFBvcyA9IG5ldyBGbG9hdDY0QXJyYXkoWzAsIDAsIDBdKTtcbiAgICAgICAgdGhpcy5fd29ybGRQb3MgPSBuZXcgRmxvYXQ2NEFycmF5KFswLCAwLCAwXSk7XG4gICAgICAgIHRoaXMuX3ZpZXdQb3MgPSBuZXcgRmxvYXQ2NEFycmF5KFswLCAwLCAwXSk7XG4gICAgICAgIHRoaXMuX2JhcnkgPSBuZXcgRmxvYXQ2NEFycmF5KFswLCAwLCAwXSk7XG4gICAgICAgIHRoaXMuX3dvcmxkTm9ybWFsID0gbmV3IEZsb2F0NjRBcnJheShbMCwgMCwgMF0pO1xuICAgICAgICB0aGlzLl91diA9IG5ldyBGbG9hdDY0QXJyYXkoWzAsIDBdKTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FudmFzIGNvb3JkaW5hdGVzIHdoZW4gcGlja2luZyB3aXRoIGEgMkQgcG9pbnRlci5cbiAgICAgKiBAcHJvcGVydHkgY2FudmFzUG9zXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCBjYW52YXNQb3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nb3RDYW52YXNQb3MgPyB0aGlzLl9jYW52YXNQb3MgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IGNhbnZhc1Bvcyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhc1Bvc1swXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgdGhpcy5fY2FudmFzUG9zWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl9nb3RDYW52YXNQb3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ290Q2FudmFzUG9zID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXb3JsZC1zcGFjZSAzRCByYXkgb3JpZ2luIHdoZW4gcmF5cGlja2VkLlxuICAgICAqIEBwcm9wZXJ0eSBvcmlnaW5cbiAgICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAgICovXG4gICAgZ2V0IG9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dvdE9yaWdpbiA/IHRoaXMuX29yaWdpbiA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQgb3JpZ2luKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fb3JpZ2luWzBdID0gdmFsdWVbMF07XG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5bMV0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIHRoaXMuX29yaWdpblsyXSA9IHZhbHVlWzJdO1xuICAgICAgICAgICAgdGhpcy5fZ290T3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2dvdE9yaWdpbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV29ybGQtc3BhY2UgM0QgcmF5IGRpcmVjdGlvbiB3aGVuIHJheXBpY2tlZC5cbiAgICAgKiBAcHJvcGVydHkgZGlyZWN0aW9uXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCBkaXJlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nb3REaXJlY3Rpb24gPyB0aGlzLl9kaXJlY3Rpb24gOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IGRpcmVjdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvblswXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb25bMl0gPSB2YWx1ZVsyXTtcbiAgICAgICAgICAgIHRoaXMuX2dvdERpcmVjdGlvbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9nb3REaXJlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBQaWNrZWQgdHJpYW5nbGUncyB2ZXJ0ZXggaW5kaWNlcy5cbiAgICAgKiBPbmx5IGRlZmluZWQgd2hlbiBhbiBlbnRpdHkgYW5kIHRyaWFuZ2xlIHdhcyBwaWNrZWQuXG4gICAgICogQHByb3BlcnR5IGluZGljZXNcbiAgICAgKiBAdHlwZSB7SW50MzJBcnJheX1cbiAgICAgKi9cbiAgICBnZXQgaW5kaWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5ICYmIHRoaXMuX2dvdEluZGljZXMgPyB0aGlzLl9pbmRpY2VzIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBpbmRpY2VzKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5faW5kaWNlc1swXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgdGhpcy5faW5kaWNlc1sxXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgdGhpcy5faW5kaWNlc1syXSA9IHZhbHVlWzJdO1xuICAgICAgICAgICAgdGhpcy5fZ290SW5kaWNlcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9nb3RJbmRpY2VzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQaWNrZWQgTG9jYWwtc3BhY2UgcG9pbnQgb24gc3VyZmFjZS5cbiAgICAgKiBPbmx5IGRlZmluZWQgd2hlbiBhbiBlbnRpdHkgYW5kIGEgcG9pbnQgb24gaXRzIHN1cmZhY2Ugd2FzIHBpY2tlZC5cbiAgICAgKiBAcHJvcGVydHkgbG9jYWxQb3NcbiAgICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAgICovXG4gICAgZ2V0IGxvY2FsUG9zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHkgJiYgdGhpcy5fZ290TG9jYWxQb3MgPyB0aGlzLl9sb2NhbFBvcyA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQgbG9jYWxQb3ModmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NhbFBvc1swXSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxQb3NbMV0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsUG9zWzJdID0gdmFsdWVbMl07XG4gICAgICAgICAgICB0aGlzLl9nb3RMb2NhbFBvcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9nb3RMb2NhbFBvcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGlja2VkIFdvcmxkLXNwYWNlIHBvaW50IG9uIHN1cmZhY2UuXG4gICAgICogT25seSBkZWZpbmVkIHdoZW4gYW4gZW50aXR5IGFuZCBhIHBvaW50IG9uIGl0cyBzdXJmYWNlIHdhcyBwaWNrZWQuXG4gICAgICogQHByb3BlcnR5IHdvcmxkUG9zXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCB3b3JsZFBvcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5ICYmIHRoaXMuX2dvdFdvcmxkUG9zID8gdGhpcy5fd29ybGRQb3MgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IHdvcmxkUG9zKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fd29ybGRQb3NbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmxkUG9zWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl93b3JsZFBvc1syXSA9IHZhbHVlWzJdO1xuICAgICAgICAgICAgdGhpcy5fZ290V29ybGRQb3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ290V29ybGRQb3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBpY2tlZCBWaWV3LXNwYWNlIHBvaW50IG9uIHN1cmZhY2UuXG4gICAgICogT25seSBkZWZpbmVkIHdoZW4gYW4gZW50aXR5IGFuZCBhIHBvaW50IG9uIGl0cyBzdXJmYWNlIHdhcyBwaWNrZWQuXG4gICAgICogQHByb3BlcnR5IHZpZXdQb3NcbiAgICAgKiBAdHlwZSB7TnVtYmVyW119XG4gICAgICovXG4gICAgZ2V0IHZpZXdQb3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudGl0eSAmJiB0aGlzLl9nb3RWaWV3UG9zID8gdGhpcy5fdmlld1BvcyA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQgdmlld1Bvcyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdQb3NbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdQb3NbMV0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdQb3NbMl0gPSB2YWx1ZVsyXTtcbiAgICAgICAgICAgIHRoaXMuX2dvdFZpZXdQb3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ290Vmlld1BvcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmFyeWNlbnRyaWMgY29vcmRpbmF0ZSB3aXRoaW4gcGlja2VkIHRyaWFuZ2xlLlxuICAgICAqIE9ubHkgZGVmaW5lZCB3aGVuIGFuIGVudGl0eSBhbmQgYSBwb2ludCBvbiBpdHMgc3VyZmFjZSB3YXMgcGlja2VkLlxuICAgICAqIEBwcm9wZXJ0eSBiYXJ5XG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCBiYXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHkgJiYgdGhpcy5fZ290QmFyeSA/IHRoaXMuX2JhcnkgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IGJhcnkodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9iYXJ5WzBdID0gdmFsdWVbMF07XG4gICAgICAgICAgICB0aGlzLl9iYXJ5WzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl9iYXJ5WzJdID0gdmFsdWVbMl07XG4gICAgICAgICAgICB0aGlzLl9nb3RCYXJ5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2dvdEJhcnkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vcm1hbCB2ZWN0b3IgYXQgcGlja2VkIHBvc2l0aW9uIG9uIHN1cmZhY2UuXG4gICAgICogT25seSBkZWZpbmVkIHdoZW4gYW4gZW50aXR5IGFuZCBhIHBvaW50IG9uIGl0cyBzdXJmYWNlIHdhcyBwaWNrZWQuXG4gICAgICogQHByb3BlcnR5IHdvcmxkTm9ybWFsXG4gICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAqL1xuICAgIGdldCB3b3JsZE5vcm1hbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50aXR5ICYmIHRoaXMuX2dvdFdvcmxkTm9ybWFsID8gdGhpcy5fd29ybGROb3JtYWwgOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgc2V0IHdvcmxkTm9ybWFsKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fd29ybGROb3JtYWxbMF0gPSB2YWx1ZVswXTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmxkTm9ybWFsWzFdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl93b3JsZE5vcm1hbFsyXSA9IHZhbHVlWzJdO1xuICAgICAgICAgICAgdGhpcy5fZ290V29ybGROb3JtYWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ290V29ybGROb3JtYWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVWIGNvb3JkaW5hdGVzIGF0IHBpY2tlZCBwb3NpdGlvbiBvbiBzdXJmYWNlLlxuICAgICAqIE9ubHkgZGVmaW5lZCB3aGVuIGFuIGVudGl0eSBhbmQgYSBwb2ludCBvbiBpdHMgc3VyZmFjZSB3YXMgcGlja2VkLlxuICAgICAqIEBwcm9wZXJ0eSB1dlxuICAgICAqIEB0eXBlIHtOdW1iZXJbXX1cbiAgICAgKi9cbiAgICBnZXQgdXYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudGl0eSAmJiB0aGlzLl9nb3RVViA/IHRoaXMuX3V2IDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCB1dih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3V2WzBdID0gdmFsdWVbMF07XG4gICAgICAgICAgICB0aGlzLl91dlsxXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgdGhpcy5fZ290VVYgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZ290VVYgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuZW50aXR5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcmltSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5wcmltaXRpdmUgPSBudWxsO1xuICAgICAgICB0aGlzLl9nb3RDYW52YXNQb3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZ290T3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2dvdERpcmVjdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9nb3RJbmRpY2VzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2dvdExvY2FsUG9zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2dvdFdvcmxkUG9zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2dvdFZpZXdQb3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZ290QmFyeSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9nb3RXb3JsZE5vcm1hbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9nb3RVViA9IGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHtQaWNrUmVzdWx0fTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/PickResult.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js ***!
  \***************************************************************************/
/*! exports provided: Program */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Program\", function() { return Program; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _Shader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shader.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js\");\n/* harmony import */ var _Sampler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sampler.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js\");\n/* harmony import */ var _Attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Attribute.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js\");\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nfunction joinSansComments(srcLines) {\n    const src = [];\n    let line;\n    let n;\n    for (let i = 0, len = srcLines.length; i < len; i++) {\n        line = srcLines[i];\n        n = line.indexOf(\"/\");\n        if (n > 0) {\n            if (line.charAt(n + 1) === \"/\") {\n                line = line.substring(0, n);\n            }\n        }\n        src.push(line);\n    }\n    return src.join(\"\\n\");\n}\n\nfunction logErrors(errors) {\n    console.error(errors.join(\"\\n\"));\n}\n\n/**\n * @desc Represents a WebGL program.\n * @private\n */\nclass Program {\n\n    constructor(gl, shaderSource) {\n        this.id = ids.addItem({});\n        this.source = shaderSource;\n        this.init(gl);\n    }\n\n    init(gl) {\n        this.gl = gl;\n        this.allocated = false;\n        this.compiled = false;\n        this.linked = false;\n        this.validated = false;\n        this.errors = null;\n        this.uniforms = {};\n        this.samplers = {};\n        this.attributes = {};\n        this._vertexShader = new _Shader_js__WEBPACK_IMPORTED_MODULE_1__[\"Shader\"](gl, gl.VERTEX_SHADER, joinSansComments(this.source.vertex));\n        this._fragmentShader = new _Shader_js__WEBPACK_IMPORTED_MODULE_1__[\"Shader\"](gl, gl.FRAGMENT_SHADER, joinSansComments(this.source.fragment));\n        if (!this._vertexShader.allocated) {\n            this.errors = [\"Vertex shader failed to allocate\"].concat(this._vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        if (!this._fragmentShader.allocated) {\n            this.errors = [\"Fragment shader failed to allocate\"].concat(this._fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        this.allocated = true;\n        if (!this._vertexShader.compiled) {\n            this.errors = [\"Vertex shader failed to compile\"].concat(this._vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        if (!this._fragmentShader.compiled) {\n            this.errors = [\"Fragment shader failed to compile\"].concat(this._fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        this.compiled = true;\n        let a;\n        let i;\n        let u;\n        let uName;\n        let location;\n        this.handle = gl.createProgram();\n        if (!this.handle) {\n            this.errors = [\"Failed to allocate program\"];\n            return;\n        }\n        gl.attachShader(this.handle, this._vertexShader.handle);\n        gl.attachShader(this.handle, this._fragmentShader.handle);\n        gl.linkProgram(this.handle);\n        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeokit/issues/5\n        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?\n        this.validated = true;\n        if (!this.linked || !this.validated) {\n            this.errors = [];\n            this.errors.push(\"\");\n            this.errors.push(gl.getProgramInfoLog(this.handle));\n            this.errors.push(\"\\nVertex shader:\\n\");\n            this.errors = this.errors.concat(this.source.vertex);\n            this.errors.push(\"\\nFragment shader:\\n\");\n            this.errors = this.errors.concat(this.source.fragment);\n            logErrors(this.errors);\n            return;\n        }\n        const numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        for (i = 0; i < numUniforms; ++i) {\n            u = gl.getActiveUniform(this.handle, i);\n            if (u) {\n                uName = u.name;\n                if (uName[uName.length - 1] === \"\\u0000\") {\n                    uName = uName.substr(0, uName.length - 1);\n                }\n                location = gl.getUniformLocation(this.handle, uName);\n                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {\n                    this.samplers[uName] = new _Sampler_js__WEBPACK_IMPORTED_MODULE_2__[\"Sampler\"](gl, location);\n                } else {\n                    this.uniforms[uName] = location;\n                }\n            }\n        }\n        const numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        for (i = 0; i < numAttribs; i++) {\n            a = gl.getActiveAttrib(this.handle, i);\n            if (a) {\n                location = gl.getAttribLocation(this.handle, a.name);\n                this.attributes[a.name] = new _Attribute_js__WEBPACK_IMPORTED_MODULE_3__[\"Attribute\"](gl, location);\n            }\n        }\n        this.allocated = true;\n    }\n\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    }\n\n    getLocation(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.uniforms[name];\n    }\n\n    getAttribute(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.attributes[name];\n    }\n\n    bindTexture(name, texture, unit) {\n        if (!this.allocated) {\n            return false;\n        }\n        const sampler = this.samplers[name];\n        if (sampler) {\n            return sampler.bindTexture(texture, unit);\n        } else {\n            return false;\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        ids.removeItem(this.id);\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this._vertexShader.handle);\n        this.gl.deleteShader(this._fragmentShader.handle);\n        this.handle = null;\n        this.attributes = null;\n        this.uniforms = null;\n        this.samplers = null;\n        this.allocated = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js ***!
  \********************************************************************************/
/*! exports provided: RenderBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderBuffer\", function() { return RenderBuffer; });\n/* harmony import */ var _libs_canvas2image_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../libs/canvas2image.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/libs/canvas2image.js\");\n\n\n/**\n * @desc Represents a WebGL render buffer.\n * @private\n */\nclass RenderBuffer {\n\n    constructor(canvas, gl, options) {\n        options = options || {};\n        this.gl = gl;\n        this.allocated = false;\n        this.canvas = canvas;\n        this.buffer = null;\n        this.bound = false;\n        this.size = options.size;\n    }\n\n    setSize(size) {\n        this.size = size;\n    }\n\n    webglContextRestored(gl) {\n        this.gl = gl;\n        this.buffer = null;\n        this.allocated = false;\n        this.bound = false;\n    }\n\n    bind() {\n        this._touch();\n        if (this.bound) {\n            return;\n        }\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.buffer.framebuf);\n        this.bound = true;\n    }\n\n    _touch() {\n\n        let width;\n        let height;\n        const gl = this.gl;\n\n        if (this.size) {\n            width = this.size[0];\n            height = this.size[1];\n\n        } else {\n            width = gl.drawingBufferWidth;\n            height = gl.drawingBufferHeight;\n        }\n\n        if (this.buffer) {\n\n            if (this.buffer.width === width && this.buffer.height === height) {\n                return;\n\n            } else {\n                gl.deleteTexture(this.buffer.texture);\n                gl.deleteFramebuffer(this.buffer.framebuf);\n                gl.deleteRenderbuffer(this.buffer.renderbuf);\n            }\n        }\n\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        const renderbuf = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuf);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n        const framebuf = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuf);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        // Verify framebuffer is OK\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        if (!gl.isFramebuffer(framebuf)) {\n            throw \"Invalid framebuffer\";\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n        switch (status) {\n\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\";\n\n            default:\n                throw \"Incomplete framebuffer: \" + status;\n        }\n\n        this.buffer = {\n            framebuf: framebuf,\n            renderbuf: renderbuf,\n            texture: texture,\n            width: width,\n            height: height\n        };\n\n        this.bound = false;\n    }\n\n    clear() {\n        if (!this.bound) {\n            throw \"Render buffer not bound\";\n        }\n        const gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    read(pickX, pickY) {\n        const x = pickX;\n        const y = this.gl.drawingBufferHeight - pickY;\n        const pix = new Uint8Array(4);\n        const gl = this.gl;\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pix);\n        return pix;\n    }\n\n    readImage(params) {\n\n        const gl = this.gl;\n        const imageDataCache = this._getImageDataCache();\n        const pixelData = imageDataCache.pixelData;\n        const canvas = imageDataCache.canvas;\n        const imageData = imageDataCache.imageData;\n        const context = imageDataCache.context;\n\n        gl.readPixels(0, 0, this.buffer.width, this.buffer.height, gl.RGBA, gl.UNSIGNED_BYTE, pixelData);\n\n        imageData.data.set(pixelData);\n        context.putImageData(imageData, 0, 0);\n\n        const imageWidth = params.width || canvas.width;\n        const imageHeight = params.height || canvas.height;\n        const format = params.format || \"jpeg\";\n        const flipy = true; // Account for WebGL texture flipping\n\n        let image;\n\n        switch (format) {\n            case \"jpeg\":\n                image = _libs_canvas2image_js__WEBPACK_IMPORTED_MODULE_0__[\"Canvas2Image\"].saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"png\":\n                image = _libs_canvas2image_js__WEBPACK_IMPORTED_MODULE_0__[\"Canvas2Image\"].saveAsPNG(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            case \"bmp\":\n                image = _libs_canvas2image_js__WEBPACK_IMPORTED_MODULE_0__[\"Canvas2Image\"].saveAsBMP(canvas, true, imageWidth, imageHeight, flipy);\n                break;\n            default:\n                console.error(\"Unsupported image format: '\" + format + \"' - supported types are 'jpeg', 'bmp' and 'png' - defaulting to 'jpeg'\");\n                image = _libs_canvas2image_js__WEBPACK_IMPORTED_MODULE_0__[\"Canvas2Image\"].saveAsJPEG(canvas, true, imageWidth, imageHeight, flipy);\n        }\n\n        return image.src;\n    }\n\n    _getImageDataCache() {\n\n        const bufferWidth = this.buffer.width;\n        const bufferHeight = this.buffer.height;\n\n        let imageDataCache = this._imageDataCache;\n\n        if (imageDataCache) {\n            if (imageDataCache.width !== bufferWidth || imageDataCache.height !== bufferHeight) {\n                this._imageDataCache = null;\n                imageDataCache = null;\n            }\n        }\n\n        if (!imageDataCache) {\n\n            const canvas = document.createElement('canvas');\n            canvas.width = bufferWidth;\n            canvas.height = bufferHeight;\n\n            const context = canvas.getContext('2d');\n            const imageData = context.createImageData(bufferWidth, bufferHeight);\n\n            imageDataCache = {\n                pixelData: new Uint8Array(bufferWidth * bufferHeight * 4),\n                canvas: canvas,\n                context: context,\n                imageData: imageData,\n                width: bufferWidth,\n                height: bufferHeight\n            };\n\n            this._imageDataCache = imageDataCache;\n        }\n\n        return imageDataCache;\n    }\n\n    unbind() {\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.bound = false;\n    }\n\n    getTexture() {\n        const self = this;\n        return this._texture || (this._texture = {\n            renderBuffer: this,\n            bind: function (unit) {\n                if (self.buffer && self.buffer.texture) {\n                    self.gl.activeTexture(self.gl[\"TEXTURE\" + unit]);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, self.buffer.texture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: function (unit) {\n                if (self.buffer && self.buffer.texture) {\n                    self.gl.activeTexture(self.gl[\"TEXTURE\" + unit]);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, null);\n                }\n            }\n        });\n    }\n\n    destroy() {\n        if (this.allocated) {\n            const gl = this.gl;\n            gl.deleteTexture(this.buffer.texture);\n            gl.deleteFramebuffer(this.buffer.framebuf);\n            gl.deleteRenderbuffer(this.buffer.renderbuf);\n            this.allocated = false;\n            this.buffer = null;\n            this.bound = false;\n        }\n        this._imageDataCache = null;\n        this._texture = null;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1JlbmRlckJ1ZmZlci5qcz83NjgyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFxRDs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixrRUFBWTtBQUNwQztBQUNBO0FBQ0Esd0JBQXdCLGtFQUFZO0FBQ3BDO0FBQ0E7QUFDQSx3QkFBd0Isa0VBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtFQUFZO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1JlbmRlckJ1ZmZlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2FudmFzMkltYWdlfSBmcm9tIFwiLi4vbGlicy9jYW52YXMyaW1hZ2UuanNcIjtcblxuLyoqXG4gKiBAZGVzYyBSZXByZXNlbnRzIGEgV2ViR0wgcmVuZGVyIGJ1ZmZlci5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFJlbmRlckJ1ZmZlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGdsLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmdsID0gZ2w7XG4gICAgICAgIHRoaXMuYWxsb2NhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYm91bmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaXplID0gb3B0aW9ucy5zaXplO1xuICAgIH1cblxuICAgIHNldFNpemUoc2l6ZSkge1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIH1cblxuICAgIHdlYmdsQ29udGV4dFJlc3RvcmVkKGdsKSB7XG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJvdW5kID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYmluZCgpIHtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgaWYgKHRoaXMuYm91bmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5idWZmZXIuZnJhbWVidWYpO1xuICAgICAgICB0aGlzLmJvdW5kID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBfdG91Y2goKSB7XG5cbiAgICAgICAgbGV0IHdpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0O1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG5cbiAgICAgICAgaWYgKHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLnNpemVbMF07XG4gICAgICAgICAgICBoZWlnaHQgPSB0aGlzLnNpemVbMV07XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpZHRoID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoO1xuICAgICAgICAgICAgaGVpZ2h0ID0gZ2wuZHJhd2luZ0J1ZmZlckhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuXG4gICAgICAgICAgICBpZiAodGhpcy5idWZmZXIud2lkdGggPT09IHdpZHRoICYmIHRoaXMuYnVmZmVyLmhlaWdodCA9PT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5idWZmZXIudGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgZ2wuZGVsZXRlRnJhbWVidWZmZXIodGhpcy5idWZmZXIuZnJhbWVidWYpO1xuICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLmJ1ZmZlci5yZW5kZXJidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cbiAgICAgICAgY29uc3QgcmVuZGVyYnVmID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWYpO1xuICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfQ09NUE9ORU5UMTYsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGZyYW1lYnVmID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZWJ1Zik7XG4gICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSwgMCk7XG4gICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1Zik7XG5cbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblxuICAgICAgICAvLyBWZXJpZnkgZnJhbWVidWZmZXIgaXMgT0tcblxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lYnVmKTtcbiAgICAgICAgaWYgKCFnbC5pc0ZyYW1lYnVmZmVyKGZyYW1lYnVmKSkge1xuICAgICAgICAgICAgdGhyb3cgXCJJbnZhbGlkIGZyYW1lYnVmZmVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblxuICAgICAgICBjb25zdCBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKGdsLkZSQU1FQlVGRkVSKTtcblxuICAgICAgICBzd2l0Y2ggKHN0YXR1cykge1xuXG4gICAgICAgICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVDpcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkluY29tcGxldGUgZnJhbWVidWZmZXI6IEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVFwiO1xuXG4gICAgICAgICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UOlxuICAgICAgICAgICAgICAgIHRocm93IFwiSW5jb21wbGV0ZSBmcmFtZWJ1ZmZlcjogRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlRcIjtcblxuICAgICAgICAgICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlM6XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJJbmNvbXBsZXRlIGZyYW1lYnVmZmVyOiBGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlNcIjtcblxuICAgICAgICAgICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9VTlNVUFBPUlRFRDpcbiAgICAgICAgICAgICAgICB0aHJvdyBcIkluY29tcGxldGUgZnJhbWVidWZmZXI6IEZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEXCI7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJJbmNvbXBsZXRlIGZyYW1lYnVmZmVyOiBcIiArIHN0YXR1cztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVmZmVyID0ge1xuICAgICAgICAgICAgZnJhbWVidWY6IGZyYW1lYnVmLFxuICAgICAgICAgICAgcmVuZGVyYnVmOiByZW5kZXJidWYsXG4gICAgICAgICAgICB0ZXh0dXJlOiB0ZXh0dXJlLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmJvdW5kID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5ib3VuZCkge1xuICAgICAgICAgICAgdGhyb3cgXCJSZW5kZXIgYnVmZmVyIG5vdCBib3VuZFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuICAgIH1cblxuICAgIHJlYWQocGlja1gsIHBpY2tZKSB7XG4gICAgICAgIGNvbnN0IHggPSBwaWNrWDtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCAtIHBpY2tZO1xuICAgICAgICBjb25zdCBwaXggPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5yZWFkUGl4ZWxzKHgsIHksIDEsIDEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHBpeCk7XG4gICAgICAgIHJldHVybiBwaXg7XG4gICAgfVxuXG4gICAgcmVhZEltYWdlKHBhcmFtcykge1xuXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhQ2FjaGUgPSB0aGlzLl9nZXRJbWFnZURhdGFDYWNoZSgpO1xuICAgICAgICBjb25zdCBwaXhlbERhdGEgPSBpbWFnZURhdGFDYWNoZS5waXhlbERhdGE7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGltYWdlRGF0YUNhY2hlLmNhbnZhcztcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gaW1hZ2VEYXRhQ2FjaGUuaW1hZ2VEYXRhO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gaW1hZ2VEYXRhQ2FjaGUuY29udGV4dDtcblxuICAgICAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIHRoaXMuYnVmZmVyLndpZHRoLCB0aGlzLmJ1ZmZlci5oZWlnaHQsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHBpeGVsRGF0YSk7XG5cbiAgICAgICAgaW1hZ2VEYXRhLmRhdGEuc2V0KHBpeGVsRGF0YSk7XG4gICAgICAgIGNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgMCwgMCk7XG5cbiAgICAgICAgY29uc3QgaW1hZ2VXaWR0aCA9IHBhcmFtcy53aWR0aCB8fCBjYW52YXMud2lkdGg7XG4gICAgICAgIGNvbnN0IGltYWdlSGVpZ2h0ID0gcGFyYW1zLmhlaWdodCB8fCBjYW52YXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBmb3JtYXQgPSBwYXJhbXMuZm9ybWF0IHx8IFwianBlZ1wiO1xuICAgICAgICBjb25zdCBmbGlweSA9IHRydWU7IC8vIEFjY291bnQgZm9yIFdlYkdMIHRleHR1cmUgZmxpcHBpbmdcblxuICAgICAgICBsZXQgaW1hZ2U7XG5cbiAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJqcGVnXCI6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBDYW52YXMySW1hZ2Uuc2F2ZUFzSlBFRyhjYW52YXMsIHRydWUsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0LCBmbGlweSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicG5nXCI6XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBDYW52YXMySW1hZ2Uuc2F2ZUFzUE5HKGNhbnZhcywgdHJ1ZSwgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQsIGZsaXB5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibXBcIjpcbiAgICAgICAgICAgICAgICBpbWFnZSA9IENhbnZhczJJbWFnZS5zYXZlQXNCTVAoY2FudmFzLCB0cnVlLCBpbWFnZVdpZHRoLCBpbWFnZUhlaWdodCwgZmxpcHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5zdXBwb3J0ZWQgaW1hZ2UgZm9ybWF0OiAnXCIgKyBmb3JtYXQgKyBcIicgLSBzdXBwb3J0ZWQgdHlwZXMgYXJlICdqcGVnJywgJ2JtcCcgYW5kICdwbmcnIC0gZGVmYXVsdGluZyB0byAnanBlZydcIik7XG4gICAgICAgICAgICAgICAgaW1hZ2UgPSBDYW52YXMySW1hZ2Uuc2F2ZUFzSlBFRyhjYW52YXMsIHRydWUsIGltYWdlV2lkdGgsIGltYWdlSGVpZ2h0LCBmbGlweSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW1hZ2Uuc3JjO1xuICAgIH1cblxuICAgIF9nZXRJbWFnZURhdGFDYWNoZSgpIHtcblxuICAgICAgICBjb25zdCBidWZmZXJXaWR0aCA9IHRoaXMuYnVmZmVyLndpZHRoO1xuICAgICAgICBjb25zdCBidWZmZXJIZWlnaHQgPSB0aGlzLmJ1ZmZlci5oZWlnaHQ7XG5cbiAgICAgICAgbGV0IGltYWdlRGF0YUNhY2hlID0gdGhpcy5faW1hZ2VEYXRhQ2FjaGU7XG5cbiAgICAgICAgaWYgKGltYWdlRGF0YUNhY2hlKSB7XG4gICAgICAgICAgICBpZiAoaW1hZ2VEYXRhQ2FjaGUud2lkdGggIT09IGJ1ZmZlcldpZHRoIHx8IGltYWdlRGF0YUNhY2hlLmhlaWdodCAhPT0gYnVmZmVySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW1hZ2VEYXRhQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YUNhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW1hZ2VEYXRhQ2FjaGUpIHtcblxuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBidWZmZXJXaWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBidWZmZXJIZWlnaHQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGNvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKGJ1ZmZlcldpZHRoLCBidWZmZXJIZWlnaHQpO1xuXG4gICAgICAgICAgICBpbWFnZURhdGFDYWNoZSA9IHtcbiAgICAgICAgICAgICAgICBwaXhlbERhdGE6IG5ldyBVaW50OEFycmF5KGJ1ZmZlcldpZHRoICogYnVmZmVySGVpZ2h0ICogNCksXG4gICAgICAgICAgICAgICAgY2FudmFzOiBjYW52YXMsXG4gICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgICAgICBpbWFnZURhdGE6IGltYWdlRGF0YSxcbiAgICAgICAgICAgICAgICB3aWR0aDogYnVmZmVyV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBidWZmZXJIZWlnaHRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuX2ltYWdlRGF0YUNhY2hlID0gaW1hZ2VEYXRhQ2FjaGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW1hZ2VEYXRhQ2FjaGU7XG4gICAgfVxuXG4gICAgdW5iaW5kKCkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgIHRoaXMuYm91bmQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRUZXh0dXJlKCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmUgfHwgKHRoaXMuX3RleHR1cmUgPSB7XG4gICAgICAgICAgICByZW5kZXJCdWZmZXI6IHRoaXMsXG4gICAgICAgICAgICBiaW5kOiBmdW5jdGlvbiAodW5pdCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmJ1ZmZlciAmJiBzZWxmLmJ1ZmZlci50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2wuYWN0aXZlVGV4dHVyZShzZWxmLmdsW1wiVEVYVFVSRVwiICsgdW5pdF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdsLmJpbmRUZXh0dXJlKHNlbGYuZ2wuVEVYVFVSRV8yRCwgc2VsZi5idWZmZXIudGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiAodW5pdCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmJ1ZmZlciAmJiBzZWxmLmJ1ZmZlci50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZ2wuYWN0aXZlVGV4dHVyZShzZWxmLmdsW1wiVEVYVFVSRVwiICsgdW5pdF0pO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdsLmJpbmRUZXh0dXJlKHNlbGYuZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5hbGxvY2F0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5idWZmZXIudGV4dHVyZSk7XG4gICAgICAgICAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLmJ1ZmZlci5mcmFtZWJ1Zik7XG4gICAgICAgICAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5idWZmZXIucmVuZGVyYnVmKTtcbiAgICAgICAgICAgIHRoaXMuYWxsb2NhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW1hZ2VEYXRhQ2FjaGUgPSBudWxsO1xuICAgICAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcbiAgICB9XG59XG5cbmV4cG9ydCB7UmVuZGVyQnVmZmVyfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js ***!
  \*******************************************************************************/
/*! exports provided: RenderFlags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderFlags\", function() { return RenderFlags; });\n/**\n * Indicates what rendering needs to be done for the layers within a {@link Drawable}.\n *\n * Each Drawable has a RenderFlags in {@link Drawable#renderFlags}.\n *\n * Before rendering each frame, {@link Renderer} will call {@link Drawable#rebuildRenderFlags} on each {@link Drawable}.\n *\n * Then, when rendering a frame, Renderer will apply rendering passes to each Drawable according on what flags are set in {@link Drawable#renderFlags}.\n *\n * @private\n */\nclass RenderFlags {\n\n    /**\n     * @private\n     */\n    constructor() {\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate which layers are visible within the {@link Drawable}.\n         *\n         * This is a list of IDs of visible layers within the {@link Drawable}. The IDs will be whatever the\n         * {@link Drawable} uses to identify its layers, usually integers.\n         *\n         * @property visibleLayers\n         * @type {Number[]}\n         */\n        this.visibleLayers = [];\n\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate which {@link SectionPlane}s are active within each layer of the {@link Drawable}.\n         *\n         * Layout is as follows:\n         *\n         * ````[\n         *      false, false, true, // Layer 0, SectionPlanes 0, 1, 2\n         *      false, true, true,  // Layer 1, SectionPlanes 0, 1, 2\n         *      true, false, true   // Layer 2, SectionPlanes 0, 1, 2\n         * ]````\n         *\n         * @property sectionPlanesActivePerLayer\n         * @type {Boolean[]}\n         */\n        this.sectionPlanesActivePerLayer = [];\n\n        this.reset();\n    }\n\n    /**\n     * @private\n     */\n    reset() {\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate whether the {@link Drawable} is culled.\n         * \n         * When this is ````false````, then all of the other properties on ````RenderFlags```` will remain at their default values.\n         * \n         * @property culled\n         * @type {Boolean}\n         */\n        this.culled = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate whether the {@link Drawable} is sliced by any {@link SectionPlane}s.\n         *\n         * @property sectioned\n         * @type {Boolean}\n         */\n        this.sectioned  = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the number of layers within the {@link Drawable}.\n         *\n         * @property numLayers\n         * @type {Number}\n         */\n        this.numLayers = 0;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the number of visible layers within the {@link Drawable}.\n         *\n         * @property numVisibleLayers\n         * @type {Number}\n         */\n        this.numVisibleLayers = 0;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawColorOpaque}.\n         * @property colorOpaque\n         * @type {boolean}\n         */\n        this.colorOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawColorTransparent}.\n         * @property colorTransparent\n         * @type {boolean}\n         */\n        this.colorTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawEdgesColorOpaque}.\n         * @property edgesOpaque\n         * @type {boolean}\n         */\n        this.edgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawEdgesColorTransparent}.\n         * @property edgesTransparent\n         * @type {boolean}\n         */\n        this.edgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteXRayed}.\n         * @property xrayedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.xrayedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesXRayed}.\n         * @property xrayedEdgesOpaque\n         * @type {boolean}\n         */\n        this.xrayedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteXRayed}.\n         * @property xrayedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.xrayedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesXRayed}.\n         * @property xrayedEdgesTransparent\n         * @type {boolean}\n         */\n        this.xrayedEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteHighlighted}.\n         * @property highlightedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.highlightedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesHighlighted}.\n         * @property highlightedEdgesOpaque\n         * @type {boolean}\n         */\n        this.highlightedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteHighlighted}.\n         * @property highlightedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.highlightedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesHighlighted}.\n         * @property highlightedEdgesTransparent\n         * @type {boolean}\n         */\n        this.highlightedEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteSelected}.\n         * @property selectedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.selectedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesSelected}.\n         * @property selectedEdgesOpaque\n         * @type {boolean}\n         */\n        this.selectedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteSelected}.\n         * @property selectedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.selectedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesSelected}.\n         * @property selectedEdgesTransparent\n         * @type {boolean}\n         */\n        this.selectedEdgesTransparent = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1JlbmRlckZsYWdzLmpzPzY3MzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0Esc0VBQXNFLGVBQWU7QUFDckY7QUFDQSx1Q0FBdUMsMkJBQTJCO0FBQ2xFO0FBQ0EsaUNBQWlDLGVBQWUsWUFBWSxrQ0FBa0MsVUFBVSxlQUFlO0FBQ3ZIO0FBQ0EsMkhBQTJILDJCQUEyQjtBQUN0SjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0RBQWtELGVBQWU7QUFDdEg7QUFDQSwrREFBK0QsZUFBZTtBQUM5RSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOzs7QUFHQTtBQUNBLG1CQUFtQixrQ0FBa0Msb0JBQW9CLG1CQUFtQix1Q0FBdUMsZUFBZTtBQUNsSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLDBCQUEwQixlQUFlO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLDBCQUEwQixlQUFlLG1CQUFtQixtQkFBbUI7QUFDcEk7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGtDQUFrQyw4Q0FBOEMsZUFBZTtBQUNsSDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLHNEQUFzRCxlQUFlO0FBQzFIO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsUUFBUSwrQkFBK0I7QUFDN0g7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsUUFBUSxvQ0FBb0M7QUFDbEk7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsUUFBUSxvQ0FBb0M7QUFDbEk7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsUUFBUSx5Q0FBeUM7QUFDdkk7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsa0JBQWtCLG9DQUFvQztBQUM1STtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGtDQUFrQyxrQkFBa0IsZUFBZSxrQkFBa0IsK0JBQStCO0FBQ3ZJO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLGtCQUFrQixlQUFlLHNCQUFzQixvQ0FBb0M7QUFDaEo7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsc0JBQXNCLCtCQUErQjtBQUMzSTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGtDQUFrQyxrQkFBa0IsZUFBZSxrQkFBa0IseUNBQXlDO0FBQ2pKO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLGtCQUFrQixlQUFlLGtCQUFrQixvQ0FBb0M7QUFDNUk7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsc0JBQXNCLHlDQUF5QztBQUNySjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGtDQUFrQyxrQkFBa0IsZUFBZSxzQkFBc0Isb0NBQW9DO0FBQ2hKO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLGtCQUFrQixlQUFlLGtCQUFrQixzQ0FBc0M7QUFDOUk7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixrQ0FBa0Msa0JBQWtCLGVBQWUsa0JBQWtCLGlDQUFpQztBQUN6STtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGtDQUFrQyxrQkFBa0IsZUFBZSxzQkFBc0Isc0NBQXNDO0FBQ2xKO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsa0NBQWtDLGtCQUFrQixlQUFlLHNCQUFzQixpQ0FBaUM7QUFDN0k7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvd2ViZ2wvUmVuZGVyRmxhZ3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluZGljYXRlcyB3aGF0IHJlbmRlcmluZyBuZWVkcyB0byBiZSBkb25lIGZvciB0aGUgbGF5ZXJzIHdpdGhpbiBhIHtAbGluayBEcmF3YWJsZX0uXG4gKlxuICogRWFjaCBEcmF3YWJsZSBoYXMgYSBSZW5kZXJGbGFncyBpbiB7QGxpbmsgRHJhd2FibGUjcmVuZGVyRmxhZ3N9LlxuICpcbiAqIEJlZm9yZSByZW5kZXJpbmcgZWFjaCBmcmFtZSwge0BsaW5rIFJlbmRlcmVyfSB3aWxsIGNhbGwge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gb24gZWFjaCB7QGxpbmsgRHJhd2FibGV9LlxuICpcbiAqIFRoZW4sIHdoZW4gcmVuZGVyaW5nIGEgZnJhbWUsIFJlbmRlcmVyIHdpbGwgYXBwbHkgcmVuZGVyaW5nIHBhc3NlcyB0byBlYWNoIERyYXdhYmxlIGFjY29yZGluZyBvbiB3aGF0IGZsYWdzIGFyZSBzZXQgaW4ge0BsaW5rIERyYXdhYmxlI3JlbmRlckZsYWdzfS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSZW5kZXJGbGFncyB7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgd2hpY2ggbGF5ZXJzIGFyZSB2aXNpYmxlIHdpdGhpbiB0aGUge0BsaW5rIERyYXdhYmxlfS5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBpcyBhIGxpc3Qgb2YgSURzIG9mIHZpc2libGUgbGF5ZXJzIHdpdGhpbiB0aGUge0BsaW5rIERyYXdhYmxlfS4gVGhlIElEcyB3aWxsIGJlIHdoYXRldmVyIHRoZVxuICAgICAgICAgKiB7QGxpbmsgRHJhd2FibGV9IHVzZXMgdG8gaWRlbnRpZnkgaXRzIGxheWVycywgdXN1YWxseSBpbnRlZ2Vycy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3BlcnR5IHZpc2libGVMYXllcnNcbiAgICAgICAgICogQHR5cGUge051bWJlcltdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52aXNpYmxlTGF5ZXJzID0gW107XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHdoaWNoIHtAbGluayBTZWN0aW9uUGxhbmV9cyBhcmUgYWN0aXZlIHdpdGhpbiBlYWNoIGxheWVyIG9mIHRoZSB7QGxpbmsgRHJhd2FibGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBMYXlvdXQgaXMgYXMgZm9sbG93czpcbiAgICAgICAgICpcbiAgICAgICAgICogYGBgYFtcbiAgICAgICAgICogICAgICBmYWxzZSwgZmFsc2UsIHRydWUsIC8vIExheWVyIDAsIFNlY3Rpb25QbGFuZXMgMCwgMSwgMlxuICAgICAgICAgKiAgICAgIGZhbHNlLCB0cnVlLCB0cnVlLCAgLy8gTGF5ZXIgMSwgU2VjdGlvblBsYW5lcyAwLCAxLCAyXG4gICAgICAgICAqICAgICAgdHJ1ZSwgZmFsc2UsIHRydWUgICAvLyBMYXllciAyLCBTZWN0aW9uUGxhbmVzIDAsIDEsIDJcbiAgICAgICAgICogXWBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3BlcnR5IHNlY3Rpb25QbGFuZXNBY3RpdmVQZXJMYXllclxuICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbltdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWN0aW9uUGxhbmVzQWN0aXZlUGVyTGF5ZXIgPSBbXTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZXNldCgpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIHtAbGluayBEcmF3YWJsZX0gaXMgY3VsbGVkLlxuICAgICAgICAgKiBcbiAgICAgICAgICogV2hlbiB0aGlzIGlzIGBgYGBmYWxzZWBgYGAsIHRoZW4gYWxsIG9mIHRoZSBvdGhlciBwcm9wZXJ0aWVzIG9uIGBgYGBSZW5kZXJGbGFnc2BgYGAgd2lsbCByZW1haW4gYXQgdGhlaXIgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcHJvcGVydHkgY3VsbGVkXG4gICAgICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jdWxsZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHdoZXRoZXIgdGhlIHtAbGluayBEcmF3YWJsZX0gaXMgc2xpY2VkIGJ5IGFueSB7QGxpbmsgU2VjdGlvblBsYW5lfXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBzZWN0aW9uZWRcbiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNlY3Rpb25lZCAgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSBudW1iZXIgb2YgbGF5ZXJzIHdpdGhpbiB0aGUge0BsaW5rIERyYXdhYmxlfS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHByb3BlcnR5IG51bUxheWVyc1xuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5udW1MYXllcnMgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgdGhlIG51bWJlciBvZiB2aXNpYmxlIGxheWVycyB3aXRoaW4gdGhlIHtAbGluayBEcmF3YWJsZX0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwcm9wZXJ0eSBudW1WaXNpYmxlTGF5ZXJzXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm51bVZpc2libGVMYXllcnMgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgdGhlIHtAbGluayBEcmF3YWJsZX0gbmVlZHMge0BsaW5rIERyYXdhYmxlI2RyYXdDb2xvck9wYXF1ZX0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSBjb2xvck9wYXF1ZVxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29sb3JPcGFxdWUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIHtAbGluayBEcmF3YWJsZSNkcmF3Q29sb3JUcmFuc3BhcmVudH0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSBjb2xvclRyYW5zcGFyZW50XG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb2xvclRyYW5zcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBieSB7QGxpbmsgRHJhd2FibGUjcmVidWlsZFJlbmRlckZsYWdzfSB0byBpbmRpY2F0ZSB0aGUge0BsaW5rIERyYXdhYmxlfSBuZWVkcyB7QGxpbmsgRHJhd2FibGUjZHJhd0VkZ2VzQ29sb3JPcGFxdWV9LlxuICAgICAgICAgKiBAcHJvcGVydHkgZWRnZXNPcGFxdWVcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVkZ2VzT3BhcXVlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBieSB7QGxpbmsgRHJhd2FibGUjcmVidWlsZFJlbmRlckZsYWdzfSB0byBpbmRpY2F0ZSB0aGUge0BsaW5rIERyYXdhYmxlfSBuZWVkcyB7QGxpbmsgRHJhd2FibGUjZHJhd0VkZ2VzQ29sb3JUcmFuc3BhcmVudH0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSBlZGdlc1RyYW5zcGFyZW50XG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lZGdlc1RyYW5zcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBieSB7QGxpbmsgRHJhd2FibGUjcmVidWlsZFJlbmRlckZsYWdzfSB0byBpbmRpY2F0ZSB0aGUge0BsaW5rIERyYXdhYmxlfSBuZWVkcyBhbiBvcGFxdWUge0BsaW5rIERyYXdhYmxlI2RyYXdTaWxob3VldHRlWFJheWVkfS5cbiAgICAgICAgICogQHByb3BlcnR5IHhyYXllZFNpbGhvdWV0dGVPcGFxdWVcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnhyYXllZFNpbGhvdWV0dGVPcGFxdWUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGFuIG9wYXF1ZSB7QGxpbmsgRHJhd2FibGUjZHJhd0VkZ2VzWFJheWVkfS5cbiAgICAgICAgICogQHByb3BlcnR5IHhyYXllZEVkZ2VzT3BhcXVlXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54cmF5ZWRFZGdlc09wYXF1ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgdGhlIHtAbGluayBEcmF3YWJsZX0gbmVlZHMgYSB0cmFuc3BhcmVudCB7QGxpbmsgRHJhd2FibGUjZHJhd1NpbGhvdWV0dGVYUmF5ZWR9LlxuICAgICAgICAgKiBAcHJvcGVydHkgeHJheWVkU2lsaG91ZXR0ZVRyYW5zcGFyZW50XG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54cmF5ZWRTaWxob3VldHRlVHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGEgdHJhbnNwYXJlbnQge0BsaW5rIERyYXdhYmxlI2RyYXdFZGdlc1hSYXllZH0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB4cmF5ZWRFZGdlc1RyYW5zcGFyZW50XG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy54cmF5ZWRFZGdlc1RyYW5zcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBieSB7QGxpbmsgRHJhd2FibGUjcmVidWlsZFJlbmRlckZsYWdzfSB0byBpbmRpY2F0ZSB0aGUge0BsaW5rIERyYXdhYmxlfSBuZWVkcyBhbiBvcGFxdWUge0BsaW5rIERyYXdhYmxlI2RyYXdTaWxob3VldHRlSGlnaGxpZ2h0ZWR9LlxuICAgICAgICAgKiBAcHJvcGVydHkgaGlnaGxpZ2h0ZWRTaWxob3VldHRlT3BhcXVlXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZFNpbGhvdWV0dGVPcGFxdWUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGFuIG9wYXF1ZSB7QGxpbmsgRHJhd2FibGUjZHJhd0VkZ2VzSGlnaGxpZ2h0ZWR9LlxuICAgICAgICAgKiBAcHJvcGVydHkgaGlnaGxpZ2h0ZWRFZGdlc09wYXF1ZVxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRFZGdlc09wYXF1ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgdGhlIHtAbGluayBEcmF3YWJsZX0gbmVlZHMgYSB0cmFuc3BhcmVudCB7QGxpbmsgRHJhd2FibGUjZHJhd1NpbGhvdWV0dGVIaWdobGlnaHRlZH0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSBoaWdobGlnaHRlZFNpbGhvdWV0dGVUcmFuc3BhcmVudFxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTaWxob3VldHRlVHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGEgdHJhbnNwYXJlbnQge0BsaW5rIERyYXdhYmxlI2RyYXdFZGdlc0hpZ2hsaWdodGVkfS5cbiAgICAgICAgICogQHByb3BlcnR5IGhpZ2hsaWdodGVkRWRnZXNUcmFuc3BhcmVudFxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRFZGdlc1RyYW5zcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldCBieSB7QGxpbmsgRHJhd2FibGUjcmVidWlsZFJlbmRlckZsYWdzfSB0byBpbmRpY2F0ZSB0aGUge0BsaW5rIERyYXdhYmxlfSBuZWVkcyBhbiBvcGFxdWUge0BsaW5rIERyYXdhYmxlI2RyYXdTaWxob3VldHRlU2VsZWN0ZWR9LlxuICAgICAgICAgKiBAcHJvcGVydHkgc2VsZWN0ZWRTaWxob3VldHRlT3BhcXVlXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3RlZFNpbGhvdWV0dGVPcGFxdWUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGFuIG9wYXF1ZSB7QGxpbmsgRHJhd2FibGUjZHJhd0VkZ2VzU2VsZWN0ZWR9LlxuICAgICAgICAgKiBAcHJvcGVydHkgc2VsZWN0ZWRFZGdlc09wYXF1ZVxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRFZGdlc09wYXF1ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgYnkge0BsaW5rIERyYXdhYmxlI3JlYnVpbGRSZW5kZXJGbGFnc30gdG8gaW5kaWNhdGUgdGhlIHtAbGluayBEcmF3YWJsZX0gbmVlZHMgYSB0cmFuc3BhcmVudCB7QGxpbmsgRHJhd2FibGUjZHJhd1NpbGhvdWV0dGVTZWxlY3RlZH0uXG4gICAgICAgICAqIEBwcm9wZXJ0eSBzZWxlY3RlZFNpbGhvdWV0dGVUcmFuc3BhcmVudFxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTaWxob3VldHRlVHJhbnNwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGJ5IHtAbGluayBEcmF3YWJsZSNyZWJ1aWxkUmVuZGVyRmxhZ3N9IHRvIGluZGljYXRlIHRoZSB7QGxpbmsgRHJhd2FibGV9IG5lZWRzIGEgdHJhbnNwYXJlbnQge0BsaW5rIERyYXdhYmxlI2RyYXdFZGdlc1NlbGVjdGVkfS5cbiAgICAgICAgICogQHByb3BlcnR5IHNlbGVjdGVkRWRnZXNUcmFuc3BhcmVudFxuICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRFZGdlc1RyYW5zcGFyZW50ID0gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQge1JlbmRlckZsYWdzfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js ***!
  \*******************************************************************************/
/*! exports provided: RenderState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderState\", function() { return RenderState; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\n/**\n * @desc Represents a chunk of state changes applied by the {@link Scene}'s renderer while it renders a frame.\n *\n * * Contains properties that represent the state changes.\n * * Has a unique automatically-generated numeric ID, which the renderer can use to sort these, in order to avoid applying redundant state changes for each frame.\n * * Initialize your own properties on a RenderState via its constructor.\n *\n * @private\n */\nclass RenderState {\n\n    constructor(cfg) {\n\n        /**\n         The RenderState's ID, unique within the renderer.\n         @property id\n         @type {Number}\n         @final\n         */\n        this.id = ids.addItem({});\n        for (const key in cfg) {\n            if (cfg.hasOwnProperty(key)) {\n                this[key] = cfg[key];\n            }\n        }\n    }\n\n    /**\n     Destroys this RenderState.\n     */\n    destroy() {\n        ids.removeItem(this.id);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1JlbmRlclN0YXRlLmpzP2I1MWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQW9DOztBQUVwQyxnQkFBZ0IsaURBQUcsR0FBRzs7QUFFdEI7QUFDQSw2REFBNkQsWUFBWTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9SZW5kZXJTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWFwfSBmcm9tIFwiLi4vdXRpbHMvTWFwLmpzXCI7XG5cbmNvbnN0IGlkcyA9IG5ldyBNYXAoe30pO1xuXG4vKipcbiAqIEBkZXNjIFJlcHJlc2VudHMgYSBjaHVuayBvZiBzdGF0ZSBjaGFuZ2VzIGFwcGxpZWQgYnkgdGhlIHtAbGluayBTY2VuZX0ncyByZW5kZXJlciB3aGlsZSBpdCByZW5kZXJzIGEgZnJhbWUuXG4gKlxuICogKiBDb250YWlucyBwcm9wZXJ0aWVzIHRoYXQgcmVwcmVzZW50IHRoZSBzdGF0ZSBjaGFuZ2VzLlxuICogKiBIYXMgYSB1bmlxdWUgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgbnVtZXJpYyBJRCwgd2hpY2ggdGhlIHJlbmRlcmVyIGNhbiB1c2UgdG8gc29ydCB0aGVzZSwgaW4gb3JkZXIgdG8gYXZvaWQgYXBwbHlpbmcgcmVkdW5kYW50IHN0YXRlIGNoYW5nZXMgZm9yIGVhY2ggZnJhbWUuXG4gKiAqIEluaXRpYWxpemUgeW91ciBvd24gcHJvcGVydGllcyBvbiBhIFJlbmRlclN0YXRlIHZpYSBpdHMgY29uc3RydWN0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUmVuZGVyU3RhdGUge1xuXG4gICAgY29uc3RydWN0b3IoY2ZnKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICBUaGUgUmVuZGVyU3RhdGUncyBJRCwgdW5pcXVlIHdpdGhpbiB0aGUgcmVuZGVyZXIuXG4gICAgICAgICBAcHJvcGVydHkgaWRcbiAgICAgICAgIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICBAZmluYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaWQgPSBpZHMuYWRkSXRlbSh7fSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNmZykge1xuICAgICAgICAgICAgaWYgKGNmZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gY2ZnW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgRGVzdHJveXMgdGhpcyBSZW5kZXJTdGF0ZS5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZHMucmVtb3ZlSXRlbSh0aGlzLmlkKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7UmVuZGVyU3RhdGV9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Renderer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Renderer.js ***!
  \****************************************************************************/
/*! exports provided: Renderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Renderer\", function() { return Renderer; });\n/* harmony import */ var _FrameContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FrameContext.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/FrameContext.js\");\n/* harmony import */ var _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RenderBuffer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _PickResult_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PickResult.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/PickResult.js\");\n/* harmony import */ var _occlusion_OcclusionTester_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./occlusion/OcclusionTester.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionTester.js\");\n/* harmony import */ var _sao_SAOOcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sao/SAOOcclusionRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAOOcclusionRenderer.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/* harmony import */ var _sao_SAODepthLimitedBlurRenderer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sao/SAODepthLimitedBlurRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAODepthLimitedBlurRenderer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @private\n */\nconst Renderer = function (scene, options) {\n\n    options = options || {};\n\n    const frameCtx = new _FrameContext_js__WEBPACK_IMPORTED_MODULE_0__[\"FrameContext\"](scene);\n    const canvas = scene.canvas.canvas;\n    const gl = scene.canvas.gl;\n    const canvasTransparent = (!!options.transparent);\n    const alphaDepthMask = options.alphaDepthMask;\n\n    const pickIDs = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_5__[\"Map\"]({});\n\n    let drawableTypeInfo = {};\n    let drawables = {};\n\n    let drawableListDirty = true;\n    let stateSortDirty = true;\n    let imageDirty = true;\n    let shadowsDirty = true;\n\n    const saoDepthBuffer = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderBuffer\"](canvas, gl);\n    const occlusionBuffer1 = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderBuffer\"](canvas, gl);\n    const occlusionBuffer2 = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderBuffer\"](canvas, gl);\n\n    const pickBuffer = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderBuffer\"](canvas, gl);\n    const snapshotBuffer = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_1__[\"RenderBuffer\"](canvas, gl);\n\n    let snapshotBound = false;\n\n    const bindOutputFrameBuffer = null;\n    const unbindOutputFrameBuffer = null;\n\n    const saoOcclusionRenderer = new _sao_SAOOcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__[\"SAOOcclusionRenderer\"](scene);\n    const saoDepthLimitedBlurRenderer = new _sao_SAODepthLimitedBlurRenderer_js__WEBPACK_IMPORTED_MODULE_10__[\"SAODepthLimitedBlurRenderer\"](scene);\n\n    this._occlusionTester = null; // Lazy-created in #addMarker()\n\n    this.needStateSort = function () {\n        stateSortDirty = true;\n    };\n\n    this.shadowsDirty = function () {\n        shadowsDirty = true;\n    };\n\n    this.imageDirty = function () {\n        imageDirty = true;\n    };\n\n    this.webglContextLost = function () {\n    };\n\n    this.webglContextRestored = function (gl) {\n\n        pickBuffer.webglContextRestored(gl);\n        snapshotBuffer.webglContextRestored(gl);\n        saoDepthBuffer.webglContextRestored(gl);\n        occlusionBuffer1.webglContextRestored(gl);\n        occlusionBuffer2.webglContextRestored(gl);\n\n        saoOcclusionRenderer.init();\n        saoDepthLimitedBlurRenderer.init();\n\n        imageDirty = true;\n    };\n\n    /**\n     * Inserts a drawable into this renderer.\n     *  @private\n     */\n    this.addDrawable = function (id, drawable) {\n        const type = drawable.type;\n        if (!type) {\n            console.error(\"Renderer#addDrawable() : drawable with ID \" + id + \" has no 'type' - ignoring\");\n            return;\n        }\n        let drawableInfo = drawableTypeInfo[type];\n        if (!drawableInfo) {\n            drawableInfo = {\n                type: drawable.type,\n                count: 0,\n                isStateSortable: drawable.isStateSortable,\n                stateSortCompare: drawable.stateSortCompare,\n                drawableMap: {},\n                drawableListPreCull: [],\n                drawableList: []\n            };\n            drawableTypeInfo[type] = drawableInfo;\n        }\n        drawableInfo.count++;\n        drawableInfo.drawableMap[id] = drawable;\n        drawables[id] = drawable;\n        drawableListDirty = true;\n    };\n\n    /**\n     * Removes a drawable from this renderer.\n     *  @private\n     */\n    this.removeDrawable = function (id) {\n        const drawable = drawables[id];\n        if (!drawable) {\n            console.error(\"Renderer#removeDrawable() : drawable not found with ID \" + id + \" - ignoring\");\n            return;\n        }\n        const type = drawable.type;\n        const drawableInfo = drawableTypeInfo[type];\n        if (--drawableInfo.count <= 0) {\n            delete drawableTypeInfo[type];\n        } else {\n            delete drawableInfo.drawableMap[id];\n        }\n        delete drawables[id];\n        drawableListDirty = true;\n    };\n\n    /**\n     * Gets a unique pick ID for the given Pickable. A Pickable can be a {@link Mesh} or a {@link PerformanceMesh}.\n     * @returns {Number} New pick ID.\n     */\n    this.getPickID = function (entity) {\n        return pickIDs.addItem(entity);\n    };\n\n    /**\n     * Released a pick ID for reuse.\n     * @param {Number} pickID Pick ID to release.\n     */\n    this.putPickID = function (pickID) {\n        pickIDs.removeItem(pickID);\n    };\n\n    /**\n     * Clears the canvas.\n     *  @private\n     */\n    this.clear = function (params) {\n        params = params || {};\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        if (canvasTransparent) {\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            const color = params.ambientColor || scene.canvas.backgroundColor || this.lights.getAmbientColor();\n            gl.clearColor(color[0], color[1], color[2], 1.0);\n        }\n        if (bindOutputFrameBuffer) {\n            bindOutputFrameBuffer(params.pass);\n        }\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        if (unbindOutputFrameBuffer) {\n            unbindOutputFrameBuffer(params.pass);\n        }\n    };\n\n    /**\n     * Renders inserted drawables.\n     *  @private\n     */\n    this.render = function (params) {\n        params = params || {};\n        if (params.force) {\n            imageDirty = true;\n        }\n        updateDrawlist();\n        if (imageDirty) {\n            draw(params);\n            _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].frame.frameCount++;\n            imageDirty = false;\n        }\n    };\n\n    function updateDrawlist() { // Prepares state-sorted array of drawables from maps of inserted drawables\n        if (drawableListDirty) {\n            buildDrawableList();\n            drawableListDirty = false;\n            stateSortDirty = true;\n        }\n        if (stateSortDirty) {\n            sortDrawableList();\n            stateSortDirty = false;\n            imageDirty = true;\n        }\n        if (imageDirty) { // Image is usually dirty because the camera moved\n            cullDrawableList();\n        }\n    }\n\n    function buildDrawableList() {\n        for (let type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableMap = drawableInfo.drawableMap;\n                const drawableListPreCull = drawableInfo.drawableListPreCull;\n                let lenDrawableList = 0;\n                for (let id in drawableMap) {\n                    if (drawableMap.hasOwnProperty(id)) {\n                        drawableListPreCull[lenDrawableList++] = drawableMap[id];\n                    }\n                }\n                drawableListPreCull.length = lenDrawableList;\n            }\n        }\n    }\n\n    function sortDrawableList() {\n        for (let type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n                const drawableInfo = drawableTypeInfo[type];\n                if (drawableInfo.isStateSortable) {\n                    drawableInfo.drawableListPreCull.sort(drawableInfo.stateSortCompare);\n                }\n            }\n        }\n    }\n\n    function cullDrawableList() {\n        for (let type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableListPreCull = drawableInfo.drawableListPreCull;\n                const drawableList = drawableInfo.drawableList;\n                let lenDrawableList = 0;\n                for (let i = 0, len = drawableListPreCull.length; i < len; i++) {\n                    const drawable = drawableListPreCull[i];\n                    drawable.rebuildRenderFlags();\n                    if (!drawable.renderFlags.culled) {\n                        drawableList[lenDrawableList++] = drawable;\n                    }\n                }\n                drawableList.length = lenDrawableList;\n            }\n        }\n    }\n\n    function draw(params) {\n\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) {  // In case context lost/recovered\n            gl.getExtension(\"OES_element_index_uint\");\n        }\n\n        if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            gl.getExtension('EXT_frag_depth');\n        }\n\n        const sao = scene.sao;\n\n        if (sao.possible) {\n            drawSAOBuffers(params);\n        }\n\n        drawShadowMaps();\n\n        drawColor(params);\n    }\n\n    function drawSAOBuffers(params) {\n\n        const sao = scene.sao;\n\n        // Render depth buffer\n\n        saoDepthBuffer.bind();\n        saoDepthBuffer.clear();\n        drawDepth(params);\n        saoDepthBuffer.unbind();\n\n        // Render occlusion buffer\n\n        occlusionBuffer1.bind();\n        occlusionBuffer1.clear();\n        saoOcclusionRenderer.render(saoDepthBuffer.getTexture(), null);\n        occlusionBuffer1.unbind();\n\n        if (sao.blur) {\n\n            // Horizontally blur occlusion buffer 1 into occlusion buffer 2\n\n            occlusionBuffer2.bind();\n            occlusionBuffer2.clear();\n            saoDepthLimitedBlurRenderer.render(saoDepthBuffer.getTexture(), occlusionBuffer1.getTexture(), 0);\n            occlusionBuffer2.unbind();\n\n            // Vertically blur occlusion buffer 2 back into occlusion buffer 1\n\n            occlusionBuffer1.bind();\n            occlusionBuffer1.clear();\n            saoDepthLimitedBlurRenderer.render(saoDepthBuffer.getTexture(), occlusionBuffer2.getTexture(), 1);\n            occlusionBuffer1.unbind();\n        }\n    }\n\n    function drawDepth(params) {\n\n        frameCtx.reset();\n        frameCtx.pass = params.pass;\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.frontFace(gl.CCW);\n        gl.enable(gl.CULL_FACE);\n        gl.depthMask(true);\n\n        if (params.clear !== false) {\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        for (let type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableList = drawableInfo.drawableList;\n\n                for (let i = 0, len = drawableList.length; i < len; i++) {\n\n                    const drawable = drawableList[i];\n\n                    if (drawable.culled === true || drawable.visible === false || !drawable.drawDepth) {\n                        continue;\n                    }\n\n                    if (drawable.renderFlags.colorOpaque) {\n                        drawable.drawDepth(frameCtx);\n                    }\n                }\n            }\n        }\n\n        // const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        // for (let ii = 0; ii < numVertexAttribs; ii++) {\n        //     gl.disableVertexAttribArray(ii);\n        // }\n\n    }\n\n    function drawShadowMaps() {\n\n        let lights = scene._lightsState.lights;\n\n        for (let i = 0, len = lights.length; i < len; i++) {\n            const light = lights[i];\n            if (!light.castsShadow) {\n                continue;\n            }\n            drawShadowMap(light);\n        }\n\n        // const numVertexAttribs = WEBGL_INFO.MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n        // for (let ii = 0; ii < numVertexAttribs; ii++) {\n        //     gl.disableVertexAttribArray(ii);\n        // }\n        //\n        shadowsDirty = false;\n    }\n\n    function drawShadowMap(light) {\n\n        const castsShadow = light.castsShadow;\n\n        if (!castsShadow) {\n            return;\n        }\n\n        const shadowRenderBuf = light.getShadowRenderBuf();\n\n        if (!shadowRenderBuf) {\n            return;\n        }\n\n        shadowRenderBuf.bind();\n\n        frameCtx.reset();\n\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true;\n        frameCtx.shadowViewMatrix = light.getShadowViewMatrix();\n        frameCtx.shadowProjMatrix = light.getShadowProjMatrix();\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        gl.clearColor(0, 0, 0, 1);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        for (let type in drawableTypeInfo) {\n\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableList = drawableInfo.drawableList;\n\n                for (let i = 0, len = drawableList.length; i < len; i++) {\n\n                    const drawable = drawableList[i];\n\n                    if (drawable.visible === false || !drawable.castsShadow || !drawable.drawShadow) {\n                        continue;\n                    }\n\n                    if (drawable.renderFlags.colorOpaque) { // Transparent objects don't cast shadows (yet)\n                        drawable.drawShadow(frameCtx);\n                    }\n                }\n            }\n        }\n\n        shadowRenderBuf.unbind();\n    }\n\n    const drawColor = (function () { // Draws the drawables in drawableListSorted\n\n        const normalDrawSAOBin = [];\n        const normalEdgesOpaqueBin = [];\n        const normalFillTransparentBin = [];\n        const normalEdgesTransparentBin = [];\n\n        const xrayedFillOpaqueBin = [];\n        const xrayEdgesOpaqueBin = [];\n        const xrayedFillTransparentBin = [];\n        const xrayEdgesTransparentBin = [];\n\n        const highlightedFillOpaqueBin = [];\n        const highlightedEdgesOpaqueBin = [];\n        const highlightedFillTransparentBin = [];\n        const highlightedEdgesTransparentBin = [];\n\n        const selectedFillOpaqueBin = [];\n        const selectedEdgesOpaqueBin = [];\n        const selectedFillTransparentBin = [];\n        const selectedEdgesTransparentBin = [];\n\n        return function (params) {\n\n            const ambientColor = scene._lightsState.getAmbientColor();\n\n            frameCtx.reset();\n            frameCtx.pass = params.pass;\n            frameCtx.withSAO = false;\n            frameCtx.pbrEnabled = !!scene.pbrEnabled;\n\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n            if (canvasTransparent) {\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                const clearColor = scene.canvas.backgroundColor || ambientColor;\n                gl.clearColor(clearColor[0], clearColor[1], clearColor[2], 1.0);\n            }\n\n            gl.enable(gl.DEPTH_TEST);\n            gl.frontFace(gl.CCW);\n            gl.enable(gl.CULL_FACE);\n            gl.depthMask(true);\n            gl.lineWidth(1);\n\n            frameCtx.lineWidth = 1;\n\n            const saoPossible = scene.sao.possible;\n            frameCtx.occlusionTexture = saoPossible ? occlusionBuffer1.getTexture() : null;\n\n            let i;\n            let len;\n            let drawable;\n\n            const startTime = Date.now();\n\n            if (bindOutputFrameBuffer) {\n                bindOutputFrameBuffer(params.pass);\n            }\n\n            if (params.clear !== false) {\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n            }\n\n            let normalDrawSAOBinLen = 0;\n            let normalEdgesOpaqueBinLen = 0;\n            let normalFillTransparentBinLen = 0;\n            let normalEdgesTransparentBinLen = 0;\n\n            let xrayedFillOpaqueBinLen = 0;\n            let xrayEdgesOpaqueBinLen = 0;\n            let xrayedFillTransparentBinLen = 0;\n            let xrayEdgesTransparentBinLen = 0;\n\n            let highlightedFillOpaqueBinLen = 0;\n            let highlightedEdgesOpaqueBinLen = 0;\n            let highlightedFillTransparentBinLen = 0;\n            let highlightedEdgesTransparentBinLen = 0;\n\n            let selectedFillOpaqueBinLen = 0;\n            let selectedEdgesOpaqueBinLen = 0;\n            let selectedFillTransparentBinLen = 0;\n            let selectedEdgesTransparentBinLen = 0;\n\n            //------------------------------------------------------------------------------------------------------\n            // Render normal opaque solids, defer others to bins to render after\n            //------------------------------------------------------------------------------------------------------\n\n            for (let type in drawableTypeInfo) {\n                if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                    const drawableInfo = drawableTypeInfo[type];\n                    const drawableList = drawableInfo.drawableList;\n\n                    for (i = 0, len = drawableList.length; i < len; i++) {\n\n                        drawable = drawableList[i];\n\n                        if (drawable.culled === true || drawable.visible === false) {\n                            continue;\n                        }\n\n                        const renderFlags = drawable.renderFlags;\n\n                        if (renderFlags.colorOpaque) {\n                            if (saoPossible && drawable.saoEnabled) {\n                                normalDrawSAOBin[normalDrawSAOBinLen++] = drawable;\n                            } else {\n                                drawable.drawColorOpaque(frameCtx);\n                            }\n                        }\n\n                        if (renderFlags.colorTransparent) {\n                            normalFillTransparentBin[normalFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.xrayedSilhouetteTransparent) {\n                            xrayedFillTransparentBin[xrayedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.xrayedSilhouetteOpaque) {\n                            xrayedFillOpaqueBin[xrayedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedSilhouetteTransparent) {\n                            highlightedFillTransparentBin[highlightedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedSilhouetteOpaque) {\n                            highlightedFillOpaqueBin[highlightedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedSilhouetteTransparent) {\n                            selectedFillTransparentBin[selectedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedSilhouetteOpaque) {\n                            selectedFillOpaqueBin[selectedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.edgesOpaque) {\n                            normalEdgesOpaqueBin[normalEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.edgesTransparent) {\n                            normalEdgesTransparentBin[normalEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedEdgesTransparent) {\n                            selectedEdgesTransparentBin[selectedEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedEdgesOpaque) {\n                            selectedEdgesOpaqueBin[selectedEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.xrayedEdgesTransparent) {\n                            xrayEdgesTransparentBin[xrayEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.xrayedEdgesOpaque) {\n                            xrayEdgesOpaqueBin[xrayEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedEdgesTransparent) {\n                            highlightedEdgesTransparentBin[highlightedEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedEdgesOpaque) {\n                            highlightedEdgesOpaqueBin[highlightedEdgesOpaqueBinLen++] = drawable;\n                        }\n                    }\n                }\n            }\n\n            //------------------------------------------------------------------------------------------------------\n            // Render deferred bins\n            //------------------------------------------------------------------------------------------------------\n\n            if (normalDrawSAOBinLen > 0) {\n                frameCtx.withSAO = true;\n                for (i = 0; i < normalDrawSAOBinLen; i++) {\n                    normalDrawSAOBin[i].drawColorOpaque(frameCtx);\n                }\n            }\n\n            if (normalEdgesOpaqueBinLen > 0) {\n                for (i = 0; i < normalEdgesOpaqueBinLen; i++) {\n                    normalEdgesOpaqueBin[i].drawEdgesColorOpaque(frameCtx);\n                }\n            }\n\n            if (xrayedFillOpaqueBinLen > 0) {\n                for (i = 0; i < xrayedFillOpaqueBinLen; i++) {\n                    xrayedFillOpaqueBin[i].drawSilhouetteXRayed(frameCtx);\n                }\n            }\n\n            if (xrayEdgesOpaqueBinLen > 0) {\n                for (i = 0; i < xrayEdgesOpaqueBinLen; i++) {\n                    xrayEdgesOpaqueBin[i].drawEdgesXRayed(frameCtx);\n                }\n            }\n\n            if (xrayedFillTransparentBinLen > 0 || xrayEdgesTransparentBinLen > 0 || normalFillTransparentBinLen > 0 || normalEdgesTransparentBinLen > 0) {\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n\n                if (canvasTransparent) {\n                    gl.blendEquation(gl.FUNC_ADD);\n                    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                } else {\n                    gl.blendEquation(gl.FUNC_ADD);\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                }\n\n                frameCtx.backfaces = false;\n                if (!alphaDepthMask) {\n                    gl.depthMask(false);\n                }\n                if (xrayEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < xrayEdgesTransparentBinLen; i++) {\n                        xrayEdgesTransparentBin[i].drawEdgesXRayed(frameCtx);\n                    }\n                }\n                if (xrayedFillTransparentBinLen > 0) {\n                    for (i = 0; i < xrayedFillTransparentBinLen; i++) {\n                        xrayedFillTransparentBin[i].drawSilhouetteXRayed(frameCtx);\n                    }\n                }\n                if (normalFillTransparentBinLen > 0 || normalEdgesTransparentBinLen > 0) {\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                }\n                if (normalEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < normalEdgesTransparentBinLen; i++) {\n                        drawable = normalEdgesTransparentBin[i];\n                        drawable.drawEdgesColorTransparent(frameCtx);\n                    }\n                }\n                if (normalFillTransparentBinLen > 0) {\n                    for (i = 0; i < normalFillTransparentBinLen; i++) {\n                        drawable = normalFillTransparentBin[i];\n                        drawable.drawColorTransparent(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n                if (!alphaDepthMask) {\n                    gl.depthMask(true);\n                }\n            }\n\n            if (highlightedFillOpaqueBinLen > 0 || highlightedEdgesOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                if (highlightedEdgesOpaqueBinLen > 0) {\n                    for (i = 0; i < highlightedEdgesOpaqueBinLen; i++) {\n                        highlightedEdgesOpaqueBin[i].drawEdgesHighlighted(frameCtx);\n                    }\n                }\n                if (highlightedFillOpaqueBinLen > 0) {\n                    for (i = 0; i < highlightedFillOpaqueBinLen; i++) {\n                        highlightedFillOpaqueBin[i].drawSilhouetteHighlighted(frameCtx);\n                    }\n                }\n            }\n\n            if (highlightedFillTransparentBinLen > 0 || highlightedEdgesTransparentBinLen > 0 || highlightedFillOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n\n                if (canvasTransparent) {\n                    gl.blendEquation(gl.FUNC_ADD);\n                    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                } else {\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                }\n\n                if (highlightedEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < highlightedEdgesTransparentBinLen; i++) {\n                        highlightedEdgesTransparentBin[i].drawEdgesHighlighted(frameCtx);\n                    }\n                }\n                if (highlightedFillTransparentBinLen > 0) {\n                    for (i = 0; i < highlightedFillTransparentBinLen; i++) {\n                        highlightedFillTransparentBin[i].drawSilhouetteHighlighted(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n            }\n\n            if (selectedFillOpaqueBinLen > 0 || selectedEdgesOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                if (selectedEdgesOpaqueBinLen > 0) {\n                    for (i = 0; i < selectedEdgesOpaqueBinLen; i++) {\n                        selectedEdgesOpaqueBin[i].drawEdgesSelected(frameCtx);\n                    }\n                }\n                if (selectedFillOpaqueBinLen > 0) {\n                    for (i = 0; i < selectedFillOpaqueBinLen; i++) {\n                        selectedFillOpaqueBin[i].drawSilhouetteSelected(frameCtx);\n                    }\n                }\n            }\n\n            if (selectedFillTransparentBinLen > 0 || selectedEdgesTransparentBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n\n                if (canvasTransparent) {\n                    gl.blendEquation(gl.FUNC_ADD);\n                    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                } else {\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                }\n\n                if (selectedEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < selectedEdgesTransparentBinLen; i++) {\n                        selectedEdgesTransparentBin[i].drawEdgesSelected(frameCtx);\n                    }\n                }\n                if (selectedFillTransparentBinLen > 0) {\n                    for (i = 0; i < selectedFillTransparentBinLen; i++) {\n                        selectedFillTransparentBin[i].drawSilhouetteSelected(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n            }\n\n            const endTime = Date.now();\n            const frameStats = _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].frame;\n\n            frameStats.renderTime = (endTime - startTime) / 1000.0;\n            frameStats.drawElements = frameCtx.drawElements;\n            frameStats.useProgram = frameCtx.useProgram;\n            frameStats.bindTexture = frameCtx.bindTexture;\n            frameStats.bindArray = frameCtx.bindArray;\n\n            const numTextureUnits = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_TEXTURE_UNITS;\n            for (let ii = 0; ii < numTextureUnits; ii++) {\n                gl.activeTexture(gl.TEXTURE0 + ii);\n            }\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n\n            const numVertexAttribs = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_VERTEX_ATTRIBS; // Fixes https://github.com/xeokit/xeokit-sdk/issues/174\n            for (let ii = 0; ii < numVertexAttribs; ii++) {\n                gl.disableVertexAttribArray(ii);\n            }\n\n            if (unbindOutputFrameBuffer) {\n                unbindOutputFrameBuffer(params.pass);\n            }\n        };\n    })();\n\n    /**\n     * Picks an Entity.\n     * @private\n     */\n    this.pick = (function () {\n\n        const tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3();\n        const tempMat4a = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n        const tempMat4b = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n\n        const up = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([0, 1, 0]);\n        const _pickResult = new _PickResult_js__WEBPACK_IMPORTED_MODULE_6__[\"PickResult\"]();\n\n        const nearAndFar = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec2();\n\n        return function (params, pickResult = _pickResult) {\n\n            pickResult.reset();\n\n            updateDrawlist();\n\n            if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) { // In case context lost/recovered\n                gl.getExtension(\"OES_element_index_uint\");\n            }\n\n            if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n                gl.getExtension('EXT_frag_depth');\n            }\n\n            let canvasX;\n            let canvasY;\n            let origin;\n            let direction;\n            let look;\n            let pickViewMatrix = null;\n            let pickProjMatrix = null;\n\n            pickResult.pickSurface = params.pickSurface;\n\n            if (params.canvasPos) {\n\n                canvasX = params.canvasPos[0];\n                canvasY = params.canvasPos[1];\n\n                pickViewMatrix = scene.camera.viewMatrix;\n                pickProjMatrix = scene.camera.projMatrix;\n\n                pickResult.canvasPos = params.canvasPos;\n\n            } else {\n\n                // Picking with arbitrary World-space ray\n                // Align camera along ray and fire ray through center of canvas\n\n                const pickFrustumMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].frustumMat4(-1, 1, -1, 1, scene.camera.project.near, scene.camera.project.far, tempMat4a);\n\n                if (params.matrix) {\n\n                    pickViewMatrix = params.matrix;\n                    pickProjMatrix = pickFrustumMatrix;\n\n                } else {\n\n                    origin = params.origin || _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([0, 0, 0]);\n                    direction = params.direction || _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec3([0, 0, 1]);\n                    look = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].addVec3(origin, direction, tempVec3a);\n\n                    pickViewMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].lookAtMat4v(origin, look, up, tempMat4b);\n                    pickProjMatrix = pickFrustumMatrix;\n\n                    pickResult.origin = origin;\n                    pickResult.direction = direction;\n                }\n\n                canvasX = canvas.clientWidth * 0.5;\n                canvasY = canvas.clientHeight * 0.5;\n            }\n\n            pickBuffer.bind();\n\n            const pickable = pickPickable(canvasX, canvasY, pickViewMatrix, pickProjMatrix, params);\n\n            if (!pickable) {\n                pickBuffer.unbind();\n                return null;\n            }\n\n            const pickedEntity = (pickable.delegatePickedEntity) ? pickable.delegatePickedEntity() : pickable;\n\n            if (!pickedEntity) {\n                return null;\n            }\n\n            if (params.pickSurface) {\n\n                if (pickable.canPickTriangle && pickable.canPickTriangle()) {\n                    pickTriangle(pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, pickResult);\n                    pickable.pickTriangleSurface(pickViewMatrix, pickProjMatrix, pickResult);\n\n                } else {\n\n                    if (pickable.canPickWorldPos && pickable.canPickWorldPos()) {\n\n                        nearAndFar[0] = scene.camera.project.near;\n                        nearAndFar[1] = scene.camera.project.far;\n\n                        pickWorldPos(pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, nearAndFar, pickResult);\n                        if (params.pickSurfaceNormal !== false) {\n                            pickWorldNormal(pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, nearAndFar, pickResult);\n                        }\n                    }\n                }\n            }\n\n            pickBuffer.unbind();\n\n            pickResult.entity = pickedEntity;\n\n            return pickResult;\n        };\n    })();\n\n    function pickPickable(canvasX, canvasY, pickViewMatrix, pickProjMatrix, params) {\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true; // \"ccw\"\n        frameCtx.pickViewMatrix = pickViewMatrix;\n        frameCtx.pickProjMatrix = pickProjMatrix;\n        frameCtx.pickInvisible = !!params.pickInvisible;\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        let i;\n        let len;\n        const includeEntityIds = params.includeEntityIds;\n        const excludeEntityIds = params.excludeEntityIds;\n\n        for (let type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableList = drawableInfo.drawableList;\n\n                for (i = 0, len = drawableList.length; i < len; i++) {\n\n                    const drawable = drawableList[i];\n\n                    if (!drawable.drawPickMesh || drawable.culled === true || (params.pickInvisible !== true && drawable.visible === false) || drawable.pickable === false) {\n                        continue;\n                    }\n                    if (includeEntityIds && !includeEntityIds[drawable.id]) { // TODO: push this logic into drawable\n                        continue;\n                    }\n                    if (excludeEntityIds && excludeEntityIds[drawable.id]) {\n                        continue;\n                    }\n\n                    drawable.drawPickMesh(frameCtx);\n                }\n            }\n        }\n\n        const pix = pickBuffer.read(Math.round(canvasX), Math.round(canvasY));\n        let pickID = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n\n        if (pickID < 0) {\n            return;\n        }\n\n        const pickable = pickIDs.items[pickID];\n\n        return pickable;\n    }\n\n    function pickTriangle(pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, pickResult) {\n\n        if (!pickable.drawPickTriangles) {\n            return;\n        }\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true; // \"ccw\"\n        frameCtx.pickViewMatrix = pickViewMatrix; // Can be null\n        frameCtx.pickProjMatrix = pickProjMatrix; // Can be null\n        // frameCtx.pickInvisible = !!params.pickInvisible;\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        pickable.drawPickTriangles(frameCtx);\n\n        const pix = pickBuffer.read(canvasX, canvasY);\n\n        let primIndex = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n\n        primIndex *= 3; // Convert from triangle number to first vertex in indices\n\n        pickResult.primIndex = primIndex;\n    }\n\n    const pickWorldPos = (function () {\n\n        const tempVec4a = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4();\n        const tempVec4b = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4();\n        const tempVec4c = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4();\n        const tempVec4d = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4();\n        const tempVec4e = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec4();\n        const tempMat4a = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n        const tempMat4b = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n        const tempMat4c = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n\n        return function (pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, nearAndFar, pickResult) {\n\n            frameCtx.reset();\n            frameCtx.backfaces = true;\n            frameCtx.frontface = true; // \"ccw\"\n            frameCtx.pickViewMatrix = pickViewMatrix;\n            frameCtx.pickProjMatrix = pickProjMatrix;\n            frameCtx.pickZNear = nearAndFar[0];\n            frameCtx.pickZFar = nearAndFar[1];\n\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n            gl.clearColor(0, 0, 0, 0);\n            gl.enable(gl.DEPTH_TEST);\n            gl.disable(gl.CULL_FACE);\n            gl.disable(gl.BLEND);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            pickable.drawPickDepths(frameCtx); // Draw color-encoded fragment screen-space depths\n\n            const pix = pickBuffer.read(Math.round(canvasX), Math.round(canvasY));\n\n            const screenZ = unpackDepth(pix); // Get screen-space Z at the given canvas coords\n\n            // Calculate clip space coordinates, which will be in range of x=[-1..1] and y=[-1..1], with y=(+1) at top\n            const x = (canvasX - canvas.width / 2) / (canvas.width / 2);\n            const y = -(canvasY - canvas.height / 2) / (canvas.height / 2);\n\n            const rtcCenter = pickable.rtcCenter;\n            let pvMat;\n\n            if (rtcCenter) {\n                const rtcPickViewMat = Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_9__[\"createRTCViewMat\"])(pickViewMatrix, rtcCenter, tempMat4a);\n                pvMat = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4(pickProjMatrix, rtcPickViewMat, tempMat4b);\n\n            } else {\n                pvMat = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulMat4(pickProjMatrix, pickViewMatrix, tempMat4b);\n            }\n\n            const pvMatInverse = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].inverseMat4(pvMat, tempMat4c);\n\n            tempVec4a[0] = x;\n            tempVec4a[1] = y;\n            tempVec4a[2] = -1;\n            tempVec4a[3] = 1;\n\n            let world1 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].transformVec4(pvMatInverse, tempVec4a);\n            world1 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulVec4Scalar(world1, 1 / world1[3]);\n\n            tempVec4b[0] = x;\n            tempVec4b[1] = y;\n            tempVec4b[2] = 1;\n            tempVec4b[3] = 1;\n\n            let world2 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].transformVec4(pvMatInverse, tempVec4b);\n            world2 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulVec4Scalar(world2, 1 / world2[3]);\n\n            const dir = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].subVec3(world2, world1, tempVec4c);\n            const worldPos = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].addVec3(world1, _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mulVec4Scalar(dir, screenZ, tempVec4d), tempVec4e);\n\n            if (rtcCenter) {\n                _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].addVec3(worldPos, rtcCenter);\n            }\n\n            pickResult.worldPos = worldPos;\n        }\n    })();\n\n    function unpackDepth(depthZ) {\n        const vec = [depthZ[0] / 256.0, depthZ[1] / 256.0, depthZ[2] / 256.0, depthZ[3] / 256.0];\n        const bitShift = [1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0];\n        return _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].dotVec4(vec, bitShift);\n    }\n\n    function pickWorldNormal(pickable, canvasX, canvasY, pickViewMatrix, pickProjMatrix, nearAndFar, pickResult) {\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true; // \"ccw\"\n        frameCtx.pickViewMatrix = pickViewMatrix;\n        frameCtx.pickProjMatrix = pickProjMatrix;\n        frameCtx.pickZNear = nearAndFar[0];\n        frameCtx.pickZFar = nearAndFar[1];\n\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        pickable.drawPickNormals(frameCtx); // Draw color-encoded fragment World-space normals\n\n        const pix = pickBuffer.read(Math.round(canvasX), Math.round(canvasY));\n\n        const worldNormal = [(pix[0] / 256.0) - 0.5, (pix[1] / 256.0) - 0.5, (pix[2] / 256.0) - 0.5];\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].normalizeVec3(worldNormal);\n\n        pickResult.worldNormal = worldNormal;\n    }\n\n    /**\n     * Adds a {@link Marker} for occlusion testing.\n     * @param marker\n     */\n    this.addMarker = function (marker) {\n        this._occlusionTester = this._occlusionTester || new _occlusion_OcclusionTester_js__WEBPACK_IMPORTED_MODULE_7__[\"OcclusionTester\"](scene);\n        this._occlusionTester.addMarker(marker);\n        scene.occlusionTestCountdown = 0;\n    };\n\n    /**\n     * Notifies that a {@link Marker#worldPos} has updated.\n     * @param marker\n     */\n    this.markerWorldPosUpdated = function (marker) {\n        this._occlusionTester.markerWorldPosUpdated(marker);\n    };\n\n    /**\n     * Removes a {@link Marker} from occlusion testing.\n     * @param marker\n     */\n    this.removeMarker = function (marker) {\n        this._occlusionTester.removeMarker(marker);\n    };\n\n    /**\n     * Performs an occlusion test for all added {@link Marker}s, updating\n     * their {@link Marker#visible} properties accordingly.\n     */\n    this.doOcclusionTest = function () {\n\n        if (this._occlusionTester && this._occlusionTester.needOcclusionTest) {\n\n            updateDrawlist();\n\n            this._occlusionTester.bindRenderBuf();\n\n            frameCtx.reset();\n            frameCtx.backfaces = true;\n            frameCtx.frontface = true; // \"ccw\"\n\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n            gl.clearColor(0, 0, 0, 0);\n            gl.enable(gl.DEPTH_TEST);\n            gl.disable(gl.CULL_FACE);\n            gl.disable(gl.BLEND);\n            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n            for (let type in drawableTypeInfo) {\n                if (drawableTypeInfo.hasOwnProperty(type)) {\n                    const drawableInfo = drawableTypeInfo[type];\n                    const drawableList = drawableInfo.drawableList;\n                    for (let i = 0, len = drawableList.length; i < len; i++) {\n                        const drawable = drawableList[i];\n                        if (!drawable.drawOcclusion || drawable.culled === true || drawable.visible === false || drawable.pickable === false) { // TODO: Option to exclude transparent?\n                            continue;\n                        }\n\n                        drawable.drawOcclusion(frameCtx);\n                    }\n                }\n            }\n\n            this._occlusionTester.drawMarkers(frameCtx);\n            this._occlusionTester.doOcclusionTest(); // Updates Marker \"visible\" properties\n            this._occlusionTester.unbindRenderBuf();\n        }\n    };\n\n    /**\n     * Read pixels from the renderer's current output. Performs a force-render first.\n     * @param pixels\n     * @param colors\n     * @param len\n     * @param opaqueOnly\n     * @private\n     */\n    this.readPixels = function (pixels, colors, len, opaqueOnly) {\n        snapshotBuffer.bind();\n        snapshotBuffer.clear();\n        this.render({force: true, opaqueOnly: opaqueOnly});\n        let color;\n        let i;\n        let j;\n        let k;\n        for (i = 0; i < len; i++) {\n            j = i * 2;\n            k = i * 4;\n            color = snapshotBuffer.read(pixels[j], pixels[j + 1]);\n            colors[k] = color[0];\n            colors[k + 1] = color[1];\n            colors[k + 2] = color[2];\n            colors[k + 3] = color[3];\n        }\n        snapshotBuffer.unbind();\n        imageDirty = true;\n    };\n\n    /**\n     * Enter snapshot mode.\n     *\n     * Switches rendering to a hidden snapshot canvas.\n     *\n     * Exit snapshot mode using endSnapshot().\n     */\n    this.beginSnapshot = function () {\n        snapshotBuffer.bind();\n        snapshotBuffer.clear();\n        snapshotBound = true;\n    };\n\n    /**\n     * When in snapshot mode, renders a frame of the current Scene state to the snapshot canvas.\n     */\n    this.renderSnapshot = function () {\n        if (!snapshotBound) {\n            return;\n        }\n        snapshotBuffer.clear();\n        this.render({force: true, opaqueOnly: false});\n        imageDirty = true;\n    };\n\n    /**\n     * When in snapshot mode, gets an image of the snapshot canvas.\n     *\n     * @private\n     * @returns {String} The image data URI.\n     */\n    this.readSnapshot = function (params) {\n        const imageDataURI = snapshotBuffer.readImage(params);\n        return imageDataURI;\n    };\n\n    /**\n     * Exists snapshot mode.\n     *\n     * Switches rendering back to the main canvas.\n     */\n    this.endSnapshot = function () {\n        if (!snapshotBound) {\n            return;\n        }\n        snapshotBuffer.unbind();\n        snapshotBound = false;\n    };\n\n    /**\n     * Destroys this renderer.\n     * @private\n     */\n    this.destroy = function () {\n\n        drawableTypeInfo = {};\n        drawables = {};\n\n        pickBuffer.destroy();\n        snapshotBuffer.destroy();\n        saoDepthBuffer.destroy();\n        occlusionBuffer1.destroy();\n        occlusionBuffer2.destroy();\n\n        saoOcclusionRenderer.destroy();\n        saoDepthLimitedBlurRenderer.destroy();\n\n        if (this._occlusionTester) {\n            this._occlusionTester.destroy();\n        }\n    };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Renderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js ***!
  \***************************************************************************/
/*! exports provided: Sampler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sampler\", function() { return Sampler; });\n/**\n * @desc A low-level component that represents a WebGL Sampler.\n * @private\n */\nclass Sampler {\n\n    constructor(gl, location) {\n        this.bindTexture = function (texture, unit) {\n            if (texture.bind(unit)) {\n                gl.uniform1i(location, unit);\n                return true;\n            }\n            return false;\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1NhbXBsZXIuanM/MzkyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9TYW1wbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzYyBBIGxvdy1sZXZlbCBjb21wb25lbnQgdGhhdCByZXByZXNlbnRzIGEgV2ViR0wgU2FtcGxlci5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFNhbXBsZXIge1xuXG4gICAgY29uc3RydWN0b3IoZ2wsIGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuYmluZFRleHR1cmUgPSBmdW5jdGlvbiAodGV4dHVyZSwgdW5pdCkge1xuICAgICAgICAgICAgaWYgKHRleHR1cmUuYmluZCh1bml0KSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdW5pdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQge1NhbXBsZXJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js ***!
  \**************************************************************************/
/*! exports provided: Shader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader\", function() { return Shader; });\n/**\n * @desc Represents a vertex or fragment stage within a {@link Program}.\n * @private\n */\nclass Shader {\n\n    constructor(gl, type, source) {\n\n        this.allocated = false;\n        this.compiled = false;\n        this.handle = gl.createShader(type);\n\n        if (!this.handle) {\n            this.errors = [\n                \"Failed to allocate\"\n            ];\n            return;\n        }\n\n        this.allocated = true;\n\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n\n        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);\n\n        if (!this.compiled) {\n\n            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here\n\n                const lines = source.split(\"\\n\");\n                const numberedLines = [];\n                for (let i = 0; i < lines.length; i++) {\n                    numberedLines.push((i + 1) + \": \" + lines[i] + \"\\n\");\n                }\n                this.errors = [];\n                this.errors.push(\"\");\n                this.errors.push(gl.getShaderInfoLog(this.handle));\n                this.errors = this.errors.concat(numberedLines.join(\"\"));\n            }\n        }\n    }\n\n    destroy() {\n\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1NoYWRlci5qcz83ZGU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBLHlEQUF5RCxjQUFjO0FBQ3ZFO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDOztBQUV0QztBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9TaGFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXNjIFJlcHJlc2VudHMgYSB2ZXJ0ZXggb3IgZnJhZ21lbnQgc3RhZ2Ugd2l0aGluIGEge0BsaW5rIFByb2dyYW19LlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU2hhZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGdsLCB0eXBlLCBzb3VyY2UpIHtcblxuICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbXBpbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZGxlID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuXG4gICAgICAgIGlmICghdGhpcy5oYW5kbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gW1xuICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIGFsbG9jYXRlXCJcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IHRydWU7XG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHRoaXMuaGFuZGxlLCBzb3VyY2UpO1xuICAgICAgICBnbC5jb21waWxlU2hhZGVyKHRoaXMuaGFuZGxlKTtcblxuICAgICAgICB0aGlzLmNvbXBpbGVkID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHRoaXMuaGFuZGxlLCBnbC5DT01QSUxFX1NUQVRVUyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbXBpbGVkKSB7XG5cbiAgICAgICAgICAgIGlmICghZ2wuaXNDb250ZXh0TG9zdCgpKSB7IC8vIEhhbmRsZWQgZXhwbGljaXRseSBlbHNld2hlcmUsIHNvIHdvbid0IHJlLWhhbmRsZSBoZXJlXG5cbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJlZExpbmVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXJlZExpbmVzLnB1c2goKGkgKyAxKSArIFwiOiBcIiArIGxpbmVzW2ldICsgXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGdsLmdldFNoYWRlckluZm9Mb2codGhpcy5oYW5kbGUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChudW1iZXJlZExpbmVzLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtTaGFkZXJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Texture2D.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Texture2D.js ***!
  \*****************************************************************************/
/*! exports provided: Texture2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture2D\", function() { return Texture2D; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n/* harmony import */ var _webglEnums_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./webglEnums.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/webglEnums.js\");\n\n\n\nfunction getGLEnum(gl, name, defaultVal) {\n    if (name === undefined) {\n        return defaultVal;\n    }\n    const glName = _webglEnums_js__WEBPACK_IMPORTED_MODULE_1__[\"webglEnums\"][name];\n    if (glName === undefined) {\n        return defaultVal;\n    }\n    return gl[glName];\n}\n\nconst color = new Uint8Array([0, 0, 0, 1]);\n\nfunction clampImageSize(image, numPixels) {\n    const n = image.width * image.height;\n    if (n > numPixels) {\n        const ratio = numPixels / n;\n        const width = image.width * ratio;\n        const height = image.height * ratio;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(width);\n        canvas.height = nextHighestPowerOfTwo(height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction ensureImageSizePowerOfTwo(image) {\n    if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(image.width);\n        canvas.height = nextHighestPowerOfTwo(image.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image,\n            0, 0, image.width, image.height,\n            0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction isPowerOfTwo(x) {\n    return (x & (x - 1)) === 0;\n}\n\nfunction nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\n/**\n * @desc A low-level component that represents a 2D WebGL texture.\n *\n * @private\n */\nclass Texture2D {\n\n    constructor(gl, target) {\n        this.gl = gl;\n        this.target = target || gl.TEXTURE_2D;\n        this.texture = gl.createTexture();\n        this.setPreloadColor([0, 0, 0, 0]); // Prevents \"there is no texture bound to the unit 0\" error\n        this.allocated = true;\n    }\n\n    setPreloadColor(value) {\n\n        if (!value) {\n            color[0] = 0;\n            color[1] = 0;\n            color[2] = 0;\n            color[3] = 255;\n        } else {\n            color[0] = Math.floor(value[0] * 255);\n            color[1] = Math.floor(value[1] * 255);\n            color[2] = Math.floor(value[2] * 255);\n            color[3] = Math.floor((value[3] !== undefined ? value[3] : 1) * 255);\n        }\n\n        const gl = this.gl;\n\n        gl.bindTexture(this.target, this.texture);\n        gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n\n            const faces = [\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n            ];\n\n            for (let i = 0, len = faces.length; i < len; i++) {\n                gl.texImage2D(faces[i], 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n            }\n\n        } else {\n            gl.texImage2D(this.target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n        }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setTarget(target) {\n        this.target = target || this.gl.TEXTURE_2D;\n    }\n\n    setImage(image, props) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, props.flipY);\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].isArray(image)) {\n                const images = image;\n                const faces = [\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n                ];\n                for (let i = 0, len = faces.length; i < len; i++) {\n                    gl.texImage2D(faces[i], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, images[i]);\n                }\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    setProps(props) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        if (props.minFilter) {\n            const minFilter = getGLEnum(gl, props.minFilter);\n            if (minFilter) {\n                gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n                if (minFilter === gl.NEAREST_MIPMAP_NEAREST ||\n                    minFilter === gl.LINEAR_MIPMAP_NEAREST ||\n                    minFilter === gl.NEAREST_MIPMAP_LINEAR ||\n                    minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n\n                    gl.generateMipmap(this.target);\n                }\n            }\n        }\n        if (props.magFilter) {\n            const magFilter = getGLEnum(gl, props.magFilter);\n            if (magFilter) {\n                gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n            }\n        }\n        if (props.wrapS) {\n            const wrapS = getGLEnum(gl, props.wrapS);\n            if (wrapS) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n            }\n        }\n        if (props.wrapT) {\n            const wrapT = getGLEnum(gl, props.wrapT);\n            if (wrapT) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n            }\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    bind(unit) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, this.texture);\n            return true;\n        }\n        return false;\n    }\n\n    unbind(unit) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, null);\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            this.gl.deleteTexture(this.texture);\n            this.texture = null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Texture2D.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionLayer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionLayer.js ***!
  \********************************************************************************************/
/*! exports provided: OcclusionLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionLayer\", function() { return OcclusionLayer; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ArrayBuf.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js\");\n\n\n\nclass OcclusionLayer {\n\n    constructor(scene, rtcCenter) {\n\n        this.scene = scene;\n        this.aabb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].AABB3();\n        this.rtcCenter = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(rtcCenter);\n        this.rtcCenterHash = this.rtcCenter.join();\n        this.numMarkers = 0;\n        this.markers = {};\n        this.markerList = [];                  // Ordered array of Markers\n        this.markerIndices = {};               // ID map of Marker indices in _markerList\n        this.positions = [];                   // Packed array of World-space marker positions\n        this.indices = [];                     // Indices corresponding to array above\n        this.positionsBuf = null;\n        this.lenPositionsBuf = 0;\n        this.indicesBuf = null;\n        this.sectionPlanesActive = [];\n        this.culledBySectionPlanes = false;\n        this.occlusionTestList = [];           // List of\n        this.lenOcclusionTestList = 0;\n        this.pixels = [];\n        this.aabbDirty = false;\n        this.markerListDirty = false;\n        this.positionsDirty = true;\n        this.occlusionTestListDirty = false;\n    }\n\n    addMarker(marker) {\n        this.markers[marker.id] = marker;\n        this.markerListDirty = true;\n        this.numMarkers++;\n    }\n\n    markerWorldPosUpdated(marker) {\n        if (!this.markers[marker.id]) { // Not added\n            return;\n        }\n        const i = this.markerIndices[marker.id];\n        this.positions[i * 3 + 0] = marker.worldPos[0];\n        this.positions[i * 3 + 1] = marker.worldPos[1];\n        this.positions[i * 3 + 2] = marker.worldPos[2];\n        this.positionsDirty = true; // TODO: avoid reallocating VBO each time\n    }\n\n    removeMarker(marker) {\n        delete this.markers[marker.id];\n        this.markerListDirty = true;\n        this.numMarkers--;\n    }\n\n    update() {\n        if (this.markerListDirty) {\n            this._buildMarkerList();\n            this.markerListDirty = false;\n            this.positionsDirty = true;\n            this.occlusionTestListDirty = true;\n        }\n        if (this.positionsDirty) { //////////////  TODO: Don't rebuild this when positions change, very wasteful\n            this._buildPositions();\n            this.positionsDirty = false;\n            this.aabbDirty = true;\n            this.vbosDirty = true;\n        }\n        if (this.aabbDirty) {\n            this._buildAABB();\n            this.aabbDirty = false;\n        }\n        if (this.vbosDirty) {\n            this._buildVBOs();\n            this.vbosDirty = false;\n        }\n        if (this.occlusionTestListDirty) {\n            this._buildOcclusionTestList();\n        }\n        this._updateActiveSectionPlanes();\n    }\n\n    _buildMarkerList() {\n        this.numMarkers = 0;\n        for (var id in this.markers) {\n            if (this.markers.hasOwnProperty(id)) {\n                this.markerList[this.numMarkers] = this.markers[id];\n                this.markerIndices[id] = this.numMarkers;\n                this.numMarkers++;\n            }\n        }\n        this.markerList.length = this.numMarkers;\n    }\n\n    _buildPositions() {\n        let j = 0;\n        for (let i = 0; i < this.numMarkers; i++) {\n            if (this.markerList[i]) {\n                const marker = this.markerList[i];\n                const worldPos = marker.worldPos;\n                this.positions[j++] = worldPos[0];\n                this.positions[j++] = worldPos[1];\n                this.positions[j++] = worldPos[2];\n                this.indices[i] = i;\n            }\n        }\n        this.positions.length = this.numMarkers * 3;\n        this.indices.length = this.numMarkers;\n    }\n\n    _buildAABB() {\n        const aabb = this.aabb;\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].collapseAABB3(aabb);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].expandAABB3Points3(aabb, this.positions);\n        const rtcCenter = this.rtcCenter;\n        aabb[0] += rtcCenter[0];\n        aabb[1] += rtcCenter[1];\n        aabb[2] += rtcCenter[2];\n        aabb[3] += rtcCenter[0];\n        aabb[4] += rtcCenter[1];\n        aabb[5] += rtcCenter[2];\n    }\n\n    _buildVBOs() {\n        if (this.positionsBuf) {\n            if (this.lenPositionsBuf === this.positions.length) { // Just updating buffer elements, don't need to reallocate\n                this.positionsBuf.setData(this.positions); // Indices don't need updating\n                return;\n            }\n            this.positionsBuf.destroy();\n            this.positionsBuf = null;\n            this.indicesBuf.destroy();\n            this.indicesBuf = null;\n        }\n        const gl = this.scene.canvas.gl;\n        const lenPositions = this.numMarkers * 3;\n        const lenIndices = this.numMarkers;\n        this.positionsBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, new Float32Array(this.positions), lenPositions, 3, gl.STATIC_DRAW);\n        this.indicesBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indices), lenIndices, 1, gl.STATIC_DRAW);\n        this.lenPositionsBuf = this.positions.length;\n    }\n\n    _buildOcclusionTestList() {\n        const canvas = this.scene.canvas;\n        const near = this.scene.camera.perspective.near; // Assume near enough to ortho near\n        const boundary = canvas.boundary;\n        const canvasWidth = boundary[2];\n        const canvasHeight = boundary[3];\n        let lenPixels = 0;\n        this.lenOcclusionTestList = 0;\n        for (let i = 0; i < this.numMarkers; i++) {\n            const marker = this.markerList[i];\n            const viewPos = marker.viewPos;\n            if (viewPos[2] > -near) { // Clipped by near plane\n                marker._setVisible(false);\n                continue;\n            }\n            const canvasPos = marker.canvasPos;\n            const canvasX = canvasPos[0];\n            const canvasY = canvasPos[1];\n            if ((canvasX + 10) < 0 || (canvasY + 10) < 0 || (canvasX - 10) > canvasWidth || (canvasY - 10) > canvasHeight) {\n                marker._setVisible(false);\n                continue;\n            }\n            if (marker.entity && !marker.entity.visible) {\n                marker._setVisible(false);\n                continue;\n            }\n            if (marker.occludable) {\n                this.occlusionTestList[this.lenOcclusionTestList++] = marker;\n                this.pixels[lenPixels++] = canvasX;\n                this.pixels[lenPixels++] = canvasY;\n                continue;\n            }\n            marker._setVisible(true);\n        }\n    }\n\n    _updateActiveSectionPlanes() {\n        const sectionPlanes = this.scene._sectionPlanesState.sectionPlanes;\n        const numSectionPlanes = sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            for (let i = 0; i < numSectionPlanes; i++) {\n                const sectionPlane = sectionPlanes[i];\n                if (!sectionPlane.active) {\n                    this.sectionPlanesActive[i] = false;\n                } else {\n                    const intersect = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].planeAABB3Intersect(sectionPlane.dir, sectionPlane.dist, this.aabb);\n                    const outside = (intersect === -1);\n                    if (outside) {\n                        this.culledBySectionPlanes = true;\n                        return;\n                    }\n                    const intersecting = (intersect === 0);\n                    this.sectionPlanesActive[i] = intersecting;\n                }\n            }\n        }\n        this.culledBySectionPlanes = false;\n    }\n\n    destroy() {\n        this.markers = {};\n        this.markerList.length = 0;\n        if (this.positionsBuf) {\n            this.positionsBuf.destroy();\n        }\n        if (this.indicesBuf) {\n            this.indicesBuf.destroy();\n        }\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionLayer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionTester.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionTester.js ***!
  \*********************************************************************************************/
/*! exports provided: OcclusionTester */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionTester\", function() { return OcclusionTester; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../RenderBuffer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderBuffer.js\");\n/* harmony import */ var _OcclusionLayer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OcclusionLayer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionLayer.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n\n\n\n\n\nconst TEST_MODE = false;\nconst MARKER_COLOR = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([1.0, 0.0, 0.0]);\nconst POINT_SIZE = 20;\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n/**\n * Manages occlusion testing. Private member of a Renderer.\n */\nclass OcclusionTester {\n\n    constructor(scene) {\n\n        this._scene = scene;\n\n        this._occlusionLayers = {};\n        this._occlusionLayersList = [];\n        this._occlusionLayersListDirty = false;\n\n        this._shaderSource = null;\n        this._program = null;\n\n        this._shaderSourceHash = null;\n\n        this._shaderSourceDirty = true;         // Need to build shader source code ?\n        this._programDirty = false;             // Need to build shader program ?\n\n        this._markersToOcclusionLayersMap = {};\n\n        this._onCameraViewMatrix = scene.camera.on(\"viewMatrix\", () => {\n            this._occlusionTestListDirty = true;\n        });\n\n        this._onCameraProjMatrix = scene.camera.on(\"projMatrix\", () => {\n            this._occlusionTestListDirty = true;\n        });\n\n        this._onCanvasBoundary = scene.canvas.on(\"boundary\", () => {\n            this._occlusionTestListDirty = true;\n        });\n    }\n\n    /**\n     * Adds a Marker for occlusion testing.\n     * @param marker\n     */\n    addMarker(marker) {\n        const rtcCenterHash = marker.rtcCenter.join();\n        let occlusionLayer = this._occlusionLayers[rtcCenterHash];\n        if (!occlusionLayer) {\n            occlusionLayer = new _OcclusionLayer_js__WEBPACK_IMPORTED_MODULE_3__[\"OcclusionLayer\"](this._scene, marker.rtcCenter);\n            this._occlusionLayers[occlusionLayer.rtcCenterHash] = occlusionLayer;\n            this._occlusionLayersListDirty = true;\n        }\n        occlusionLayer.addMarker(marker);\n        this._markersToOcclusionLayersMap[marker.id] = occlusionLayer;\n        this._occlusionTestListDirty = true;\n    }\n\n    /**\n     * Notifies OcclusionTester that a Marker has updated its World-space position.\n     * @param marker\n     */\n    markerWorldPosUpdated(marker) {\n        const occlusionLayer = this._markersToOcclusionLayersMap[marker.id];\n        if (!occlusionLayer) {\n            marker.error(\"Marker has not been added to OcclusionTester\");\n            return;\n        }\n        const rtcCenterHash = marker.rtcCenter.join();\n        if (rtcCenterHash !== occlusionLayer.rtcCenterHash) {\n            if (occlusionLayer.numMarkers === 1) {\n                occlusionLayer.destroy();\n                delete this._occlusionLayers[occlusionLayer.rtcCenterHash];\n                this._occlusionLayersListDirty = true;\n            } else {\n                occlusionLayer.removeMarker(marker);\n            }\n            let newOcclusionLayer = this._occlusionLayers[rtcCenterHash];\n            if (!newOcclusionLayer) {\n                newOcclusionLayer = new _OcclusionLayer_js__WEBPACK_IMPORTED_MODULE_3__[\"OcclusionLayer\"](this._scene, marker.rtcCenter);\n                this._occlusionLayers[rtcCenterHash] = occlusionLayer;\n                this._occlusionLayersListDirty = true;\n            }\n            newOcclusionLayer.addMarker(marker);\n            this._markersToOcclusionLayersMap[marker.id] = newOcclusionLayer;\n        } else {\n            occlusionLayer.markerWorldPosUpdated(marker);\n        }\n    }\n\n    /**\n     * Removes a Marker from occlusion testing.\n     * @param marker\n     */\n    removeMarker(marker) {\n        const rtcCenterHash = marker.rtcCenter.join();\n        let occlusionLayer = this._occlusionLayers[rtcCenterHash];\n        if (!occlusionLayer) {\n            return;\n        }\n        if (occlusionLayer.numMarkers === 1) {\n            occlusionLayer.destroy();\n            delete this._occlusionLayers[occlusionLayer.rtcCenterHash];\n            this._occlusionLayersListDirty = true;\n        } else {\n            occlusionLayer.removeMarker(marker);\n        }\n        delete this._markersToOcclusionLayersMap[marker.id];\n    }\n\n    /**\n     * Returns true if an occlusion test is needed.\n     *\n     * @returns {boolean}\n     */\n    get needOcclusionTest() {\n        return this._occlusionTestListDirty;\n    }\n\n    /**\n     * Binds the render buffer. After calling this, the caller then renders object silhouettes to the render buffer,\n     * then calls drawMarkers() and doOcclusionTest().\n     */\n    bindRenderBuf() {\n\n        const shaderSourceHash = [this._scene.canvas.canvas.id, this._scene._sectionPlanesState.getHash()].join(\";\");\n\n        if (shaderSourceHash !== this._shaderSourceHash) {\n            this._shaderSourceHash = shaderSourceHash;\n            this._shaderSourceDirty = true;\n        }\n\n        if (this._shaderSourceDirty) {\n            this._buildShaderSource();\n            this._shaderSourceDirty = false;\n            this._programDirty = true;\n        }\n\n        if (this._programDirty) {\n            this._buildProgram();\n            this._programDirty = false;\n            this._occlusionTestListDirty = true;\n        }\n\n        if (this._occlusionLayersListDirty) {\n            this._buildOcclusionLayersList();\n            this._occlusionLayersListDirty = false;\n        }\n\n        if (this._occlusionTestListDirty) {\n            for (let i = 0, len = this._occlusionLayersList.length; i < len; i++) {\n                const occlusionLayer = this._occlusionLayersList[i];\n                occlusionLayer.occlusionTestListDirty = true;\n            }\n            this._occlusionTestListDirty = false;\n        }\n\n        if (!TEST_MODE) {\n            this._readPixelBuf = this._readPixelBuf || (this._readPixelBuf = new _RenderBuffer_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderBuffer\"](this._scene.canvas.canvas, this._scene.canvas.gl));\n            this._readPixelBuf.bind();\n            this._readPixelBuf.clear();\n        }\n    }\n\n    _buildOcclusionLayersList() {\n        let numOcclusionLayers = 0;\n        for (let rtcCenterHash in this._occlusionLayers) {\n            if (this._occlusionLayers.hasOwnProperty(rtcCenterHash)) {\n                this._occlusionLayersList[numOcclusionLayers++] = this._occlusionLayers[rtcCenterHash];\n            }\n        }\n        this._occlusionLayersList.length = numOcclusionLayers;\n    }\n\n    _buildShaderSource() {\n        this._shaderSource = {\n            vertex: this._buildVertexShaderSource(),\n            fragment: this._buildFragmentShaderSource()\n        };\n    }\n\n    _buildVertexShaderSource() {\n        const scene = this._scene;\n        const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n        const src = [];\n        src.push(\"// OcclusionTester vertex shader\");\n        if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"#extension GL_EXT_frag_depth : enable\");\n        }\n        src.push(\"attribute vec3 position;\");\n        src.push(\"uniform mat4 modelMatrix;\");\n        src.push(\"uniform mat4 viewMatrix;\");\n        src.push(\"uniform mat4 projMatrix;\");\n        if (scene.logarithmicDepthBufferEnabled) {\n            src.push(\"uniform float logDepthBufFC;\");\n            if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n                src.push(\"varying float vFragDepth;\");\n            }\n        }\n        if (clipping) {\n            src.push(\"varying vec4 vWorldPosition;\");\n        }\n        src.push(\"void main(void) {\");\n        src.push(\"vec4 worldPosition = vec4(position, 1.0); \");\n        src.push(\"   vec4 viewPosition = viewMatrix * worldPosition;\");\n        if (clipping) {\n            src.push(\"   vWorldPosition = worldPosition;\");\n        }\n        src.push(\"   vec4 clipPos = projMatrix * viewPosition;\");\n        src.push(\"   gl_Position = clipPos;\");\n        src.push(\"   gl_PointSize = \" + POINT_SIZE + \".0;\");\n        if (scene.logarithmicDepthBufferEnabled) {\n            if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n                src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n            } else {\n                src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n                src.push(\"clipPos.z *= clipPos.w;\");\n            }\n        }\n        src.push(\"}\");\n        return src;\n    }\n\n    _buildFragmentShaderSource() {\n        const scene = this._scene;\n        const sectionPlanesState = scene._sectionPlanesState;\n        const clipping = sectionPlanesState.sectionPlanes.length > 0;\n        const src = [];\n        src.push(\"// OcclusionTester fragment shader\");\n        if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"#extension GL_EXT_frag_depth : enable\");\n        }\n        src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n        src.push(\"precision highp float;\");\n        src.push(\"precision highp int;\");\n        src.push(\"#else\");\n        src.push(\"precision mediump float;\");\n        src.push(\"precision mediump int;\");\n        src.push(\"#endif\");\n        if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"uniform float logDepthBufFC;\");\n            src.push(\"varying float vFragDepth;\");\n        }\n        if (clipping) {\n            src.push(\"varying vec4 vWorldPosition;\");\n            for (let i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n                src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n                src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n                src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n            }\n        }\n        src.push(\"void main(void) {\");\n        if (clipping) {\n            src.push(\"  float dist = 0.0;\");\n            for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n                src.push(\"if (sectionPlaneActive\" + i + \") {\");\n                src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n                src.push(\"}\");\n            }\n            src.push(\"  if (dist > 0.0) { discard; }\");\n        }\n        if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n        }\n        src.push(\"   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0); \");\n        src.push(\"}\");\n        return src;\n    }\n\n    _buildProgram() {\n        if (this._program) {\n            this._program.destroy();\n        }\n        const scene = this._scene;\n        const gl = scene.canvas.gl;\n        const sectionPlanesState = scene._sectionPlanesState;\n        this._program = new _Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n        if (this._program.errors) {\n            this.errors = this._program.errors;\n            return;\n        }\n        const program = this._program;\n        this._uViewMatrix = program.getLocation(\"viewMatrix\");\n        this._uProjMatrix = program.getLocation(\"projMatrix\");\n        this._uSectionPlanes = [];\n        const sectionPlanes = sectionPlanesState.sectionPlanes;\n        for (let i = 0, len = sectionPlanes.length; i < len; i++) {\n            this._uSectionPlanes.push({\n                active: program.getLocation(\"sectionPlaneActive\" + i),\n                pos: program.getLocation(\"sectionPlanePos\" + i),\n                dir: program.getLocation(\"sectionPlaneDir\" + i)\n            });\n        }\n        this._aPosition = program.getAttribute(\"position\");\n        if (scene.logarithmicDepthBufferEnabled) {\n            this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n        }\n    }\n\n    /**\n     * Draws {@link Marker}s to the render buffer.\n     */\n    drawMarkers() {\n\n        const scene = this._scene;\n        const gl = scene.canvas.gl;\n        const program = this._program;\n        const sectionPlanesState = scene._sectionPlanesState;\n        const camera = scene.camera;\n        const project = scene.camera.project;\n\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_5__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"] && scene.logarithmicDepthBufferEnabled) {\n            gl.getExtension('EXT_frag_depth');\n        }\n\n        program.bind();\n\n        gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n\n        if (scene.logarithmicDepthBufferEnabled) {\n            const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n            gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n        }\n\n        for (let i = 0, len = this._occlusionLayersList.length; i < len; i++) {\n\n            const occlusionLayer = this._occlusionLayersList[i];\n\n            occlusionLayer.update();\n\n            if (occlusionLayer.culledBySectionPlanes) {\n                continue;\n            }\n\n            const rtcCenter = occlusionLayer.rtcCenter;\n\n            gl.uniformMatrix4fv(this._uViewMatrix, false, Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"createRTCViewMat\"])(camera.viewMatrix, rtcCenter));\n\n            const numSectionPlanes = sectionPlanesState.sectionPlanes.length;\n            if (numSectionPlanes > 0) {\n                const sectionPlanes = sectionPlanesState.sectionPlanes;\n                for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                    const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                    const active = occlusionLayer.sectionPlanesActive[sectionPlaneIndex];\n                    gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                    if (active) {\n                        const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                        gl.uniform3fv(sectionPlaneUniforms.pos, Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a));\n                        gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                    }\n                }\n            }\n\n            this._aPosition.bindArrayBuffer(occlusionLayer.positionsBuf);\n\n            const indicesBuf = occlusionLayer.indicesBuf;\n            indicesBuf.bind();\n            gl.drawElements(gl.POINTS, indicesBuf.numItems, indicesBuf.itemType, 0);\n        }\n    }\n\n    /**\n     * Sets visibilities of {@link Marker}s according to whether or not they are obscured by anything in the render buffer.\n     */\n    doOcclusionTest() {\n\n        if (!TEST_MODE) {\n\n            const markerR = MARKER_COLOR[0] * 255;\n            const markerG = MARKER_COLOR[1] * 255;\n            const markerB = MARKER_COLOR[2] * 255;\n\n            for (let i = 0, len = this._occlusionLayersList.length; i < len; i++) {\n\n                const occlusionLayer = this._occlusionLayersList[i];\n\n                for (let i = 0; i < occlusionLayer.lenOcclusionTestList; i++) {\n\n                    const marker = occlusionLayer.occlusionTestList[i];\n                    const j = i * 2;\n                    const color = this._readPixelBuf.read(occlusionLayer.pixels[j], occlusionLayer.pixels[j + 1]);\n                    const visible = (color[0] === markerR) && (color[1] === markerG) && (color[2] === markerB);\n\n                    marker._setVisible(visible);\n                }\n            }\n        }\n    }\n\n    /**\n     * Unbinds render buffer.\n     */\n    unbindRenderBuf() {\n        if (!TEST_MODE) {\n            this._readPixelBuf.unbind();\n        }\n    }\n\n    /**\n     * Destroys this OcclusionTester.\n     */\n    destroy() {\n        if (this.destroyed) {\n            return;\n        }\n        for (let i = 0, len = this._occlusionLayersList.length; i < len; i++) {\n            const occlusionLayer = this._occlusionLayersList[i];\n            occlusionLayer.destroy();\n        }\n\n        if (this._program) {\n            this._program.destroy();\n        }\n\n        this._scene.camera.off(this._onCameraViewMatrix);\n        this._scene.camera.off(this._onCameraProjMatrix);\n        this._scene.canvas.off(this._onCanvasBoundary);\n        this.destroyed = true;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/occlusion/OcclusionTester.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAODepthLimitedBlurRenderer.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAODepthLimitedBlurRenderer.js ***!
  \***************************************************************************************************/
/*! exports provided: SAODepthLimitedBlurRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SAODepthLimitedBlurRenderer\", function() { return SAODepthLimitedBlurRenderer; });\n/* harmony import */ var _Program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ArrayBuf.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\nconst blurStdDev = 4;\nconst blurDepthCutoff = 0.01;\nconst KERNEL_RADIUS = 16;\n\nconst sampleOffsetsVert = new Float32Array(createSampleOffsets(KERNEL_RADIUS + 1, [0, 1]));\nconst sampleOffsetsHor = new Float32Array(createSampleOffsets(KERNEL_RADIUS + 1, [1, 0]));\nconst sampleWeights = new Float32Array(createSampleWeights(KERNEL_RADIUS + 1, blurStdDev));\n\nconst tempVec2a = new Float32Array(2);\n\n/**\n * SAO implementation inspired from previous SAO work in THREE.js by ludobaka / ludobaka.github.io and bhouston\n * @private\n */\nclass SAODepthLimitedBlurRenderer {\n\n    constructor(scene) {\n\n        this._scene = scene;\n\n        // The program\n\n        this._program = null;\n        this._programError = false;\n\n        // Variable locations\n\n        this._aPosition = null;\n        this._aUV = null;\n\n        this._uDepthTexture = \"uDepthTexture\";\n        this._uOcclusionTexture = \"uOcclusionTexture\";\n\n        this._uViewport = null;\n        this._uCameraNear = null;\n        this._uCameraFar = null;\n        this._uCameraProjectionMatrix = null;\n        this._uCameraInverseProjectionMatrix = null;\n\n        this._uScale = null;\n        this._uIntensity = null;\n        this._uBias = null;\n        this._uKernelRadius = null;\n        this._uMinResolution = null;\n\n        // VBOs\n\n        this._uvBuf = null;\n        this._positionsBuf = null;\n        this._indicesBuf = null;\n\n        this.init();\n    }\n\n    init() {\n\n        // Create program & VBOs, locate attributes and uniforms\n\n        const gl = this._scene.canvas.gl;\n\n        this._program = new _Program_js__WEBPACK_IMPORTED_MODULE_0__[\"Program\"](gl, {\n\n            vertex: [\n                `#ifdef GL_FRAGMENT_PRECISION_HIGH\n                precision highp float;\n                precision highp int;\n                #else\n                precision mediump float;\n                precision mediump int;\n                #endif\n                    \n                attribute vec3 aPosition;\n                attribute vec2 aUV;\n                uniform vec2 uViewport;\n                varying vec2 vUV;\n                varying vec2 vInvSize;\n                void main () {\n                    vUV = aUV;\n                    vInvSize = 1.0 / uViewport;\n                    gl_Position = vec4(aPosition, 1.0);\n                }`],\n\n            fragment: [\n                `#ifdef GL_FRAGMENT_PRECISION_HIGH\n                precision highp float;\n                precision highp int;\n                #else\n                precision mediump float;\n                precision mediump int;\n                #endif\n                    \n                #define PI 3.14159265359\n                #define PI2 6.28318530718\n                #define EPSILON 1e-6\n\n                #define KERNEL_RADIUS ${KERNEL_RADIUS}\n\n                varying vec2        vUV;\n                varying vec2        vInvSize;\n            \n                uniform sampler2D   uDepthTexture;\n                uniform sampler2D   uOcclusionTexture;              \n               \n                uniform float       uCameraNear;\n                uniform float       uCameraFar;               \n                uniform float       uDepthCutoff;\n\n                uniform vec2        uSampleOffsets[ KERNEL_RADIUS + 1 ];\n                uniform float       uSampleWeights[ KERNEL_RADIUS + 1 ];\n\n                const float         unpackDownscale = 255. / 256.; \n\n                const vec3          packFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\n                const vec4          unpackFactors = unpackDownscale / vec4( packFactors, 1. );   \n\n                const float packUpscale = 256. / 255.;\n       \n                const float shiftRights = 1. / 256.;\n                \n                float unpackRGBAToFloat( const in vec4 v ) {\n                    return dot( v, unpackFactors );\n                }               \n\n                vec4 packFloatToRGBA( const in float v ) {\n                    vec4 r = vec4( fract( v * packFactors ), v );\n                    r.yzw -= r.xyz * shiftRights; \n                    return r * packUpscale;\n                }\n\n                float viewZToOrthographicDepth( const in float viewZ) {\n                    return ( viewZ + uCameraNear ) / ( uCameraNear - uCameraFar );\n                }\n              \n                float orthographicDepthToViewZ( const in float linearClipZ) {\n                    return linearClipZ * ( uCameraNear - uCameraFar ) - uCameraNear;\n                }\n\n                float viewZToPerspectiveDepth( const in float viewZ) {\n                    return (( uCameraNear + viewZ ) * uCameraFar ) / (( uCameraFar - uCameraNear ) * viewZ );\n                }\n                \n                float perspectiveDepthToViewZ( const in float invClipZ) {\n                    return ( uCameraNear * uCameraFar ) / ( ( uCameraFar - uCameraNear ) * invClipZ - uCameraFar );\n                }\n\n                float getDepth( const in vec2 screenPosition ) {\n                \treturn unpackRGBAToFloat( texture2D( uDepthTexture, screenPosition ) );\n                }\n\n                float getViewZ( const in float depth ) {\n                     return perspectiveDepthToViewZ( depth );\n                }\n\n                void main() {\n                \n                    float depth = getDepth( vUV );\n                    if( depth >= ( 1.0 - EPSILON ) ) {\n                        discard;\n                    }\n\n                    float centerViewZ = -getViewZ( depth );\n                    bool rBreak = false;\n                    bool lBreak = false;\n\n                    float weightSum = uSampleWeights[0];\n                    float occlusionSum = unpackRGBAToFloat(texture2D( uOcclusionTexture, vUV )) * weightSum;\n\n                    for( int i = 1; i <= KERNEL_RADIUS; i ++ ) {\n\n                        float sampleWeight = uSampleWeights[i];\n                        vec2 sampleUVOffset = uSampleOffsets[i] * vInvSize;\n\n                        vec2 sampleUV = vUV + sampleUVOffset;\n                        float viewZ = -getViewZ( getDepth( sampleUV ) );\n\n                        if( abs( viewZ - centerViewZ ) > uDepthCutoff ) {\n                            rBreak = true;\n                        }\n\n                        if( ! rBreak ) {\n                            occlusionSum += unpackRGBAToFloat(texture2D( uOcclusionTexture, sampleUV )) * sampleWeight;\n                            weightSum += sampleWeight;\n                        }\n\n                        sampleUV = vUV - sampleUVOffset;\n                        viewZ = -getViewZ( getDepth( sampleUV ) );\n\n                        if( abs( viewZ - centerViewZ ) > uDepthCutoff ) {\n                            lBreak = true;\n                        }\n\n                        if( ! lBreak ) {\n                            occlusionSum += unpackRGBAToFloat(texture2D( uOcclusionTexture, sampleUV )) * sampleWeight;\n                            weightSum += sampleWeight;\n                        }\n                    }\n\n                    gl_FragColor = packFloatToRGBA(occlusionSum / weightSum);\n                }`]\n        });\n\n        if (this._program.errors) {\n            console.error(this._program.errors.join(\"\\n\"));\n            this._programError = true;\n            return;\n        }\n\n        const uv = new Float32Array([1, 1, 0, 1, 0, 0, 1, 0]);\n        const positions = new Float32Array([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0]);\n        const indices = new Uint8Array([0, 1, 2, 0, 2, 3]);\n\n        this._positionsBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, positions, positions.length, 3, gl.STATIC_DRAW);\n        this._uvBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, uv, uv.length, 2, gl.STATIC_DRAW);\n        this._indicesBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ELEMENT_ARRAY_BUFFER, indices, indices.length, 1, gl.STATIC_DRAW);\n\n        this._program.bind();\n\n        this._uViewport = this._program.getLocation(\"uViewport\");\n\n        this._uCameraNear = this._program.getLocation(\"uCameraNear\");\n        this._uCameraFar = this._program.getLocation(\"uCameraFar\");\n\n        this._uDepthCutoff = this._program.getLocation(\"uDepthCutoff\");\n\n        this._uSampleOffsets = gl.getUniformLocation(this._program.handle, \"uSampleOffsets\");\n        this._uSampleWeights = gl.getUniformLocation(this._program.handle, \"uSampleWeights\");\n\n        this._aPosition = this._program.getAttribute(\"aPosition\");\n        this._aUV = this._program.getAttribute(\"aUV\");\n    }\n\n    render(depthTexture, occlusionTexture, direction) {\n\n        if (this._programError) {\n            return;\n        }\n\n        if (!this._getInverseProjectMat) { // HACK: scene.camera not defined until render time\n            this._getInverseProjectMat = (() => {\n                let projMatDirty = true;\n                this._scene.camera.on(\"projMatrix\", function () {\n                    projMatDirty = true;\n                });\n                const inverseProjectMat = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n                return () => {\n                    if (projMatDirty) {\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].inverseMat4(scene.camera.projMatrix, inverseProjectMat);\n                    }\n                    return inverseProjectMat;\n                }\n            })();\n        }\n\n        const gl = this._scene.canvas.gl;\n        const program = this._program;\n        const scene = this._scene;\n        const viewportWidth = gl.drawingBufferWidth;\n        const viewportHeight = gl.drawingBufferHeight;\n        const projectState = scene.camera.project._state;\n        const near = projectState.near;\n        const far = projectState.far;\n\n        gl.viewport(0, 0, viewportWidth, viewportHeight);\n        gl.clearColor(0, 0, 0, 1);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n        gl.frontFace(gl.CCW);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        program.bind();\n\n        tempVec2a[0] = viewportWidth;\n        tempVec2a[1] = viewportHeight;\n\n        gl.uniform2fv(this._uViewport, tempVec2a);\n        gl.uniform1f(this._uCameraNear, near);\n        gl.uniform1f(this._uCameraFar, far);\n\n        gl.uniform1f(this._uDepthCutoff, blurDepthCutoff);\n\n        if (direction === 0) {// Horizontal\n            gl.uniform2fv(this._uSampleOffsets, sampleOffsetsHor);\n        } else { // Vertical\n            gl.uniform2fv(this._uSampleOffsets, sampleOffsetsVert);\n        }\n\n        gl.uniform1fv(this._uSampleWeights, sampleWeights);\n\n        program.bindTexture(this._uDepthTexture, depthTexture, 0);\n        program.bindTexture(this._uOcclusionTexture, occlusionTexture, 1);\n\n        this._aUV.bindArrayBuffer(this._uvBuf);\n        this._aPosition.bindArrayBuffer(this._positionsBuf);\n        this._indicesBuf.bind();\n\n        gl.drawElements(gl.TRIANGLES, this._indicesBuf.numItems, this._indicesBuf.itemType, 0);\n    }\n\n    destroy() {\n        this._program.destroy();\n    }\n}\n\nfunction createSampleWeights(kernelRadius, stdDev) {\n    const weights = [];\n    for (let i = 0; i <= kernelRadius; i++) {\n        weights.push(gaussian(i, stdDev));\n    }\n    return weights; // TODO: Optimize\n}\n\nfunction gaussian(x, stdDev) {\n    return Math.exp(-(x * x) / (2.0 * (stdDev * stdDev))) / (Math.sqrt(2.0 * Math.PI) * stdDev);\n}\n\nfunction createSampleOffsets(kernelRadius, uvIncrement) {\n    const offsets = [];\n    for (let i = 0; i <= kernelRadius; i++) {\n        offsets.push(uvIncrement[0] * i);\n        offsets.push(uvIncrement[1] * i);\n    }\n    return offsets;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAODepthLimitedBlurRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAOOcclusionRenderer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAOOcclusionRenderer.js ***!
  \********************************************************************************************/
/*! exports provided: SAOOcclusionRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SAOOcclusionRenderer\", function() { return SAOOcclusionRenderer; });\n/* harmony import */ var _Program_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../ArrayBuf.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/ArrayBuf.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\n\n\nconst tempVec2 = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].vec2();\n\n/**\n * SAO implementation inspired from previous SAO work in THREE.js by ludobaka / ludobaka.github.io and bhouston\n * @private\n */\nclass SAOOcclusionRenderer {\n\n    constructor(scene) {\n\n        this._scene = scene;\n\n        this._numSamples = null;\n\n        // The program\n\n        this._program = null;\n        this._programError = false;\n\n        // Variable locations\n\n        this._aPosition = null;\n        this._aUV = null;\n\n        this._uDepthTexture = \"uDepthTexture\";\n\n        this._uCameraNear = null;\n        this._uCameraFar = null;\n        this._uCameraProjectionMatrix = null;\n        this._uCameraInverseProjectionMatrix = null;\n\n        this._uScale = null;\n        this._uIntensity = null;\n        this._uBias = null;\n        this._uKernelRadius = null;\n        this._uMinResolution = null;\n        this._uRandomSeed = null;\n\n        // VBOs\n\n        this._uvBuf = null;\n        this._positionsBuf = null;\n        this._indicesBuf = null;\n    }\n\n    render(depthTexture) {\n\n        this._build();\n\n        if (this._programError) {\n            return;\n        }\n\n        if (!this._getInverseProjectMat) { // HACK: scene.camera not defined until render time\n            this._getInverseProjectMat = (() => {\n                let projMatDirty = true;\n                this._scene.camera.on(\"projMatrix\", function () {\n                    projMatDirty = true;\n                });\n                const inverseProjectMat = _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].mat4();\n                return () => {\n                    if (projMatDirty) {\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_2__[\"math\"].inverseMat4(scene.camera.projMatrix, inverseProjectMat);\n                    }\n                    return inverseProjectMat;\n                }\n            })();\n        }\n\n        const gl = this._scene.canvas.gl;\n        const program = this._program;\n        const scene = this._scene;\n        const sao = scene.sao;\n        const viewportWidth = gl.drawingBufferWidth;\n        const viewportHeight = gl.drawingBufferHeight;\n        const projectState = scene.camera.project._state;\n        const near = projectState.near;\n        const far = projectState.far;\n        const projectionMatrix = projectState.matrix;\n        const inverseProjectionMatrix = this._getInverseProjectMat();\n        const randomSeed = Math.random();\n        const perspective = (scene.camera.projection === \"perspective\");\n\n        tempVec2[0] = viewportWidth;\n        tempVec2[1] = viewportHeight;\n\n        gl.getExtension(\"OES_standard_derivatives\");\n\n        gl.viewport(0, 0, viewportWidth, viewportHeight);\n        gl.clearColor(0, 0, 0, 1);\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n        gl.frontFace(gl.CCW);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        program.bind();\n\n        gl.uniform1f(this._uCameraNear, near);\n        gl.uniform1f(this._uCameraFar, far);\n\n        gl.uniformMatrix4fv(this._uCameraProjectionMatrix, false, projectionMatrix);\n        gl.uniformMatrix4fv(this._uCameraInverseProjectionMatrix, false, inverseProjectionMatrix);\n\n        gl.uniform1i(this._uPerspective, perspective);\n\n        gl.uniform1f(this._uScale, sao.scale * (far / 5));\n        gl.uniform1f(this._uIntensity, sao.intensity);\n        gl.uniform1f(this._uBias, sao.bias);\n        gl.uniform1f(this._uKernelRadius, sao.kernelRadius);\n        gl.uniform1f(this._uMinResolution, sao.minResolution);\n        gl.uniform2fv(this._uViewport, tempVec2);\n        gl.uniform1f(this._uRandomSeed, randomSeed);\n\n        program.bindTexture(this._uDepthTexture, depthTexture, 0);\n\n        this._aUV.bindArrayBuffer(this._uvBuf);\n        this._aPosition.bindArrayBuffer(this._positionsBuf);\n        this._indicesBuf.bind();\n\n        gl.drawElements(gl.TRIANGLES, this._indicesBuf.numItems, this._indicesBuf.itemType, 0);\n    }\n\n    _build() {\n\n        let dirty = false;\n\n        const sao = this._scene.sao;\n\n        if (sao.numSamples !== this._numSamples) {\n            this._numSamples = Math.floor(sao.numSamples);\n            dirty = true;\n        }\n\n        if (!dirty) {\n            return;\n        }\n\n        const gl = this._scene.canvas.gl;\n\n        if (this._program) {\n            this._program.destroy();\n            this._program = null;\n        }\n\n        this._program = new _Program_js__WEBPACK_IMPORTED_MODULE_0__[\"Program\"](gl, {\n\n            vertex: [`#ifdef GL_FRAGMENT_PRECISION_HIGH\n                    precision highp float;\n                    precision highp int;\n                    #else\n                    precision mediump float;\n                    precision mediump int;\n                    #endif\n                    \n                    attribute vec3 aPosition;\n                    attribute vec2 aUV;            \n                    \n                    varying vec2 vUV;\n                    \n                    void main () {\n                        gl_Position = vec4(aPosition, 1.0);\n                        vUV = aUV;\n                    }`],\n\n            fragment: [\n                `#extension GL_OES_standard_derivatives : require\n                #ifdef GL_FRAGMENT_PRECISION_HIGH\n                precision highp float;\n                precision highp int;\n                #else\n                precision mediump float;\n                precision mediump int;\n                #endif                   \n                \n                #define NORMAL_TEXTURE 0\n                #define PI 3.14159265359\n                #define PI2 6.28318530718\n                #define EPSILON 1e-6\n                #define NUM_SAMPLES ${this._numSamples}\n                #define NUM_RINGS 4              \n            \n                varying vec2        vUV;\n            \n                uniform sampler2D   uDepthTexture;\n               \n                uniform float       uCameraNear;\n                uniform float       uCameraFar;\n                uniform mat4        uProjectMatrix;\n                uniform mat4        uInverseProjectMatrix;\n                \n                uniform bool        uPerspective;\n\n                uniform float       uScale;\n                uniform float       uIntensity;\n                uniform float       uBias;\n                uniform float       uKernelRadius;\n                uniform float       uMinResolution;\n                uniform vec2        uViewport;\n                uniform float       uRandomSeed;\n\n                float pow2( const in float x ) { return x*x; }\n                \n                highp float rand( const in vec2 uv ) {\n                    const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n                    highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n                    return fract(sin(sn) * c);\n                }\n\n                vec3 packNormalToRGB( const in vec3 normal ) {\n                    return normalize( normal ) * 0.5 + 0.5;\n                }\n\n                vec3 unpackRGBToNormal( const in vec3 rgb ) {\n                    return 2.0 * rgb.xyz - 1.0;\n                }\n\n                const float packUpscale = 256. / 255.;\n                const float unpackDownScale = 255. / 256.; \n\n                const vec3 packFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\n                const vec4 unPackFactors = unpackDownScale / vec4( packFactors, 1. );   \n\n                const float shiftRights = 1. / 256.;\n\n                vec4 packFloatToRGBA( const in float v ) {\n                    vec4 r = vec4( fract( v * packFactors ), v );\n                    r.yzw -= r.xyz * shiftRights; \n                    return r * packUpscale;\n                }\n\n                float unpackRGBAToFloat( const in vec4 v ) {\n                    return dot( v, unPackFactors );\n                }\n                \n                float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n                    return ( near * far ) / ( ( far - near ) * invClipZ - far );\n                }\n\n                float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n                    return linearClipZ * ( near - far ) - near;\n                }\n                \n                float getDepth( const in vec2 screenPos ) {\n                \treturn unpackRGBAToFloat( texture2D( uDepthTexture, screenPos ) );\n                }\n\n                float getViewZ( const in float depth ) {\n                     if (uPerspective) {\n                         return perspectiveDepthToViewZ( depth, uCameraNear, uCameraFar );\n                     } else {\n                        return orthographicDepthToViewZ( depth, uCameraNear, uCameraFar );\n                     }\n                }\n\n                vec3 getViewPos( const in vec2 screenPos, const in float depth, const in float viewZ ) {\n                \tfloat clipW = uProjectMatrix[2][3] * viewZ + uProjectMatrix[3][3];\n                \tvec4 clipPosition = vec4( ( vec3( screenPos, depth ) - 0.5 ) * 2.0, 1.0 );\n                \tclipPosition *= clipW; \n                \treturn ( uInverseProjectMatrix * clipPosition ).xyz;\n                }\n\n                vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPos ) {               \n                    return normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );\n                }\n\n                float scaleDividedByCameraFar;\n                float minResolutionMultipliedByCameraFar;\n\n                float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {\n                \tvec3 viewDelta = sampleViewPosition - centerViewPosition;\n                \tfloat viewDistance = length( viewDelta );\n                \tfloat scaledScreenDistance = scaleDividedByCameraFar * viewDistance;\n                \treturn max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - uBias) / (1.0 + pow2( scaledScreenDistance ) );\n                }\n\n                const float ANGLE_STEP = PI2 * float( NUM_RINGS ) / float( NUM_SAMPLES );\n                const float INV_NUM_SAMPLES = 1.0 / float( NUM_SAMPLES );\n\n                float getAmbientOcclusion( const in vec3 centerViewPosition ) {\n            \n                \tscaleDividedByCameraFar = uScale / uCameraFar;\n                \tminResolutionMultipliedByCameraFar = uMinResolution * uCameraFar;\n                \tvec3 centerViewNormal = getViewNormal( centerViewPosition, vUV );\n\n                \tfloat angle = rand( vUV + uRandomSeed ) * PI2;\n                \tvec2 radius = vec2( uKernelRadius * INV_NUM_SAMPLES ) / uViewport;\n                \tvec2 radiusStep = radius;\n\n                \tfloat occlusionSum = 0.0;\n                \tfloat weightSum = 0.0;\n\n                \tfor( int i = 0; i < NUM_SAMPLES; i ++ ) {\n                \t\tvec2 sampleUv = vUV + vec2( cos( angle ), sin( angle ) ) * radius;\n                \t\tradius += radiusStep;\n                \t\tangle += ANGLE_STEP;\n\n                \t\tfloat sampleDepth = getDepth( sampleUv );\n                \t\tif( sampleDepth >= ( 1.0 - EPSILON ) ) {\n                \t\t\tcontinue;\n                \t\t}\n\n                \t\tfloat sampleViewZ = getViewZ( sampleDepth );\n                \t\tvec3 sampleViewPosition = getViewPos( sampleUv, sampleDepth, sampleViewZ );\n                \t\tocclusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );\n                \t\tweightSum += 1.0;\n                \t}\n\n                \tif( weightSum == 0.0 ) discard;\n\n                \treturn occlusionSum * ( uIntensity / weightSum );\n                }\n\n                void main() {\n                \n                \tfloat centerDepth = getDepth( vUV );\n                \t\n                \tif( centerDepth >= ( 1.0 - EPSILON ) ) {\n                \t\tdiscard;\n                \t}\n\n                \tfloat centerViewZ = getViewZ( centerDepth );\n                \tvec3 viewPosition = getViewPos( vUV, centerDepth, centerViewZ );\n\n                \tfloat ambientOcclusion = getAmbientOcclusion( viewPosition );\n                \n                \tgl_FragColor = packFloatToRGBA(  1.0- ambientOcclusion );\n                }`]\n        });\n\n        if (this._program.errors) {\n            console.error(this._program.errors.join(\"\\n\"));\n            this._programError = true;\n            return;\n        }\n\n        const uv = new Float32Array([1, 1, 0, 1, 0, 0, 1, 0]);\n        const positions = new Float32Array([1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0]);\n        const indices = new Uint8Array([0, 1, 2, 0, 2, 3]);\n\n        this._positionsBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, positions, positions.length, 3, gl.STATIC_DRAW);\n        this._uvBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ARRAY_BUFFER, uv, uv.length, 2, gl.STATIC_DRAW);\n        this._indicesBuf = new _ArrayBuf_js__WEBPACK_IMPORTED_MODULE_1__[\"ArrayBuf\"](gl, gl.ELEMENT_ARRAY_BUFFER, indices, indices.length, 1, gl.STATIC_DRAW);\n\n        this._program.bind();\n\n        this._uCameraNear = this._program.getLocation(\"uCameraNear\");\n        this._uCameraFar = this._program.getLocation(\"uCameraFar\");\n\n        this._uCameraProjectionMatrix = this._program.getLocation(\"uProjectMatrix\");\n        this._uCameraInverseProjectionMatrix = this._program.getLocation(\"uInverseProjectMatrix\");\n\n        this._uPerspective = this._program.getLocation(\"uPerspective\");\n\n        this._uScale = this._program.getLocation(\"uScale\");\n        this._uIntensity = this._program.getLocation(\"uIntensity\");\n        this._uBias = this._program.getLocation(\"uBias\");\n        this._uKernelRadius = this._program.getLocation(\"uKernelRadius\");\n        this._uMinResolution = this._program.getLocation(\"uMinResolution\");\n        this._uViewport = this._program.getLocation(\"uViewport\");\n        this._uRandomSeed = this._program.getLocation(\"uRandomSeed\");\n\n        this._aPosition = this._program.getAttribute(\"aPosition\");\n        this._aUV = this._program.getAttribute(\"aUV\");\n\n        this._dirty = false;\n    }\n\n    destroy() {\n        if (this._program) {\n            this._program.destroy();\n            this._program = null;\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/sao/SAOOcclusionRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/webglEnums.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/webglEnums.js ***!
  \******************************************************************************/
/*! exports provided: webglEnums */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"webglEnums\", function() { return webglEnums; });\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @desc Human-readable WebGL enumeration mappings.\n * @private\n */\nconst webglEnums = {\n    funcAdd: \"FUNC_ADD\",\n    funcSubtract: \"FUNC_SUBTRACT\",\n    funcReverseSubtract: \"FUNC_REVERSE_SUBTRACT\",\n    zero: \"ZERO\",\n    one: \"ONE\",\n    srcColor: \"SRC_COLOR\",\n    oneMinusSrcColor: \"ONE_MINUS_SRC_COLOR\",\n    dstColor: \"DST_COLOR\",\n    oneMinusDstColor: \"ONE_MINUS_DST_COLOR\",\n    srcAlpha: \"SRC_ALPHA\",\n    oneMinusSrcAlpha: \"ONE_MINUS_SRC_ALPHA\",\n    dstAlpha: \"DST_ALPHA\",\n    oneMinusDstAlpha: \"ONE_MINUS_DST_ALPHA\",\n    contantColor: \"CONSTANT_COLOR\",\n    oneMinusConstantColor: \"ONE_MINUS_CONSTANT_COLOR\",\n    constantAlpha: \"CONSTANT_ALPHA\",\n    oneMinusConstantAlpha: \"ONE_MINUS_CONSTANT_ALPHA\",\n    srcAlphaSaturate: \"SRC_ALPHA_SATURATE\",\n    front: \"FRONT\",\n    back: \"BACK\",\n    frontAndBack: \"FRONT_AND_BACK\",\n    never: \"NEVER\",\n    less: \"LESS\",\n    equal: \"EQUAL\",\n    lequal: \"LEQUAL\",\n    greater: \"GREATER\",\n    notequal: \"NOTEQUAL\",\n    gequal: \"GEQUAL\",\n    always: \"ALWAYS\",\n    cw: \"CW\",\n    ccw: \"CCW\",\n    linear: \"LINEAR\",\n    nearest: \"NEAREST\",\n    linearMipmapNearest: \"LINEAR_MIPMAP_NEAREST\",\n    nearestMipmapNearest: \"NEAREST_MIPMAP_NEAREST\",\n    nearestMipmapLinear: \"NEAREST_MIPMAP_LINEAR\",\n    linearMipmapLinear: \"LINEAR_MIPMAP_LINEAR\",\n    repeat: \"REPEAT\",\n    clampToEdge: \"CLAMP_TO_EDGE\",\n    mirroredRepeat: \"MIRRORED_REPEAT\",\n    alpha: \"ALPHA\",\n    rgb: \"RGB\",\n    rgba: \"RGBA\",\n    luminance: \"LUMINANCE\",\n    luminanceAlpha: \"LUMINANCE_ALPHA\",\n    textureBinding2D: \"TEXTURE_BINDING_2D\",\n    textureBindingCubeMap: \"TEXTURE_BINDING_CUBE_MAP\",\n    compareRToTexture: \"COMPARE_R_TO_TEXTURE\", // Hardware Shadowing Z-depth,\n    unsignedByte: \"UNSIGNED_BYTE\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL3dlYmdsRW51bXMuanM/MDZkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL3dlYmdsRW51bXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBhdXRob3IgeGVvbGFicyAvIGh0dHBzOi8vZ2l0aHViLmNvbS94ZW9sYWJzXG4gKi9cblxuLyoqXG4gKiBAZGVzYyBIdW1hbi1yZWFkYWJsZSBXZWJHTCBlbnVtZXJhdGlvbiBtYXBwaW5ncy5cbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IHdlYmdsRW51bXMgPSB7XG4gICAgZnVuY0FkZDogXCJGVU5DX0FERFwiLFxuICAgIGZ1bmNTdWJ0cmFjdDogXCJGVU5DX1NVQlRSQUNUXCIsXG4gICAgZnVuY1JldmVyc2VTdWJ0cmFjdDogXCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1RcIixcbiAgICB6ZXJvOiBcIlpFUk9cIixcbiAgICBvbmU6IFwiT05FXCIsXG4gICAgc3JjQ29sb3I6IFwiU1JDX0NPTE9SXCIsXG4gICAgb25lTWludXNTcmNDb2xvcjogXCJPTkVfTUlOVVNfU1JDX0NPTE9SXCIsXG4gICAgZHN0Q29sb3I6IFwiRFNUX0NPTE9SXCIsXG4gICAgb25lTWludXNEc3RDb2xvcjogXCJPTkVfTUlOVVNfRFNUX0NPTE9SXCIsXG4gICAgc3JjQWxwaGE6IFwiU1JDX0FMUEhBXCIsXG4gICAgb25lTWludXNTcmNBbHBoYTogXCJPTkVfTUlOVVNfU1JDX0FMUEhBXCIsXG4gICAgZHN0QWxwaGE6IFwiRFNUX0FMUEhBXCIsXG4gICAgb25lTWludXNEc3RBbHBoYTogXCJPTkVfTUlOVVNfRFNUX0FMUEhBXCIsXG4gICAgY29udGFudENvbG9yOiBcIkNPTlNUQU5UX0NPTE9SXCIsXG4gICAgb25lTWludXNDb25zdGFudENvbG9yOiBcIk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUlwiLFxuICAgIGNvbnN0YW50QWxwaGE6IFwiQ09OU1RBTlRfQUxQSEFcIixcbiAgICBvbmVNaW51c0NvbnN0YW50QWxwaGE6IFwiT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBXCIsXG4gICAgc3JjQWxwaGFTYXR1cmF0ZTogXCJTUkNfQUxQSEFfU0FUVVJBVEVcIixcbiAgICBmcm9udDogXCJGUk9OVFwiLFxuICAgIGJhY2s6IFwiQkFDS1wiLFxuICAgIGZyb250QW5kQmFjazogXCJGUk9OVF9BTkRfQkFDS1wiLFxuICAgIG5ldmVyOiBcIk5FVkVSXCIsXG4gICAgbGVzczogXCJMRVNTXCIsXG4gICAgZXF1YWw6IFwiRVFVQUxcIixcbiAgICBsZXF1YWw6IFwiTEVRVUFMXCIsXG4gICAgZ3JlYXRlcjogXCJHUkVBVEVSXCIsXG4gICAgbm90ZXF1YWw6IFwiTk9URVFVQUxcIixcbiAgICBnZXF1YWw6IFwiR0VRVUFMXCIsXG4gICAgYWx3YXlzOiBcIkFMV0FZU1wiLFxuICAgIGN3OiBcIkNXXCIsXG4gICAgY2N3OiBcIkNDV1wiLFxuICAgIGxpbmVhcjogXCJMSU5FQVJcIixcbiAgICBuZWFyZXN0OiBcIk5FQVJFU1RcIixcbiAgICBsaW5lYXJNaXBtYXBOZWFyZXN0OiBcIkxJTkVBUl9NSVBNQVBfTkVBUkVTVFwiLFxuICAgIG5lYXJlc3RNaXBtYXBOZWFyZXN0OiBcIk5FQVJFU1RfTUlQTUFQX05FQVJFU1RcIixcbiAgICBuZWFyZXN0TWlwbWFwTGluZWFyOiBcIk5FQVJFU1RfTUlQTUFQX0xJTkVBUlwiLFxuICAgIGxpbmVhck1pcG1hcExpbmVhcjogXCJMSU5FQVJfTUlQTUFQX0xJTkVBUlwiLFxuICAgIHJlcGVhdDogXCJSRVBFQVRcIixcbiAgICBjbGFtcFRvRWRnZTogXCJDTEFNUF9UT19FREdFXCIsXG4gICAgbWlycm9yZWRSZXBlYXQ6IFwiTUlSUk9SRURfUkVQRUFUXCIsXG4gICAgYWxwaGE6IFwiQUxQSEFcIixcbiAgICByZ2I6IFwiUkdCXCIsXG4gICAgcmdiYTogXCJSR0JBXCIsXG4gICAgbHVtaW5hbmNlOiBcIkxVTUlOQU5DRVwiLFxuICAgIGx1bWluYW5jZUFscGhhOiBcIkxVTUlOQU5DRV9BTFBIQVwiLFxuICAgIHRleHR1cmVCaW5kaW5nMkQ6IFwiVEVYVFVSRV9CSU5ESU5HXzJEXCIsXG4gICAgdGV4dHVyZUJpbmRpbmdDdWJlTWFwOiBcIlRFWFRVUkVfQklORElOR19DVUJFX01BUFwiLFxuICAgIGNvbXBhcmVSVG9UZXh0dXJlOiBcIkNPTVBBUkVfUl9UT19URVhUVVJFXCIsIC8vIEhhcmR3YXJlIFNoYWRvd2luZyBaLWRlcHRoLFxuICAgIHVuc2lnbmVkQnl0ZTogXCJVTlNJR05FRF9CWVRFXCJcbn07XG5cbmV4cG9ydCB7d2ViZ2xFbnVtc307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/webglEnums.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js ***!
  \***********************************************************************/
/*! exports provided: WEBGL_INFO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WEBGL_INFO\", function() { return WEBGL_INFO; });\n/**\n * @private\n * @type {{WEBGL: boolean, SUPPORTED_EXTENSIONS: {}}}\n */\nconst WEBGL_INFO = {\n    WEBGL: false,\n    SUPPORTED_EXTENSIONS: {}\n};\n\nconst canvas = document.createElement(\"canvas\");\n\nif (canvas) {\n\n    const gl = canvas.getContext(\"webgl\", {antialias: true}) || canvas.getContext(\"experimental-webgl\", {antialias: true});\n\n    WEBGL_INFO.WEBGL = !!gl;\n\n    if (WEBGL_INFO.WEBGL) {\n        WEBGL_INFO.ANTIALIAS = gl.getContextAttributes().antialias;\n        if (gl.getShaderPrecisionFormat) {\n            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"highp\";\n            } else if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n            } else {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"lowp\";\n            }\n        } else {\n            WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n        }\n        WEBGL_INFO.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);\n        WEBGL_INFO.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        WEBGL_INFO.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WEBGL_INFO.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n        gl.getSupportedExtensions().forEach(function (ext) {\n            WEBGL_INFO.SUPPORTED_EXTENSIONS[ext] = true;\n        });\n        WEBGL_INFO.depthTexturesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"];\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsSW5mby5qcz82YzUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsMkNBQTJDLGdCQUFnQiw4Q0FBOEMsZ0JBQWdCOztBQUV6SDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvd2ViZ2xJbmZvLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge3tXRUJHTDogYm9vbGVhbiwgU1VQUE9SVEVEX0VYVEVOU0lPTlM6IHt9fX1cbiAqL1xuY29uc3QgV0VCR0xfSU5GTyA9IHtcbiAgICBXRUJHTDogZmFsc2UsXG4gICAgU1VQUE9SVEVEX0VYVEVOU0lPTlM6IHt9XG59O1xuXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG5pZiAoY2FudmFzKSB7XG5cbiAgICBjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiwge2FudGlhbGlhczogdHJ1ZX0pIHx8IGNhbnZhcy5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIsIHthbnRpYWxpYXM6IHRydWV9KTtcblxuICAgIFdFQkdMX0lORk8uV0VCR0wgPSAhIWdsO1xuXG4gICAgaWYgKFdFQkdMX0lORk8uV0VCR0wpIHtcbiAgICAgICAgV0VCR0xfSU5GTy5BTlRJQUxJQVMgPSBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFudGlhbGlhcztcbiAgICAgICAgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQpLnByZWNpc2lvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBXRUJHTF9JTkZPLkZTX01BWF9GTE9BVF9QUkVDSVNJT04gPSBcImhpZ2hwXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCkucHJlY2lzaW9uID4gMCkge1xuICAgICAgICAgICAgICAgIFdFQkdMX0lORk8uRlNfTUFYX0ZMT0FUX1BSRUNJU0lPTiA9IFwibWVkaXVtcFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBXRUJHTF9JTkZPLkZTX01BWF9GTE9BVF9QUkVDSVNJT04gPSBcImxvd3BcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFdFQkdMX0lORk8uRlNfTUFYX0ZMT0FUX1BSRUNJU0lPTiA9IFwibWVkaXVtcFwiO1xuICAgICAgICB9XG4gICAgICAgIFdFQkdMX0lORk8uREVQVEhfQlVGRkVSX0JJVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuREVQVEhfQklUUyk7XG4gICAgICAgIFdFQkdMX0lORk8uTUFYX1RFWFRVUkVfU0laRSA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfQ1VCRV9NQVBfU0laRSA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfUkVOREVSQlVGRkVSX1NJWkUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1JFTkRFUkJVRkZFUl9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfVEVYVFVSRV9VTklUUyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIFdFQkdMX0lORk8uTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WRVJURVhfQVRUUklCUyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVkVSVEVYX0FUVFJJQlMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WQVJZSU5HX1ZFQ1RPUlMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1ZBUllJTkdfVkVDVE9SUyk7XG4gICAgICAgIGdsLmdldFN1cHBvcnRlZEV4dGVuc2lvbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcbiAgICAgICAgICAgIFdFQkdMX0lORk8uU1VQUE9SVEVEX0VYVEVOU0lPTlNbZXh0XSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBXRUJHTF9JTkZPLmRlcHRoVGV4dHVyZXNTdXBwb3J0ZWQgPSBXRUJHTF9JTkZPLlNVUFBPUlRFRF9FWFRFTlNJT05TW1wiV0VCR0xfZGVwdGhfdGV4dHVyZVwiXTtcbiAgICB9XG59XG5cbmV4cG9ydCB7V0VCR0xfSU5GT307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\n");

/***/ })

}]);