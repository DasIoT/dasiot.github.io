(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[8],{

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildGridGeometry.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildGridGeometry.js ***!
  \*************************************************************************************************/
/*! exports provided: buildGridGeometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildGridGeometry\", function() { return buildGridGeometry; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n\n\n/**\n * @desc Creates a grid-shaped {@link Geometry}.\n *\n * ## Usage\n *\n * Creating a {@link Mesh} with a GridGeometry and a {@link PhongMaterial}:\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildGridGeometry)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildGridGeometry} from \"../src/scene/geometry/builders/buildGridGeometry.js\";\n * import {VBOGeometry} from \"../src/scene/geometry/VBOGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n *\n * const viewer = new Viewer({\n *      canvasId: \"myCanvas\"\n * });\n *\n * viewer.camera.eye = [0, 0, 5];\n * viewer.camera.look = [0, 0, 0];\n * viewer.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new VBOGeometry(viewer.scene, buildGridGeometry({\n *          size: 1000,\n *          divisions: 500\n *      })),\n *      material: new PhongMaterial(viewer.scene, {\n *          color: [0.0, 0.0, 0.0],\n *          emissive: [0.4, 0.4, 0.4]\n *      }),\n *      position: [0, -1.6, 0]\n * });\n * ````\n *\n * @function buildGridGeometry\n * @param {*} [cfg] Configs\n * @param {String} [cfg.id] Optional ID for the {@link Geometry}, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n * @param {Number} [cfg.size=1] Dimension on the X and Z-axis.\n * @param {Number} [cfg.divisions=1] Number of divisions on X and Z axis..\n * @returns {Object} Configuration for a {@link Geometry} subtype.\n */\nfunction buildGridGeometry(cfg = {}) {\n\n    let size = cfg.size || 1;\n    if (size < 0) {\n        console.error(\"negative size not allowed - will invert\");\n        size *= -1;\n    }\n\n    let divisions = cfg.divisions || 1;\n    if (divisions < 0) {\n        console.error(\"negative divisions not allowed - will invert\");\n        divisions *= -1;\n    }\n    if (divisions < 1) {\n        divisions = 1;\n    }\n\n    size = size || 10;\n    divisions = divisions || 10;\n\n    const step = size / divisions;\n    const halfSize = size / 2;\n\n    const positions = [];\n    const indices = [];\n    let l = 0;\n\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\n        positions.push(-halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(-halfSize);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(halfSize);\n\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n    }\n\n    return _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"utils\"].apply(cfg, {\n        primitive: \"lines\",\n        positions: positions,\n        indices: indices\n    });\n}\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL2dlb21ldHJ5L2J1aWxkZXJzL2J1aWxkR3JpZEdlb21ldHJ5LmpzPzQ4NmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQXFDOztBQUVyQztBQUNBLGdDQUFnQyxlQUFlO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVyw0QkFBNEIsb0JBQW9CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsS0FBSztBQUNoQixXQUFXLGtCQUFrQjtBQUM3QixXQUFXLFlBQVk7QUFDdkIsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLE9BQU8sK0JBQStCLGVBQWUsNkNBQTZDLFlBQVk7QUFDekgsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU8sc0JBQXNCLGVBQWU7QUFDekQ7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlDQUF5QyxnQkFBZ0I7O0FBRXpEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsK0NBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOzs7QUFHMkIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvZ2VvbWV0cnkvYnVpbGRlcnMvYnVpbGRHcmlkR2VvbWV0cnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3V0aWxzfSBmcm9tICcuLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogQGRlc2MgQ3JlYXRlcyBhIGdyaWQtc2hhcGVkIHtAbGluayBHZW9tZXRyeX0uXG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiBDcmVhdGluZyBhIHtAbGluayBNZXNofSB3aXRoIGEgR3JpZEdlb21ldHJ5IGFuZCBhIHtAbGluayBQaG9uZ01hdGVyaWFsfTpcbiAqXG4gKiBbW1J1biB0aGlzIGV4YW1wbGVdKGh0dHA6Ly94ZW9raXQuZ2l0aHViLmlvL3hlb2tpdC1zZGsvZXhhbXBsZXMvI2dlb21ldHJ5X2J1aWxkZXJzX2J1aWxkR3JpZEdlb21ldHJ5KV1cbiAqXG4gKiBgYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHtWaWV3ZXJ9IGZyb20gXCIuLi9zcmMvdmlld2VyL1ZpZXdlci5qc1wiO1xuICogaW1wb3J0IHtNZXNofSBmcm9tIFwiLi4vc3JjL3NjZW5lL21lc2gvTWVzaC5qc1wiO1xuICogaW1wb3J0IHtidWlsZEdyaWRHZW9tZXRyeX0gZnJvbSBcIi4uL3NyYy9zY2VuZS9nZW9tZXRyeS9idWlsZGVycy9idWlsZEdyaWRHZW9tZXRyeS5qc1wiO1xuICogaW1wb3J0IHtWQk9HZW9tZXRyeX0gZnJvbSBcIi4uL3NyYy9zY2VuZS9nZW9tZXRyeS9WQk9HZW9tZXRyeS5qc1wiO1xuICogaW1wb3J0IHtQaG9uZ01hdGVyaWFsfSBmcm9tIFwiLi4vc3JjL3NjZW5lL21hdGVyaWFscy9QaG9uZ01hdGVyaWFsLmpzXCI7XG4gKiBpbXBvcnQge1RleHR1cmV9IGZyb20gXCIuLi9zcmMvc2NlbmUvbWF0ZXJpYWxzL1RleHR1cmUuanNcIjtcbiAqXG4gKiBjb25zdCB2aWV3ZXIgPSBuZXcgVmlld2VyKHtcbiAqICAgICAgY2FudmFzSWQ6IFwibXlDYW52YXNcIlxuICogfSk7XG4gKlxuICogdmlld2VyLmNhbWVyYS5leWUgPSBbMCwgMCwgNV07XG4gKiB2aWV3ZXIuY2FtZXJhLmxvb2sgPSBbMCwgMCwgMF07XG4gKiB2aWV3ZXIuY2FtZXJhLnVwID0gWzAsIDEsIDBdO1xuICpcbiAqIG5ldyBNZXNoKHZpZXdlci5zY2VuZSwge1xuICogICAgICBnZW9tZXRyeTogbmV3IFZCT0dlb21ldHJ5KHZpZXdlci5zY2VuZSwgYnVpbGRHcmlkR2VvbWV0cnkoe1xuICogICAgICAgICAgc2l6ZTogMTAwMCxcbiAqICAgICAgICAgIGRpdmlzaW9uczogNTAwXG4gKiAgICAgIH0pKSxcbiAqICAgICAgbWF0ZXJpYWw6IG5ldyBQaG9uZ01hdGVyaWFsKHZpZXdlci5zY2VuZSwge1xuICogICAgICAgICAgY29sb3I6IFswLjAsIDAuMCwgMC4wXSxcbiAqICAgICAgICAgIGVtaXNzaXZlOiBbMC40LCAwLjQsIDAuNF1cbiAqICAgICAgfSksXG4gKiAgICAgIHBvc2l0aW9uOiBbMCwgLTEuNiwgMF1cbiAqIH0pO1xuICogYGBgYFxuICpcbiAqIEBmdW5jdGlvbiBidWlsZEdyaWRHZW9tZXRyeVxuICogQHBhcmFtIHsqfSBbY2ZnXSBDb25maWdzXG4gKiBAcGFyYW0ge1N0cmluZ30gW2NmZy5pZF0gT3B0aW9uYWwgSUQgZm9yIHRoZSB7QGxpbmsgR2VvbWV0cnl9LCB1bmlxdWUgYW1vbmcgYWxsIGNvbXBvbmVudHMgaW4gdGhlIHBhcmVudCB7QGxpbmsgU2NlbmV9LCBnZW5lcmF0ZWQgYXV0b21hdGljYWxseSB3aGVuIG9taXR0ZWQuXG4gKiBAcGFyYW0ge051bWJlcn0gW2NmZy5zaXplPTFdIERpbWVuc2lvbiBvbiB0aGUgWCBhbmQgWi1heGlzLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtjZmcuZGl2aXNpb25zPTFdIE51bWJlciBvZiBkaXZpc2lvbnMgb24gWCBhbmQgWiBheGlzLi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IENvbmZpZ3VyYXRpb24gZm9yIGEge0BsaW5rIEdlb21ldHJ5fSBzdWJ0eXBlLlxuICovXG5mdW5jdGlvbiBidWlsZEdyaWRHZW9tZXRyeShjZmcgPSB7fSkge1xuXG4gICAgbGV0IHNpemUgPSBjZmcuc2l6ZSB8fCAxO1xuICAgIGlmIChzaXplIDwgMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwibmVnYXRpdmUgc2l6ZSBub3QgYWxsb3dlZCAtIHdpbGwgaW52ZXJ0XCIpO1xuICAgICAgICBzaXplICo9IC0xO1xuICAgIH1cblxuICAgIGxldCBkaXZpc2lvbnMgPSBjZmcuZGl2aXNpb25zIHx8IDE7XG4gICAgaWYgKGRpdmlzaW9ucyA8IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIm5lZ2F0aXZlIGRpdmlzaW9ucyBub3QgYWxsb3dlZCAtIHdpbGwgaW52ZXJ0XCIpO1xuICAgICAgICBkaXZpc2lvbnMgKj0gLTE7XG4gICAgfVxuICAgIGlmIChkaXZpc2lvbnMgPCAxKSB7XG4gICAgICAgIGRpdmlzaW9ucyA9IDE7XG4gICAgfVxuXG4gICAgc2l6ZSA9IHNpemUgfHwgMTA7XG4gICAgZGl2aXNpb25zID0gZGl2aXNpb25zIHx8IDEwO1xuXG4gICAgY29uc3Qgc3RlcCA9IHNpemUgLyBkaXZpc2lvbnM7XG4gICAgY29uc3QgaGFsZlNpemUgPSBzaXplIC8gMjtcblxuICAgIGNvbnN0IHBvc2l0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcbiAgICBsZXQgbCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDAsIGsgPSAtaGFsZlNpemU7IGkgPD0gZGl2aXNpb25zOyBpKyssIGsgKz0gc3RlcCkge1xuXG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKC1oYWxmU2l6ZSk7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKDApO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChrKTtcblxuICAgICAgICBwb3NpdGlvbnMucHVzaChoYWxmU2l6ZSk7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKDApO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChrKTtcblxuICAgICAgICBwb3NpdGlvbnMucHVzaChrKTtcbiAgICAgICAgcG9zaXRpb25zLnB1c2goMCk7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKC1oYWxmU2l6ZSk7XG5cbiAgICAgICAgcG9zaXRpb25zLnB1c2goayk7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKDApO1xuICAgICAgICBwb3NpdGlvbnMucHVzaChoYWxmU2l6ZSk7XG5cbiAgICAgICAgaW5kaWNlcy5wdXNoKGwrKyk7XG4gICAgICAgIGluZGljZXMucHVzaChsKyspO1xuICAgICAgICBpbmRpY2VzLnB1c2gobCsrKTtcbiAgICAgICAgaW5kaWNlcy5wdXNoKGwrKyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmFwcGx5KGNmZywge1xuICAgICAgICBwcmltaXRpdmU6IFwibGluZXNcIixcbiAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbnMsXG4gICAgICAgIGluZGljZXM6IGluZGljZXNcbiAgICB9KTtcbn1cblxuXG5leHBvcnQge2J1aWxkR3JpZEdlb21ldHJ5fTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/geometry/builders/buildGridGeometry.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js ***!
  \*******************************************************************/
/*! exports provided: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return utils; });\n/**\n * @private\n */\nfunction xmlToJson(node, attributeRenamer) {\n    if (node.nodeType === node.TEXT_NODE) {\n        var v = node.nodeValue;\n        if (v.match(/^\\s+$/) === null) {\n            return v;\n        }\n    } else if (node.nodeType === node.ELEMENT_NODE ||\n        node.nodeType === node.DOCUMENT_NODE) {\n        var json = {type: node.nodeName, children: []};\n\n        if (node.nodeType === node.ELEMENT_NODE) {\n            for (var j = 0; j < node.attributes.length; j++) {\n                var attribute = node.attributes[j];\n                var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                json[nm] = attribute.nodeValue;\n            }\n        }\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n            var item = node.childNodes[i];\n            var j = xmlToJson(item, attributeRenamer);\n            if (j) json.children.push(j);\n        }\n\n        return json;\n    }\n}\n\n/**\n * @private\n */\nfunction clone(ob) {\n    return JSON.parse(JSON.stringify(ob));\n}\n\n/**\n * @private\n */\nvar guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\n/**\n * @private\n */\nfunction b64(v, len) {\n    var r = (!len || len === 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n}\n\n/**\n * @private\n */\nfunction compressGuid(g) {\n    var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n        return parseInt(g.substr(i, 2), 16);\n    });\n    return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n        return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n    }).join(\"\");\n}\n\n/**\n * @private\n */\nfunction findNodeOfType(m, t) {\n    var li = [];\n    var _ = function (n) {\n        if (n.type === t) li.push(n);\n        (n.children || []).forEach(function (c) {\n            _(c);\n        });\n    };\n    _(m);\n    return li;\n}\n\n/**\n * @private\n */\nfunction timeout(dt) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(resolve, dt);\n    });\n}\n\n/**\n * @private\n */\nfunction httpRequest(args) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(args.method || \"GET\", args.url, true);\n        xhr.onload = function (e) {\n            console.log(args.url, xhr.readyState, xhr.status);\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseXML);\n                } else {\n                    reject(xhr.statusText);\n                }\n            }\n        };\n        xhr.send(null);\n    });\n}\n\n/**\n * @private\n */\nconst queryString = function () {\n    // This function is anonymous, is executed immediately and\n    // the return value is assigned to QueryString!\n    var query_string = {};\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        // If first entry with this name\n        if (typeof query_string[pair[0]] === \"undefined\") {\n            query_string[pair[0]] = decodeURIComponent(pair[1]);\n            // If second entry with this name\n        } else if (typeof query_string[pair[0]] === \"string\") {\n            var arr = [query_string[pair[0]], decodeURIComponent(pair[1])];\n            query_string[pair[0]] = arr;\n            // If third or later entry with this name\n        } else {\n            query_string[pair[0]].push(decodeURIComponent(pair[1]));\n        }\n    }\n    return query_string;\n}();\n\n/**\n * @private\n */\nfunction loadJSON(url, ok, err) {\n    // Avoid checking ok and err on each use.\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n\n    var request = new XMLHttpRequest();\n    request.overrideMimeType(\"application/json\");\n    request.open('GET', url, true);\n    request.addEventListener('load', function (event) {\n        var response = event.target.response;\n        if (this.status === 200) {\n            var json;\n            try {\n                json = JSON.parse(response);\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n            ok(json);\n        } else if (this.status === 0) {\n            // Some browsers return HTTP Status 0 when using non-http protocol\n            // e.g. 'file://' or 'data://'. Handle as success.\n            console.warn('loadFile: HTTP Status 0 received.');\n            try {\n                ok(JSON.parse(response));\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n        } else {\n            err(event);\n        }\n    }, false);\n\n    request.addEventListener('error', function (event) {\n        err(event);\n    }, false);\n    request.send(null);\n}\n\n/**\n * @private\n */\nfunction loadArraybuffer(url, ok, err) {\n    // Check for data: URI\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n    const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n    const dataUriRegexResult = url.match(dataUriRegex);\n    if (dataUriRegexResult) { // Safari can't handle data URIs through XMLHttpRequest\n        const isBase64 = !!dataUriRegexResult[2];\n        var data = dataUriRegexResult[3];\n        data = window.decodeURIComponent(data);\n        if (isBase64) {\n            data = window.atob(data);\n        }\n        try {\n            const buffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(buffer);\n            for (var i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n            }\n            window.setTimeout(function () {\n                ok(buffer);\n            }, 0);\n        } catch (error) {\n            window.setTimeout(function () {\n                err(error);\n            }, 0);\n        }\n    } else {\n        const request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onreadystatechange = function () {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    ok(request.response);\n                } else {\n                    err('loadArrayBuffer error : ' + request.response);\n                }\n            }\n        };\n        request.send(null);\n    }\n}\n\n/**\n Tests if the given object is an array\n @private\n */\nfunction isArray(value) {\n    return value && !(value.propertyIsEnumerable('length')) && typeof value === 'object' && typeof value.length === 'number';\n}\n\n/**\n Tests if the given value is a string\n @param value\n @returns {boolean}\n @private\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\n/**\n Tests if the given value is a number\n @param value\n @returns {boolean}\n @private\n */\nfunction isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n/**\n Tests if the given value is an ID\n @param value\n @returns {boolean}\n @private\n */\nfunction isID(value) {\n    return utils.isString(value) || utils.isNumeric(value);\n}\n\n/**\n Tests if the given components are the same, where the components can be either IDs or instances.\n @param c1\n @param c2\n @returns {boolean}\n @private\n */\nfunction isSameComponent(c1, c2) {\n    if (!c1 || !c2) {\n        return false;\n    }\n    const id1 = (utils.isNumeric(c1) || utils.isString(c1)) ? `${c1}` : c1.id;\n    const id2 = (utils.isNumeric(c2) || utils.isString(c2)) ? `${c2}` : c2.id;\n    return id1 === id2;\n}\n\n/**\n Tests if the given value is a function\n @param value\n @returns {boolean}\n @private\n */\nfunction isFunction(value) {\n    return (typeof value === \"function\");\n}\n\n/**\n Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.\n @param value\n @returns {boolean}\n @private\n */\nfunction isObject(value) {\n    const objectConstructor = {}.constructor;\n    return (!!value && value.constructor === objectConstructor);\n}\n\n/** Returns a shallow copy\n */\nfunction copy(o) {\n    return utils.apply(o, {});\n}\n\n/** Add properties of o to o2, overwriting them on o2 if already there\n */\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n Add non-null/defined properties of o to o2\n @private\n */\nfunction apply2(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o[name] !== undefined && o[name] !== null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Add properties of o to o2 where undefined or null on o2\n @private\n */\nfunction applyIf(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o2[name] === undefined || o2[name] === null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Returns true if the given map is empty.\n @param obj\n @returns {boolean}\n @private\n */\nfunction isEmptyObject(obj) {\n    for (const name in obj) {\n        if (obj.hasOwnProperty(name)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\n This is useful for logging IDs.\n\n @param {Number| String} id The ID\n @returns {String}\n @private\n */\nfunction inQuotes(id) {\n    return utils.isNumeric(id) ? (`${id}`) : (`'${id}'`);\n}\n\n/**\n Returns the concatenation of two typed arrays.\n @param a\n @param b\n @returns {*|a}\n @private\n */\nfunction concat(a, b) {\n    const c = new a.constructor(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n}\n\nfunction flattenParentChildHierarchy(root) {\n    var list = [];\n\n    function visit(node) {\n        node.id = node.uuid;\n        delete node.oid;\n        list.push(node);\n        var children = node.children;\n\n        if (children) {\n            for (var i = 0, len = children.length; i < len; i++) {\n                const child = children[i];\n                child.parent = node.id;\n                visit(children[i]);\n            }\n        }\n        node.children = [];\n    }\n\n    visit(root);\n    return list;\n}\n\n/**\n * @private\n */\nconst utils = {\n    xmlToJson: xmlToJson,\n    clone: clone,\n    compressGuid: compressGuid,\n    findNodeOfType: findNodeOfType,\n    timeout: timeout,\n    httpRequest: httpRequest,\n    loadJSON: loadJSON,\n    loadArraybuffer: loadArraybuffer,\n    queryString: queryString,\n    isArray: isArray,\n    isString: isString,\n    isNumeric: isNumeric,\n    isID: isID,\n    isSameComponent: isSameComponent,\n    isFunction: isFunction,\n    isObject: isObject,\n    copy: copy,\n    apply: apply,\n    apply2: apply2,\n    applyIf: applyIf,\n    isEmptyObject: isEmptyObject,\n    inQuotes: inQuotes,\n    concat: concat,\n    flattenParentChildHierarchy: flattenParentChildHierarchy\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\n");

/***/ })

}]);