(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[4],{

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js ***!
  \***********************************************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n\n\n\n\n/**\n * @desc Base class for all xeokit components.\n *\n * ## Component IDs\n *\n * Every Component has an ID that's unique within the parent {@link Scene}. xeokit generates\n * the IDs automatically by default, however you can also specify them yourself. In the example below, we're creating a\n * scene comprised of {@link Scene}, {@link Material}, {@link ReadableGeometry} and\n * {@link Mesh} components, while letting xeokit generate its own ID for\n * the {@link ReadableGeometry}:\n *\n *````JavaScript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {buildTorusGeometry} from \"../src/scene/geometry/builders/buildTorusGeometry.js\";\n * import {ReadableGeometry} from \"../src/scene/geometry/ReadableGeometry.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {Texture} from \"../src/scene/materials/Texture.js\";\n * import {Fresnel} from \"../src/scene/materials/Fresnel.js\";\n *\n * const viewer = new Viewer({\n *        canvasId: \"myCanvas\"\n *    });\n *\n * viewer.scene.camera.eye = [0, 0, 5];\n * viewer.scene.camera.look = [0, 0, 0];\n * viewer.scene.camera.up = [0, 1, 0];\n *\n * new Mesh(viewer.scene, {\n *      geometry: new ReadableGeometry(viewer.scene, buildTorusGeometry({\n *          center: [0, 0, 0],\n *          radius: 1.5,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(viewer.scene, {\n *          id: \"myMaterial\",\n *          ambient: [0.9, 0.3, 0.9],\n *          shininess: 30,\n *          diffuseMap: new Texture(viewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          }),\n *          specularFresnel: new Fresnel(viewer.scene, {\n *              leftColor: [1.0, 1.0, 1.0],\n *              rightColor: [0.0, 0.0, 0.0],\n *              power: 4\n *          })\n *     })\n * });\n *````\n *\n * We can then find those components like this:\n *\n * ````javascript\n * // Find the Material\n * var material = viewer.scene.components[\"myMaterial\"];\n *\n * // Find all PhongMaterials in the Scene\n * var phongMaterials = viewer.scene.types[\"PhongMaterial\"];\n *\n * // Find our Material within the PhongMaterials\n * var materialAgain = phongMaterials[\"myMaterial\"];\n * ````\n *\n * ## Restriction on IDs\n *\n * Auto-generated IDs are of the form ````\"__0\"````, ````\"__1\"````, ````\"__2\"```` ... and so on.\n *\n * Scene maintains a map of these IDs, along with a counter that it increments each time it generates a new ID.\n *\n * If Scene has created the IDs listed above, and we then destroy the ````Component```` with ID ````\"__1\"````,\n * Scene will mark that ID as available, and will reuse it for the next default ID.\n *\n * Therefore, two restrictions your on IDs:\n *\n * * don't use IDs that begin with two underscores, and\n * * don't reuse auto-generated IDs of destroyed Components.\n *\n * ## Logging\n *\n * Components have methods to log ID-prefixed messages to the JavaScript console:\n *\n * ````javascript\n * material.log(\"Everything is fine, situation normal.\");\n * material.warn(\"Wait, whats that red light?\");\n * material.error(\"Aw, snap!\");\n * ````\n *\n * The logged messages will look like this in the console:\n *\n * ````text\n * [LOG]   myMaterial: Everything is fine, situation normal.\n * [WARN]  myMaterial: Wait, whats that red light..\n * [ERROR] myMaterial: Aw, snap!\n * ````\n *\n * ## Destruction\n *\n * Get notification of destruction of Components:\n *\n * ````javascript\n * material.once(\"destroyed\", function() {\n *     this.log(\"Component was destroyed: \" + this.id);\n * });\n * ````\n *\n * Or get notification of destruction of any Component within its {@link Scene}:\n *\n * ````javascript\n * scene.on(\"componentDestroyed\", function(component) {\n *     this.log(\"Component was destroyed: \" + component.id);\n * });\n * ````\n *\n * Then destroy a component like this:\n *\n * ````javascript\n * material.destroy();\n * ````\n */\nclass Component {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Component\";\n    }\n\n    /**\n     * @private\n     */\n    get isComponent() {\n        return true;\n    }\n\n    constructor(owner = null, cfg = {}) {\n\n        /**\n         * The parent {@link Scene} that contains this Component.\n         *\n         * @property scene\n         * @type {Scene}\n         * @final\n         */\n        this.scene = null;\n\n        if (this.type === \"Scene\") {\n            this.scene = this;\n            /**\n             * The viewer that contains this Scene.\n             * @property viewer\n             * @type {Viewer}\n             */\n            this.viewer = cfg.viewer;\n        } else {\n            if (owner.type === \"Scene\") {\n                this.scene = owner;\n            } else if (owner instanceof Component) {\n                this.scene = owner.scene;\n            } else {\n                throw \"Invalid param: owner must be a Component\"\n            }\n            this._owner = owner;\n            this._renderer = this.scene._renderer;\n        }\n\n        this._dontClear = !!cfg.dontClear; // Prevent Scene#clear from destroying this component\n\n        this._renderer = this.scene._renderer;\n\n        /**\n         Arbitrary, user-defined metadata on this component.\n\n         @property metadata\n         @type Object\n         */\n        this.meta = cfg.meta || {};\n\n\n        /**\n         * ID of this Component, unique within the {@link Scene}.\n         *\n         * Components are mapped by this ID in {@link Scene#components}.\n         *\n         * @property id\n         * @type {String|Number}\n         */\n        this.id = cfg.id; // Auto-generated by Scene by default\n\n        /**\n         True as soon as this Component has been destroyed\n\n         @property destroyed\n         @type {Boolean}\n         */\n        this.destroyed = false;\n\n        this._attached = {}; // Attached components with names.\n        this._attachments = null; // Attached components keyed to IDs - lazy-instantiated\n        this._subIdMap = null; // Subscription subId pool\n        this._subIdEvents = null; // Subscription subIds mapped to event names\n        this._eventSubs = null; // Event names mapped to subscribers\n        this._eventSubsNum = null;\n        this._events = null; // Maps names to events\n        this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events\n        this._ownedComponents = null; // // Components created with #create - lazy-instantiated\n\n        if (this !== this.scene) { // Don't add scene to itself\n            this.scene._addComponent(this); // Assigns this component an automatic ID if not yet assigned\n        }\n\n        this._updateScheduled = false; // True when #_update will be called on next tick\n\n        if (owner) {\n            owner._own(this);\n        }\n    }\n\n    // /**\n    //  * Unique ID for this Component within its {@link Scene}.\n    //  *\n    //  * @property\n    //  * @type {String}\n    //  */\n    // get id() {\n    //     return this._id;\n    // }\n\n    /**\n     Indicates that we need to redraw the scene.\n\n     This is called by certain subclasses after they have made some sort of state update that requires the\n     renderer to perform a redraw.\n\n     For example: a {@link Mesh} calls this on itself whenever you update its\n     {@link Mesh#layer} property, which manually controls its render order in\n     relation to other Meshes.\n\n     If this component has a ````castsShadow```` property that's set ````true````, then this will also indicate\n     that the renderer needs to redraw shadow map associated with this component. Components like\n     {@link DirLight} have that property set when they produce light that creates shadows, while\n     components like {@link Mesh\"}}layer{{/crossLink}} have that property set when they cast shadows.\n\n     @protected\n     */\n    glRedraw() {\n        this._renderer.imageDirty();\n        if (this.castsShadow) { // Light source or object\n            this._renderer.shadowsDirty();\n        }\n    }\n\n    /**\n     Indicates that we need to re-sort the renderer's state-ordered drawables list.\n\n     For efficiency, the renderer keeps its list of drawables ordered so that runs of the same state updates can be\n     combined.  This method is called by certain subclasses after they have made some sort of state update that would\n     require re-ordering of the drawables list.\n\n     For example: a {@link DirLight} calls this on itself whenever you update {@link DirLight#dir}.\n\n     @protected\n     */\n    glResort() {\n        this._renderer.needStateSort();\n    }\n\n    /**\n     * The {@link Component} that owns the lifecycle of this Component, if any.\n     *\n     * When that component is destroyed, this component will be automatically destroyed also.\n     *\n     * Will be null if this Component has no owner.\n     *\n     * @property owner\n     * @type {Component}\n     */\n    get owner() {\n        return this._owner;\n    }\n\n    /**\n     * Tests if this component is of the given type, or is a subclass of the given type.\n     * @type {Boolean}\n     */\n    isType(type) {\n        return this.type === type;\n    }\n\n    /**\n     * Fires an event on this component.\n     *\n     * Notifies existing subscribers to the event, optionally retains the event to give to\n     * any subsequent notifications on the event as they are made.\n     *\n     * @param {String} event The event type name\n     * @param {Object} value The event parameters\n     * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers\n     */\n    fire(event, value, forget) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n            this._eventSubsNum = {};\n        }\n        if (forget !== true) {\n            this._events[event] = value || true; // Save notification\n        }\n        const subs = this._eventSubs[event];\n        let sub;\n        if (subs) { // Notify subscriptions\n            for (const subId in subs) {\n                if (subs.hasOwnProperty(subId)) {\n                    sub = subs[subId];\n                    this._eventCallDepth++;\n                    if (this._eventCallDepth < 300) {\n                        sub.callback.call(sub.scope, value);\n                    } else {\n                        this.error(\"fire: potential stack overflow from recursive event '\" + event + \"' - dropping this event\");\n                    }\n                    this._eventCallDepth--;\n                }\n            }\n        }\n    }\n\n    /**\n     * Subscribes to an event on this component.\n     *\n     * The callback is be called with this component as scope.\n     *\n     * @param {String} event The event\n     * @param {Function} callback Called fired on the event\n     * @param {Object} [scope=this] Scope for the callback\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n     */\n    on(event, callback, scope) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._subIdMap) {\n            this._subIdMap = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_2__[\"Map\"](); // Subscription subId pool\n        }\n        if (!this._subIdEvents) {\n            this._subIdEvents = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        if (!this._eventSubsNum) {\n            this._eventSubsNum = {};\n        }\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = {};\n            this._eventSubs[event] = subs;\n            this._eventSubsNum[event] = 1;\n        } else {\n            this._eventSubsNum[event]++;\n        }\n        const subId = this._subIdMap.addItem(); // Create unique subId\n        subs[subId] = {\n            callback: callback,\n            scope: scope || this\n        };\n        this._subIdEvents[subId] = event;\n        const value = this._events[event];\n        if (value !== undefined) { // A publication exists, notify callback immediately\n            callback.call(scope || this, value);\n        }\n        return subId;\n    }\n\n    /**\n     * Cancels an event subscription that was previously made with {@link Component#on} or {@link Component#once}.\n     *\n     * @param {String} subId Subscription ID\n     */\n    off(subId) {\n        if (subId === undefined || subId === null) {\n            return;\n        }\n        if (!this._subIdEvents) {\n            return;\n        }\n        const event = this._subIdEvents[subId];\n        if (event) {\n            delete this._subIdEvents[subId];\n            const subs = this._eventSubs[event];\n            if (subs) {\n                delete subs[subId];\n                this._eventSubsNum[event]--;\n            }\n            this._subIdMap.removeItem(subId); // Release subId\n        }\n    }\n\n    /**\n     * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is subIdd.\n     *\n     * This is equivalent to calling {@link Component#on}, and then calling {@link Component#off} inside the callback function.\n     *\n     * @param {String} event Data event to listen to\n     * @param {Function} callback Called when fresh data is available at the event\n     * @param {Object} [scope=this] Scope for the callback\n     */\n    once(event, callback, scope) {\n        const self = this;\n        const subId = this.on(event,\n            function (value) {\n                self.off(subId);\n                callback.call(scope || this, value);\n            },\n            scope);\n    }\n\n    /**\n     * Returns true if there are any subscribers to the given event on this component.\n     *\n     * @param {String} event The event\n     * @return {Boolean} True if there are any subscribers to the given event on this component.\n     */\n    hasSubs(event) {\n        return (this._eventSubsNum && (this._eventSubsNum[event] > 0));\n    }\n\n    /**\n     * Logs a console debugging message for this component.\n     *\n     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * Also fires the message as a \"log\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    log(message) {\n        message = \"[LOG]\" + this._message(message);\n        window.console.log(message);\n        this.scene.fire(\"log\", message);\n    }\n\n    _message(message) {\n        return \" [\" + this.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(this.id) + \"]: \" + message;\n    }\n\n    /**\n     * Logs a warning for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as a \"warn\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    warn(message) {\n        message = \"[WARN]\" + this._message(message);\n        window.console.warn(message);\n        this.scene.fire(\"warn\", message);\n    }\n\n    /**\n     * Logs an error for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as an \"error\" event on the parent {@link Scene}.\n     *\n     * @param {String} message The message to log\n     */\n    error(message) {\n        message = \"[ERROR]\" + this._message(message);\n        window.console.error(message);\n        this.scene.fire(\"error\", message);\n    }\n\n    /**\n     * Adds a child component to this.\n     *\n     * When component not given, attaches the scene's default instance for the given name (if any).\n     * Publishes the new child component on this component, keyed to the given name.\n     *\n     * @param {*} params\n     * @param {String} params.name component name\n     * @param {Component} [params.component] The component\n     * @param {String} [params.type] Optional expected type of base type of the child; when supplied, will\n     * cause an exception if the given child is not the same type or a subtype of this.\n     * @param {Boolean} [params.sceneDefault=false]\n     * @param {Boolean} [params.sceneSingleton=false]\n     * @param {Function} [params.onAttached] Optional callback called when component attached\n     * @param {Function} [params.onAttached.callback] Callback function\n     * @param {Function} [params.onAttached.scope] Optional scope for callback\n     * @param {Function} [params.onDetached] Optional callback called when component is detached\n     * @param {Function} [params.onDetached.callback] Callback function\n     * @param {Function} [params.onDetached.scope] Optional scope for callback\n     * @param {{String:Function}} [params.on] Callbacks to subscribe to properties on component\n     * @param {Boolean} [params.recompiles=true] When true, fires \"dirty\" events on this component\n     * @private\n     */\n    _attach(params) {\n\n        const name = params.name;\n\n        if (!name) {\n            this.error(\"Component 'name' expected\");\n            return;\n        }\n\n        let component = params.component;\n        const sceneDefault = params.sceneDefault;\n        const sceneSingleton = params.sceneSingleton;\n        const type = params.type;\n        const on = params.on;\n        const recompiles = params.recompiles !== false;\n\n        // True when child given as config object, where parent manages its instantiation and destruction\n        let managingLifecycle = false;\n\n        if (component) {\n\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isNumeric(component) || _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isString(component)) {\n\n                // Component ID given\n                // Both numeric and string IDs are supported\n\n                const id = component;\n\n                component = this.scene.components[id];\n\n                if (!component) {\n\n                    // Quote string IDs in errors\n\n                    this.error(\"Component not found: \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(id));\n                    return;\n                }\n            }\n        }\n\n        if (!component) {\n\n            if (sceneSingleton === true) {\n\n                // Using the first instance of the component type we find\n\n                const instances = this.scene.types[type];\n                for (const id2 in instances) {\n                    if (instances.hasOwnProperty) {\n                        component = instances[id2];\n                        break;\n                    }\n                }\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n\n            } else if (sceneDefault === true) {\n\n                // Using a default scene component\n\n                component = this.scene[name];\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n            }\n        }\n\n        if (component) {\n\n            if (component.scene.id !== this.scene.id) {\n                this.error(\"Not in same scene: \" + component.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(component.id));\n                return;\n            }\n\n            if (type) {\n\n                if (!component.isType(type)) {\n                    this.error(\"Expected a \" + type + \" type or subtype: \" + component.type + \" \" + _utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].inQuotes(component.id));\n                    return;\n                }\n            }\n        }\n\n        if (!this._attachments) {\n            this._attachments = {};\n        }\n\n        const oldComponent = this._attached[name];\n        let subs;\n        let i;\n        let len;\n\n        if (oldComponent) {\n\n            if (component && oldComponent.id === component.id) {\n\n                // Reject attempt to reattach same component\n                return;\n            }\n\n            const oldAttachment = this._attachments[oldComponent.id];\n\n            // Unsubscribe from events on old component\n\n            subs = oldAttachment.subs;\n\n            for (i = 0, len = subs.length; i < len; i++) {\n                oldComponent.off(subs[i]);\n            }\n\n            delete this._attached[name];\n            delete this._attachments[oldComponent.id];\n\n            const onDetached = oldAttachment.params.onDetached;\n            if (onDetached) {\n                if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(onDetached)) {\n                    onDetached(oldComponent);\n                } else {\n                    onDetached.scope ? onDetached.callback.call(onDetached.scope, oldComponent) : onDetached.callback(oldComponent);\n                }\n            }\n\n            if (oldAttachment.managingLifecycle) {\n\n                // Note that we just unsubscribed from all events fired by the child\n                // component, so destroying it won't fire events back at us now.\n\n                oldComponent.destroy();\n            }\n        }\n\n        if (component) {\n\n            // Set and publish the new component on this component\n\n            const attachment = {\n                params: params,\n                component: component,\n                subs: [],\n                managingLifecycle: managingLifecycle\n            };\n\n            attachment.subs.push(\n                component.once(\"destroyed\",\n                    function () {\n                        attachment.params.component = null;\n                        this._attach(attachment.params);\n                    },\n                    this));\n\n            if (recompiles) {\n                attachment.subs.push(\n                    component.on(\"dirty\",\n                        function () {\n                            this.fire(\"dirty\", this);\n                        },\n                        this));\n            }\n\n            this._attached[name] = component;\n            this._attachments[component.id] = attachment;\n\n            // Bind destruct listener to new component to remove it\n            // from this component when destroyed\n\n            const onAttached = params.onAttached;\n            if (onAttached) {\n                if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(onAttached)) {\n                    onAttached(component);\n                } else {\n                    onAttached.scope ? onAttached.callback.call(onAttached.scope, component) : onAttached.callback(component);\n                }\n            }\n\n            if (on) {\n\n                let event;\n                let subIdr;\n                let callback;\n                let scope;\n\n                for (event in on) {\n                    if (on.hasOwnProperty(event)) {\n\n                        subIdr = on[event];\n\n                        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isFunction(subIdr)) {\n                            callback = subIdr;\n                            scope = null;\n                        } else {\n                            callback = subIdr.callback;\n                            scope = subIdr.scope;\n                        }\n\n                        if (!callback) {\n                            continue;\n                        }\n\n                        attachment.subs.push(component.on(event, callback, scope));\n                    }\n                }\n            }\n        }\n\n        if (recompiles) {\n            this.fire(\"dirty\", this); // FIXME: May trigger spurous mesh recompilations unless able to limit with param?\n        }\n\n        this.fire(name, component); // Component can be null\n\n        return component;\n    }\n\n    _checkComponent(expectedType, component) {\n        if (!component.isComponent) {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (expectedType !== component.type) {\n            this.error(\"Expected a \" + expectedType + \" Component\");\n            return;\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        return component;\n    }\n\n    _checkComponent2(expectedTypes, component) {\n        if (!component.isComponent) {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_1__[\"utils\"].isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        for (var i = 0, len = expectedTypes.length; i < len; i++) {\n            if (expectedTypes[i] === component.type) {\n                return component;\n            }\n        }\n        this.error(\"Expected component types: \" + expectedTypes);\n        return null;\n    }\n\n    _own(component) {\n        if (!this._ownedComponents) {\n            this._ownedComponents = {};\n        }\n        if (!this._ownedComponents[component.id]) {\n            this._ownedComponents[component.id] = component;\n        }\n        component.once(\"destroyed\", () => {\n            delete this._ownedComponents[component.id];\n        }, this);\n    }\n\n    /**\n     * Protected method, called by sub-classes to queue a call to _update().\n     * @protected\n     * @param {Number} [priority=1]\n     */\n    _needUpdate(priority) {\n        if (!this._updateScheduled) {\n            this._updateScheduled = true;\n            if (priority === 0) {\n                this._doUpdate();\n            } else {\n                _core_js__WEBPACK_IMPORTED_MODULE_0__[\"core\"].scheduleTask(this._doUpdate, this);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    _doUpdate() {\n        if (this._updateScheduled) {\n            this._updateScheduled = false;\n            if (this._update) {\n                this._update();\n            }\n        }\n    }\n\n    /**\n     * Protected virtual template method, optionally implemented\n     * by sub-classes to perform a scheduled task.\n     *\n     * @protected\n     */\n    _update() {\n    }\n\n    /**\n     * Destroys all {@link Component}s that are owned by this. These are Components that were instantiated with\n     * this Component as their first constructor argument.\n     */\n    clear() {\n        if (this._ownedComponents) {\n            for (var id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    const component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n    }\n\n    /**\n     * Destroys this component.\n     */\n    destroy() {\n\n        if (this.destroyed) {\n            return;\n        }\n\n        /**\n         * Fired when this Component is destroyed.\n         * @event destroyed\n         */\n        this.fire(\"destroyed\", this.destroyed = true); // Must fire before we blow away subscription maps, below\n\n        // Unsubscribe from child components and destroy then\n\n        let id;\n        let attachment;\n        let component;\n        let subs;\n        let i;\n        let len;\n\n        if (this._attachments) {\n            for (id in this._attachments) {\n                if (this._attachments.hasOwnProperty(id)) {\n                    attachment = this._attachments[id];\n                    component = attachment.component;\n                    subs = attachment.subs;\n                    for (i = 0, len = subs.length; i < len; i++) {\n                        component.off(subs[i]);\n                    }\n                    if (attachment.managingLifecycle) {\n                        component.destroy();\n                    }\n                }\n            }\n        }\n\n        if (this._ownedComponents) {\n            for (id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n\n        this.scene._removeComponent(this);\n\n        // Memory leak avoidance\n        this._attached = {};\n        this._attachments = null;\n        this._subIdMap = null;\n        this._subIdEvents = null;\n        this._eventSubs = null;\n        this._events = null;\n        this._eventCallDepth = 0;\n        this._ownedComponents = null;\n        this._updateScheduled = false;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js":
/*!******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js ***!
  \******************************************************************/
/*! exports provided: core */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"core\", function() { return core; });\n/* harmony import */ var _utils_Queue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Queue.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js\");\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\");\n\n\n\n\n\nconst scenesRenderInfo = {}; // Used for throttling FPS for each Scene\nconst sceneIDMap = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_1__[\"Map\"](); // Ensures unique scene IDs\nconst taskQueue = new _utils_Queue_js__WEBPACK_IMPORTED_MODULE_0__[\"Queue\"](); // Task queue, which is pumped on each frame; tasks are pushed to it with calls to xeokit.schedule\nconst tickEvent = {sceneId: null, time: null, startTime: null, prevTime: null, deltaTime: null};\nconst taskBudget = 10; // Millisecs we're allowed to spend on tasks in each frame\nconst fpsSamples = [];\nconst numFPSSamples = 30;\n\nlet defaultScene = null;// Default singleton Scene, lazy-initialized in getter\nlet lastTime = 0;\nlet elapsedTime;\nlet totalFPS = 0;\n\n/**\n * @private\n */\nfunction Core() {\n\n    /**\n     Semantic version number. The value for this is set by an expression that's concatenated to\n     the end of the built binary by the xeokit build script.\n     @property version\n     @namespace xeokit\n     @type {String}\n     */\n    this.version = \"1.0.0\";\n\n    /**\n     Existing {@link Scene}s , mapped to their IDs\n     @property scenes\n     @namespace xeokit\n     @type {{Scene}}\n     */\n    this.scenes = {};\n\n    this._superTypes = {}; // For each component type, a list of its supertypes, ordered upwards in the hierarchy.\n\n    /**\n     * Registers a scene on xeokit.\n     * This is called within the xeokit.Scene constructor.\n     * @private\n     */\n    this._addScene = function (scene) {\n        if (scene.id) { // User-supplied ID\n            if (core.scenes[scene.id]) {\n                console.error(`[ERROR] Scene ${_utils_js__WEBPACK_IMPORTED_MODULE_3__[\"utils\"].inQuotes(scene.id)} already exists`);\n                return;\n            }\n        } else { // Auto-generated ID\n            scene.id = sceneIDMap.addItem({});\n        }\n        core.scenes[scene.id] = scene;\n        const ticksPerOcclusionTest = scene.ticksPerOcclusionTest;\n        const ticksPerRender = scene.ticksPerRender;\n        scenesRenderInfo[scene.id] = {\n            ticksPerOcclusionTest: ticksPerOcclusionTest,\n            ticksPerRender: ticksPerRender,\n            renderCountdown: ticksPerRender\n        };\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].components.scenes++;\n        scene.once(\"destroyed\", () => { // Unregister destroyed scenes\n            sceneIDMap.removeItem(scene.id);\n            delete core.scenes[scene.id];\n            delete scenesRenderInfo[scene.id];\n            _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].components.scenes--;\n        });\n    };\n\n    /**\n     * @private\n     */\n    this.clear = function () {\n        let scene;\n        for (const id in core.scenes) {\n            if (core.scenes.hasOwnProperty(id)) {\n                scene = core.scenes[id];\n                // Only clear the default Scene\n                // but destroy all the others\n                if (id === \"default.scene\") {\n                    scene.clear();\n                } else {\n                    scene.destroy();\n                    delete core.scenes[scene.id];\n                }\n            }\n        }\n    };\n\n    /**\n     * Schedule a task to run at the next frame.\n     *\n     * Internally, this pushes the task to a FIFO queue. Within each frame interval, xeokit processes the queue\n     * for a certain period of time, popping tasks and running them. After each frame interval, tasks that did not\n     * get a chance to run during the task are left in the queue to be run next time.\n     *\n     * @param {Function} callback Callback that runs the task.\n     * @param {Object} [scope] Scope for the callback.\n     */\n    this.scheduleTask = function (callback, scope) {\n        taskQueue.push(callback);\n        taskQueue.push(scope);\n    };\n\n    this.runTasks = function (until = -1) { // Pops and processes tasks in the queue, until the given number of milliseconds has elapsed.\n        let time = (new Date()).getTime();\n        let callback;\n        let scope;\n        let tasksRun = 0;\n        while (taskQueue.length > 0 && (until < 0 || time < until)) {\n            callback = taskQueue.shift();\n            scope = taskQueue.shift();\n            if (scope) {\n                callback.call(scope);\n            } else {\n                callback();\n            }\n            time = (new Date()).getTime();\n            tasksRun++;\n        }\n        return tasksRun;\n    };\n\n    this.getNumTasks = function () {\n        return taskQueue.length;\n    };\n}\n\n/**\n * @private\n * @type {Core}\n */\nconst core = new Core();\n\n\nconst frame = function () {\n    let time = Date.now();\n    if (lastTime > 0) { // Log FPS stats\n        elapsedTime = time - lastTime;\n        var newFPS = 1000 / elapsedTime; // Moving average of FPS\n        totalFPS += newFPS;\n        fpsSamples.push(newFPS);\n        if (fpsSamples.length >= numFPSSamples) {\n            totalFPS -= fpsSamples.shift();\n        }\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.fps = Math.round(totalFPS / fpsSamples.length);\n    }\n    runTasks(time);\n    fireTickEvents(time);\n    renderScenes();\n    lastTime = time;\n    window.requestAnimationFrame(frame);\n};\n\nfunction runTasks(time) { // Process as many enqueued tasks as we can within the per-frame task budget\n    const tasksRun = core.runTasks(time + taskBudget);\n    const tasksScheduled = core.getNumTasks();\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksRun = tasksRun;\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksScheduled = tasksScheduled;\n    _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].frame.tasksBudget = taskBudget;\n}\n\nfunction fireTickEvents(time) { // Fire tick event on each Scene\n    tickEvent.time = time;\n    for (var id in core.scenes) {\n        if (core.scenes.hasOwnProperty(id)) {\n            var scene = core.scenes[id];\n            tickEvent.sceneId = id;\n            tickEvent.startTime = scene.startTime;\n            tickEvent.deltaTime = tickEvent.prevTime != null ? tickEvent.time - tickEvent.prevTime : 0;\n            /**\n             * Fired on each game loop iteration.\n             *\n             * @event tick\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} startTime The time in seconds since 1970 that this Scene was instantiated.\n             * @param {Number} time The time in seconds since 1970 of this \"tick\" event.\n             * @param {Number} prevTime The time of the previous \"tick\" event from this Scene.\n             * @param {Number} deltaTime The time in seconds since the previous \"tick\" event from this Scene.\n             */\n            scene.fire(\"tick\", tickEvent, true);\n        }\n    }\n    tickEvent.prevTime = time;\n}\n\nfunction renderScenes() {\n    const scenes = core.scenes;\n    const forceRender = false;\n    let scene;\n    let renderInfo;\n    let ticksPerOcclusionTest;\n    let ticksPerRender;\n    let id;\n    for (id in scenes) {\n        if (scenes.hasOwnProperty(id)) {\n\n            scene = scenes[id];\n            renderInfo = scenesRenderInfo[id];\n\n            if (!renderInfo) {\n                renderInfo = scenesRenderInfo[id] = {}; // FIXME\n            }\n\n            ticksPerOcclusionTest = scene.ticksPerOcclusionTest;\n            if (renderInfo.ticksPerOcclusionTest !== ticksPerOcclusionTest) {\n                renderInfo.ticksPerOcclusionTest = ticksPerOcclusionTest;\n                renderInfo.renderCountdown = ticksPerOcclusionTest;\n            }\n            if (--scene.occlusionTestCountdown <= 0) {\n                scene.doOcclusionTest();\n                scene.occlusionTestCountdown = ticksPerOcclusionTest;\n            }\n\n            ticksPerRender = scene.ticksPerRender;\n            if (renderInfo.ticksPerRender !== ticksPerRender) {\n                renderInfo.ticksPerRender = ticksPerRender;\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n            if (--renderInfo.renderCountdown === 0) {\n                scene.render(forceRender);\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n        }\n    }\n}\n\nwindow.requestAnimationFrame(frame);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/core.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js ***!
  \*******************************************************************************************/
/*! exports provided: geometryCompressionUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"geometryCompressionUtils\", function() { return geometryCompressionUtils; });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/**\n * Private geometry compression and decompression utilities.\n */\n\n\n\n/**\n * @private\n * @param array\n * @returns {{min: Float32Array, max: Float32Array}}\n */\nfunction getPositionsBounds(array) {\n    const min = new Float32Array(3);\n    const max = new Float32Array(3);\n    let i, j;\n    for (i = 0; i < 3; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 3) {\n        for (j = 0; j < 3; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\nconst createPositionsDecodeMatrix = (function () {\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    return function (aabb, positionsDecodeMatrix) {\n        positionsDecodeMatrix = positionsDecodeMatrix || _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        const maxInt = 65535;\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat4v(aabb, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(translate, scale, positionsDecodeMatrix);\n        return positionsDecodeMatrix;\n    };\n})();\n\n/**\n * @private\n */\nvar compressPositions = (function () { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        var multiplier = new Float32Array([\n            max[0] !== min[0] ? 65535 / (max[0] - min[0]) : 0,\n            max[1] !== min[1] ? 65535 / (max[1] - min[1]) : 0,\n            max[2] !== min[2] ? 65535 / (max[2] - min[2]) : 0\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 3) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n            quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n        }\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat4v(min, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat4v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535,\n            (max[2] - min[2]) / 65535\n        ], scale);\n        const decodeMat = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(translate, scale, _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4());\n        return {\n            quantized: quantized,\n            decodeMatrix: decodeMat\n        };\n    };\n})();\n\nfunction decompressPosition(position, decodeMatrix, dest) {\n    dest[0] = position[0] * decodeMatrix[0] + decodeMatrix[12];\n    dest[1] = position[1] * decodeMatrix[5] + decodeMatrix[13];\n    dest[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    return dest;\n}\n\nfunction decompressAABB(aabb, decodeMatrix, dest=aabb) {\n    dest[0] = aabb[0] * decodeMatrix[0] + decodeMatrix[12];\n    dest[1] = aabb[1] * decodeMatrix[5] + decodeMatrix[13];\n    dest[2] = aabb[2] * decodeMatrix[10] + decodeMatrix[14];\n    dest[3] = aabb[3] * decodeMatrix[0] + decodeMatrix[12];\n    dest[4] = aabb[4] * decodeMatrix[5] + decodeMatrix[13];\n    dest[5] = aabb[5] * decodeMatrix[10] + decodeMatrix[14];\n    return dest;\n}\n\n/**\n * @private\n */\nfunction decompressPositions(positions, decodeMatrix, dest = new Float32Array(positions.length)) {\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        dest[i + 0] = positions[i + 0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[i + 1] = positions[i + 1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[i + 2] = positions[i + 2] * decodeMatrix[10] + decodeMatrix[14];\n    }\n    return dest;\n}\n\n//--------------- UVs --------------------------------------------------------------------------------------------------\n\n/**\n * @private\n * @param array\n * @returns {{min: Float32Array, max: Float32Array}}\n */\nfunction getUVBounds(array) {\n    const min = new Float32Array(2);\n    const max = new Float32Array(2);\n    let i, j;\n    for (i = 0; i < 2; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += 2) {\n        for (j = 0; j < 2; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\n/**\n * @private\n */\nvar compressUVs = (function () {\n    const translate = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat3();\n    const scale = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat3();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 2) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        }\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3(translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].translationMat3v(min, translate);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3(scale);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].scalingMat3v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535\n        ], scale);\n        const decodeMat = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat3(translate, scale, _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat3());\n        return {\n            quantized: quantized,\n            decodeMatrix: decodeMat\n        };\n    };\n})();\n\n\n//--------------- Normals ----------------------------------------------------------------------------------------------\n\n/**\n * @private\n */\nfunction compressNormals(array) { // http://jcgt.org/published/0003/02/01/\n\n    // Note: three elements for each encoded normal, in which the last element in each triplet is redundant.\n    // This is to work around a mysterious WebGL issue where 2-element normals just wouldn't work in the shader :/\n\n    const encoded = new Int8Array(array.length);\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < array.length; i += 3) {\n        // Test various combinations of ceil and floor\n        // to minimize rounding errors\n        best = oct = octEncodeVec3(array, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(array, i, dec);\n        oct = octEncodeVec3(array, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        encoded[i] = best[0];\n        encoded[i + 1] = best[1];\n    }\n    return encoded;\n}\n\n/**\n * @private\n */\nfunction octEncodeVec3(array, i, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\n/**\n * Decode an oct-encoded normal\n */\nfunction octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n * @private\n */\nfunction dot(array, i, vec3) {\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\n/**\n * @private\n */\nfunction decompressUV(uv, decodeMatrix, dest) {\n    dest[0] = uv[0] * decodeMatrix[0] + decodeMatrix[6];\n    dest[1] = uv[1] * decodeMatrix[4] + decodeMatrix[7];\n}\n\n/**\n * @private\n */\nfunction decompressUVs(uvs, decodeMatrix, dest = new Float32Array(uvs.length)) {\n    for (let i = 0, len = uvs.length; i < len; i += 3) {\n        dest[i + 0] = uvs[i + 0] * decodeMatrix[0] + decodeMatrix[6];\n        dest[i + 1] = uvs[i + 1] * decodeMatrix[4] + decodeMatrix[7];\n    }\n    return dest;\n}\n\n/**\n * @private\n */\nfunction decompressNormal(oct, result) {\n    let x = oct[0];\n    let y = oct[1];\n    x = (2 * x + 1) / 255;\n    y = (2 * y + 1) / 255;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    result[0] = x / length;\n    result[1] = y / length;\n    result[2] = z / length;\n    return result;\n}\n\n/**\n * @private\n */\nfunction decompressNormals(octs, result) {\n    for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n        let x = octs[i + 0];\n        let y = octs[i + 1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[j + 0] = x / length;\n        result[j + 1] = y / length;\n        result[j + 2] = z / length;\n        j += 3;\n    }\n    return result;\n}\n\n/**\n * @private\n */\nconst geometryCompressionUtils = {\n\n    getPositionsBounds: getPositionsBounds,\n    createPositionsDecodeMatrix: createPositionsDecodeMatrix,\n    compressPositions: compressPositions,\n    decompressPositions: decompressPositions,\n    decompressPosition: decompressPosition,\n    decompressAABB: decompressAABB,\n\n    getUVBounds: getUVBounds,\n    compressUVs: compressUVs,\n    decompressUVs: decompressUVs,\n    decompressUV: decompressUV,\n\n    compressNormals: compressNormals,\n    decompressNormals: decompressNormals,\n    decompressNormal: decompressNormal\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js ***!
  \***********************************************************************/
/*! exports provided: math */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"math\", function() { return math; });\n// Some temporary vars to help avoid garbage collection\n\nconst doublePrecision = true;\nconst FloatArrayType = doublePrecision ? Float64Array : Float32Array;\n\nconst tempMat1 = new FloatArrayType(16);\nconst tempMat2 = new FloatArrayType(16);\nconst tempVec4 = new FloatArrayType(4);\n\n\n/**\n * @private\n */\nconst math = {\n\n    MIN_DOUBLE: -Number.MAX_SAFE_INTEGER,\n    MAX_DOUBLE: Number.MAX_SAFE_INTEGER,\n\n    /**\n     * The number of radiians in a degree (0.0174532925).\n     * @property DEGTORAD\n     * @type {Number}\n     */\n    DEGTORAD: 0.0174532925,\n\n    /**\n     * The number of degrees in a radian.\n     * @property RADTODEG\n     * @type {Number}\n     */\n    RADTODEG: 57.295779513,\n\n    unglobalizeObjectId(modelId, globalId) {\n        const idx = globalId.indexOf(\"#\");\n        return (idx === modelId.length && globalId.startsWith(modelId)) ? globalId.substring(idx + 1) : globalId;\n    },\n\n    globalizeObjectId(modelId, objectId) {\n        return (modelId + \"#\" + objectId)\n    },\n\n    /**\n     * Returns a new, uninitialized two-element vector.\n     * @method vec2\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec2(values) {\n        return new FloatArrayType(values || 2);\n    },\n\n    /**\n     * Returns a new, uninitialized three-element vector.\n     * @method vec3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec3(values) {\n        return new FloatArrayType(values || 3);\n    },\n\n    /**\n     * Returns a new, uninitialized four-element vector.\n     * @method vec4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec4(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3x3 matrix.\n     * @method mat3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat3(values) {\n        return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a 3x3 matrix to 4x4\n     * @method mat3ToMat4\n     * @param mat3 3x3 matrix.\n     * @param mat4 4x4 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat3ToMat4(mat3, mat4 = new FloatArrayType(16)) {\n        mat4[0] = mat3[0];\n        mat4[1] = mat3[1];\n        mat4[2] = mat3[2];\n        mat4[3] = 0;\n        mat4[4] = mat3[3];\n        mat4[5] = mat3[4];\n        mat4[6] = mat3[5];\n        mat4[7] = 0;\n        mat4[8] = mat3[6];\n        mat4[9] = mat3[7];\n        mat4[10] = mat3[8];\n        mat4[11] = 0;\n        mat4[12] = 0;\n        mat4[13] = 0;\n        mat4[14] = 0;\n        mat4[15] = 1;\n        return mat4;\n    },\n\n    /**\n     * Returns a new, uninitialized 4x4 matrix.\n     * @method mat4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat4(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /**\n     * Converts a 4x4 matrix to 3x3\n     * @method mat4ToMat3\n     * @param mat4 4x4 matrix.\n     * @param mat3 3x3 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat4ToMat3(mat4, mat3) { // TODO\n        //return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a list of double-precision values to a list of high-part floats and a list of low-part floats.\n     * @param doubleVals\n     * @param floatValsHigh\n     * @param floatValsLow\n     */\n    doublesToFloats(doubleVals, floatValsHigh, floatValsLow) {\n        const floatPair = new Float32Array(2);\n        for (let i = 0, len = doubleVals.length; i < len; i++) {\n            math.splitDouble(doubleVals[i], floatPair);\n            floatValsHigh[i] = floatPair[0];\n            floatValsLow[i] = floatPair[1];\n        }\n    },\n\n    /**\n     * Splits a double value into two floats.\n     * @param value\n     * @param floatPair\n     */\n    splitDouble(value, floatPair) {\n        const hi = Float32Array.from([value])[0];\n        const low = value - hi;\n        floatPair[0] = hi;\n        floatPair[1] = low;\n    },\n\n    /**\n     * Returns a new UUID.\n     * @method createUUID\n     * @static\n     * @return string The new UUID\n     */\n    createUUID: ((() => {\n        const self = {};\n        const lut = [];\n        for (let i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n        }\n        return () => {\n            const d0 = Math.random() * 0xffffffff | 0;\n            const d1 = Math.random() * 0xffffffff | 0;\n            const d2 = Math.random() * 0xffffffff | 0;\n            const d3 = Math.random() * 0xffffffff | 0;\n            return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n        };\n    }))(),\n\n    /**\n     * Clamps a value to the given range.\n     * @param {Number} value Value to clamp.\n     * @param {Number} min Lower bound.\n     * @param {Number} max Upper bound.\n     * @returns {Number} Clamped result.\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n\n    /**\n     * Floating-point modulus\n     * @method fmod\n     * @static\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {*}\n     */\n    fmod(a, b) {\n        if (a < b) {\n            console.error(\"math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring\");\n            return a;\n        }\n        while (b <= a) {\n            a -= b;\n        }\n        return a;\n    },\n\n    /**\n     * Returns true if the two 3-element vectors are the same.\n     * @param v1\n     * @param v2\n     * @returns {boolean}\n     */\n    compareVec3(v1, v2) {\n        return (v1[0] === v2[0] && v1[1] === v2[1] && v1[2] === v2[2]);\n    },\n\n    /**\n     * Negates a three-element vector.\n     * @method negateVec3\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec3(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        return dest;\n    },\n\n    /**\n     * Negates a four-element vector.\n     * @method negateVec4\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec4(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        dest[3] = -v[3];\n        return dest;\n    },\n\n    /**\n     * Adds one four-element vector to another.\n     * @method addVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        dest[3] = u[3] + v[3];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a four-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        dest[3] = v[3] + s;\n        return dest;\n    },\n\n    /**\n     * Adds one three-element vector to another.\n     * @method addVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a three-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        return dest;\n    },\n\n    /**\n     * Subtracts one four-element vector from another.\n     * @method subVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        dest[3] = u[3] - v[3];\n        return dest;\n    },\n\n    /**\n     * Subtracts one three-element vector from another.\n     * @method subVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        return dest;\n    },\n\n    /**\n     * Subtracts one two-element vector from another.\n     * @method subVec2\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec2(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        return dest;\n    },\n\n    /**\n     * Get the geometric mean of the vectors.\n     * @method geometricMeanVec2\n     * @static\n     * @param {...Array(Number)} vectors Vec2 to mean\n     * @return {Array(Number)} The geometric mean vec2\n     */\n    geometricMeanVec2(...vectors) {\n        const geometricMean = new FloatArrayType(vectors[0]);\n        for (let i = 1; i < vectors.length; i++) {\n            geometricMean[0] += vectors[i][0];\n            geometricMean[1] += vectors[i][1];\n        }\n        geometricMean[0] /= vectors.length;\n        geometricMean[1] /= vectors.length;\n        return geometricMean;\n    },\n\n    /**\n     * Subtracts a scalar value from each element of a four-element vector.\n     * @method subVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] - s;\n        dest[1] = v[1] - s;\n        dest[2] = v[2] - s;\n        dest[3] = v[3] - s;\n        return dest;\n    },\n\n    /**\n     * Sets each element of a 4-element vector to a scalar value minus the value of that element.\n     * @method subScalarVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subScalarVec4(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s - v[0];\n        dest[1] = s - v[1];\n        dest[2] = s - v[2];\n        dest[3] = s - v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies one three-element vector by another.\n     * @method mulVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    mulVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] * v[0];\n        dest[1] = u[1] * v[1];\n        dest[2] = u[2] * v[2];\n        dest[3] = u[3] * v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a four-element vector by a scalar.\n     * @method mulVec34calar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        dest[3] = v[3] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a three-element vector by a scalar.\n     * @method mulVec3Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a two-element vector by a scalar.\n     * @method mulVec2Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec2Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        return dest;\n    },\n\n    /**\n     * Divides one three-element vector by another.\n     * @method divVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides one four-element vector by another.\n     * @method divVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        dest[3] = u[3] / v[3];\n        return dest;\n    },\n\n    /**\n     * Divides a scalar by a three-element vector, returning a new vector.\n     * @method divScalarVec3\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec3(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides a three-element vector by a scalar.\n     * @method divVec3Scalar\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        return dest;\n    },\n\n    /**\n     * Divides a four-element vector by a scalar.\n     * @method divVec4Scalar\n     * @static\n     * @param v vec4\n     * @param s scalar\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        dest[3] = v[3] / s;\n        return dest;\n    },\n\n\n    /**\n     * Divides a scalar by a four-element vector, returning a new vector.\n     * @method divScalarVec4\n     * @static\n     * @param s scalar\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec4(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        dest[3] = s / v[3];\n        return dest;\n    },\n\n    /**\n     * Returns the dot product of two four-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec4(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);\n    },\n\n    /**\n     * Returns the cross product of two four-element vectors.\n     * @method cross3Vec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec4(u, v) {\n        const u0 = u[0];\n        const u1 = u[1];\n        const u2 = u[2];\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    },\n\n    /**\n     * Returns the cross product of two three-element vectors.\n     * @method cross3Vec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        const x = u[0];\n        const y = u[1];\n        const z = u[2];\n        const x2 = v[0];\n        const y2 = v[1];\n        const z2 = v[2];\n        dest[0] = y * z2 - z * y2;\n        dest[1] = z * x2 - x * z2;\n        dest[2] = x * y2 - y * x2;\n        return dest;\n    },\n\n\n    sqLenVec4(v) { // TODO\n        return math.dotVec4(v, v);\n    },\n\n    /**\n     * Returns the length of a four-element vector.\n     * @method lenVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec4(v) {\n        return Math.sqrt(math.sqLenVec4(v));\n    },\n\n    /**\n     * Returns the dot product of two three-element vectors.\n     * @method dotVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec3(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);\n    },\n\n    /**\n     * Returns the dot product of two two-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec2(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]);\n    },\n\n\n    sqLenVec3(v) {\n        return math.dotVec3(v, v);\n    },\n\n\n    sqLenVec2(v) {\n        return math.dotVec2(v, v);\n    },\n\n    /**\n     * Returns the length of a three-element vector.\n     * @method lenVec3\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec3(v) {\n        return Math.sqrt(math.sqLenVec3(v));\n    },\n\n    distVec3: ((() => {\n        const vec = new FloatArrayType(3);\n        return (v, w) => math.lenVec3(math.subVec3(v, w, vec));\n    }))(),\n\n    /**\n     * Returns the length of a two-element vector.\n     * @method lenVec2\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec2(v) {\n        return Math.sqrt(math.sqLenVec2(v));\n    },\n\n    distVec2: ((() => {\n        const vec = new FloatArrayType(2);\n        return (v, w) => math.lenVec2(math.subVec2(v, w, vec));\n    }))(),\n\n    /**\n     * @method rcpVec3\n     * @static\n     * @param v vec3\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    rcpVec3(v, dest) {\n        return math.divScalarVec3(1.0, v, dest);\n    },\n\n    /**\n     * Normalizes a four-element vector\n     * @method normalizeVec4\n     * @static\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    normalizeVec4(v, dest) {\n        const f = 1.0 / math.lenVec4(v);\n        return math.mulVec4Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a three-element vector\n     * @method normalizeVec4\n     * @static\n     */\n    normalizeVec3(v, dest) {\n        const f = 1.0 / math.lenVec3(v);\n        return math.mulVec3Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a two-element vector\n     * @method normalizeVec2\n     * @static\n     */\n    normalizeVec2(v, dest) {\n        const f = 1.0 / math.lenVec2(v);\n        return math.mulVec2Scalar(v, f, dest);\n    },\n\n    /**\n     * Gets the angle between two vectors\n     * @method angleVec3\n     * @param v\n     * @param w\n     * @returns {number}\n     */\n    angleVec3(v, w) {\n        let theta = math.dotVec3(v, w) / (Math.sqrt(math.sqLenVec3(v) * math.sqLenVec3(w)));\n        theta = theta < -1 ? -1 : (theta > 1 ? 1 : theta);  // Clamp to handle numerical problems\n        return Math.acos(theta);\n    },\n\n    /**\n     * Creates a three-element vector from the rotation part of a sixteen-element matrix.\n     * @param m\n     * @param dest\n     */\n    vec3FromMat4Scale: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (m, dest) => {\n\n            tempVec3[0] = m[0];\n            tempVec3[1] = m[1];\n            tempVec3[2] = m[2];\n\n            dest[0] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[4];\n            tempVec3[1] = m[5];\n            tempVec3[2] = m[6];\n\n            dest[1] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[8];\n            tempVec3[1] = m[9];\n            tempVec3[2] = m[10];\n\n            dest[2] = math.lenVec3(tempVec3);\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Converts an n-element vector to a JSON-serializable\n     * array with values rounded to two decimal places.\n     */\n    vecToArray: ((() => {\n        function trunc(v) {\n            return Math.round(v * 100000) / 100000\n        }\n\n        return v => {\n            v = Array.prototype.slice.call(v);\n            for (let i = 0, len = v.length; i < len; i++) {\n                v[i] = trunc(v[i]);\n            }\n            return v;\n        };\n    }))(),\n\n    /**\n     * Converts a 3-element vector from an array to an object of the form ````{x:999, y:999, z:999}````.\n     * @param arr\n     * @returns {{x: *, y: *, z: *}}\n     */\n    xyzArrayToObject(arr) {\n        return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n    },\n\n    /**\n     * Converts a 3-element vector object of the form ````{x:999, y:999, z:999}```` to an array.\n     * @param xyz\n     * @param  [arry]\n     * @returns {*[]}\n     */\n    xyzObjectToArray(xyz, arry) {\n        arry = arry || new FloatArrayType(3);\n        arry[0] = xyz.x;\n        arry[1] = xyz.y;\n        arry[2] = xyz.z;\n        return arry;\n    },\n\n    /**\n     * Duplicates a 4x4 identity matrix.\n     * @method dupMat4\n     * @static\n     */\n    dupMat4(m) {\n        return m.slice(0, 16);\n    },\n\n    /**\n     * Extracts a 3x3 matrix from a 4x4 matrix.\n     * @method mat4To3\n     * @static\n     */\n    mat4To3(m) {\n        return [\n            m[0], m[1], m[2],\n            m[4], m[5], m[6],\n            m[8], m[9], m[10]\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to the given scalar value.\n     * @method m4s\n     * @static\n     */\n    m4s(s) {\n        return [\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to zero.\n     * @method setMat4ToZeroes\n     * @static\n     */\n    setMat4ToZeroes() {\n        return math.m4s(0.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    setMat4ToOnes() {\n        return math.m4s(1.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    diagonalMat4v(v) {\n        return new FloatArrayType([\n            v[0], 0.0, 0.0, 0.0,\n            0.0, v[1], 0.0, 0.0,\n            0.0, 0.0, v[2], 0.0,\n            0.0, 0.0, 0.0, v[3]\n        ]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given vector.\n     * @method diagonalMat4c\n     * @static\n     */\n    diagonalMat4c(x, y, z, w) {\n        return math.diagonalMat4v([x, y, z, w]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given scalar.\n     * @method diagonalMat4s\n     * @static\n     */\n    diagonalMat4s(s) {\n        return math.diagonalMat4c(s, s, s, s);\n    },\n\n    /**\n     * Returns a 4x4 identity matrix.\n     * @method identityMat4\n     * @static\n     */\n    identityMat4(mat = new FloatArrayType(16)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n        mat[3] = 0.0;\n\n        mat[4] = 0.0;\n        mat[5] = 1.0;\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n\n        mat[8] = 0.0;\n        mat[9] = 0.0;\n        mat[10] = 1.0;\n        mat[11] = 0.0;\n\n        mat[12] = 0.0;\n        mat[13] = 0.0;\n        mat[14] = 0.0;\n        mat[15] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Returns a 3x3 identity matrix.\n     * @method identityMat3\n     * @static\n     */\n    identityMat3(mat = new FloatArrayType(9)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n\n        mat[3] = 0.0;\n        mat[4] = 1.0;\n        mat[5] = 0.0;\n\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n        mat[8] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Tests if the given 4x4 matrix is the identity matrix.\n     * @method isIdentityMat4\n     * @static\n     */\n    isIdentityMat4(m) {\n        if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||\n            m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||\n            m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||\n            m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Negates the given 4x4 matrix.\n     * @method negateMat4\n     * @static\n     */\n    negateMat4(m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = -m[0];\n        dest[1] = -m[1];\n        dest[2] = -m[2];\n        dest[3] = -m[3];\n        dest[4] = -m[4];\n        dest[5] = -m[5];\n        dest[6] = -m[6];\n        dest[7] = -m[7];\n        dest[8] = -m[8];\n        dest[9] = -m[9];\n        dest[10] = -m[10];\n        dest[11] = -m[11];\n        dest[12] = -m[12];\n        dest[13] = -m[13];\n        dest[14] = -m[14];\n        dest[15] = -m[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given 4x4 matrices together.\n     * @method addMat4\n     * @static\n     */\n    addMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] + b[0];\n        dest[1] = a[1] + b[1];\n        dest[2] = a[2] + b[2];\n        dest[3] = a[3] + b[3];\n        dest[4] = a[4] + b[4];\n        dest[5] = a[5] + b[5];\n        dest[6] = a[6] + b[6];\n        dest[7] = a[7] + b[7];\n        dest[8] = a[8] + b[8];\n        dest[9] = a[9] + b[9];\n        dest[10] = a[10] + b[10];\n        dest[11] = a[11] + b[11];\n        dest[12] = a[12] + b[12];\n        dest[13] = a[13] + b[13];\n        dest[14] = a[14] + b[14];\n        dest[15] = a[15] + b[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addMat4Scalar\n     * @static\n     */\n    addMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] + s;\n        dest[1] = m[1] + s;\n        dest[2] = m[2] + s;\n        dest[3] = m[3] + s;\n        dest[4] = m[4] + s;\n        dest[5] = m[5] + s;\n        dest[6] = m[6] + s;\n        dest[7] = m[7] + s;\n        dest[8] = m[8] + s;\n        dest[9] = m[9] + s;\n        dest[10] = m[10] + s;\n        dest[11] = m[11] + s;\n        dest[12] = m[12] + s;\n        dest[13] = m[13] + s;\n        dest[14] = m[14] + s;\n        dest[15] = m[15] + s;\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addScalarMat4\n     * @static\n     */\n    addScalarMat4(s, m, dest) {\n        return math.addMat4Scalar(m, s, dest);\n    },\n\n    /**\n     * Subtracts the second 4x4 matrix from the first.\n     * @method subMat4\n     * @static\n     */\n    subMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] - b[0];\n        dest[1] = a[1] - b[1];\n        dest[2] = a[2] - b[2];\n        dest[3] = a[3] - b[3];\n        dest[4] = a[4] - b[4];\n        dest[5] = a[5] - b[5];\n        dest[6] = a[6] - b[6];\n        dest[7] = a[7] - b[7];\n        dest[8] = a[8] - b[8];\n        dest[9] = a[9] - b[9];\n        dest[10] = a[10] - b[10];\n        dest[11] = a[11] - b[11];\n        dest[12] = a[12] - b[12];\n        dest[13] = a[13] - b[13];\n        dest[14] = a[14] - b[14];\n        dest[15] = a[15] - b[15];\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subMat4Scalar\n     * @static\n     */\n    subMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] - s;\n        dest[1] = m[1] - s;\n        dest[2] = m[2] - s;\n        dest[3] = m[3] - s;\n        dest[4] = m[4] - s;\n        dest[5] = m[5] - s;\n        dest[6] = m[6] - s;\n        dest[7] = m[7] - s;\n        dest[8] = m[8] - s;\n        dest[9] = m[9] - s;\n        dest[10] = m[10] - s;\n        dest[11] = m[11] - s;\n        dest[12] = m[12] - s;\n        dest[13] = m[13] - s;\n        dest[14] = m[14] - s;\n        dest[15] = m[15] - s;\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subScalarMat4\n     * @static\n     */\n    subScalarMat4(s, m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = s - m[0];\n        dest[1] = s - m[1];\n        dest[2] = s - m[2];\n        dest[3] = s - m[3];\n        dest[4] = s - m[4];\n        dest[5] = s - m[5];\n        dest[6] = s - m[6];\n        dest[7] = s - m[7];\n        dest[8] = s - m[8];\n        dest[9] = s - m[9];\n        dest[10] = s - m[10];\n        dest[11] = s - m[11];\n        dest[12] = s - m[12];\n        dest[13] = s - m[13];\n        dest[14] = s - m[14];\n        dest[15] = s - m[15];\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 4x4 matrix by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = a[0];\n\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4];\n        const a11 = a[5];\n        const a12 = a[6];\n        const a13 = a[7];\n        const a20 = a[8];\n        const a21 = a[9];\n        const a22 = a[10];\n        const a23 = a[11];\n        const a30 = a[12];\n        const a31 = a[13];\n        const a32 = a[14];\n        const a33 = a[15];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4];\n        const b11 = b[5];\n        const b12 = b[6];\n        const b13 = b[7];\n        const b20 = b[8];\n        const b21 = b[9];\n        const b22 = b[10];\n        const b23 = b[11];\n        const b30 = b[12];\n        const b31 = b[13];\n        const b32 = b[14];\n        const b33 = b[15];\n\n        dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n        dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n        dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n        dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n        dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n        dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n        dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n        dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n        dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n        dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n        dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n        dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n        dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n        dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n        dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n        dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 3x3 matrices by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat3(a, b, dest) {\n        if (!dest) {\n            dest = new FloatArrayType(9);\n        }\n\n        const a11 = a[0];\n        const a12 = a[3];\n        const a13 = a[6];\n        const a21 = a[1];\n        const a22 = a[4];\n        const a23 = a[7];\n        const a31 = a[2];\n        const a32 = a[5];\n        const a33 = a[8];\n        const b11 = b[0];\n        const b12 = b[3];\n        const b13 = b[6];\n        const b21 = b[1];\n        const b22 = b[4];\n        const b23 = b[7];\n        const b31 = b[2];\n        const b32 = b[5];\n        const b33 = b[8];\n\n        dest[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        dest[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        dest[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        dest[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        dest[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        dest[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        dest[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        dest[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        dest[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of the given 4x4 matrix by the given scalar.\n     * @method mulMat4Scalar\n     * @static\n     */\n    mulMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] * s;\n        dest[1] = m[1] * s;\n        dest[2] = m[2] * s;\n        dest[3] = m[3] * s;\n        dest[4] = m[4] * s;\n        dest[5] = m[5] * s;\n        dest[6] = m[6] * s;\n        dest[7] = m[7] * s;\n        dest[8] = m[8] * s;\n        dest[9] = m[9] * s;\n        dest[10] = m[10] * s;\n        dest[11] = m[11] * s;\n        dest[12] = m[12] * s;\n        dest[13] = m[13] * s;\n        dest[14] = m[14] * s;\n        dest[15] = m[15] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies the given 4x4 matrix by the given four-element vector.\n     * @method mulMat4v4\n     * @static\n     */\n    mulMat4v4(m, v, dest = math.vec4()) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Transposes the given 4x4 matrix.\n     * @method transposeMat4\n     * @static\n     */\n    transposeMat4(mat, dest) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        const m4 = mat[4];\n\n        const m14 = mat[14];\n        const m8 = mat[8];\n        const m13 = mat[13];\n        const m12 = mat[12];\n        const m9 = mat[9];\n        if (!dest || mat === dest) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a03 = mat[3];\n            const a12 = mat[6];\n            const a13 = mat[7];\n            const a23 = mat[11];\n            mat[1] = m4;\n            mat[2] = m8;\n            mat[3] = m12;\n            mat[4] = a01;\n            mat[6] = m9;\n            mat[7] = m13;\n            mat[8] = a02;\n            mat[9] = a12;\n            mat[11] = m14;\n            mat[12] = a03;\n            mat[13] = a13;\n            mat[14] = a23;\n            return mat;\n        }\n        dest[0] = mat[0];\n        dest[1] = m4;\n        dest[2] = m8;\n        dest[3] = m12;\n        dest[4] = mat[1];\n        dest[5] = mat[5];\n        dest[6] = m9;\n        dest[7] = m13;\n        dest[8] = mat[2];\n        dest[9] = mat[6];\n        dest[10] = mat[10];\n        dest[11] = m14;\n        dest[12] = mat[3];\n        dest[13] = mat[7];\n        dest[14] = mat[11];\n        dest[15] = mat[15];\n        return dest;\n    },\n\n    /**\n     * Transposes the given 3x3 matrix.\n     *\n     * @method transposeMat3\n     * @static\n     */\n    transposeMat3(mat, dest) {\n        if (dest === mat) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a12 = mat[5];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = a01;\n            dest[5] = mat[7];\n            dest[6] = a02;\n            dest[7] = a12;\n        } else {\n            dest[0] = mat[0];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = mat[1];\n            dest[4] = mat[4];\n            dest[5] = mat[7];\n            dest[6] = mat[2];\n            dest[7] = mat[5];\n            dest[8] = mat[8];\n        }\n        return dest;\n    },\n\n    /**\n     * Returns the determinant of the given 4x4 matrix.\n     * @method determinantMat4\n     * @static\n     */\n    determinantMat4(mat) {\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +\n            a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +\n            a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +\n            a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +\n            a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +\n            a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n    },\n\n    /**\n     * Returns the inverse of the given 4x4 matrix.\n     * @method inverseMat4\n     * @static\n     */\n    inverseMat4(mat, dest) {\n        if (!dest) {\n            dest = mat;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant (inlined to avoid double-caching)\n        const invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\n\n        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n\n        return dest;\n    },\n\n    /**\n     * Returns the trace of the given 4x4 matrix.\n     * @method traceMat4\n     * @static\n     */\n    traceMat4(m) {\n        return (m[0] + m[5] + m[10] + m[15]);\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4\n     * @static\n     */\n    translationMat4v(v, dest) {\n        const m = dest || math.identityMat4();\n        m[12] = v[0];\n        m[13] = v[1];\n        m[14] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 translation matrix.\n     * @method translationMat3\n     * @static\n     */\n    translationMat3v(v, dest) {\n        const m = dest || math.identityMat3();\n        m[6] = v[0];\n        m[7] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4c\n     * @static\n     */\n    translationMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.translationMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4s\n     * @static\n     */\n    translationMat4s(s, dest) {\n        return math.translationMat4c(s, s, s, dest);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param v\n     * @param m\n     */\n    translateMat4v(xyz, m) {\n        return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    OLDtranslateMat4c(x, y, z, m) {\n\n        const m12 = m[12];\n        m[0] += m12 * x;\n        m[4] += m12 * y;\n        m[8] += m12 * z;\n\n        const m13 = m[13];\n        m[1] += m13 * x;\n        m[5] += m13 * y;\n        m[9] += m13 * z;\n\n        const m14 = m[14];\n        m[2] += m14 * x;\n        m[6] += m14 * y;\n        m[10] += m14 * z;\n\n        const m15 = m[15];\n        m[3] += m15 * x;\n        m[7] += m15 * y;\n        m[11] += m15 * z;\n\n        return m;\n    },\n\n    translateMat4c(x, y, z, m) {\n\n        const m3 = m[3];\n        m[0] += m3 * x;\n        m[1] += m3 * y;\n        m[2] += m3 * z;\n\n        const m7 = m[7];\n        m[4] += m7 * x;\n        m[5] += m7 * y;\n        m[6] += m7 * z;\n\n        const m11 = m[11];\n        m[8] += m11 * x;\n        m[9] += m11 * y;\n        m[10] += m11 * z;\n\n        const m15 = m[15];\n        m[12] += m15 * x;\n        m[13] += m15 * y;\n        m[14] += m15 * z;\n\n        return m;\n    },\n\n    /**\n     * Creates a new matrix that replaces the translation in the rightmost column of the given\n     * affine matrix with the given translation.\n     * @param m\n     * @param translation\n     * @param dest\n     * @returns {*}\n     */\n    setMat4Translation(m, translation, dest) {\n\n        dest[0] = m[0];\n        dest[1] = m[1];\n        dest[2] = m[2];\n        dest[3] = m[3];\n\n        dest[4] = m[4];\n        dest[5] = m[5];\n        dest[6] = m[6];\n        dest[7] = m[7];\n\n        dest[8] = m[8];\n        dest[9] = m[9];\n        dest[10] = m[10];\n        dest[11] = m[11];\n\n        dest[12] = translation[0];\n        dest[13] = translation[1];\n        dest[14] = translation[2];\n        dest[15] = m[15];\n\n        return dest;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4v\n     * @static\n     */\n    rotationMat4v(anglerad, axis, m) {\n        const ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);\n        const s = Math.sin(anglerad);\n        const c = Math.cos(anglerad);\n        const q = 1.0 - c;\n\n        const x = ax[0];\n        const y = ax[1];\n        const z = ax[2];\n\n        let xy;\n        let yz;\n        let zx;\n        let xs;\n        let ys;\n        let zs;\n\n        //xx = x * x; used once\n        //yy = y * y; used once\n        //zz = z * z; used once\n        xy = x * y;\n        yz = y * z;\n        zx = z * x;\n        xs = x * s;\n        ys = y * s;\n        zs = z * s;\n\n        m = m || math.mat4();\n\n        m[0] = (q * x * x) + c;\n        m[1] = (q * xy) + zs;\n        m[2] = (q * zx) - ys;\n        m[3] = 0.0;\n\n        m[4] = (q * xy) - zs;\n        m[5] = (q * y * y) + c;\n        m[6] = (q * yz) + xs;\n        m[7] = 0.0;\n\n        m[8] = (q * zx) + ys;\n        m[9] = (q * yz) - xs;\n        m[10] = (q * z * z) + c;\n        m[11] = 0.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4c\n     * @static\n     */\n    rotationMat4c(anglerad, x, y, z, mat) {\n        return math.rotationMat4v(anglerad, [x, y, z], mat);\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4v\n     * @static\n     */\n    scalingMat4v(v, m = math.identityMat4()) {\n        m[0] = v[0];\n        m[5] = v[1];\n        m[10] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 scale matrix.\n     * @method scalingMat3v\n     * @static\n     */\n    scalingMat3v(v, m = math.identityMat3()) {\n        m[0] = v[0];\n        m[4] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4c\n     * @static\n     */\n    scalingMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.scalingMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    scaleMat4c(x, y, z, m) {\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n        return m;\n    },\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param xyz\n     * @param m\n     */\n    scaleMat4v(xyz, m) {\n\n        const x = xyz[0];\n        const y = xyz[1];\n        const z = xyz[2];\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4s\n     * @static\n     */\n    scalingMat4s(s) {\n        return math.scalingMat4c(s, s, s);\n    },\n\n    /**\n     * Creates a matrix from a quaternion rotation and vector translation\n     *\n     * @param {Number[]} q Rotation quaternion\n     * @param {Number[]} v Translation vector\n     * @param {Number[]} dest Destination matrix\n     * @returns {Number[]} dest\n     */\n    rotationTranslationMat4(q, v, dest = math.mat4()) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        dest[0] = 1 - (yy + zz);\n        dest[1] = xy + wz;\n        dest[2] = xz - wy;\n        dest[3] = 0;\n        dest[4] = xy - wz;\n        dest[5] = 1 - (xx + zz);\n        dest[6] = yz + wx;\n        dest[7] = 0;\n        dest[8] = xz + wy;\n        dest[9] = yz - wx;\n        dest[10] = 1 - (xx + yy);\n        dest[11] = 0;\n        dest[12] = v[0];\n        dest[13] = v[1];\n        dest[14] = v[2];\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Gets Euler angles from a 4x4 matrix.\n     *\n     * @param {Number[]} mat The 4x4 matrix.\n     * @param {String} order Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination Euler angles, created by default.\n     * @returns {Number[]} The Euler angles.\n     */\n    mat4ToEuler(mat, order, dest = math.vec4()) {\n        const clamp = math.clamp;\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = mat[0];\n\n        const m12 = mat[4];\n        const m13 = mat[8];\n        const m21 = mat[1];\n        const m22 = mat[5];\n        const m23 = mat[9];\n        const m31 = mat[2];\n        const m32 = mat[6];\n        const m33 = mat[10];\n\n        if (order === 'XYZ') {\n\n            dest[1] = Math.asin(clamp(m13, -1, 1));\n\n            if (Math.abs(m13) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[2] = Math.atan2(-m12, m11);\n            } else {\n                dest[0] = Math.atan2(m32, m22);\n                dest[2] = 0;\n\n            }\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = Math.asin(-clamp(m23, -1, 1));\n\n            if (Math.abs(m23) < 0.99999) {\n                dest[1] = Math.atan2(m13, m33);\n                dest[2] = Math.atan2(m21, m22);\n            } else {\n                dest[1] = Math.atan2(-m31, m11);\n                dest[2] = 0;\n            }\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = Math.asin(clamp(m32, -1, 1));\n\n            if (Math.abs(m32) < 0.99999) {\n                dest[1] = Math.atan2(-m31, m33);\n                dest[2] = Math.atan2(-m12, m22);\n            } else {\n                dest[1] = 0;\n                dest[2] = Math.atan2(m21, m11);\n            }\n\n        } else if (order === 'ZYX') {\n\n            dest[1] = Math.asin(-clamp(m31, -1, 1));\n\n            if (Math.abs(m31) < 0.99999) {\n                dest[0] = Math.atan2(m32, m33);\n                dest[2] = Math.atan2(m21, m11);\n            } else {\n                dest[0] = 0;\n                dest[2] = Math.atan2(-m12, m22);\n            }\n\n        } else if (order === 'YZX') {\n\n            dest[2] = Math.asin(clamp(m21, -1, 1));\n\n            if (Math.abs(m21) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m22);\n                dest[1] = Math.atan2(-m31, m11);\n            } else {\n                dest[0] = 0;\n                dest[1] = Math.atan2(m13, m33);\n            }\n\n        } else if (order === 'XZY') {\n\n            dest[2] = Math.asin(-clamp(m12, -1, 1));\n\n            if (Math.abs(m12) < 0.99999) {\n                dest[0] = Math.atan2(m32, m22);\n                dest[1] = Math.atan2(m13, m11);\n            } else {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[1] = 0;\n            }\n        }\n\n        return dest;\n    },\n\n    composeMat4(position, quaternion, scale, mat = math.mat4()) {\n        math.quaternionToRotationMat4(quaternion, mat);\n        math.scaleMat4v(scale, mat);\n        math.translateMat4v(position, mat);\n\n        return mat;\n    },\n\n    decomposeMat4: (() => {\n\n        const vec = new FloatArrayType(3);\n        const matrix = new FloatArrayType(16);\n\n        return function decompose(mat, position, quaternion, scale) {\n\n            vec[0] = mat[0];\n            vec[1] = mat[1];\n            vec[2] = mat[2];\n\n            let sx = math.lenVec3(vec);\n\n            vec[0] = mat[4];\n            vec[1] = mat[5];\n            vec[2] = mat[6];\n\n            const sy = math.lenVec3(vec);\n\n            vec[8] = mat[8];\n            vec[9] = mat[9];\n            vec[10] = mat[10];\n\n            const sz = math.lenVec3(vec);\n\n            // if determine is negative, we need to invert one scale\n            const det = math.determinantMat4(mat);\n\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            position[0] = mat[12];\n            position[1] = mat[13];\n            position[2] = mat[14];\n\n            // scale the rotation part\n            matrix.set(mat);\n\n            const invSX = 1 / sx;\n            const invSY = 1 / sy;\n            const invSZ = 1 / sz;\n\n            matrix[0] *= invSX;\n            matrix[1] *= invSX;\n            matrix[2] *= invSX;\n\n            matrix[4] *= invSY;\n            matrix[5] *= invSY;\n            matrix[6] *= invSY;\n\n            matrix[8] *= invSZ;\n            matrix[9] *= invSZ;\n            matrix[10] *= invSZ;\n\n            math.mat4ToQuaternion(matrix, quaternion);\n\n            scale[0] = sx;\n            scale[1] = sy;\n            scale[2] = sz;\n\n            return this;\n\n        };\n\n    })(),\n\n    /** @private */\n    getColMat4(mat, c) {\n        const i = c * 4;\n        return [mat[i], mat[i + 1], mat[i + 2], mat[i + 3]];\n    },\n\n    /** @private */\n    setRowMat4(mat, r, v) {\n        mat[r] = v[0];\n        mat[r + 4] = v[1];\n        mat[r + 8] = v[2];\n        mat[r + 12] = v[3];\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4v\n     * @param pos vec3 position of the viewer\n     * @param target vec3 point the viewer is looking at\n     * @param up vec3 pointing \"up\"\n     * @param dest mat4 Optional, mat4 matrix will be written into\n     *\n     * @return {mat4} dest if specified, a new mat4 otherwise\n     */\n    lookAtMat4v(pos, target, up, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n\n        const posx = pos[0];\n        const posy = pos[1];\n        const posz = pos[2];\n        const upx = up[0];\n        const upy = up[1];\n        const upz = up[2];\n        const targetx = target[0];\n        const targety = target[1];\n        const targetz = target[2];\n\n        if (posx === targetx && posy === targety && posz === targetz) {\n            return math.identityMat4();\n        }\n\n        let z0;\n        let z1;\n        let z2;\n        let x0;\n        let x1;\n        let x2;\n        let y0;\n        let y1;\n        let y2;\n        let len;\n\n        //vec3.direction(eye, center, z);\n        z0 = posx - targetx;\n        z1 = posy - targety;\n        z2 = posz - targetz;\n\n        // normalize (no check needed for 0 because of early return)\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        //vec3.normalize(vec3.cross(up, z, x));\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        //vec3.normalize(vec3.cross(z, x, y));\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        dest[0] = x0;\n        dest[1] = y0;\n        dest[2] = z0;\n        dest[3] = 0;\n        dest[4] = x1;\n        dest[5] = y1;\n        dest[6] = z1;\n        dest[7] = 0;\n        dest[8] = x2;\n        dest[9] = y2;\n        dest[10] = z2;\n        dest[11] = 0;\n        dest[12] = -(x0 * posx + x1 * posy + x2 * posz);\n        dest[13] = -(y0 * posx + y1 * posy + y2 * posz);\n        dest[14] = -(z0 * posx + z1 * posy + z2 * posz);\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4c\n     * @static\n     */\n    lookAtMat4c(posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {\n        return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);\n    },\n\n    /**\n     * Returns a 4x4 orthographic projection matrix.\n     * @method orthoMat4c\n     * @static\n     */\n    orthoMat4c(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n\n        dest[0] = 2.0 / rl;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 0.0;\n\n        dest[4] = 0.0;\n        dest[5] = 2.0 / tb;\n        dest[6] = 0.0;\n        dest[7] = 0.0;\n\n        dest[8] = 0.0;\n        dest[9] = 0.0;\n        dest[10] = -2.0 / fn;\n        dest[11] = 0.0;\n\n        dest[12] = -(left + right) / rl;\n        dest[13] = -(top + bottom) / tb;\n        dest[14] = -(far + near) / fn;\n        dest[15] = 1.0;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4v(fmin, fmax, m) {\n        if (!m) {\n            m = math.mat4();\n        }\n\n        const fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];\n        const fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];\n\n        math.addVec4(fmax4, fmin4, tempMat1);\n        math.subVec4(fmax4, fmin4, tempMat2);\n\n        const t = 2.0 * fmin4[2];\n\n        const tempMat20 = tempMat2[0];\n        const tempMat21 = tempMat2[1];\n        const tempMat22 = tempMat2[2];\n\n        m[0] = t / tempMat20;\n        m[1] = 0.0;\n        m[2] = 0.0;\n        m[3] = 0.0;\n\n        m[4] = 0.0;\n        m[5] = t / tempMat21;\n        m[6] = 0.0;\n        m[7] = 0.0;\n\n        m[8] = tempMat1[0] / tempMat20;\n        m[9] = tempMat1[1] / tempMat21;\n        m[10] = -tempMat1[2] / tempMat22;\n        m[11] = -1.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = -t * fmax4[2] / tempMat22;\n        m[15] = 0.0;\n\n        return m;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n        dest[0] = (near * 2) / rl;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        dest[4] = 0;\n        dest[5] = (near * 2) / tb;\n        dest[6] = 0;\n        dest[7] = 0;\n        dest[8] = (right + left) / rl;\n        dest[9] = (top + bottom) / tb;\n        dest[10] = -(far + near) / fn;\n        dest[11] = -1;\n        dest[12] = 0;\n        dest[13] = 0;\n        dest[14] = -(far * near * 2) / fn;\n        dest[15] = 0;\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method perspectiveMat4v\n     * @static\n     */\n    perspectiveMat4(fovyrad, aspectratio, znear, zfar, m) {\n        const pmin = [];\n        const pmax = [];\n\n        pmin[2] = znear;\n        pmax[2] = zfar;\n\n        pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);\n        pmin[1] = -pmax[1];\n\n        pmax[0] = pmax[1] * aspectratio;\n        pmin[0] = -pmax[0];\n\n        return math.frustumMat4v(pmin, pmax, m);\n    },\n\n    /**\n     * Returns true if the two 4x4 matrices are the same.\n     * @param m1\n     * @param m2\n     * @returns {boolean}\n     */\n    compareMat4(m1, m2) {\n        return m1[0] === m2[0] &&\n            m1[1] === m2[1] &&\n            m1[2] === m2[2] &&\n            m1[3] === m2[3] &&\n            m1[4] === m2[4] &&\n            m1[5] === m2[5] &&\n            m1[6] === m2[6] &&\n            m1[7] === m2[7] &&\n            m1[8] === m2[8] &&\n            m1[9] === m2[9] &&\n            m1[10] === m2[10] &&\n            m1[11] === m2[11] &&\n            m1[12] === m2[12] &&\n            m1[13] === m2[13] &&\n            m1[14] === m2[14] &&\n            m1[15] === m2[15];\n    },\n\n    /**\n     * Transforms a three-element position by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint3(m, p, dest = math.vec3()) {\n\n        const x = p[0];\n        const y = p[1];\n        const z = p[2];\n\n        dest[0] = (m[0] * x) + (m[4] * y) + (m[8] * z) + m[12];\n        dest[1] = (m[1] * x) + (m[5] * y) + (m[9] * z) + m[13];\n        dest[2] = (m[2] * x) + (m[6] * y) + (m[10] * z) + m[14];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a homogeneous coordinate by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint4(m, v, dest = math.vec4()) {\n        dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n\n        return dest;\n    },\n\n\n    /**\n     * Transforms an array of three-element positions by a 4x4 matrix.\n     * @method transformPoints3\n     * @static\n     */\n    transformPoints3(m, points, points2) {\n        const result = points2 || [];\n        const len = points.length;\n        let p0;\n        let p1;\n        let p2;\n        let pi;\n\n        // cache values\n        const m0 = m[0];\n\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        let r;\n\n        for (let i = 0; i < len; ++i) {\n\n            // cache values\n            pi = points[i];\n\n            p0 = pi[0];\n            p1 = pi[1];\n            p2 = pi[2];\n\n            r = result[i] || (result[i] = [0, 0, 0]);\n\n            r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;\n            r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;\n            r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;\n            r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;\n        }\n\n        result.length = len;\n\n        return result;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions3\n     * @static\n     */\n    transformPositions3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 3) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions4\n     * @static\n     */\n    transformPositions4(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms a three-element vector by a 4x4 matrix.\n     * @method transformVec3\n     * @static\n     */\n    transformVec3(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dest = dest || this.vec3();\n        dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);\n        dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);\n        dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 matrix.\n     * @method transformVec4\n     * @static\n     */\n    transformVec4(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest = dest || math.vec4();\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @method rotateVec3X\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3X(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @method rotateVec3Y\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Y(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @method rotateVec3Z\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Z(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n        r[2] = p[2];\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 projection matrix.\n     *\n     * @method projectVec4\n     * @param {Number[]} p 3D View-space coordinate\n     * @param {Number[]} q 2D Projected coordinate\n     * @returns {Number[]} 2D Projected coordinate\n     * @static\n     */\n    projectVec4(p, q) {\n        const f = 1.0 / p[3];\n        q = q || math.vec2();\n        q[0] = p[0] * f;\n        q[1] = p[1] * f;\n        return q;\n    },\n\n    /**\n     * Unprojects a three-element vector.\n     *\n     * @method unprojectVec3\n     * @param {Number[]} p 3D Projected coordinate\n     * @param {Number[]} viewMat View matrix\n     * @returns {Number[]} projMat Projection matrix\n     * @static\n     */\n    unprojectVec3: ((() => {\n        const mat = new FloatArrayType(16);\n        const mat2 = new FloatArrayType(16);\n        const mat3 = new FloatArrayType(16);\n        return function (p, viewMat, projMat, q) {\n            return this.transformVec3(this.mulMat4(this.inverseMat4(viewMat, mat), this.inverseMat4(projMat, mat2), mat3), p, q)\n        };\n    }))(),\n\n    /**\n     * Linearly interpolates between two 3D vectors.\n     * @method lerpVec3\n     * @static\n     */\n    lerpVec3(t, t1, t2, p1, p2, dest) {\n        const result = dest || math.vec3();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = p1[0] + (f * (p2[0] - p1[0]));\n        result[1] = p1[1] + (f * (p2[1] - p1[1]));\n        result[2] = p1[2] + (f * (p2[2] - p1[2]));\n        return result;\n    },\n\n    /**\n     * Linearly interpolates between two 4x4 matrices.\n     * @method lerpMat4\n     * @static\n     */\n    lerpMat4(t, t1, t2, m1, m2, dest) {\n        const result = dest || math.mat4();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = m1[0] + (f * (m2[0] - m1[0]));\n        result[1] = m1[1] + (f * (m2[1] - m1[1]));\n        result[2] = m1[2] + (f * (m2[2] - m1[2]));\n        result[3] = m1[3] + (f * (m2[3] - m1[3]));\n        result[4] = m1[4] + (f * (m2[4] - m1[4]));\n        result[5] = m1[5] + (f * (m2[5] - m1[5]));\n        result[6] = m1[6] + (f * (m2[6] - m1[6]));\n        result[7] = m1[7] + (f * (m2[7] - m1[7]));\n        result[8] = m1[8] + (f * (m2[8] - m1[8]));\n        result[9] = m1[9] + (f * (m2[9] - m1[9]));\n        result[10] = m1[10] + (f * (m2[10] - m1[10]));\n        result[11] = m1[11] + (f * (m2[11] - m1[11]));\n        result[12] = m1[12] + (f * (m2[12] - m1[12]));\n        result[13] = m1[13] + (f * (m2[13] - m1[13]));\n        result[14] = m1[14] + (f * (m2[14] - m1[14]));\n        result[15] = m1[15] + (f * (m2[15] - m1[15]));\n        return result;\n    },\n\n\n    /**\n     * Flattens a two-dimensional array into a one-dimensional array.\n     *\n     * @method flatten\n     * @static\n     * @param {Array of Arrays} a A 2D array\n     * @returns Flattened 1D array\n     */\n    flatten(a) {\n\n        const result = [];\n\n        let i;\n        let leni;\n        let j;\n        let lenj;\n        let item;\n\n        for (i = 0, leni = a.length; i < leni; i++) {\n            item = a[i];\n            for (j = 0, lenj = item.length; j < lenj; j++) {\n                result.push(item[j]);\n            }\n        }\n\n        return result;\n    },\n\n\n    identityQuaternion(dest = math.vec4()) {\n        dest[0] = 0.0;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 1.0;\n        return dest;\n    },\n\n    /**\n     * Initializes a quaternion from Euler angles.\n     *\n     * @param {Number[]} euler The Euler angles.\n     * @param {String} order Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination quaternion, created by default.\n     * @returns {Number[]} The quaternion.\n     */\n    eulerToQuaternion(euler, order, dest = math.vec4()) {\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const a = (euler[0] * math.DEGTORAD) / 2;\n        const b = (euler[1] * math.DEGTORAD) / 2;\n        const c = (euler[2] * math.DEGTORAD) / 2;\n\n        const c1 = Math.cos(a);\n        const c2 = Math.cos(b);\n        const c3 = Math.cos(c);\n        const s1 = Math.sin(a);\n        const s2 = Math.sin(b);\n        const s3 = Math.sin(c);\n\n        if (order === 'XYZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'ZYX') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'YZX') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'XZY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n\n        return dest;\n    },\n\n    mat4ToQuaternion(m, dest = math.vec4()) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = m[0];\n        const m12 = m[4];\n        const m13 = m[8];\n        const m21 = m[1];\n        const m22 = m[5];\n        const m23 = m[9];\n        const m31 = m[2];\n        const m32 = m[6];\n        const m33 = m[10];\n        let s;\n\n        const trace = m11 + m22 + m33;\n\n        if (trace > 0) {\n\n            s = 0.5 / Math.sqrt(trace + 1.0);\n\n            dest[3] = 0.25 / s;\n            dest[0] = (m32 - m23) * s;\n            dest[1] = (m13 - m31) * s;\n            dest[2] = (m21 - m12) * s;\n\n        } else if (m11 > m22 && m11 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n            dest[3] = (m32 - m23) / s;\n            dest[0] = 0.25 * s;\n            dest[1] = (m12 + m21) / s;\n            dest[2] = (m13 + m31) / s;\n\n        } else if (m22 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n            dest[3] = (m13 - m31) / s;\n            dest[0] = (m12 + m21) / s;\n            dest[1] = 0.25 * s;\n            dest[2] = (m23 + m32) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n            dest[3] = (m21 - m12) / s;\n            dest[0] = (m13 + m31) / s;\n            dest[1] = (m23 + m32) / s;\n            dest[2] = 0.25 * s;\n        }\n\n        return dest;\n    },\n\n    vec3PairToQuaternion(u, v, dest = math.vec4()) {\n        const norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));\n        let real_part = norm_u_norm_v + math.dotVec3(u, v);\n\n        if (real_part < 0.00000001 * norm_u_norm_v) {\n\n            // If u and v are exactly opposite, rotate 180 degrees\n            // around an arbitrary orthogonal axis. Axis normalisation\n            // can happen later, when we normalise the quaternion.\n\n            real_part = 0.0;\n\n            if (Math.abs(u[0]) > Math.abs(u[2])) {\n\n                dest[0] = -u[1];\n                dest[1] = u[0];\n                dest[2] = 0;\n\n            } else {\n                dest[0] = 0;\n                dest[1] = -u[2];\n                dest[2] = u[1]\n            }\n\n        } else {\n\n            // Otherwise, build quaternion the standard way.\n            math.cross3Vec3(u, v, dest);\n        }\n\n        dest[3] = real_part;\n\n        return math.normalizeQuaternion(dest);\n    },\n\n    angleAxisToQuaternion(angleAxis, dest = math.vec4()) {\n        const halfAngle = angleAxis[3] / 2.0;\n        const fsin = Math.sin(halfAngle);\n        dest[0] = fsin * angleAxis[0];\n        dest[1] = fsin * angleAxis[1];\n        dest[2] = fsin * angleAxis[2];\n        dest[3] = Math.cos(halfAngle);\n        return dest;\n    },\n\n    quaternionToEuler: ((() => {\n        const mat = new FloatArrayType(16);\n        return (q, order, dest) => {\n            dest = dest || math.vec3();\n            math.quaternionToRotationMat4(q, mat);\n            math.mat4ToEuler(mat, order, dest);\n            return dest;\n        };\n    }))(),\n\n    mulQuaternions(p, q, dest = math.vec4()) {\n        const p0 = p[0];\n        const p1 = p[1];\n        const p2 = p[2];\n        const p3 = p[3];\n        const q0 = q[0];\n        const q1 = q[1];\n        const q2 = q[2];\n        const q3 = q[3];\n        dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;\n        dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;\n        dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;\n        dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;\n        return dest;\n    },\n\n    vec3ApplyQuaternion(q, vec, dest = math.vec3()) {\n        const x = vec[0];\n        const y = vec[1];\n        const z = vec[2];\n\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return dest;\n    },\n\n    quaternionToMat4(q, dest) {\n\n        dest = math.identityMat4(dest);\n\n        const q0 = q[0];  //x\n        const q1 = q[1];  //y\n        const q2 = q[2];  //z\n        const q3 = q[3];  //w\n\n        const tx = 2.0 * q0;\n        const ty = 2.0 * q1;\n        const tz = 2.0 * q2;\n\n        const twx = tx * q3;\n        const twy = ty * q3;\n        const twz = tz * q3;\n\n        const txx = tx * q0;\n        const txy = ty * q0;\n        const txz = tz * q0;\n\n        const tyy = ty * q1;\n        const tyz = tz * q1;\n        const tzz = tz * q2;\n\n        dest[0] = 1.0 - (tyy + tzz);\n        dest[1] = txy + twz;\n        dest[2] = txz - twy;\n\n        dest[4] = txy - twz;\n        dest[5] = 1.0 - (txx + tzz);\n        dest[6] = tyz + twx;\n\n        dest[8] = txz + twy;\n        dest[9] = tyz - twx;\n\n        dest[10] = 1.0 - (txx + tyy);\n\n        return dest;\n    },\n\n    quaternionToRotationMat4(q, m) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        m[0] = 1 - (yy + zz);\n        m[4] = xy - wz;\n        m[8] = xz + wy;\n\n        m[1] = xy + wz;\n        m[5] = 1 - (xx + zz);\n        m[9] = yz - wx;\n\n        m[2] = xz - wy;\n        m[6] = yz + wx;\n        m[10] = 1 - (xx + yy);\n\n        // last column\n        m[3] = 0;\n        m[7] = 0;\n        m[11] = 0;\n\n        // bottom row\n        m[12] = 0;\n        m[13] = 0;\n        m[14] = 0;\n        m[15] = 1;\n\n        return m;\n    },\n\n    normalizeQuaternion(q, dest = q) {\n        const len = math.lenVec4([q[0], q[1], q[2], q[3]]);\n        dest[0] = q[0] / len;\n        dest[1] = q[1] / len;\n        dest[2] = q[2] / len;\n        dest[3] = q[3] / len;\n        return dest;\n    },\n\n    conjugateQuaternion(q, dest = q) {\n        dest[0] = -q[0];\n        dest[1] = -q[1];\n        dest[2] = -q[2];\n        dest[3] = q[3];\n        return dest;\n    },\n\n    inverseQuaternion(q, dest) {\n        return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));\n    },\n\n    quaternionToAngleAxis(q, angleAxis = math.vec4()) {\n        q = math.normalizeQuaternion(q, tempVec4);\n        const q3 = q[3];\n        const angle = 2 * Math.acos(q3);\n        const s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            angleAxis[0] = q[0];\n            angleAxis[1] = q[1];\n            angleAxis[2] = q[2];\n        } else {\n            angleAxis[0] = q[0] / s;\n            angleAxis[1] = q[1] / s;\n            angleAxis[2] = q[2] / s;\n        }\n        angleAxis[3] = angle; // * 57.295779579;\n        return angleAxis;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundaries\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns a new, uninitialized 3D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB3(values) {\n        return new FloatArrayType(values || 6);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB2(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB3(values) {\n        return new FloatArrayType(values || 32);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB2(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /** Returns a new 3D bounding sphere */\n    Sphere3(x, y, z, r) {\n        return new FloatArrayType([x, y, z, r]);\n    },\n\n    /**\n     * Transforms an OBB3 by a 4x4 matrix.\n     *\n     * @private\n     */\n    transformOBB3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /** Returns true if the first AABB contains the second AABB.\n     * @param aabb1\n     * @param aabb2\n     * @returns {boolean}\n     */\n    containsAABB3: function (aabb1, aabb2) {\n        const result = (\n            aabb1[0] <= aabb2[0] && aabb2[3] <= aabb1[3] &&\n            aabb1[1] <= aabb2[1] && aabb2[4] <= aabb1[4] &&\n            aabb1[2] <= aabb2[2] && aabb2[5] <= aabb1[5]);\n        return result;\n    },\n\n\n    /**\n     * Gets the diagonal size of an AABB3 given as minima and maxima.\n     *\n     * @private\n     */\n    getAABB3Diag: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return aabb => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            math.subVec3(max, min, tempVec3);\n\n            return Math.abs(math.lenVec3(tempVec3));\n        };\n    }))(),\n\n    /**\n     * Get a diagonal boundary size that is symmetrical about the given point.\n     *\n     * @private\n     */\n    getAABB3DiagPoint: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (aabb, p) => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            const diagVec = math.subVec3(max, min, tempVec3);\n\n            const xneg = p[0] - aabb[0];\n            const xpos = aabb[3] - p[0];\n            const yneg = p[1] - aabb[1];\n            const ypos = aabb[4] - p[1];\n            const zneg = p[2] - aabb[2];\n            const zpos = aabb[5] - p[2];\n\n            diagVec[0] += (xneg > xpos) ? xneg : xpos;\n            diagVec[1] += (yneg > ypos) ? yneg : ypos;\n            diagVec[2] += (zneg > zpos) ? zneg : zpos;\n\n            return Math.abs(math.lenVec3(diagVec));\n        };\n    }))(),\n\n    /**\n     * Gets the area of an AABB.\n     *\n     * @private\n     */\n    getAABB3Area(aabb) {\n        const width = (aabb[3] - aabb[0]);\n        const height = (aabb[4] - aabb[1]);\n        const depth = (aabb[5] - aabb[2]);\n        return (width * height * depth);\n    },\n\n    /**\n     * Gets the center of an AABB.\n     *\n     * @private\n     */\n    getAABB3Center(aabb, dest) {\n        const r = dest || math.vec3();\n\n        r[0] = (aabb[0] + aabb[3]) / 2;\n        r[1] = (aabb[1] + aabb[4]) / 2;\n        r[2] = (aabb[2] + aabb[5]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Gets the center of a 2D AABB.\n     *\n     * @private\n     */\n    getAABB2Center(aabb, dest) {\n        const r = dest || math.vec2();\n\n        r[0] = (aabb[2] + aabb[0]) / 2;\n        r[1] = (aabb[3] + aabb[1]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB3(aabb = math.AABB3()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MAX_DOUBLE;\n        aabb[3] = math.MIN_DOUBLE;\n        aabb[4] = math.MIN_DOUBLE;\n        aabb[5] = math.MIN_DOUBLE;\n\n        return aabb;\n    },\n\n    /**\n     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n     * an array of eight 3D positions, one for each corner of the boundary.\n     *\n     * @private\n     */\n    AABB3ToOBB3(aabb, obb = math.OBB3()) {\n        obb[0] = aabb[0];\n        obb[1] = aabb[1];\n        obb[2] = aabb[2];\n        obb[3] = 1;\n\n        obb[4] = aabb[3];\n        obb[5] = aabb[1];\n        obb[6] = aabb[2];\n        obb[7] = 1;\n\n        obb[8] = aabb[3];\n        obb[9] = aabb[4];\n        obb[10] = aabb[2];\n        obb[11] = 1;\n\n        obb[12] = aabb[0];\n        obb[13] = aabb[4];\n        obb[14] = aabb[2];\n        obb[15] = 1;\n\n        obb[16] = aabb[0];\n        obb[17] = aabb[1];\n        obb[18] = aabb[5];\n        obb[19] = 1;\n\n        obb[20] = aabb[3];\n        obb[21] = aabb[1];\n        obb[22] = aabb[5];\n        obb[23] = 1;\n\n        obb[24] = aabb[3];\n        obb[25] = aabb[4];\n        obb[26] = aabb[5];\n        obb[27] = 1;\n\n        obb[28] = aabb[0];\n        obb[29] = aabb[4];\n        obb[30] = aabb[5];\n        obb[31] = 1;\n\n        return obb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    positions3ToAABB3: ((() => {\n\n        const p = new Float32Array(3);\n\n        return (positions, aabb, positionsDecodeMatrix) => {\n            aabb = aabb || math.AABB3();\n\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = math.MIN_DOUBLE;\n            let ymax = math.MIN_DOUBLE;\n            let zmax = math.MIN_DOUBLE;\n\n            let x;\n            let y;\n            let z;\n\n            for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                if (positionsDecodeMatrix) {\n\n                    p[0] = positions[i + 0];\n                    p[1] = positions[i + 1];\n                    p[2] = positions[i + 2];\n\n                    math.decompressPosition(p, positionsDecodeMatrix, p);\n\n                    x = p[0];\n                    y = p[1];\n                    z = p[2];\n\n                } else {\n                    x = positions[i + 0];\n                    y = positions[i + 1];\n                    z = positions[i + 2];\n                }\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n\n                if (y < ymin) {\n                    ymin = y;\n                }\n\n                if (z < zmin) {\n                    zmin = z;\n                }\n\n                if (x > xmax) {\n                    xmax = x;\n                }\n\n                if (y > ymax) {\n                    ymax = y;\n                }\n\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n\n            aabb[0] = xmin;\n            aabb[1] = ymin;\n            aabb[2] = zmin;\n            aabb[3] = xmax;\n            aabb[4] = ymax;\n            aabb[5] = zmax;\n\n            return aabb;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    OBB3ToAABB3(obb, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n        let zmax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = obb.length; i < len; i += 4) {\n\n            x = obb[i + 0];\n            y = obb[i + 1];\n            z = obb[i + 2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToAABB3(points, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n        let zmax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = points.length; i < len; i++) {\n\n            x = points[i][0];\n            y = points[i][1];\n            z = points[i][2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToSphere3: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const numPoints = points.length;\n\n            for (i = 0; i < numPoints; i++) {\n                x += points[i][0];\n                y += points[i][1];\n                z += points[i][2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < numPoints; i++) {\n\n                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D positions.\n     *\n     * @private\n     */\n    positions3ToSphere3: ((() => {\n\n        const tempVec3a = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n\n        return (positions, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPositions = positions.length;\n            let radius = 0;\n\n            for (i = 0; i < lenPositions; i += 3) {\n                x += positions[i];\n                y += positions[i + 1];\n                z += positions[i + 2];\n            }\n\n            const numPositions = lenPositions / 3;\n\n            sphere[0] = x / numPositions;\n            sphere[1] = y / numPositions;\n            sphere[2] = z / numPositions;\n\n            let dist;\n\n            for (i = 0; i < lenPositions; i += 3) {\n\n                tempVec3a[0] = positions[i];\n                tempVec3a[1] = positions[i + 1];\n                tempVec3a[2] = positions[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(tempVec3a, sphere, tempVec3b)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToSphere3: ((() => {\n\n        const point = new Float32Array(3);\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPoints = points.length;\n            const numPoints = lenPoints / 4;\n\n            for (i = 0; i < lenPoints; i += 4) {\n                x += points[i + 0];\n                y += points[i + 1];\n                z += points[i + 2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < lenPoints; i += 4) {\n\n                point[0] = points[i + 0];\n                point[1] = points[i + 1];\n                point[2] = points[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Gets the center of a bounding sphere.\n     *\n     * @private\n     */\n    getSphere3Center(sphere, dest = math.vec3()) {\n        dest[0] = sphere[0];\n        dest[1] = sphere[1];\n        dest[2] = sphere[2];\n\n        return dest;\n    },\n\n    /**\n     * Gets the 3D center of the given flat array of 3D positions.\n     *\n     * @private\n     */\n    getPositionsCenter(positions, center = math.vec3()) {\n        let xCenter = 0;\n        let yCenter = 0;\n        let zCenter = 0;\n        for (var i = 0, len = positions.length; i < len; i += 3) {\n            xCenter += positions[i + 0];\n            yCenter += positions[i + 1];\n            zCenter += positions[i + 2];\n        }\n        const numPositions = positions.length / 3;\n        center[0] = xCenter / numPositions;\n        center[1] = yCenter / numPositions;\n        center[2] = zCenter / numPositions;\n        return center;\n    },\n\n    /**\n     * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB3(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] > aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        if (aabb1[4] < aabb2[4]) {\n            aabb1[4] = aabb2[4];\n        }\n\n        if (aabb1[5] < aabb2[5]) {\n            aabb1[5] = aabb2[5];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n     *\n     * @private\n     */\n    expandAABB3Point3(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] > p[2]) {\n            aabb[2] = p[2];\n        }\n\n        if (aabb[3] < p[0]) {\n            aabb[3] = p[0];\n        }\n\n        if (aabb[4] < p[1]) {\n            aabb[4] = p[1];\n        }\n\n        if (aabb[5] < p[2]) {\n            aabb[5] = p[2];\n        }\n\n        return aabb;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given points, if needed.\n     *\n     * @private\n     */\n    expandAABB3Points3(aabb, positions) {\n        var x;\n        var y;\n        var z;\n        for (var i = 0, len = positions.length; i < len; i += 3) {\n            x = positions[i];\n            y = positions[i + 1];\n            z = positions[i + 2];\n            if (aabb[0] > x) {\n                aabb[0] = x;\n            }\n            if (aabb[1] > y) {\n                aabb[1] = y;\n            }\n            if (aabb[2] > z) {\n                aabb[2] = z;\n            }\n            if (aabb[3] < x) {\n                aabb[3] = x;\n            }\n            if (aabb[4] < y) {\n                aabb[4] = y;\n            }\n            if (aabb[5] < z) {\n                aabb[5] = z;\n            }\n        }\n        return aabb;\n    },\n\n    /**\n     * Collapses a 2D axis-aligned boundary, ready to expand to fit 2D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB2(aabb = math.AABB2()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MIN_DOUBLE;\n        aabb[3] = math.MIN_DOUBLE;\n\n        return aabb;\n    },\n\n    point3AABB3Intersect(aabb, p) {\n        return aabb[0] > p[0] || aabb[3] < p[0] || aabb[1] > p[1] || aabb[4] < p[1] || aabb[2] > p[2] || aabb[5] < p[2];\n    },\n\n    /**\n     *\n     * @param dir\n     * @param constant\n     * @param aabb\n     * @returns {number}\n     */\n    planeAABB3Intersect(dir, constant, aabb) {\n        let min, max;\n        if (dir[0] > 0) {\n            min = dir[0] * aabb[0];\n            max = dir[0] * aabb[3];\n        } else {\n            min = dir[0] * aabb[3];\n            max = dir[0] * aabb[0];\n        }\n        if (dir[1] > 0) {\n            min += dir[1] * aabb[1];\n            max += dir[1] * aabb[4];\n        } else {\n            min += dir[1] * aabb[4];\n            max += dir[1] * aabb[1];\n        }\n        if (dir[2] > 0) {\n            min += dir[2] * aabb[2];\n            max += dir[2] * aabb[5];\n        } else {\n            min += dir[2] * aabb[5];\n            max += dir[2] * aabb[2];\n        }\n        const outside = (min <= -constant) && (max <= -constant);\n        if (outside) {\n            return -1;\n        }\n\n        const inside = (min >= -constant) && (max >= -constant);\n        if (inside) {\n            return 1;\n        }\n\n        return 0;\n    },\n\n    /**\n     * Finds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToAABB2(points, aabb = math.AABB2()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let xmax = math.MIN_DOUBLE;\n        let ymax = math.MIN_DOUBLE;\n\n        let x;\n        let y;\n        let w;\n        let f;\n\n        for (let i = 0, len = points.length; i < len; i += 4) {\n\n            x = points[i + 0];\n            y = points[i + 1];\n            w = points[i + 3] || 1.0;\n\n            f = 1.0 / w;\n\n            x *= f;\n            y *= f;\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = xmax;\n        aabb[3] = ymax;\n\n        return aabb;\n    },\n\n    /**\n     * Expands the first axis-aligned 2D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB2(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] < aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 2D boundary to enclose the given point, if required.\n     *\n     * @private\n     */\n    expandAABB2Point2(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] < p[0]) {\n            aabb[2] = p[0];\n        }\n\n        if (aabb[3] < p[1]) {\n            aabb[3] = p[1];\n        }\n\n        return aabb;\n    },\n\n    AABB2ToCanvas(aabb, canvasWidth, canvasHeight, aabb2 = aabb) {\n        const xmin = (aabb[0] + 1.0) * 0.5;\n        const ymin = (aabb[1] + 1.0) * 0.5;\n        const xmax = (aabb[2] + 1.0) * 0.5;\n        const ymax = (aabb[3] + 1.0) * 0.5;\n\n        aabb2[0] = Math.floor(xmin * canvasWidth);\n        aabb2[1] = canvasHeight - Math.floor(ymax * canvasHeight);\n        aabb2[2] = Math.floor(xmax * canvasWidth);\n        aabb2[3] = canvasHeight - Math.floor(ymin * canvasHeight);\n\n        return aabb2;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Curves\n    //------------------------------------------------------------------------------------------------------------------\n\n    tangentQuadraticBezier(t, p0, p1, p2) {\n        return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n    },\n\n    tangentQuadraticBezier3(t, p0, p1, p2, p3) {\n        return -3 * p0 * (1 - t) * (1 - t) +\n            3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) +\n            6 * t * p2 * (1 - t) - 3 * t * t * p2 +\n            3 * t * t * p3;\n    },\n\n    tangentSpline(t) {\n        const h00 = 6 * t * t - 6 * t;\n        const h10 = 3 * t * t - 4 * t + 1;\n        const h01 = -6 * t * t + 6 * t;\n        const h11 = 3 * t * t - 2 * t;\n        return h00 + h10 + h01 + h11;\n    },\n\n    catmullRomInterpolate(p0, p1, p2, p3, t) {\n        const v0 = (p2 - p0) * 0.5;\n        const v1 = (p3 - p1) * 0.5;\n        const t2 = t * t;\n        const t3 = t * t2;\n        return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n    },\n\n// Bezier Curve formulii from http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n// Quad Bezier Functions\n\n    b2p0(t, p) {\n        const k = 1 - t;\n        return k * k * p;\n\n    },\n\n    b2p1(t, p) {\n        return 2 * (1 - t) * t * p;\n    },\n\n    b2p2(t, p) {\n        return t * t * p;\n    },\n\n    b2(t, p0, p1, p2) {\n        return this.b2p0(t, p0) + this.b2p1(t, p1) + this.b2p2(t, p2);\n    },\n\n// Cubic Bezier Functions\n\n    b3p0(t, p) {\n        const k = 1 - t;\n        return k * k * k * p;\n    },\n\n    b3p1(t, p) {\n        const k = 1 - t;\n        return 3 * k * k * t * p;\n    },\n\n    b3p2(t, p) {\n        const k = 1 - t;\n        return 3 * k * t * t * p;\n    },\n\n    b3p3(t, p) {\n        return t * t * t * p;\n    },\n\n    b3(t, p0, p1, p2, p3) {\n        return this.b3p0(t, p0) + this.b3p1(t, p1) + this.b3p2(t, p2) + this.b3p3(t, p3);\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Geometry\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Calculates the normal vector of a triangle.\n     *\n     * @private\n     */\n    triangleNormal(a, b, c, normal = math.vec3()) {\n        const p1x = b[0] - a[0];\n        const p1y = b[1] - a[1];\n        const p1z = b[2] - a[2];\n\n        const p2x = c[0] - a[0];\n        const p2y = c[1] - a[1];\n        const p2z = c[2] - a[2];\n\n        const p3x = p1y * p2z - p1z * p2y;\n        const p3y = p1z * p2x - p1x * p2z;\n        const p3z = p1x * p2y - p1y * p2x;\n\n        const mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);\n        if (mag === 0) {\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else {\n            normal[0] = p3x / mag;\n            normal[1] = p3y / mag;\n            normal[2] = p3z / mag;\n        }\n\n        return normal\n    },\n\n    /**\n     * Finds the intersection of a 3D ray with a 3D triangle.\n     *\n     * @private\n     */\n    rayTriangleIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            const EPSILON = 0.000001;\n\n            const edge1 = math.subVec3(b, a, tempVec3);\n            const edge2 = math.subVec3(c, a, tempVec3b);\n\n            const pvec = math.cross3Vec3(dir, edge2, tempVec3c);\n            const det = math.dotVec3(edge1, pvec);\n            if (det < EPSILON) {\n                return null;\n            }\n\n            const tvec = math.subVec3(origin, a, tempVec3d);\n            const u = math.dotVec3(tvec, pvec);\n            if (u < 0 || u > det) {\n                return null;\n            }\n\n            const qvec = math.cross3Vec3(tvec, edge1, tempVec3e);\n            const v = math.dotVec3(dir, qvec);\n            if (v < 0 || u + v > det) {\n                return null;\n            }\n\n            const t = math.dotVec3(edge2, qvec) / det;\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Finds the intersection of a 3D ray with a plane defined by 3 points.\n     *\n     * @private\n     */\n    rayPlaneIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            dir = math.normalizeVec3(dir, tempVec3);\n\n            const edge1 = math.subVec3(b, a, tempVec3b);\n            const edge2 = math.subVec3(c, a, tempVec3c);\n\n            const n = math.cross3Vec3(edge1, edge2, tempVec3d);\n            math.normalizeVec3(n, n);\n\n            const d = -math.dotVec3(a, n);\n\n            const t = -(math.dotVec3(origin, n) + d) / math.dotVec3(dir, n);\n\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     *\n     * @private\n     */\n    cartesianToBarycentric: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n\n        return (cartesian, a, b, c, dest) => {\n\n            const v0 = math.subVec3(c, a, tempVec3);\n            const v1 = math.subVec3(b, a, tempVec3b);\n            const v2 = math.subVec3(cartesian, a, tempVec3c);\n\n            const dot00 = math.dotVec3(v0, v0);\n            const dot01 = math.dotVec3(v0, v1);\n            const dot02 = math.dotVec3(v0, v2);\n            const dot11 = math.dotVec3(v1, v1);\n            const dot12 = math.dotVec3(v1, v2);\n\n            const denom = (dot00 * dot11 - dot01 * dot01);\n\n            // Colinear or singular triangle\n\n            if (denom === 0) {\n\n                // Arbitrary location outside of triangle\n\n                return null;\n            }\n\n            const invDenom = 1 / denom;\n\n            const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n            const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n            dest[0] = 1 - u - v;\n            dest[1] = v;\n            dest[2] = u;\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Returns true if the given barycentric coordinates are within their triangle.\n     *\n     * @private\n     */\n    barycentricInsideTriangle(bary) {\n\n        const v = bary[1];\n        const u = bary[2];\n\n        return (u >= 0) && (v >= 0) && (u + v < 1);\n    },\n\n    /**\n     * Gets cartesian coordinates from barycentric coordinates within a triangle.\n     *\n     * @private\n     */\n    barycentricToCartesian(bary, a, b, c, cartesian = math.vec3()) {\n        const u = bary[0];\n        const v = bary[1];\n        const w = bary[2];\n\n        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;\n        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;\n        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;\n\n        return cartesian;\n    },\n\n\n    /**\n     * Given geometry defined as an array of positions, optional normals, option uv and an array of indices, returns\n     * modified arrays that have duplicate vertices removed.\n     *\n     * Note: does not work well when co-incident vertices have same positions but different normals and UVs.\n     *\n     * @param positions\n     * @param normals\n     * @param uv\n     * @param indices\n     * @returns {{positions: Array, indices: Array}}\n     * @private\n     */\n    mergeVertices(positions, normals, uv, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        const indicesLookup = [];\n        const uniquePositions = [];\n        const uniqueNormals = normals ? [] : null;\n        const uniqueUV = uv ? [] : null;\n        const indices2 = [];\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let i;\n        let len;\n        let uvi = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = uniquePositions.length / 3;\n                uniquePositions.push(vx);\n                uniquePositions.push(vy);\n                uniquePositions.push(vz);\n                if (normals) {\n                    uniqueNormals.push(normals[i]);\n                    uniqueNormals.push(normals[i + 1]);\n                    uniqueNormals.push(normals[i + 2]);\n                }\n                if (uv) {\n                    uniqueUV.push(uv[uvi]);\n                    uniqueUV.push(uv[uvi + 1]);\n                }\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n            uvi += 2;\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            indices2[i] = indicesLookup[indices[i]];\n        }\n        const result = {\n            positions: uniquePositions,\n            indices: indices2\n        };\n        if (uniqueNormals) {\n            result.normals = uniqueNormals;\n        }\n        if (uniqueUV) {\n            result.uv = uniqueUV;\n\n        }\n        return result;\n    },\n\n    /**\n     * Builds normal vectors from positions and indices.\n     *\n     * @private\n     */\n    buildNormals: ((() => {\n\n        const a = new Float32Array(3);\n        const b = new Float32Array(3);\n        const c = new Float32Array(3);\n        const ab = new Float32Array(3);\n        const ac = new Float32Array(3);\n        const crossVec = new Float32Array(3);\n\n        return (positions, indices, normals) => {\n\n            let i;\n            let len;\n            const nvecs = new Array(positions.length / 3);\n            let j0;\n            let j1;\n            let j2;\n\n            for (i = 0, len = indices.length; i < len; i += 3) {\n\n                j0 = indices[i];\n                j1 = indices[i + 1];\n                j2 = indices[i + 2];\n\n                a[0] = positions[j0 * 3];\n                a[1] = positions[j0 * 3 + 1];\n                a[2] = positions[j0 * 3 + 2];\n\n                b[0] = positions[j1 * 3];\n                b[1] = positions[j1 * 3 + 1];\n                b[2] = positions[j1 * 3 + 2];\n\n                c[0] = positions[j2 * 3];\n                c[1] = positions[j2 * 3 + 1];\n                c[2] = positions[j2 * 3 + 2];\n\n                math.subVec3(b, a, ab);\n                math.subVec3(c, a, ac);\n\n                const normVec = new Float32Array(3);\n\n                math.normalizeVec3(math.cross3Vec3(ab, ac, crossVec), normVec);\n\n                if (!nvecs[j0]) {\n                    nvecs[j0] = [];\n                }\n                if (!nvecs[j1]) {\n                    nvecs[j1] = [];\n                }\n                if (!nvecs[j2]) {\n                    nvecs[j2] = [];\n                }\n\n                nvecs[j0].push(normVec);\n                nvecs[j1].push(normVec);\n                nvecs[j2].push(normVec);\n            }\n\n            normals = (normals && normals.length === positions.length) ? normals : new Float32Array(positions.length);\n\n            let count;\n            let x;\n            let y;\n            let z;\n\n            for (i = 0, len = nvecs.length; i < len; i++) {  // Now go through and average out everything\n\n                count = nvecs[i].length;\n\n                x = 0;\n                y = 0;\n                z = 0;\n\n                for (let j = 0; j < count; j++) {\n                    x += nvecs[i][j][0];\n                    y += nvecs[i][j][1];\n                    z += nvecs[i][j][2];\n                }\n\n                normals[i * 3] = (x / count);\n                normals[i * 3 + 1] = (y / count);\n                normals[i * 3 + 2] = (z / count);\n            }\n\n            return normals;\n        };\n    }))(),\n\n    /**\n     * Builds vertex tangent vectors from positions, UVs and indices.\n     *\n     * @private\n     */\n    buildTangents: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n        const tempVec3f = new Float32Array(3);\n        const tempVec3g = new Float32Array(3);\n\n        return (positions, indices, uv) => {\n\n            const tangents = new Float32Array(positions.length);\n\n            // The vertex arrays needs to be calculated\n            // before the calculation of the tangents\n\n            for (let location = 0; location < indices.length; location += 3) {\n\n                // Recontructing each vertex and UV coordinate into the respective vectors\n\n                let index = indices[location];\n\n                const v0 = positions.subarray(index * 3, index * 3 + 3);\n                const uv0 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 1];\n\n                const v1 = positions.subarray(index * 3, index * 3 + 3);\n                const uv1 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 2];\n\n                const v2 = positions.subarray(index * 3, index * 3 + 3);\n                const uv2 = uv.subarray(index * 2, index * 2 + 2);\n\n                const deltaPos1 = math.subVec3(v1, v0, tempVec3);\n                const deltaPos2 = math.subVec3(v2, v0, tempVec3b);\n\n                const deltaUV1 = math.subVec2(uv1, uv0, tempVec3c);\n                const deltaUV2 = math.subVec2(uv2, uv0, tempVec3d);\n\n                const r = 1 / ((deltaUV1[0] * deltaUV2[1]) - (deltaUV1[1] * deltaUV2[0]));\n\n                const tangent = math.mulVec3Scalar(\n                    math.subVec3(\n                        math.mulVec3Scalar(deltaPos1, deltaUV2[1], tempVec3e),\n                        math.mulVec3Scalar(deltaPos2, deltaUV1[1], tempVec3f),\n                        tempVec3g\n                    ),\n                    r,\n                    tempVec3f\n                );\n\n                // Average the value of the vectors\n\n                let addTo;\n\n                for (let v = 0; v < 3; v++) {\n                    addTo = indices[location + v] * 3;\n                    tangents[addTo] += tangent[0];\n                    tangents[addTo + 1] += tangent[1];\n                    tangents[addTo + 2] += tangent[2];\n                }\n            }\n\n            return tangents;\n        };\n    }))(),\n\n    /**\n     * Builds vertex and index arrays needed by color-indexed triangle picking.\n     *\n     * @private\n     */\n    buildPickTriangles(positions, indices, compressGeometry) {\n\n        const numIndices = indices.length;\n        const pickPositions = compressGeometry ? new Uint16Array(numIndices * 9) : new Float32Array(numIndices * 9);\n        const pickColors = new Uint8Array(numIndices * 12);\n        let primIndex = 0;\n        let vi;// Positions array index\n        let pvi = 0;// Picking positions array index\n        let pci = 0; // Picking color array index\n\n        // Triangle indices\n        let i;\n        let r;\n        let g;\n        let b;\n        let a;\n\n        for (let location = 0; location < numIndices; location += 3) {\n\n            // Primitive-indexed triangle pick color\n\n            a = (primIndex >> 24 & 0xFF);\n            b = (primIndex >> 16 & 0xFF);\n            g = (primIndex >> 8 & 0xFF);\n            r = (primIndex & 0xFF);\n\n            // A\n\n            i = indices[location];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // B\n\n            i = indices[location + 1];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // C\n\n            i = indices[location + 2];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            primIndex++;\n        }\n\n        return {\n            positions: pickPositions,\n            colors: pickColors\n        };\n    },\n\n    /**\n     * Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\n     * that don't share vertex array elements. Works by finding groups of vertices that have the same location and\n     * averaging their normal vectors.\n     *\n     * @returns {{positions: Array, normals: *}}\n     */\n    faceToVertexNormals(positions, normals, options = {}) {\n        const smoothNormalsAngleThreshold = options.smoothNormalsAngleThreshold || 20;\n        const vertexMap = {};\n        const vertexNormals = [];\n        const vertexNormalAccum = {};\n        let acc;\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let posi;\n        let i;\n        let j;\n        let len;\n        let a;\n        let b;\n        let c;\n\n        for (i = 0, len = positions.length; i < len; i += 3) {\n\n            posi = i / 3;\n\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n\n            if (vertexMap[key] === undefined) {\n                vertexMap[key] = [posi];\n            } else {\n                vertexMap[key].push(posi);\n            }\n\n            const normal = math.normalizeVec3([normals[i], normals[i + 1], normals[i + 2]]);\n\n            vertexNormals[posi] = normal;\n\n            acc = math.vec4([normal[0], normal[1], normal[2], 1]);\n\n            vertexNormalAccum[posi] = acc;\n        }\n\n        for (key in vertexMap) {\n\n            if (vertexMap.hasOwnProperty(key)) {\n\n                const vertices = vertexMap[key];\n                const numVerts = vertices.length;\n\n                for (i = 0; i < numVerts; i++) {\n\n                    const ii = vertices[i];\n\n                    acc = vertexNormalAccum[ii];\n\n                    for (j = 0; j < numVerts; j++) {\n\n                        if (i === j) {\n                            continue;\n                        }\n\n                        const jj = vertices[j];\n\n                        a = vertexNormals[ii];\n                        b = vertexNormals[jj];\n\n                        const angle = Math.abs(math.angleVec3(a, b) / math.DEGTORAD);\n\n                        if (angle < smoothNormalsAngleThreshold) {\n\n                            acc[0] += b[0];\n                            acc[1] += b[1];\n                            acc[2] += b[2];\n                            acc[3] += 1.0;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0, len = normals.length; i < len; i += 3) {\n\n            acc = vertexNormalAccum[i / 3];\n\n            normals[i + 0] = acc[0] / acc[3];\n            normals[i + 1] = acc[1] / acc[3];\n            normals[i + 2] = acc[2] / acc[3];\n\n        }\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Ray casting\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Transforms a Canvas-space position into a World-space ray, in the context of a Camera.\n     @method canvasPosToWorldRay\n     @static\n     @param {Number[]} viewMatrix View matrix\n     @param {Number[]} projMatrix Projection matrix\n     @param {Number[]} canvasPos The Canvas-space position.\n     @param {Number[]} worldRayOrigin The World-space ray origin.\n     @param {Number[]} worldRayDir The World-space ray direction.\n     */\n    canvasPosToWorldRay: ((() => {\n\n        const tempMat4b = new Float32Array(16);\n        const tempMat4c = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n        const tempVec4c = new Float32Array(4);\n        const tempVec4d = new Float32Array(4);\n\n        return (canvas, viewMatrix, projMatrix, canvasPos, worldRayOrigin, worldRayDir) => {\n\n            const pvMat = math.mulMat4(projMatrix, viewMatrix, tempMat4b);\n            const pvMatInverse = math.inverseMat4(pvMat, tempMat4c);\n\n            // Calculate clip space coordinates, which will be in range\n            // of x=[-1..1] and y=[-1..1], with y=(+1) at top\n\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n\n            const clipX = (canvasPos[0] - canvasWidth / 2) / (canvasWidth / 2);  // Calculate clip space coordinates\n            const clipY = -(canvasPos[1] - canvasHeight / 2) / (canvasHeight / 2);\n\n            tempVec4a[0] = clipX;\n            tempVec4a[1] = clipY;\n            tempVec4a[2] = -1;\n            tempVec4a[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4a, tempVec4b);\n            math.mulVec4Scalar(tempVec4b, 1 / tempVec4b[3]);\n\n            tempVec4c[0] = clipX;\n            tempVec4c[1] = clipY;\n            tempVec4c[2] = 1;\n            tempVec4c[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4c, tempVec4d);\n            math.mulVec4Scalar(tempVec4d, 1 / tempVec4d[3]);\n\n            worldRayOrigin[0] = tempVec4d[0];\n            worldRayOrigin[1] = tempVec4d[1];\n            worldRayOrigin[2] = tempVec4d[2];\n\n            math.subVec3(tempVec4d, tempVec4b, worldRayDir);\n\n            math.normalizeVec3(worldRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a Canvas-space position to a Mesh's Local-space coordinate system, in the context of a Camera.\n     @method canvasPosToLocalRay\n     @static\n     @param {Camera} camera The Camera.\n     @param {Mesh} mesh The Mesh.\n     @param {Number[]} viewMatrix View matrix\n     @param {Number[]} projMatrix Projection matrix\n     @param {Number[]} worldMatrix Modeling matrix\n     @param {Number[]} canvasPos The Canvas-space position.\n     @param {Number[]} localRayOrigin The Local-space ray origin.\n     @param {Number[]} localRayDir The Local-space ray direction.\n     */\n    canvasPosToLocalRay: ((() => {\n\n        const worldRayOrigin = new Float32Array(3);\n        const worldRayDir = new Float32Array(3);\n\n        return (canvas, viewMatrix, projMatrix, worldMatrix, canvasPos, localRayOrigin, localRayDir) => {\n            math.canvasPosToWorldRay(canvas, viewMatrix, projMatrix, canvasPos, worldRayOrigin, worldRayDir);\n            math.worldRayToLocalRay(worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a ray from World-space to a Mesh's Local-space coordinate system.\n     @method worldRayToLocalRay\n     @static\n     @param {Number[]} worldMatrix The World transform matrix\n     @param {Number[]} worldRayOrigin The World-space ray origin.\n     @param {Number[]} worldRayDir The World-space ray direction.\n     @param {Number[]} localRayOrigin The Local-space ray origin.\n     @param {Number[]} localRayDir The Local-space ray direction.\n     */\n    worldRayToLocalRay: ((() => {\n\n        const tempMat4 = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n\n        return (worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir) => {\n\n            const modelMatInverse = math.inverseMat4(worldMatrix, tempMat4);\n\n            tempVec4a[0] = worldRayOrigin[0];\n            tempVec4a[1] = worldRayOrigin[1];\n            tempVec4a[2] = worldRayOrigin[2];\n            tempVec4a[3] = 1;\n\n            math.transformVec4(modelMatInverse, tempVec4a, tempVec4b);\n\n            localRayOrigin[0] = tempVec4b[0];\n            localRayOrigin[1] = tempVec4b[1];\n            localRayOrigin[2] = tempVec4b[2];\n\n            math.transformVec3(modelMatInverse, worldRayDir, localRayDir);\n        };\n    }))(),\n\n    buildKDTree: ((() => {\n\n        const KD_TREE_MAX_DEPTH = 10;\n        const KD_TREE_MIN_TRIANGLES = 20;\n\n        const dimLength = new Float32Array();\n\n        function buildNode(triangles, indices, positions, depth) {\n            const aabb = new Float32Array(6);\n\n            const node = {\n                triangles: null,\n                left: null,\n                right: null,\n                leaf: false,\n                splitDim: 0,\n                aabb\n            };\n\n            aabb[0] = aabb[1] = aabb[2] = Number.POSITIVE_INFINITY;\n            aabb[3] = aabb[4] = aabb[5] = Number.NEGATIVE_INFINITY;\n\n            let t;\n            let i;\n            let len;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n                var ii = triangles[t] * 3;\n                for (let j = 0; j < 3; ++j) {\n                    const pi = indices[ii + j] * 3;\n                    if (positions[pi] < aabb[0]) {\n                        aabb[0] = positions[pi]\n                    }\n                    if (positions[pi] > aabb[3]) {\n                        aabb[3] = positions[pi]\n                    }\n                    if (positions[pi + 1] < aabb[1]) {\n                        aabb[1] = positions[pi + 1]\n                    }\n                    if (positions[pi + 1] > aabb[4]) {\n                        aabb[4] = positions[pi + 1]\n                    }\n                    if (positions[pi + 2] < aabb[2]) {\n                        aabb[2] = positions[pi + 2]\n                    }\n                    if (positions[pi + 2] > aabb[5]) {\n                        aabb[5] = positions[pi + 2]\n                    }\n                }\n            }\n\n            if (triangles.length < KD_TREE_MIN_TRIANGLES || depth > KD_TREE_MAX_DEPTH) {\n                node.triangles = triangles;\n                node.leaf = true;\n                return node;\n            }\n\n            dimLength[0] = aabb[3] - aabb[0];\n            dimLength[1] = aabb[4] - aabb[1];\n            dimLength[2] = aabb[5] - aabb[2];\n\n            let dim = 0;\n\n            if (dimLength[1] > dimLength[dim]) {\n                dim = 1;\n            }\n\n            if (dimLength[2] > dimLength[dim]) {\n                dim = 2;\n            }\n\n            node.splitDim = dim;\n\n            const mid = (aabb[dim] + aabb[dim + 3]) / 2;\n            const left = new Array(triangles.length);\n            let numLeft = 0;\n            const right = new Array(triangles.length);\n            let numRight = 0;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n\n                var ii = triangles[t] * 3;\n                const i0 = indices[ii];\n                const i1 = indices[ii + 1];\n                const i2 = indices[ii + 2];\n\n                const pi0 = i0 * 3;\n                const pi1 = i1 * 3;\n                const pi2 = i2 * 3;\n\n                if (positions[pi0 + dim] <= mid || positions[pi1 + dim] <= mid || positions[pi2 + dim] <= mid) {\n                    left[numLeft++] = triangles[t];\n                } else {\n                    right[numRight++] = triangles[t];\n                }\n            }\n\n            left.length = numLeft;\n            right.length = numRight;\n\n            node.left = buildNode(left, indices, positions, depth + 1);\n            node.right = buildNode(right, indices, positions, depth + 1);\n\n            return node;\n        }\n\n        return (indices, positions) => {\n            const numTris = indices.length / 3;\n            const triangles = new Array(numTris);\n            for (let i = 0; i < numTris; ++i) {\n                triangles[i] = i;\n            }\n            return buildNode(triangles, indices, positions, 0);\n        };\n    }))(),\n\n\n    decompressPosition(position, decodeMatrix, dest) {\n        dest[0] = position[0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[1] = position[1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    },\n\n    decompressPositions(positions, decodeMatrix, dest = new Float32Array(positions.length)) {\n        for (let i = 0, len = positions.length; i < len; i += 3) {\n            dest[i + 0] = positions[i + 0] * decodeMatrix[0] + decodeMatrix[12];\n            dest[i + 1] = positions[i + 1] * decodeMatrix[5] + decodeMatrix[13];\n            dest[i + 2] = positions[i + 2] * decodeMatrix[10] + decodeMatrix[14];\n        }\n        return dest;\n    },\n\n    decompressUV(uv, decodeMatrix, dest) {\n        dest[0] = uv[0] * decodeMatrix[0] + decodeMatrix[6];\n        dest[1] = uv[1] * decodeMatrix[4] + decodeMatrix[7];\n    },\n\n    decompressUVs(uvs, decodeMatrix, dest = new Float32Array(uvs.length)) {\n        for (let i = 0, len = uvs.length; i < len; i += 3) {\n            dest[i + 0] = uvs[i + 0] * decodeMatrix[0] + decodeMatrix[6];\n            dest[i + 1] = uvs[i + 1] * decodeMatrix[4] + decodeMatrix[7];\n        }\n        return dest;\n    },\n\n    octDecodeVec2(oct, result) {\n        let x = oct[0];\n        let y = oct[1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[0] = x / length;\n        result[1] = y / length;\n        result[2] = z / length;\n        return result;\n    },\n\n    octDecodeVec2s(octs, result) {\n        for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n            let x = octs[i + 0];\n            let y = octs[i + 1];\n            x = (2 * x + 1) / 255;\n            y = (2 * y + 1) / 255;\n            const z = 1 - Math.abs(x) - Math.abs(y);\n            if (z < 0) {\n                x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n                y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n            }\n            const length = Math.sqrt(x * x + y * y + z * z);\n            result[j + 0] = x / length;\n            result[j + 1] = y / length;\n            result[j + 2] = z / length;\n            j += 3;\n        }\n        return result;\n    }\n};\n\nmath.buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n    // TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + \",\" + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                dot = math.dotVec3(normal1, normal2);\n                if (dot > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js ***!
  \****************************************************************************/
/*! exports provided: createRTCViewMat, worldToRTCPos, worldToRTCPositions, rtcToWorldPos, getPlaneRTCPos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRTCViewMat\", function() { return createRTCViewMat; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"worldToRTCPos\", function() { return worldToRTCPos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"worldToRTCPositions\", function() { return worldToRTCPositions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rtcToWorldPos\", function() { return rtcToWorldPos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPlaneRTCPos\", function() { return getPlaneRTCPos; });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n\n\nconst tempVec3a = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\nconst tempAABB3 = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].AABB3();\n\n/**\n * Given a view matrix and a relative-to-center (RTC) coordinate origin, returns a view matrix\n * to transform RTC coordinates to View-space.\n *\n * The returned view matrix is\n *\n * @private\n */\nconst createRTCViewMat = (function () {\n\n    const tempMat = new Float32Array(16);\n    const rtcCenterWorld = new Float64Array(4);\n    const rtcCenterView = new Float64Array(4);\n\n    return function (viewMat, rtcCenter, rtcViewMat = tempMat) {\n        rtcCenterWorld[0] = rtcCenter[0];\n        rtcCenterWorld[1] = rtcCenter[1];\n        rtcCenterWorld[2] = rtcCenter[2];\n        rtcCenterWorld[3] = 1;\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(viewMat, rtcCenterWorld, rtcCenterView);\n        _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].setMat4Translation(viewMat, rtcCenterView, rtcViewMat);\n        return rtcViewMat;\n    }\n}());\n\n/**\n * Converts a World-space 3D position to RTC.\n *\n * Given a double-precision World-space position, returns a double-precision relative-to-center (RTC) center pos\n * and a single-precision offset fom that center.\n *\n * @param {Float64Array} worldPos The World-space position.\n * @param {Float64Array} rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param {Float32Array} rtcPos Single-precision offset fom that center.\n */\nfunction worldToRTCPos(worldPos, rtcCenter, rtcPos) {\n\n    const xHigh = Float32Array.from([worldPos[0]])[0];\n    const xLow = worldPos[0] - xHigh;\n\n    const yHigh = Float32Array.from([worldPos[1]])[0];\n    const yLow = worldPos[1] - yHigh;\n\n    const zHigh = Float32Array.from([worldPos[2]])[0];\n    const zLow = worldPos[2] - zHigh;\n\n    rtcCenter[0] = xHigh;\n    rtcCenter[1] = yHigh;\n    rtcCenter[2] = zHigh;\n\n    rtcPos[0] = xLow;\n    rtcPos[1] = yLow;\n    rtcPos[2] = zLow;\n}\n\n\n/**\n * Converts a flat array of double-precision positions to RTC positions.\n *\n * Returns the RTC positions, along with a computed RTC center for those positions.\n *\n * When computing the RTC position, this function uses a modulus operation to ensure that, whenever possible,\n * identical RTC positions are reused for different positions arrays.\n *\n * @param {Float64Array} worldPositions Flat array of World-space 3D positions.\n * @param {Float64Array} rtcPositions Outputs the computed flat array of 3D RTC positions.\n * @param {Float64Array} rtcCenter Outputs the computed double-precision relative-to-center (RTC) center pos.\n * @param {Number} [cellSize=10000000] The size of each coordinate cell within the RTC coordinate system.\n * @returns {Boolean} ````True```` if the positions actually needed conversion to RTC, else ````false````. When\n * ````false````, we can safely ignore the data returned in ````rtcPositions```` and ````rtcCenter````,\n * since ````rtcCenter```` will equal ````[0,0,0]````, and ````rtcPositions```` will contain identical values to ````positions````.\n */\nfunction worldToRTCPositions(worldPositions, rtcPositions, rtcCenter, cellSize = 10000000) {\n\n    const center = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].getPositionsCenter(worldPositions, tempVec3a);\n\n    const rtcCenterX = Math.round(center[0] / cellSize) * cellSize;\n    const rtcCenterY = Math.round(center[1] / cellSize) * cellSize;\n    const rtcCenterZ = Math.round(center[2] / cellSize) * cellSize;\n\n    for (let i = 0, len = worldPositions.length; i < len; i += 3) {\n        rtcPositions[i + 0] = worldPositions[i + 0] - rtcCenterX;\n        rtcPositions[i + 1] = worldPositions[i + 1] - rtcCenterY;\n        rtcPositions[i + 2] = worldPositions[i + 2] - rtcCenterZ;\n    }\n\n    rtcCenter[0] = rtcCenterX;\n    rtcCenter[1] = rtcCenterY;\n    rtcCenter[2] = rtcCenterZ;\n\n    const rtcNeeded = (rtcCenter[0] !== 0 || rtcCenter[1] !== 0 || rtcCenter[2] !== 0);\n\n    return rtcNeeded;\n}\n\n/**\n * Converts an RTC 3D position to World-space.\n *\n * @param {Float64Array} rtcCenter Double-precision relative-to-center (RTC) center pos.\n * @param {Float32Array} rtcPos Single-precision offset fom that center.\n * @param {Float64Array} worldPos The World-space position.\n */\nfunction rtcToWorldPos(rtcCenter, rtcPos, worldPos) {\n    worldPos[0] = rtcCenter[0] + rtcPos[0];\n    worldPos[1] = rtcCenter[1] + rtcPos[1];\n    worldPos[2] = rtcCenter[2] + rtcPos[2];\n    return worldPos;\n}\n\n/**\n * Given a 3D plane defined by distance from origin and direction, and an RTC center position,\n * return a plane position that is relative to the RTC center.\n *\n * @param dist\n * @param dir\n * @param rtcCenter\n * @param rtcPlanePos\n * @returns {*}\n */\nfunction getPlaneRTCPos(dist, dir, rtcCenter, rtcPlanePos) {\n    const rtcCenterToPlaneDist = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].dotVec3(dir, rtcCenter) + dist;\n    const dirNormalized = _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(dir, tempVec3a);\n    _math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(dirNormalized, -rtcCenterToPlaneDist, rtcPlanePos);\n    return rtcPlanePos;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js ***!
  \***********************************************************************/
/*! exports provided: Mesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh\", function() { return Mesh; });\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _Component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Component.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/Component.js\");\n/* harmony import */ var _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../webgl/RenderState.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\");\n/* harmony import */ var _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./draw/DrawRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js\");\n/* harmony import */ var _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./emphasis/EmphasisFillRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js\");\n/* harmony import */ var _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./emphasis/EmphasisEdgesRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js\");\n/* harmony import */ var _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pick/PickMeshRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js\");\n/* harmony import */ var _pick_PickTriangleRenderer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./pick/PickTriangleRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js\");\n/* harmony import */ var _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./occlusion/OcclusionRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js\");\n/* harmony import */ var _shadow_ShadowRenderer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./shadow/ShadowRenderer.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js\");\n/* harmony import */ var _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../math/geometryCompressionUtils.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/geometryCompressionUtils.js\");\n/* harmony import */ var _webgl_RenderFlags_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../webgl/RenderFlags.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js\");\n/**\n Fired when this Mesh is picked via a call to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n\n The event parameters will be the hit result returned by the {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}} method.\n @event picked\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst obb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].OBB3();\nconst angleAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst q1 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst q2 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\nconst xAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([1, 0, 0]);\nconst yAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 1, 0]);\nconst zAxis = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3([0, 0, 1]);\n\nconst veca = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(3);\nconst vecb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(3);\n\nconst identityMat = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n\n/**\n * @desc An {@link Entity} that is a drawable element, with a {@link Geometry} and a {@link Material}, that can be\n * connected into a scene graph using {@link Node}s.\n *\n * ## Usage\n *\n * The example below is the same as the one given for {@link Node}, since the two classes work together.  In this example,\n * we'll create a scene graph in which a root {@link Node} represents a group and the Meshes are leaves.\n *\n * Since {@link Node} implements {@link Entity}, we can designate the root {@link Node} as a model, causing it to be registered by its\n * ID in {@link Scene#models}.\n *\n * Since Mesh also implements {@link Entity}, we can designate the leaf Meshes as objects, causing them to\n * be registered by their IDs in {@link Scene#objects}.\n *\n * We can then find those {@link Entity} types in {@link Scene#models} and {@link Scene#objects}.\n *\n * We can also update properties of our object-Meshes via calls to {@link Scene#setObjectsHighlighted} etc.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#sceneRepresentation_SceneGraph)]\n *\n * ````javascript\n * import {Viewer} from \"../src/viewer/Viewer.js\";\n * import {Mesh} from \"../src/scene/mesh/Mesh.js\";\n * import {Node} from \"../src/scene/nodes/Node.js\";\n * import {PhongMaterial} from \"../src/scene/materials/PhongMaterial.js\";\n * import {buildBoxGeometry} from \"../src/viewer/scene/geometry/builders/buildBoxGeometry.js\";\n * import {ReadableGeometry} from \"../src/viewer/scene/geometry/ReadableGeometry.js\";\n *\n * const viewer = new Viewer({\n *     canvasId: \"myCanvas\"\n * });\n *\n * viewer.scene.camera.eye = [-21.80, 4.01, 6.56];\n * viewer.scene.camera.look = [0, -5.75, 0];\n * viewer.scene.camera.up = [0.37, 0.91, -0.11];\n *\n * const boxGeometry = new ReadableGeometry(viewer.scene, buildBoxGeometry({\n *      xSize: 1,\n *      ySize: 1,\n *      zSize: 1\n * }));\n *\n * new Node(viewer.scene, {\n *      id: \"table\",\n *      isModel: true, // <---------- Node represents a model, so is registered by ID in viewer.scene.models\n *      rotation: [0, 50, 0],\n *      position: [0, 0, 0],\n *      scale: [1, 1, 1],\n *\n *      children: [\n *\n *          new Mesh(viewer.scene, { // Red table leg\n *              id: \"redLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [-4, -6, -4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [1, 0.3, 0.3]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, { // Green table leg\n *              id: \"greenLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [4, -6, -4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [0.3, 1.0, 0.3]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, {// Blue table leg\n *              id: \"blueLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [4, -6, 4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [0.3, 0.3, 1.0]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, {  // Yellow table leg\n *              id: \"yellowLeg\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [-4, -6, 4],\n *              scale: [1, 3, 1],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                   diffuse: [1.0, 1.0, 0.0]\n *              }),\n *              geometry: boxGeometry\n *          }),\n *\n *          new Mesh(viewer.scene, { // Purple table top\n *              id: \"tableTop\",\n *              isObject: true, // <------ Node represents an object, so is registered by ID in viewer.scene.objects\n *              position: [0, -3, 0],\n *              scale: [6, 0.5, 6],\n *              rotation: [0, 0, 0],\n *              material: new PhongMaterial(viewer.scene, {\n *                  diffuse: [1.0, 0.3, 1.0]\n *              }),\n *              geometry: boxGeometry\n *          })\n *      ]\n *  });\n *\n * // Find Nodes and Meshes by their IDs\n *\n * var table = viewer.scene.models[\"table\"];                // Since table Node has isModel == true\n *\n * var redLeg = viewer.scene.objects[\"redLeg\"];             // Since the Meshes have isObject == true\n * var greenLeg = viewer.scene.objects[\"greenLeg\"];\n * var blueLeg = viewer.scene.objects[\"blueLeg\"];\n *\n * // Highlight one of the table leg Meshes\n *\n * viewer.scene.setObjectsHighlighted([\"redLeg\"], true);    // Since the Meshes have isObject == true\n *\n * // Periodically update transforms on our Nodes and Meshes\n *\n * viewer.scene.on(\"tick\", function () {\n *\n *       // Rotate legs\n *       redLeg.rotateY(0.5);\n *       greenLeg.rotateY(0.5);\n *       blueLeg.rotateY(0.5);\n *\n *       // Rotate table\n *       table.rotateY(0.5);\n *       table.rotateX(0.3);\n *   });\n * ````\n *\n * ## Metadata\n *\n * As mentioned, we can also associate {@link MetaModel}s and {@link MetaObject}s with our {@link Node}s and Meshes,\n * within a {@link MetaScene}. See {@link MetaScene} for an example.\n *\n * @implements {Entity}\n * @implements {Drawable}\n */\nclass Mesh extends _Component_js__WEBPACK_IMPORTED_MODULE_1__[\"Component\"] {\n\n    /**\n     @private\n     */\n    get type() {\n        return \"Mesh\";\n    }\n\n    /**\n     * @constructor\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well.\n     * @param {*} [cfg] Configs\n     * @param {String} [cfg.id] Optional ID, unique among all components in the parent scene, generated automatically when omitted.\n     * @param {String} [cfg.originalSystemId] ID of the corresponding object within the originating system, if any.\n     * @param {Boolean} [cfg.isModel] Specify ````true```` if this Mesh represents a model, in which case the Mesh will be registered by {@link Mesh#id} in {@link Scene#models} and may also have a corresponding {@link MetaModel} with matching {@link MetaModel#id}, registered by that ID in {@link MetaScene#metaModels}.\n     * @param {Boolean} [cfg.isObject] Specify ````true```` if this Mesh represents an object, in which case the Mesh will be registered by {@link Mesh#id} in {@link Scene#objects} and may also have a corresponding {@link MetaObject} with matching {@link MetaObject#id}, registered by that ID in {@link MetaScene#metaObjects}.\n     * @param {Node} [cfg.parent] The parent Node.\n     * @param {Number[]} [cfg.rtcCenter] Relative-to-center (RTC) coordinate system center for this Mesh. When this is given, then ````matrix````, ````position```` and ````geometry```` are all assumed to be relative to this center.\n     * @param {Number[]} [cfg.position=[0,0,0]] Local 3D position.\n     * @param {Number[]} [cfg.scale=[1,1,1]] Local scale.\n     * @param {Number[]} [cfg.rotation=[0,0,0]] Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     * @param {Number[]} [cfg.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]] Local modelling transform matrix. Overrides the position, scale and rotation parameters.\n     * @param {Number[]} [cfg.offset=[0,0,0]] World-space 3D translation offset. Translates the Mesh in World space, after modelling transforms.\n     * @param {Boolean} [cfg.visible=true] Indicates if the Mesh is initially visible.\n     * @param {Boolean} [cfg.culled=false] Indicates if the Mesh is initially culled from view.\n     * @param {Boolean} [cfg.pickable=true] Indicates if the Mesh is initially pickable.\n     * @param {Boolean} [cfg.clippable=true] Indicates if the Mesh is initially clippable.\n     * @param {Boolean} [cfg.collidable=true] Indicates if the Mesh is initially included in boundary calculations.\n     * @param {Boolean} [cfg.castsShadow=true] Indicates if the Mesh initially casts shadows.\n     * @param {Boolean} [cfg.receivesShadow=true]  Indicates if the Mesh initially receives shadows.\n     * @param {Boolean} [cfg.xrayed=false] Indicates if the Mesh is initially xrayed.\n     * @param {Boolean} [cfg.highlighted=false] Indicates if the Mesh is initially highlighted.\n     * @param {Boolean} [cfg.selected=false] Indicates if the Mesh is initially selected.\n     * @param {Boolean} [cfg.edges=false] Indicates if the Mesh's edges are initially emphasized.\n     * @param {Number[]} [cfg.colorize=[1.0,1.0,1.0]] Mesh's initial RGB colorize color, multiplies by the rendered fragment colors.\n     * @param {Number} [cfg.opacity=1.0] Mesh's initial opacity factor, multiplies by the rendered fragment alpha.\n     * @param {String} [cfg.billboard=\"none\"] Mesh's billboarding behaviour. Options are \"none\" for no billboarding, \"spherical\" to always directly face {@link Camera.eye}, rotating both vertically and horizontally, or \"cylindrical\" to face the {@link Camera#eye} while rotating only about its vertically axis (use that mode for things like trees on a landscape).\n     * @param {Geometry} [cfg.geometry] {@link Geometry} to define the shape of this Mesh. Inherits {@link Scene#geometry} by default.\n     * @param {Material} [cfg.material] {@link Material} to define the normal rendered appearance for this Mesh. Inherits {@link Scene#material} by default.\n     * @param {EmphasisMaterial} [cfg.xrayMaterial] {@link EmphasisMaterial} to define the xrayed appearance for this Mesh. Inherits {@link Scene#xrayMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.highlightMaterial] {@link EmphasisMaterial} to define the xrayed appearance for this Mesh. Inherits {@link Scene#highlightMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.selectedMaterial] {@link EmphasisMaterial} to define the selected appearance for this Mesh. Inherits {@link Scene#selectedMaterial} by default.\n     * @param {EmphasisMaterial} [cfg.edgeMaterial] {@link EdgeMaterial} to define the appearance of enhanced edges for this Mesh. Inherits {@link Scene#edgeMaterial} by default.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        /**\n         * ID of the corresponding object within the originating system, if any.\n         *\n         * @type {String}\n         * @abstract\n         */\n        this.originalSystemId = (cfg.originalSystemId || this.id);\n\n        /** @private **/\n        this.renderFlags = new _webgl_RenderFlags_js__WEBPACK_IMPORTED_MODULE_11__[\"RenderFlags\"]();\n\n        this._state = new _webgl_RenderState_js__WEBPACK_IMPORTED_MODULE_2__[\"RenderState\"]({ // NOTE: Renderer gets modeling and normal matrices from Mesh#matrix and Mesh.#normalWorldMatrix\n            visible: true,\n            culled: false,\n            pickable: null,\n            clippable: null,\n            collidable: null,\n            castsShadow: null,\n            receivesShadow: null,\n            xrayed: false,\n            highlighted: false,\n            selected: false,\n            edges: false,\n            stationary: !!cfg.stationary,\n            billboard: this._checkBillboard(cfg.billboard),\n            layer: null,\n            colorize: null,\n            pickID: this.scene._renderer.getPickID(this),\n            drawHash: \"\",\n            pickHash: \"\",\n            offset: _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(),\n            rtcCenter: null,\n            rtcCenterHash: null\n        });\n\n        this._drawRenderer = null;\n        this._shadowRenderer = null;\n        this._emphasisFillRenderer = null;\n        this._emphasisEdgesRenderer = null;\n        this._pickMeshRenderer = null;\n        this._pickTriangleRenderer = null;\n        this._occlusionRenderer = null;\n\n        this._geometry = cfg.geometry ? this._checkComponent2([\"ReadableGeometry\", \"VBOGeometry\"], cfg.geometry) : this.scene.geometry;\n        this._material = cfg.material ? this._checkComponent2([\"PhongMaterial\", \"MetallicMaterial\", \"SpecularMaterial\", \"LambertMaterial\"], cfg.material) : this.scene.material;\n        this._xrayMaterial = cfg.xrayMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.xrayMaterial) : this.scene.xrayMaterial;\n        this._highlightMaterial = cfg.highlightMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.highlightMaterial) : this.scene.highlightMaterial;\n        this._selectedMaterial = cfg.selectedMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.selectedMaterial) : this.scene.selectedMaterial;\n        this._edgeMaterial = cfg.edgeMaterial ? this._checkComponent(\"EdgeMaterial\", cfg.edgeMaterial) : this.scene.edgeMaterial;\n\n        this._parentNode = null;\n\n        this._aabb = null;\n        this._aabbDirty = true;\n\n        this._numTriangles = (this._geometry ? this._geometry.numTriangles : 0);\n\n        this.scene._aabbDirty = true;\n\n        this._scale = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n        this._quaternion = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityQuaternion();\n        this._rotation = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n        this._position = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n        this._worldMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n        this._worldNormalMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n\n        this._localMatrixDirty = true;\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n\n        if (cfg.rtcCenter) {\n            this._state.rtcCenter = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3(cfg.rtcCenter);\n            this._state.rtcCenterHash = cfg.rtcCenter.join();\n        }\n\n        if (cfg.matrix) {\n            this.matrix = cfg.matrix;\n        } else {\n            this.scale = cfg.scale;\n            this.position = cfg.position;\n            if (cfg.quaternion) {\n            } else {\n                this.rotation = cfg.rotation;\n            }\n        }\n\n        this._isObject = cfg.isObject;\n        if (this._isObject) {\n            this.scene._registerObject(this);\n        }\n\n        this._isModel = cfg.isModel;\n        if (this._isModel) {\n            this.scene._registerModel(this);\n        }\n\n        this.visible = cfg.visible;\n        this.culled = cfg.culled;\n        this.pickable = cfg.pickable;\n        this.clippable = cfg.clippable;\n        this.collidable = cfg.collidable;\n        this.castsShadow = cfg.castsShadow;\n        this.receivesShadow = cfg.receivesShadow;\n        this.xrayed = cfg.xrayed;\n        this.highlighted = cfg.highlighted;\n        this.selected = cfg.selected;\n        this.edges = cfg.edges;\n        this.layer = cfg.layer;\n        this.colorize = cfg.colorize;\n        this.opacity = cfg.opacity;\n        this.offset = cfg.offset;\n\n        if (cfg.parentId) {\n            const parentNode = this.scene.components[cfg.parentId];\n            if (!parentNode) {\n                this.error(\"Parent not found: '\" + cfg.parentId + \"'\");\n            } else if (!parentNode.isNode) {\n                this.error(\"Parent is not a Node: '\" + cfg.parentId + \"'\");\n            } else {\n                parentNode.addChild(this);\n            }\n            this._parentNode = parentNode;\n        } else if (cfg.parent) {\n            if (!cfg.parent.isNode) {\n                this.error(\"Parent is not a Node\");\n            }\n            cfg.parent.addChild(this);\n            this._parentNode = cfg.parent;\n        }\n\n        this.compile();\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Mesh members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that this Component is a Mesh.\n     * @final\n     * @type {Boolean}\n     */\n    get isMesh() {\n        return true;\n    }\n\n    /**\n     * The parent Node.\n     *\n     * The parent Node may also be set by passing the Mesh to the parent's {@link Node#addChild} method.\n     *\n     * @type {Node}\n     */\n    get parent() {\n        return this._parentNode;\n    }\n\n    _checkBillboard(value) {\n        value = value || \"none\";\n        if (value !== \"spherical\" && value !== \"cylindrical\" && value !== \"none\") {\n            this.error(\"Unsupported value for 'billboard': \" + value + \" - accepted values are \" +\n                \"'spherical', 'cylindrical' and 'none' - defaulting to 'none'.\");\n            value = \"none\";\n        }\n        return value;\n    }\n\n    /**\n     * Called by xeokit to compile shaders for this Mesh.\n     * @private\n     */\n    compile() {\n        const drawHash = this._makeDrawHash();\n        if (this._state.drawHash !== drawHash) {\n            this._state.drawHash = drawHash;\n            this._putDrawRenderers();\n            this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this);\n            // this._shadowRenderer = ShadowRenderer.get(this);\n            this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this);\n            this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this);\n        }\n        const pickHash = this._makePickHash();\n        if (this._state.pickHash !== pickHash) {\n            this._state.pickHash = pickHash;\n            this._putPickRenderers();\n            this._pickMeshRenderer = _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__[\"PickMeshRenderer\"].get(this);\n        }\n        const occlusionHash = this._makeOcclusionHash();\n        if (this._state.occlusionHash !== occlusionHash) {\n            this._state.occlusionHash = occlusionHash;\n            this._putOcclusionRenderer();\n            this._occlusionRenderer = _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__[\"OcclusionRenderer\"].get(this);\n        }\n    }\n\n    _setLocalMatrixDirty() {\n        this._localMatrixDirty = true;\n        this._setWorldMatrixDirty();\n    }\n\n    _setWorldMatrixDirty() {\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n    }\n\n    _buildWorldMatrix() {\n        const localMatrix = this.matrix;\n        if (!this._parentNode) {\n            for (let i = 0, len = localMatrix.length; i < len; i++) {\n                this._worldMatrix[i] = localMatrix[i];\n            }\n        } else {\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulMat4(this._parentNode.worldMatrix, localMatrix, this._worldMatrix);\n        }\n        this._worldMatrixDirty = false;\n    }\n\n    _buildWorldNormalMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        if (!this._worldNormalMatrix) {\n            this._worldNormalMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mat4();\n        }\n        // Note: order of inverse and transpose doesn't matter\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transposeMat4(this._worldMatrix, this._worldNormalMatrix);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].inverseMat4(this._worldNormalMatrix);\n        this._worldNormalMatrixDirty = false;\n    }\n\n    _setAABBDirty() {\n        if (this.collidable) {\n            for (let node = this; node; node = node._parentNode) {\n                node._aabbDirty = true;\n            }\n        }\n    }\n\n    _updateAABB() {\n        this.scene._aabbDirty = true;\n        if (!this._aabb) {\n            this._aabb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].AABB3();\n        }\n        this._buildAABB(this.worldMatrix, this._aabb); // Mesh or PerformanceModel\n        this._aabbDirty = false;\n    }\n\n    _webglContextRestored() {\n        if (this._drawRenderer) {\n            this._drawRenderer.webglContextRestored();\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.webglContextRestored();\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.webglContextRestored();\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.webglContextRestored();\n        }\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n        if (this._occlusionRenderer) {\n            this._occlusionRenderer.webglContextRestored();\n        }\n    }\n\n    _makeDrawHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n            scene._lightsState.getHash(),\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        if (state.receivesShadow) {\n            hash.push(\"/rs\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _makePickHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _makeOcclusionHash() {\n        const scene = this.scene;\n        const hash = [\n            scene.canvas.canvas.id,\n            scene._sectionPlanesState.getHash()\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            hash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            hash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            hash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            hash.push(\"/c\");\n        }\n        hash.push(\";\");\n        return hash.join(\"\");\n    }\n\n    _buildAABB(worldMatrix, aabb) {\n\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformOBB3(worldMatrix, this._geometry.obb, obb);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].OBB3ToAABB3(obb, aabb);\n\n        const offset = this._state.offset;\n\n        aabb[0] += offset[0];\n        aabb[1] += offset[1];\n        aabb[2] += offset[2];\n        aabb[3] += offset[0];\n        aabb[4] += offset[1];\n        aabb[5] += offset[2];\n\n        if (this._state.rtcCenter) {\n            const rtcCenter = this._state.rtcCenter;\n            aabb[0] += rtcCenter[0];\n            aabb[1] += rtcCenter[1];\n            aabb[2] += rtcCenter[2];\n            aabb[3] += rtcCenter[0];\n            aabb[4] += rtcCenter[1];\n            aabb[5] += rtcCenter[2];\n        }\n    }\n\n    /**\n     * Defines the shape of this Mesh.\n     *\n     * Set to {@link Scene#geometry} by default.\n     *\n     * @type {Geometry}\n     */\n    get geometry() {\n        return this._geometry;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when rendering normally, ie. when not xrayed, highlighted or selected.\n     *\n     * Set to {@link Scene#material} by default.\n     *\n     * @type {Material}\n     */\n    get material() {\n        return this._material;\n    }\n\n    /**\n     * Sets the Mesh's local translation.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    set position(value) {\n        this._position.set(value || [0, 0, 0]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local translation.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get position() {\n        return this._position;\n    }\n\n    /**\n     * Sets the Mesh's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    set rotation(value) {\n        this._rotation.set(value || [0, 0, 0]);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].eulerToQuaternion(this._rotation, \"XYZ\", this._quaternion);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get rotation() {\n        return this._rotation;\n    }\n\n    /**\n     * Sets the Mesh's local rotation quaternion.\n     *\n     * Default value is ````[0,0,0,1]````.\n     *\n     * @type {Number[]}\n     */\n    set quaternion(value) {\n        this._quaternion.set(value || [0, 0, 0, 1]);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].quaternionToEuler(this._quaternion, \"XYZ\", this._rotation);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local rotation quaternion.\n     *\n     * Default value is ````[0,0,0,1]````.\n     *\n     * @type {Number[]}\n     */\n    get quaternion() {\n        return this._quaternion;\n    }\n\n    /**\n     * Sets the Mesh's local scale.\n     *\n     * Default value is ````[1,1,1]````.\n     *\n     * @type {Number[]}\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1, 1]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local scale.\n     *\n     * Default value is ````[1,1,1]````.\n     *\n     * @type {Number[]}\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Sets the Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {Number[]}\n     */\n    set matrix(value) {\n        if (!this.__localMatrix) {\n            this.__localMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n        }\n        this.__localMatrix.set(value || identityMat);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].decomposeMat4(this.__localMatrix, this._position, this._quaternion, this._scale);\n        this._localMatrixDirty = false;\n        this._setWorldMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's local modeling transform matrix.\n     *\n     * Default value is ````[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]````.\n     *\n     * @type {Number[]}\n     */\n    get matrix() {\n        if (this._localMatrixDirty) {\n            if (!this.__localMatrix) {\n                this.__localMatrix = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].identityMat4();\n            }\n            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].composeMat4(this._position, this._quaternion, this._scale, this.__localMatrix);\n            this._localMatrixDirty = false;\n        }\n        return this.__localMatrix;\n    }\n\n    /**\n     * Gets the Mesh's World matrix.\n     *\n     * @property worldMatrix\n     * @type {Number[]}\n     */\n    get worldMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        return this._worldMatrix;\n    }\n\n    /**\n     * Gets the Mesh's World normal matrix.\n     *\n     * @type {Number[]}\n     */\n    get worldNormalMatrix() {\n        if (this._worldNormalMatrixDirty) {\n            this._buildWorldNormalMatrix();\n        }\n        return this._worldNormalMatrix;\n    }\n\n    /**\n     * Rotates the Mesh about the given local axis by the given increment.\n     *\n     * @param {Number[]} axis Local axis about which to rotate.\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotate(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].angleAxisToQuaternion(angleAxis, q1);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulQuaternions(this.quaternion, q1, q2);\n        this.quaternion = q2;\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     * Rotates the Mesh about the given World-space axis by the given increment.\n     *\n     * @param {Number[]} axis Local axis about which to rotate.\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateOnWorldAxis(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].DEGTORAD;\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].angleAxisToQuaternion(angleAxis, q1);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulQuaternions(q1, this.quaternion, q1);\n        //this.quaternion.premultiply(q1);\n        return this;\n    }\n\n    /**\n     * Rotates the Mesh about the local X-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateX(angle) {\n        return this.rotate(xAxis, angle);\n    }\n\n    /**\n     * Rotates the Mesh about the local Y-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateY(angle) {\n        return this.rotate(yAxis, angle);\n    }\n\n    /**\n     * Rotates the Mesh about the local Z-axis by the given increment.\n     *\n     * @param {Number} angle Angle increment in degrees.\n     */\n    rotateZ(angle) {\n        return this.rotate(zAxis, angle);\n    }\n\n    /**\n     * Translates the Mesh along local space vector by the given increment.\n     *\n     * @param {Number[]} axis Normalized local space 3D vector along which to translate.\n     * @param {Number} distance Distance to translate along  the vector.\n     */\n    translate(axis, distance) {\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3ApplyQuaternion(this.quaternion, axis, veca);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(veca, distance, vecb);\n        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(this.position, vecb, this.position);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     * Translates the Mesh along the local X-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the X-axis.\n     */\n    translateX(distance) {\n        return this.translate(xAxis, distance);\n    }\n\n    /**\n     * Translates the Mesh along the local Y-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the Y-axis.\n     */\n    translateY(distance) {\n        return this.translate(yAxis, distance);\n    }\n\n    /**\n     * Translates the Mesh along the local Z-axis by the given increment.\n     *\n     * @param {Number} distance Distance to translate along  the Z-axis.\n     */\n    translateZ(distance) {\n        return this.translate(zAxis, distance);\n    }\n\n    _putDrawRenderers() {\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.put();\n            this._shadowRenderer = null;\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.put();\n            this._emphasisFillRenderer = null;\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.put();\n            this._emphasisEdgesRenderer = null;\n        }\n    }\n\n    _putPickRenderers() {\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.put();\n            this._pickMeshRenderer = null;\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickTriangleRenderer.put();\n            this._pickTriangleRenderer = null;\n        }\n    }\n\n    _putOcclusionRenderer() {\n        if (this._occlusionRenderer) {\n            this._occlusionRenderer.put();\n            this._occlusionRenderer = null;\n        }\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Entity members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that Mesh implements {@link Entity}.\n     *\n     * @returns {Boolean}\n     */\n    get isEntity() {\n        return true;\n    }\n\n    /**\n     * Returns ````true```` if this Mesh represents a model.\n     *\n     * When this returns ````true````, the Mesh will be registered by {@link Mesh#id} in {@link Scene#models} and\n     * may also have a corresponding {@link MetaModel}.\n     *\n     * @type {Boolean}\n     */\n    get isModel() {\n        return this._isModel;\n    }\n\n    /**\n     * Returns ````true```` if this Mesh represents an object.\n     *\n     * When this returns ````true````, the Mesh will be registered by {@link Mesh#id} in {@link Scene#objects} and\n     * may also have a corresponding {@link MetaObject}.\n     *\n     * @type {Boolean}\n     */\n    get isObject() {\n        return this._isObject;\n    }\n\n    /**\n     * Gets the Mesh's World-space 3D axis-aligned bounding box.\n     *\n     * Represented by a six-element Float64Array containing the min/max extents of the\n     * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n     *\n     * @type {Number[]}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabb;\n    }\n\n    /**\n     * Center of the relative-to-center (RTC) coordinate system for this Mesh.\n     *\n     * When this is given, then {@link Mesh#matrix}, {@link Mesh#position} and {@link Mesh#geometry} are all assumed to be relative to this center position.\n     *\n     * @type {Float64Array}\n     */\n    set rtcCenter(rtcCenter) {\n        if (rtcCenter) {\n            if (!this._state.rtcCenter) {\n                this._state.rtcCenter = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n            }\n            this._state.rtcCenter.set(rtcCenter);\n            this._state.rtcCenterHash = rtcCenter.join();\n            this._setAABBDirty();\n            this.scene._aabbDirty = true;\n        } else {\n            if (this._state.rtcCenter) {\n                this._state.rtcCenter = null;\n                this._state.rtcCenterHash = null;\n                this._setAABBDirty();\n                this.scene._aabbDirty = true;\n            }\n        }\n    }\n\n    /**\n     * 3D origin of the Mesh's {@link Geometry}'s vertex positions.\n     *\n     * When this is defined, then the positions are RTC, which means that they are relative to this position.\n     *\n     * @type {Float64Array}\n     */\n    get rtcCenter() {\n        return this._state.rtcCenter;\n    }\n\n    /**\n     * The approximate number of triangles in this Mesh.\n     *\n     * @type {Number}\n     */\n    get numTriangles() {\n        return this._numTriangles;\n    }\n\n    /**\n     * Sets if this Mesh is visible.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#visible} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#visibleObjects}.\n     *\n     * @type {Boolean}\n     */\n    set visible(visible) {\n        visible = visible !== false;\n        this._state.visible = visible;\n        if (this._isObject) {\n            this.scene._objectVisibilityUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is visible.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#visible} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#visibleObjects}.\n     *\n     * @type {Boolean}\n     */\n    get visible() {\n        return this._state.visible;\n    }\n\n    /**\n     * Sets if this Mesh is xrayed.\n     *\n     * XRayed appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#xrayMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#xrayed} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#xrayedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set xrayed(xrayed) {\n        xrayed = !!xrayed;\n        if (this._state.xrayed === xrayed) {\n            return;\n        }\n        this._state.xrayed = xrayed;\n        if (this._isObject) {\n            this.scene._objectXRayedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is xrayed.\n     *\n     * XRayed appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#xrayMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#xrayed} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#xrayedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get xrayed() {\n        return this._state.xrayed;\n    }\n\n    /**\n     * Sets if this Mesh is highlighted.\n     *\n     * Highlighted appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#highlightMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#highlighted} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#highlightedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set highlighted(highlighted) {\n        highlighted = !!highlighted;\n        if (highlighted === this._state.highlighted) {\n            return;\n        }\n        this._state.highlighted = highlighted;\n        if (this._isObject) {\n            this.scene._objectHighlightedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is highlighted.\n     *\n     * Highlighted appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#highlightMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#highlighted} are both ````true```` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#highlightedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get highlighted() {\n        return this._state.highlighted;\n    }\n\n    /**\n     * Sets if this Mesh is selected.\n     *\n     * Selected appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#selectedMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#selected} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#selectedObjects}.\n     *\n     * @type {Boolean}\n     */\n    set selected(selected) {\n        selected = !!selected;\n        if (selected === this._state.selected) {\n            return;\n        }\n        this._state.selected = selected;\n        if (this._isObject) {\n            this.scene._objectSelectedUpdated(this);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is selected.\n     *\n     * Selected appearance is configured by the {@link EmphasisMaterial} referenced by {@link Mesh#selectedMaterial}.\n     *\n     * When {@link Mesh#isObject} and {@link Mesh#selected} are both ````true``` the Mesh will be\n     * registered by {@link Mesh#id} in {@link Scene#selectedObjects}.\n     *\n     * @type {Boolean}\n     */\n    get selected() {\n        return this._state.selected;\n    }\n\n    /**\n     * Sets if this Mesh is edge-enhanced.\n     *\n     * Edge appearance is configured by the {@link EdgeMaterial} referenced by {@link Mesh#edgeMaterial}.\n     *\n     * @type {Boolean}\n     */\n    set edges(edges) {\n        edges = !!edges;\n        if (edges === this._state.edges) {\n            return;\n        }\n        this._state.edges = edges;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is edge-enhanced.\n     *\n     * Edge appearance is configured by the {@link EdgeMaterial} referenced by {@link Mesh#edgeMaterial}.\n     *\n     * @type {Boolean}\n     */\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     * Sets if this Mesh is culled.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * @type {Boolean}\n     */\n    set culled(value) {\n        this._state.culled = !!value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is culled.\n     *\n     * Only rendered when {@link Mesh#visible} is ````true```` and {@link Mesh#culled} is ````false````.\n     *\n     * @type {Boolean}\n     */\n    get culled() {\n        return this._state.culled;\n    }\n\n    /**\n     * Sets if this Mesh is clippable.\n     *\n     * Clipping is done by the {@link SectionPlane}s in {@link Scene#sectionPlanes}.\n     *\n     * @type {Boolean}\n     */\n    set clippable(value) {\n        value = value !== false;\n        if (this._state.clippable === value) {\n            return;\n        }\n        this._state.clippable = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh is clippable.\n     *\n     * Clipping is done by the {@link SectionPlane}s in {@link Scene#sectionPlanes}.\n     *\n     * @type {Boolean}\n     */\n    get clippable() {\n        return this._state.clippable;\n    }\n\n    /**\n     * Sets if this Mesh included in boundary calculations.\n     *\n     * @type {Boolean}\n     */\n    set collidable(value) {\n        value = value !== false;\n        if (value === this._state.collidable) {\n            return;\n        }\n        this._state.collidable = value;\n        this._setAABBDirty();\n        this.scene._aabbDirty = true;\n\n    }\n\n    /**\n     * Gets if this Mesh included in boundary calculations.\n     *\n     * @type {Boolean}\n     */\n    get collidable() {\n        return this._state.collidable;\n    }\n\n    /**\n     * Sets if this Mesh is pickable.\n     *\n     * Picking is done via calls to {@link Scene#pick}.\n     *\n     * @type {Boolean}\n     */\n    set pickable(value) {\n        value = value !== false;\n        if (this._state.pickable === value) {\n            return;\n        }\n        this._state.pickable = value;\n        // No need to trigger a render;\n        // state is only used when picking\n    }\n\n    /**\n     * Gets if this Mesh is pickable.\n     *\n     * Picking is done via calls to {@link Scene#pick}.\n     *\n     * @type {Boolean}\n     */\n    get pickable() {\n        return this._state.pickable;\n    }\n\n    /**\n     * Sets if this Mesh casts shadows.\n     *\n     * @type {Boolean}\n     */\n    set castsShadow(value) {\n        value = value !== false;\n        if (value === this._state.castsShadow) {\n            return;\n        }\n        this._state.castsShadow = value;\n        this.glRedraw();\n    }\n\n    /**\n     * Gets if this Mesh casts shadows.\n     *\n     * @type {Boolean}\n     */\n    get castsShadow() {\n        return this._state.castsShadow;\n    }\n\n    /**\n     * Sets if this Mesh can have shadows cast upon it.\n     *\n     * @type {Boolean}\n     */\n    set receivesShadow(value) {\n        value = value !== false;\n        if (value === this._state.receivesShadow) {\n            return;\n        }\n        this._state.receivesShadow = value;\n        this._state.hash = value ? \"/mod/rs;\" : \"/mod;\";\n        this.fire(\"dirty\", this); // Now need to (re)compile objectRenderers to include/exclude shadow mapping\n    }\n\n    /**\n     * Gets if this Mesh can have shadows cast upon it.\n     *\n     * @type {Boolean}\n     */\n    get receivesShadow() {\n        return this._state.receivesShadow;\n    }\n\n    /**\n     * Gets if this Mesh can have Scalable Ambient Obscurance (SAO) applied to it.\n     *\n     * SAO is configured by {@link SAO}.\n     *\n     * @type {Boolean}\n     * @abstract\n     */\n    get saoEnabled() {\n        return false; // TODO: Support SAO on Meshes\n    }\n\n    /**\n     * Sets the RGB colorize color for this Mesh.\n     *\n     * Multiplies by rendered fragment colors.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     *\n     * @type {Number[]}\n     */\n    set colorize(value) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[3] = 1;\n        }\n        if (value) {\n            colorize[0] = value[0];\n            colorize[1] = value[1];\n            colorize[2] = value[2];\n        } else {\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        const colorized = (!!value);\n        this.scene._objectColorizeUpdated(this, colorized);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the RGB colorize color for this Mesh.\n     *\n     * Multiplies by rendered fragment colors.\n     *\n     * Each element of the color is in range ````[0..1]````.\n     *\n     * @type {Number[]}\n     */\n    get colorize() {\n        return this._state.colorize;\n    }\n\n    /**\n     * Sets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     *\n     * @type {Number}\n     */\n    set opacity(opacity) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        const opacityUpdated = (opacity !== null && opacity !== undefined);\n        colorize[3] = opacityUpdated ? opacity : 1.0;\n        this.scene._objectOpacityUpdated(this, opacityUpdated);\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the opacity factor for this Mesh.\n     *\n     * This is a factor in range ````[0..1]```` which multiplies by the rendered fragment alphas.\n     *\n     * @type {Number}\n     */\n    get opacity() {\n        return this._state.colorize[3];\n    }\n\n    /**\n     * Gets if this Mesh is transparent.\n     * @returns {Boolean}\n     */\n    get transparent() {\n        return this._material.alphaMode === 2 /* blend */ || this._state.colorize[3] < 1\n    }\n\n    /**\n     * Sets the Mesh's rendering order relative to other Meshes.\n     *\n     * Default value is ````0````.\n     *\n     * This can be set on multiple transparent Meshes, to make them render in a specific order for correct alpha blending.\n     *\n     * @type {Number}\n     */\n    set layer(value) {\n        // TODO: Only accept rendering layer in range [0...MAX_layer]\n        value = value || 0;\n        value = Math.round(value);\n        if (value === this._state.layer) {\n            return;\n        }\n        this._state.layer = value;\n        this._renderer.needStateSort();\n    }\n\n    /**\n     * Gets the Mesh's rendering order relative to other Meshes.\n     *\n     * Default value is ````0````.\n     *\n     * This can be set on multiple transparent Meshes, to make them render in a specific order for correct alpha blending.\n     *\n     * @type {Number}\n     */\n    get layer() {\n        return this._state.layer;\n    }\n\n    /**\n     * Gets if the Node's position is stationary.\n     *\n     * When true, will disable the effect of {@link Camera} translations for this Mesh, while still allowing it to rotate. This is useful for skyboxes.\n     *\n     * @type {Boolean}\n     */\n    get stationary() {\n        return this._state.stationary;\n    }\n\n    /**\n     * Gets the Node's billboarding behaviour.\n     *\n     * Options are:\n     * * ````\"none\"```` -  (default) - No billboarding.\n     * * ````\"spherical\"```` - Mesh is billboarded to face the viewpoint, rotating both vertically and horizontally.\n     * * ````\"cylindrical\"```` - Mesh is billboarded to face the viewpoint, rotating only about its vertically axis. Use this mode for things like trees on a landscape.\n     * @type {String}\n     */\n    get billboard() {\n        return this._state.billboard;\n    }\n\n    /**\n     * Sets the Mesh's 3D World-space offset.\n     *\n     * The offset dynamically translates the Mesh in World-space.\n     *\n     * Default value is ````[0, 0, 0]````.\n     *\n     * Provide a null or undefined value to reset to the default value.\n     *\n     * @type {Number[]}\n     */\n    set offset(value) {\n        this._state.offset.set(value || [0, 0, 0]);\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    /**\n     * Gets the Mesh's 3D World-space offset.\n     *\n     * Default value is ````[0,0,0]````.\n     *\n     * @type {Number[]}\n     */\n    get offset() {\n        return this._state.offset;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Drawable members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns true to indicate that Mesh implements {@link Drawable}.\n     * @final\n     * @type {Boolean}\n     */\n    get isDrawable() {\n        return true;\n    }\n\n    /**\n     * Property with final value ````true```` to indicate that xeokit should render this Mesh in sorted order, relative to other Meshes.\n     *\n     * The sort order is determined by {@link Mesh#stateSortCompare}.\n     *\n     * Sorting is essential for rendering performance, so that xeokit is able to avoid applying runs of the same state changes to the GPU, ie. can collapse them.\n     *\n     * @type {Boolean}\n     */\n    get isStateSortable() {\n        return true;\n    }\n\n    /**\n     * Comparison function used by the renderer to determine the order in which xeokit should render the Mesh, relative to to other Meshes.\n     *\n     * xeokit requires this method because Mesh implements {@link Drawable}.\n     *\n     * Sorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same rendering state changes to the GPU, ie. can collapse them.\n     *\n     * @param {Mesh} mesh1\n     * @param {Mesh} mesh2\n     * @returns {number}\n     */\n    stateSortCompare(mesh1, mesh2) {\n        return (mesh1._state.layer - mesh2._state.layer)\n            || (mesh1._drawRenderer.id - mesh2._drawRenderer.id) // Program state\n            || (mesh1._material._state.id - mesh2._material._state.id) // Material state\n            || (mesh1._geometry._state.id - mesh2._geometry._state.id); // Geometry state\n    }\n\n    /** @private */\n    rebuildRenderFlags() {\n        this.renderFlags.reset();\n        if (!this._getActiveSectionPlanes()) {\n            this.renderFlags.culled = true;\n            return;\n        }\n        this.renderFlags.numLayers = 1;\n        this.renderFlags.numVisibleLayers = 1;\n        this.renderFlags.visibleLayers[0] = 0;\n        this._updateRenderFlags();\n    }\n\n    /**\n     * @private\n     */\n    _updateRenderFlags() {\n\n        const renderFlags = this.renderFlags;\n        const state = this._state;\n\n        if (state.xrayed) {\n            const xrayMaterial = this._xrayMaterial._state;\n            if (xrayMaterial.fill) {\n                if (xrayMaterial.fillAlpha < 1.0) {\n                    renderFlags.xrayedSilhouetteTransparent = true;\n                } else {\n                    renderFlags.xrayedSilhouetteOpaque = true;\n                }\n            }\n            if (xrayMaterial.edges) {\n                if (xrayMaterial.edgeAlpha < 1.0) {\n                    renderFlags.xrayedEdgesTransparent = true;\n                } else {\n                    renderFlags.xrayedEdgesOpaque = true;\n                }\n            }\n        } else {\n            const normalMaterial = this._material._state;\n            if (normalMaterial.alpha < 1.0 || state.colorize[3] < 1.0) {\n                renderFlags.colorTransparent = true;\n            } else {\n                renderFlags.colorOpaque = true;\n            }\n            if (state.edges) {\n                const edgeMaterial = this._edgeMaterial._state;\n                if (edgeMaterial.alpha < 1.0) {\n                    renderFlags.edgesTransparent = true;\n                } else {\n                    renderFlags.edgesOpaque = true;\n                }\n            }\n            if (state.selected) {\n                const selectedMaterial = this._selectedMaterial._state;\n                if (selectedMaterial.fill) {\n                    if (selectedMaterial.fillAlpha < 1.0) {\n                        renderFlags.selectedSilhouetteTransparent = true;\n                    } else {\n                        renderFlags.selectedSilhouetteOpaque = true;\n                    }\n                }\n                if (selectedMaterial.edges) {\n                    if (selectedMaterial.edgeAlpha < 1.0) {\n                        renderFlags.selectedEdgesTransparent = true;\n                    } else {\n                        renderFlags.selectedEdgesOpaque = true;\n                    }\n                }\n            } else if (state.highlighted) {\n                const highlightMaterial = this._highlightMaterial._state;\n                if (highlightMaterial.fill) {\n                    if (highlightMaterial.fillAlpha < 1.0) {\n                        renderFlags.highlightedSilhouetteTransparent = true;\n                    } else {\n                        renderFlags.highlightedSilhouetteOpaque = true;\n                    }\n                }\n                if (highlightMaterial.edges) {\n                    if (highlightMaterial.edgeAlpha < 1.0) {\n                        renderFlags.highlightedEdgesTransparent = true;\n                    } else {\n                        renderFlags.highlightedEdgesOpaque = true;\n                    }\n                }\n            }\n        }\n    }\n\n    _getActiveSectionPlanes() {\n\n        if (this._state.clippable) {\n\n            const sectionPlanes = this.scene._sectionPlanesState.sectionPlanes;\n            const numSectionPlanes = sectionPlanes.length;\n\n            if (numSectionPlanes > 0) {\n                for (let i = 0; i < numSectionPlanes; i++) {\n\n                    const sectionPlane = sectionPlanes[i];\n                    const renderFlags = this.renderFlags;\n\n                    if (!sectionPlane.active) {\n                        renderFlags.sectionPlanesActivePerLayer[i] = false;\n\n                    } else {\n\n                        if (this._state.rtcCenter) {\n\n                            const intersect = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].planeAABB3Intersect(sectionPlane.dir, sectionPlane.dist, this.aabb);\n                            const outside = (intersect === -1);\n\n                            if (outside) {\n                                return false;\n                            }\n\n                            const intersecting = (intersect === 0);\n                            renderFlags.sectionPlanesActivePerLayer[i] = intersecting;\n\n                        } else {\n                            renderFlags.sectionPlanesActivePerLayer[i] = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when xrayed.\n     *\n     * Mesh is xrayed when {@link Mesh#xrayed} is ````true````.\n     *\n     * Set to {@link Scene#xrayMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get xrayMaterial() {\n        return this._xrayMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when highlighted.\n     *\n     * Mesh is xrayed when {@link Mesh#highlighted} is ````true````.\n     *\n     * Set to {@link Scene#highlightMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get highlightMaterial() {\n        return this._highlightMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when selected.\n     *\n     * Mesh is xrayed when {@link Mesh#selected} is ````true````.\n     *\n     * Set to {@link Scene#selectedMaterial} by default.\n     *\n     * @type {EmphasisMaterial}\n     */\n    get selectedMaterial() {\n        return this._selectedMaterial;\n    }\n\n    /**\n     * Defines the appearance of this Mesh when edges are enhanced.\n     *\n     * Mesh is xrayed when {@link Mesh#edges} is ````true````.\n     *\n     * Set to {@link Scene#edgeMaterial} by default.\n     *\n     * @type {EdgeMaterial}\n     */\n    get edgeMaterial() {\n        return this._edgeMaterial;\n    }\n\n    // ---------------------- NORMAL RENDERING -----------------------------------\n\n    /** @private  */\n    drawColorOpaque(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private  */\n    drawColorTransparent(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = _draw_DrawRenderer_js__WEBPACK_IMPORTED_MODULE_3__[\"DrawRenderer\"].get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- RENDERING SAO POST EFFECT TARGETS --------------\n\n    // TODO\n\n    // ---------------------- EMPHASIS RENDERING -----------------------------------\n\n    /** @private  */\n    drawSilhouetteXRayed(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 0); // 0 == xray\n        }\n    }\n\n    /** @private  */\n    drawSilhouetteHighlighted(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    /** @private  */\n    drawSilhouetteSelected(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = _emphasis_EmphasisFillRenderer_js__WEBPACK_IMPORTED_MODULE_4__[\"EmphasisFillRenderer\"].get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    // ---------------------- EDGES RENDERING -----------------------------------\n\n    /** @private  */\n    drawEdgesColorOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    /** @private  */\n    drawEdgesColorTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    /** @private  */\n    drawEdgesXRayed(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 0); // 0 == xray\n        }\n    }\n\n    /** @private  */\n    drawEdgesHighlighted(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    /** @private  */\n    drawEdgesSelected(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = _emphasis_EmphasisEdgesRenderer_js__WEBPACK_IMPORTED_MODULE_5__[\"EmphasisEdgesRenderer\"].get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    // ---------------------- OCCLUSION CULL RENDERING -----------------------------------\n\n    /** @private  */\n    drawOcclusion(frameCtx) {\n        if (this._occlusionRenderer || (this._occlusionRenderer = _occlusion_OcclusionRenderer_js__WEBPACK_IMPORTED_MODULE_8__[\"OcclusionRenderer\"].get(this))) {\n            this._occlusionRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- SHADOW BUFFER RENDERING -----------------------------------\n\n    /** @private  */\n    drawShadow(frameCtx) {\n        if (this._shadowRenderer || (this._shadowRenderer = _shadow_ShadowRenderer_js__WEBPACK_IMPORTED_MODULE_9__[\"ShadowRenderer\"].get(this))) {\n            this._shadowRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    // ---------------------- PICKING RENDERING ----------------------------------\n\n    /** @private  */\n    drawPickMesh(frameCtx) {\n        if (this._pickMeshRenderer || (this._pickMeshRenderer = _pick_PickMeshRenderer_js__WEBPACK_IMPORTED_MODULE_6__[\"PickMeshRenderer\"].get(this))) {\n            this._pickMeshRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private\n     */\n    canPickTriangle() {\n        return this._geometry.isReadableGeometry; // VBOGeometry does not support surface picking because it has no geometry data in browser memory\n    }\n\n    /** @private  */\n    drawPickTriangles(frameCtx) {\n        if (this._pickTriangleRenderer || (this._pickTriangleRenderer = _pick_PickTriangleRenderer_js__WEBPACK_IMPORTED_MODULE_7__[\"PickTriangleRenderer\"].get(this))) {\n            this._pickTriangleRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /** @private */\n    pickTriangleSurface(pickViewMatrix, pickProjMatrix, pickResult) {\n        pickTriangleSurface(this, pickViewMatrix, pickProjMatrix, pickResult);\n    }\n\n    /** @private  */\n    drawPickVertices(frameCtx) {\n\n    }\n\n    /**\n     * @private\n     * @returns {PerformanceNode}\n     */\n    delegatePickedEntity() {\n        return this;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Component members\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Destroys this Mesh.\n     */\n    destroy() {\n        super.destroy(); // xeokit.Object\n        this._putDrawRenderers();\n        this._putPickRenderers();\n        this._putOcclusionRenderer();\n        this.scene._renderer.putPickID(this._state.pickID); // TODO: somehow puch this down into xeokit framework?\n        if (this._isObject) {\n            this.scene._deregisterObject(this);\n            if (this._visible) {\n                this.scene._objectVisibilityUpdated(this, false);\n            }\n            if (this._xrayed) {\n                this.scene._objectXRayedUpdated(this, false);\n            }\n            if (this._selected) {\n                this.scene._objectSelectedUpdated(this, false);\n            }\n            if (this._highlighted) {\n                this.scene._objectHighlightedUpdated(this, false);\n            }\n            this.scene._objectColorizeUpdated(this, false);\n            this.scene._objectOpacityUpdated(this, false);\n            this.scene._objectOffsetUpdated(this, false);\n        }\n        if (this._isModel) {\n            this.scene._deregisterModel(this);\n        }\n        this.glRedraw();\n    }\n\n}\n\n\nconst pickTriangleSurface = (function () {\n\n    // Cached vars to avoid garbage collection\n\n    const localRayOrigin = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const localRayDir = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionA = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionB = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const positionC = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const triangleVertices = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const position = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const worldPos = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const viewPos = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const bary = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalA = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalB = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const normalC = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uva = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uvb = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const uvc = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec4a = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec4b = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec4c = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec4();\n    const tempVec3 = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3b = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3c = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3d = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3e = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3f = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3g = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3h = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3i = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3j = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n    const tempVec3k = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].vec3();\n\n    return function (mesh, pickViewMatrix, pickProjMatrix, pickResult) {\n\n        var primIndex = pickResult.primIndex;\n\n        if (primIndex !== undefined && primIndex !== null && primIndex > -1) {\n\n            const geometry = mesh.geometry._state;\n            const scene = mesh.scene;\n            const camera = scene.camera;\n            const canvas = scene.canvas;\n\n            if (geometry.primitiveName === \"triangles\") {\n\n                // Triangle picked; this only happens when the\n                // Mesh has a Geometry that has primitives of type \"triangle\"\n\n                pickResult.primitive = \"triangle\";\n\n                // Get the World-space positions of the triangle's vertices\n\n                const i = primIndex; // Indicates the first triangle index in the indices array\n\n                const indices = geometry.indices; // Indices into geometry arrays, not into shared VertexBufs\n                const positions = geometry.positions;\n\n                let ia3;\n                let ib3;\n                let ic3;\n\n                if (indices) {\n\n                    var ia = indices[i + 0];\n                    var ib = indices[i + 1];\n                    var ic = indices[i + 2];\n\n                    triangleVertices[0] = ia;\n                    triangleVertices[1] = ib;\n                    triangleVertices[2] = ic;\n\n                    pickResult.indices = triangleVertices;\n\n                    ia3 = ia * 3;\n                    ib3 = ib * 3;\n                    ic3 = ic * 3;\n\n                } else {\n\n                    ia3 = i * 3;\n                    ib3 = ia3 + 3;\n                    ic3 = ib3 + 3;\n                }\n\n                positionA[0] = positions[ia3 + 0];\n                positionA[1] = positions[ia3 + 1];\n                positionA[2] = positions[ia3 + 2];\n\n                positionB[0] = positions[ib3 + 0];\n                positionB[1] = positions[ib3 + 1];\n                positionB[2] = positions[ib3 + 2];\n\n                positionC[0] = positions[ic3 + 0];\n                positionC[1] = positions[ic3 + 1];\n                positionC[2] = positions[ic3 + 2];\n\n                if (geometry.compressGeometry) {\n\n                    // Decompress vertex positions\n\n                    const positionsDecodeMatrix = geometry.positionsDecodeMatrix;\n                    if (positionsDecodeMatrix) {\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionA, positionsDecodeMatrix, positionA);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionB, positionsDecodeMatrix, positionB);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressPosition(positionC, positionsDecodeMatrix, positionC);\n                    }\n                }\n\n                // Attempt to ray-pick the triangle in local space\n\n                let canvasPos;\n\n                if (pickResult.canvasPos) {\n                    canvasPos = pickResult.canvasPos;\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].canvasPosToLocalRay(canvas.canvas, pickViewMatrix, pickProjMatrix, mesh.worldMatrix, canvasPos, localRayOrigin, localRayDir);\n\n                } else if (pickResult.origin && pickResult.direction) {\n                    _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].worldRayToLocalRay(mesh.worldMatrix, pickResult.origin, pickResult.direction, localRayOrigin, localRayDir);\n                }\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(localRayDir);\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].rayPlaneIntersect(localRayOrigin, localRayDir, positionA, positionB, positionC, position);\n\n                // Get Local-space cartesian coordinates of the ray-triangle intersection\n\n                pickResult.localPos = position;\n                pickResult.position = position;\n\n                // Get interpolated World-space coordinates\n\n                // Need to transform homogeneous coords\n\n                tempVec4a[0] = position[0];\n                tempVec4a[1] = position[1];\n                tempVec4a[2] = position[2];\n                tempVec4a[3] = 1;\n\n                // Get World-space cartesian coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(mesh.worldMatrix, tempVec4a, tempVec4b);\n\n                worldPos[0] = tempVec4b[0];\n                worldPos[1] = tempVec4b[1];\n                worldPos[2] = tempVec4b[2];\n\n                pickResult.worldPos = worldPos;\n\n                // Get View-space cartesian coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec4(camera.matrix, tempVec4b, tempVec4c);\n\n                viewPos[0] = tempVec4c[0];\n                viewPos[1] = tempVec4c[1];\n                viewPos[2] = tempVec4c[2];\n\n                pickResult.viewPos = viewPos;\n\n                // Get barycentric coordinates of the ray-triangle intersection\n\n                _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].cartesianToBarycentric(position, positionA, positionB, positionC, bary);\n\n                pickResult.bary = bary;\n\n                // Get interpolated normal vector\n\n                const normals = geometry.normals;\n\n                if (normals) {\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex normals\n\n                        const ia2 = ia * 3;\n                        const ib2 = ib * 3;\n                        const ic2 = ic * 3;\n\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ia2, ia2 + 2), normalA);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ib2, ib2 + 2), normalB);\n                        _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressNormal(normals.subarray(ic2, ic2 + 2), normalC);\n\n                    } else {\n\n                        normalA[0] = normals[ia3];\n                        normalA[1] = normals[ia3 + 1];\n                        normalA[2] = normals[ia3 + 2];\n\n                        normalB[0] = normals[ib3];\n                        normalB[1] = normals[ib3 + 1];\n                        normalB[2] = normals[ib3 + 2];\n\n                        normalC[0] = normals[ic3];\n                        normalC[1] = normals[ic3 + 1];\n                        normalC[2] = normals[ic3 + 2];\n                    }\n\n                    const normal = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalA, bary[0], tempVec3),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalB, bary[1], tempVec3b), tempVec3c),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec3Scalar(normalC, bary[2], tempVec3d), tempVec3e);\n\n                    pickResult.worldNormal = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].normalizeVec3(_math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].transformVec3(mesh.worldNormalMatrix, normal, tempVec3f));\n                }\n\n                // Get interpolated UV coordinates\n\n                const uvs = geometry.uv;\n\n                if (uvs) {\n\n                    uva[0] = uvs[(ia * 2)];\n                    uva[1] = uvs[(ia * 2) + 1];\n\n                    uvb[0] = uvs[(ib * 2)];\n                    uvb[1] = uvs[(ib * 2) + 1];\n\n                    uvc[0] = uvs[(ic * 2)];\n                    uvc[1] = uvs[(ic * 2) + 1];\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex UVs\n\n                        const uvDecodeMatrix = geometry.uvDecodeMatrix;\n                        if (uvDecodeMatrix) {\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uva, uvDecodeMatrix, uva);\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uvb, uvDecodeMatrix, uvb);\n                            _math_geometryCompressionUtils_js__WEBPACK_IMPORTED_MODULE_10__[\"geometryCompressionUtils\"].decompressUV(uvc, uvDecodeMatrix, uvc);\n                        }\n                    }\n\n                    pickResult.uv = _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].addVec3(\n                            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uva, bary[0], tempVec3g),\n                            _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uvb, bary[1], tempVec3h), tempVec3i),\n                        _math_math_js__WEBPACK_IMPORTED_MODULE_0__[\"math\"].mulVec2Scalar(uvc, bary[2], tempVec3j), tempVec3k);\n                }\n            }\n        }\n    }\n})();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/Mesh.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js ***!
  \************************************************************************************/
/*! exports provided: DrawRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawRenderer\", function() { return DrawRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _DrawShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DrawShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_5__[\"math\"].vec3();\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\n/**\n * @private\n */\nconst DrawRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _DrawShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"DrawShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst drawRenderers = {};\n\nDrawRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [\n        scene.canvas.canvas.id,\n        (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n        scene._lightsState.getHash(),\n        scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._material._state.hash,\n        mesh._state.drawHash\n    ].join(\";\");\n    let renderer = drawRenderers[hash];\n    if (!renderer) {\n        renderer = new DrawRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        drawRenderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nDrawRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete drawRenderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nDrawRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nDrawRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const maxTextureUnits = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_TEXTURE_UNITS;\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const camera = scene.camera;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.viewNormalMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_6__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n\n        frameCtx.textureUnit = this._baseTextureUnit;\n\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n\n        if (frameCtx.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frameCtx.lineWidth = materialState.lineWidth;\n        }\n\n        if (this._uPointSize) {\n            gl.uniform1f(this._uPointSize, materialState.pointSize);\n        }\n\n        switch (materialState.type) {\n            case \"LambertMaterial\":\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialColor) {\n                    gl.uniform4f(this._uMaterialColor, materialState.color[0], materialState.color[1], materialState.color[2], materialState.alpha);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                break;\n\n            case \"PhongMaterial\":\n                if (this._uMaterialShininess) {\n                    gl.uniform1f(this._uMaterialShininess, materialState.shininess);\n                }\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0);\n                }\n                if (material._ambientMap && material._ambientMap._state.texture && this._uMaterialAmbientMap) {\n                    program.bindTexture(this._uMaterialAmbientMap, material._ambientMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMaterialAmbientMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMaterialAmbientMapMatrix, false, material._ambientMap._state.matrix);\n                    }\n                }\n                if (material._diffuseMap && material._diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, material._diffuseMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, material._diffuseMap._state.matrix);\n                    }\n                }\n                if (material._specularMap && material._specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, material._specularMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, material._specularMap._state.matrix);\n                    }\n                }\n                if (material._emissiveMap && material._emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, material._emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, material._emissiveMap._state.matrix);\n                    }\n                }\n                if (material._alphaMap && material._alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, material._alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, material._alphaMap._state.matrix);\n                    }\n                }\n                if (material._reflectivityMap && material._reflectivityMap._state.texture && this._uReflectivityMap) {\n                    program.bindTexture(this._uReflectivityMap, material._reflectivityMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    if (this._uReflectivityMapMatrix) {\n                        gl.uniformMatrix4fv(this._uReflectivityMapMatrix, false, material._reflectivityMap._state.matrix);\n                    }\n                }\n                if (material._normalMap && material._normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, material._normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, material._normalMap._state.matrix);\n                    }\n                }\n                if (material._occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, material._occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, material._occlusionMap._state.matrix);\n                    }\n                }\n                if (material._diffuseFresnel) {\n                    if (this._uDiffuseFresnelEdgeBias) {\n                        gl.uniform1f(this._uDiffuseFresnelEdgeBias, material._diffuseFresnel.edgeBias);\n                    }\n                    if (this._uDiffuseFresnelCenterBias) {\n                        gl.uniform1f(this._uDiffuseFresnelCenterBias, material._diffuseFresnel.centerBias);\n                    }\n                    if (this._uDiffuseFresnelEdgeColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelEdgeColor, material._diffuseFresnel.edgeColor);\n                    }\n                    if (this._uDiffuseFresnelCenterColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelCenterColor, material._diffuseFresnel.centerColor);\n                    }\n                    if (this._uDiffuseFresnelPower) {\n                        gl.uniform1f(this._uDiffuseFresnelPower, material._diffuseFresnel.power);\n                    }\n                }\n                if (material._specularFresnel) {\n                    if (this._uSpecularFresnelEdgeBias) {\n                        gl.uniform1f(this._uSpecularFresnelEdgeBias, material._specularFresnel.edgeBias);\n                    }\n                    if (this._uSpecularFresnelCenterBias) {\n                        gl.uniform1f(this._uSpecularFresnelCenterBias, material._specularFresnel.centerBias);\n                    }\n                    if (this._uSpecularFresnelEdgeColor) {\n                        gl.uniform3fv(this._uSpecularFresnelEdgeColor, material._specularFresnel.edgeColor);\n                    }\n                    if (this._uSpecularFresnelCenterColor) {\n                        gl.uniform3fv(this._uSpecularFresnelCenterColor, material._specularFresnel.centerColor);\n                    }\n                    if (this._uSpecularFresnelPower) {\n                        gl.uniform1f(this._uSpecularFresnelPower, material._specularFresnel.power);\n                    }\n                }\n                if (material._alphaFresnel) {\n                    if (this._uAlphaFresnelEdgeBias) {\n                        gl.uniform1f(this._uAlphaFresnelEdgeBias, material._alphaFresnel.edgeBias);\n                    }\n                    if (this._uAlphaFresnelCenterBias) {\n                        gl.uniform1f(this._uAlphaFresnelCenterBias, material._alphaFresnel.centerBias);\n                    }\n                    if (this._uAlphaFresnelEdgeColor) {\n                        gl.uniform3fv(this._uAlphaFresnelEdgeColor, material._alphaFresnel.edgeColor);\n                    }\n                    if (this._uAlphaFresnelCenterColor) {\n                        gl.uniform3fv(this._uAlphaFresnelCenterColor, material._alphaFresnel.centerColor);\n                    }\n                    if (this._uAlphaFresnelPower) {\n                        gl.uniform1f(this._uAlphaFresnelPower, material._alphaFresnel.power);\n                    }\n                }\n                if (material._reflectivityFresnel) {\n                    if (this._uReflectivityFresnelEdgeBias) {\n                        gl.uniform1f(this._uReflectivityFresnelEdgeBias, material._reflectivityFresnel.edgeBias);\n                    }\n                    if (this._uReflectivityFresnelCenterBias) {\n                        gl.uniform1f(this._uReflectivityFresnelCenterBias, material._reflectivityFresnel.centerBias);\n                    }\n                    if (this._uReflectivityFresnelEdgeColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelEdgeColor, material._reflectivityFresnel.edgeColor);\n                    }\n                    if (this._uReflectivityFresnelCenterColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelCenterColor, material._reflectivityFresnel.centerColor);\n                    }\n                    if (this._uReflectivityFresnelPower) {\n                        gl.uniform1f(this._uReflectivityFresnelPower, material._reflectivityFresnel.power);\n                    }\n                }\n                if (material._emissiveFresnel) {\n                    if (this._uEmissiveFresnelEdgeBias) {\n                        gl.uniform1f(this._uEmissiveFresnelEdgeBias, material._emissiveFresnel.edgeBias);\n                    }\n                    if (this._uEmissiveFresnelCenterBias) {\n                        gl.uniform1f(this._uEmissiveFresnelCenterBias, material._emissiveFresnel.centerBias);\n                    }\n                    if (this._uEmissiveFresnelEdgeColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelEdgeColor, material._emissiveFresnel.edgeColor);\n                    }\n                    if (this._uEmissiveFresnelCenterColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelCenterColor, material._emissiveFresnel.centerColor);\n                    }\n                    if (this._uEmissiveFresnelPower) {\n                        gl.uniform1f(this._uEmissiveFresnelPower, material._emissiveFresnel.power);\n                    }\n                }\n                break;\n\n            case \"MetallicMaterial\":\n                if (this._uBaseColor) {\n                    gl.uniform3fv(this._uBaseColor, materialState.baseColor);\n                }\n                if (this._uMaterialMetallic) {\n                    gl.uniform1f(this._uMaterialMetallic, materialState.metallic);\n                }\n                if (this._uMaterialRoughness) {\n                    gl.uniform1f(this._uMaterialRoughness, materialState.roughness);\n                }\n                if (this._uMaterialSpecularF0) {\n                    gl.uniform1f(this._uMaterialSpecularF0, materialState.specularF0);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const baseColorMap = material._baseColorMap;\n                if (baseColorMap && baseColorMap._state.texture && this._uBaseColorMap) {\n                    program.bindTexture(this._uBaseColorMap, baseColorMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uBaseColorMapMatrix) {\n                        gl.uniformMatrix4fv(this._uBaseColorMapMatrix, false, baseColorMap._state.matrix);\n                    }\n                }\n                const metallicMap = material._metallicMap;\n                if (metallicMap && metallicMap._state.texture && this._uMetallicMap) {\n                    program.bindTexture(this._uMetallicMap, metallicMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMetallicMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicMapMatrix, false, metallicMap._state.matrix);\n                    }\n                }\n                const roughnessMap = material._roughnessMap;\n                if (roughnessMap && roughnessMap._state.texture && this._uRoughnessMap) {\n                    program.bindTexture(this._uRoughnessMap, roughnessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uRoughnessMapMatrix, false, roughnessMap._state.matrix);\n                    }\n                }\n                const metallicRoughnessMap = material._metallicRoughnessMap;\n                if (metallicRoughnessMap && metallicRoughnessMap._state.texture && this._uMetallicRoughnessMap) {\n                    program.bindTexture(this._uMetallicRoughnessMap, metallicRoughnessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uMetallicRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicRoughnessMapMatrix, false, metallicRoughnessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n\n            case \"SpecularMaterial\":\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialGlossiness) {\n                    gl.uniform1f(this._uMaterialGlossiness, materialState.glossiness);\n                }\n                if (this._uMaterialReflectivity) {\n                    gl.uniform1f(this._uMaterialReflectivity, materialState.reflectivity);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const diffuseMap = material._diffuseMap;\n                if (diffuseMap && diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, diffuseMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, diffuseMap._state.matrix);\n                    }\n                }\n                const specularMap = material._specularMap;\n                if (specularMap && specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, specularMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, specularMap._state.matrix);\n                    }\n                }\n                const glossinessMap = material._glossinessMap;\n                if (glossinessMap && glossinessMap._state.texture && this._uGlossinessMap) {\n                    program.bindTexture(this._uGlossinessMap, glossinessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uGlossinessMapMatrix, false, glossinessMap._state.matrix);\n                    }\n                }\n                const specularGlossinessMap = material._specularGlossinessMap;\n                if (specularGlossinessMap && specularGlossinessMap._state.texture && this._uSpecularGlossinessMap) {\n                    program.bindTexture(this._uSpecularGlossinessMap, specularGlossinessMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uSpecularGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularGlossinessMapMatrix, false, specularGlossinessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    if (this._uColorize) {\n        const colorize = meshState.colorize;\n        const lastColorize = this._lastColorize;\n        if (lastColorize[0] !== colorize[0] ||\n            lastColorize[1] !== colorize[1] ||\n            lastColorize[2] !== colorize[2] ||\n            lastColorize[3] !== colorize[3]) {\n            gl.uniform4fv(this._uColorize, colorize);\n            lastColorize[0] = colorize[0];\n            lastColorize[1] = colorize[1];\n            lastColorize[2] = colorize[2];\n            lastColorize[3] = colorize[3];\n        }\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aNormal) {\n            this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aUV) {\n            this._aUV.bindArrayBuffer(geometryState.uvBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aColor) {\n            this._aColor.bindArrayBuffer(geometryState.colorsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aFlags) {\n            this._aFlags.bindArrayBuffer(geometryState.flagsBuf);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    // Draw (indices bound in prev step)\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n        frameCtx.drawArrays++;\n    }\n};\n\nDrawRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const material = mesh._material;\n    const lightsState = scene._lightsState;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const materialState = mesh._material._state;\n\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uUVDecodeMatrix = program.getLocation(\"uvDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    this._uShadowViewMatrix = [];\n    this._uShadowProjMatrix = [];\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n\n        if (light.castsShadow) {\n            this._uShadowViewMatrix[i] = program.getLocation(\"shadowViewMatrix\" + i);\n            this._uShadowProjMatrix[i] = program.getLocation(\"shadowProjMatrix\" + i);\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0) {\n        this._uLightMap = \"lightMap\";\n    }\n\n    if (lightsState.reflectionMaps.length > 0) {\n        this._uReflectionMap = \"reflectionMap\";\n    }\n\n    this._uSectionPlanes = [];\n    const sectionPlanes = sectionPlanesState.sectionPlanes;\n    for (var i = 0, len = sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n\n    this._uPointSize = program.getLocation(\"pointSize\");\n\n    switch (materialState.type) {\n        case \"LambertMaterial\":\n            this._uMaterialColor = program.getLocation(\"materialColor\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            break;\n\n        case \"PhongMaterial\":\n            this._uMaterialAmbient = program.getLocation(\"materialAmbient\");\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            this._uMaterialShininess = program.getLocation(\"materialShininess\");\n            if (material._ambientMap) {\n                this._uMaterialAmbientMap = \"ambientMap\";\n                this._uMaterialAmbientMapMatrix = program.getLocation(\"ambientMapMatrix\");\n            }\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._reflectivityMap) {\n                this._uReflectivityMap = \"reflectivityMap\";\n                this._uReflectivityMapMatrix = program.getLocation(\"reflectivityMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._diffuseFresnel) {\n                this._uDiffuseFresnelEdgeBias = program.getLocation(\"diffuseFresnelEdgeBias\");\n                this._uDiffuseFresnelCenterBias = program.getLocation(\"diffuseFresnelCenterBias\");\n                this._uDiffuseFresnelEdgeColor = program.getLocation(\"diffuseFresnelEdgeColor\");\n                this._uDiffuseFresnelCenterColor = program.getLocation(\"diffuseFresnelCenterColor\");\n                this._uDiffuseFresnelPower = program.getLocation(\"diffuseFresnelPower\");\n            }\n            if (material._specularFresnel) {\n                this._uSpecularFresnelEdgeBias = program.getLocation(\"specularFresnelEdgeBias\");\n                this._uSpecularFresnelCenterBias = program.getLocation(\"specularFresnelCenterBias\");\n                this._uSpecularFresnelEdgeColor = program.getLocation(\"specularFresnelEdgeColor\");\n                this._uSpecularFresnelCenterColor = program.getLocation(\"specularFresnelCenterColor\");\n                this._uSpecularFresnelPower = program.getLocation(\"specularFresnelPower\");\n            }\n            if (material._alphaFresnel) {\n                this._uAlphaFresnelEdgeBias = program.getLocation(\"alphaFresnelEdgeBias\");\n                this._uAlphaFresnelCenterBias = program.getLocation(\"alphaFresnelCenterBias\");\n                this._uAlphaFresnelEdgeColor = program.getLocation(\"alphaFresnelEdgeColor\");\n                this._uAlphaFresnelCenterColor = program.getLocation(\"alphaFresnelCenterColor\");\n                this._uAlphaFresnelPower = program.getLocation(\"alphaFresnelPower\");\n            }\n            if (material._reflectivityFresnel) {\n                this._uReflectivityFresnelEdgeBias = program.getLocation(\"reflectivityFresnelEdgeBias\");\n                this._uReflectivityFresnelCenterBias = program.getLocation(\"reflectivityFresnelCenterBias\");\n                this._uReflectivityFresnelEdgeColor = program.getLocation(\"reflectivityFresnelEdgeColor\");\n                this._uReflectivityFresnelCenterColor = program.getLocation(\"reflectivityFresnelCenterColor\");\n                this._uReflectivityFresnelPower = program.getLocation(\"reflectivityFresnelPower\");\n            }\n            if (material._emissiveFresnel) {\n                this._uEmissiveFresnelEdgeBias = program.getLocation(\"emissiveFresnelEdgeBias\");\n                this._uEmissiveFresnelCenterBias = program.getLocation(\"emissiveFresnelCenterBias\");\n                this._uEmissiveFresnelEdgeColor = program.getLocation(\"emissiveFresnelEdgeColor\");\n                this._uEmissiveFresnelCenterColor = program.getLocation(\"emissiveFresnelCenterColor\");\n                this._uEmissiveFresnelPower = program.getLocation(\"emissiveFresnelPower\");\n            }\n            break;\n\n        case \"MetallicMaterial\":\n            this._uBaseColor = program.getLocation(\"materialBaseColor\");\n            this._uMaterialMetallic = program.getLocation(\"materialMetallic\");\n            this._uMaterialRoughness = program.getLocation(\"materialRoughness\");\n            this._uMaterialSpecularF0 = program.getLocation(\"materialSpecularF0\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._baseColorMap) {\n                this._uBaseColorMap = \"baseColorMap\";\n                this._uBaseColorMapMatrix = program.getLocation(\"baseColorMapMatrix\");\n            }\n            if (material._metallicMap) {\n                this._uMetallicMap = \"metallicMap\";\n                this._uMetallicMapMatrix = program.getLocation(\"metallicMapMatrix\");\n            }\n            if (material._roughnessMap) {\n                this._uRoughnessMap = \"roughnessMap\";\n                this._uRoughnessMapMatrix = program.getLocation(\"roughnessMapMatrix\");\n            }\n            if (material._metallicRoughnessMap) {\n                this._uMetallicRoughnessMap = \"metallicRoughnessMap\";\n                this._uMetallicRoughnessMapMatrix = program.getLocation(\"metallicRoughnessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n\n        case \"SpecularMaterial\":\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialGlossiness = program.getLocation(\"materialGlossiness\");\n            this._uMaterialReflectivity = program.getLocation(\"reflectivityFresnel\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._glossinessMap) {\n                this._uGlossinessMap = \"glossinessMap\";\n                this._uGlossinessMapMatrix = program.getLocation(\"glossinessMapMatrix\");\n            }\n            if (material._specularGlossinessMap) {\n                this._uSpecularGlossinessMap = \"materialSpecularGlossinessMap\";\n                this._uSpecularGlossinessMapMatrix = program.getLocation(\"materialSpecularGlossinessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n    }\n\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aUV = program.getAttribute(\"uv\");\n    this._aColor = program.getAttribute(\"color\");\n    this._aFlags = program.getAttribute(\"flags\");\n\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uColorize = program.getLocation(\"colorize\");\n    this._uOffset = program.getLocation(\"offset\");\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize = new Float32Array(4);\n\n    this._baseTextureUnit = 0;\n\n};\n\nDrawRenderer.prototype._bindProgram = function (frameCtx) {\n\n    const maxTextureUnits = _webglInfo_js__WEBPACK_IMPORTED_MODULE_4__[\"WEBGL_INFO\"].MAX_TEXTURE_UNITS;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const project = scene.camera.project;\n    let light;\n\n    const program = this._program;\n\n    program.bind();\n\n    frameCtx.useProgram++;\n    frameCtx.textureUnit = 0;\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize[0] = -1;\n    this._lastColorize[1] = -1;\n    this._lastColorize[2] = -1;\n    this._lastColorize[3] = -1;\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    for (var i = 0, len = lightsState.lights.length; i < len; i++) {\n\n        light = lightsState.lights[i];\n\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n\n        } else {\n\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n\n            if (light.castsShadow) {\n                if (this._uShadowViewMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowViewMatrix[i], false, light.getShadowViewMatrix());\n                }\n                if (this._uShadowProjMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowProjMatrix[i], false, light.getShadowProjMatrix());\n                }\n                const shadowRenderBuf = light.getShadowRenderBuf();\n                if (shadowRenderBuf) {\n                    program.bindTexture(\"shadowMap\" + i, shadowRenderBuf.getTexture(), frameCtx.textureUnit);\n                    frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n                    frameCtx.bindTexture++;\n                }\n            }\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0 && lightsState.lightMaps[0].texture && this._uLightMap) {\n        program.bindTexture(this._uLightMap, lightsState.lightMaps[0].texture, frameCtx.textureUnit);\n        frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n        frameCtx.bindTexture++;\n    }\n\n    if (lightsState.reflectionMaps.length > 0 && lightsState.reflectionMaps[0].texture && this._uReflectionMap) {\n        program.bindTexture(this._uReflectionMap, lightsState.reflectionMaps[0].texture, frameCtx.textureUnit);\n        frameCtx.textureUnit = (frameCtx.textureUnit + 1) % maxTextureUnits;\n        frameCtx.bindTexture++;\n    }\n\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n\n    this._baseTextureUnit = frameCtx.textureUnit;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvZHJhdy9EcmF3UmVuZGVyZXIuanM/MGY1YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7O0FBRXVDO0FBQ2dCO0FBQ1I7QUFDVjtBQUNTO0FBQ047QUFDZTs7QUFFdkQsa0JBQWtCLGtEQUFJOztBQUV0QixnQkFBZ0IsaURBQUcsR0FBRzs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHFFQUFnQjtBQUM3QztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBSztBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQ0FBSztBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsd0RBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxzQ0FBc0M7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSx5RUFBYztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3Qix5REFBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSw0QkFBNEIsd0RBQVU7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvREFBb0QsU0FBUzs7QUFFN0Q7O0FBRUE7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tZXNoL2RyYXcvRHJhd1JlbmRlcmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIHhlb2xhYnMgLyBodHRwczovL2dpdGh1Yi5jb20veGVvbGFic1xuICovXG5cbmltcG9ydCB7TWFwfSBmcm9tIFwiLi4vLi4vdXRpbHMvTWFwLmpzXCI7XG5pbXBvcnQge0RyYXdTaGFkZXJTb3VyY2V9IGZyb20gXCIuL0RyYXdTaGFkZXJTb3VyY2UuanNcIjtcbmltcG9ydCB7UHJvZ3JhbX0gZnJvbSBcIi4uLy4uL3dlYmdsL1Byb2dyYW0uanNcIjtcbmltcG9ydCB7c3RhdHN9IGZyb20gJy4uLy4uL3N0YXRzLmpzJztcbmltcG9ydCB7V0VCR0xfSU5GT30gZnJvbSAnLi4vLi4vd2ViZ2xJbmZvLmpzJztcbmltcG9ydCB7bWF0aH0gZnJvbSBcIi4uLy4uL21hdGgvbWF0aC5qc1wiO1xuaW1wb3J0IHtnZXRQbGFuZVJUQ1Bvc30gZnJvbSBcIi4uLy4uL21hdGgvcnRjQ29vcmRzLmpzXCI7XG5cbmNvbnN0IHRlbXBWZWMzYSA9IG1hdGgudmVjMygpO1xuXG5jb25zdCBpZHMgPSBuZXcgTWFwKHt9KTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBEcmF3UmVuZGVyZXIgPSBmdW5jdGlvbiAoaGFzaCwgbWVzaCkge1xuICAgIHRoaXMuaWQgPSBpZHMuYWRkSXRlbSh7fSk7XG4gICAgdGhpcy5faGFzaCA9IGhhc2g7XG4gICAgdGhpcy5fc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIHRoaXMuX3VzZUNvdW50ID0gMDtcbiAgICB0aGlzLl9zaGFkZXJTb3VyY2UgPSBuZXcgRHJhd1NoYWRlclNvdXJjZShtZXNoKTtcbiAgICB0aGlzLl9hbGxvY2F0ZShtZXNoKTtcbn07XG5cbmNvbnN0IGRyYXdSZW5kZXJlcnMgPSB7fTtcblxuRHJhd1JlbmRlcmVyLmdldCA9IGZ1bmN0aW9uIChtZXNoKSB7XG4gICAgY29uc3Qgc2NlbmUgPSBtZXNoLnNjZW5lO1xuICAgIGNvbnN0IGhhc2ggPSBbXG4gICAgICAgIHNjZW5lLmNhbnZhcy5jYW52YXMuaWQsXG4gICAgICAgIChzY2VuZS5nYW1tYUlucHV0ID8gXCJnaTtcIiA6IFwiO1wiKSArIChzY2VuZS5nYW1tYU91dHB1dCA/IFwiZ29cIiA6IFwiXCIpLFxuICAgICAgICBzY2VuZS5fbGlnaHRzU3RhdGUuZ2V0SGFzaCgpLFxuICAgICAgICBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlLmdldEhhc2goKSxcbiAgICAgICAgbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmhhc2gsXG4gICAgICAgIG1lc2guX21hdGVyaWFsLl9zdGF0ZS5oYXNoLFxuICAgICAgICBtZXNoLl9zdGF0ZS5kcmF3SGFzaFxuICAgIF0uam9pbihcIjtcIik7XG4gICAgbGV0IHJlbmRlcmVyID0gZHJhd1JlbmRlcmVyc1toYXNoXTtcbiAgICBpZiAoIXJlbmRlcmVyKSB7XG4gICAgICAgIHJlbmRlcmVyID0gbmV3IERyYXdSZW5kZXJlcihoYXNoLCBtZXNoKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyLmVycm9ycykge1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVuZGVyZXIuZXJyb3JzLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZHJhd1JlbmRlcmVyc1toYXNoXSA9IHJlbmRlcmVyO1xuICAgICAgICBzdGF0cy5tZW1vcnkucHJvZ3JhbXMrKztcbiAgICB9XG4gICAgcmVuZGVyZXIuX3VzZUNvdW50Kys7XG4gICAgcmV0dXJuIHJlbmRlcmVyO1xufTtcblxuRHJhd1JlbmRlcmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKC0tdGhpcy5fdXNlQ291bnQgPT09IDApIHtcbiAgICAgICAgaWRzLnJlbW92ZUl0ZW0odGhpcy5pZCk7XG4gICAgICAgIGlmICh0aGlzLl9wcm9ncmFtKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9ncmFtLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZHJhd1JlbmRlcmVyc1t0aGlzLl9oYXNoXTtcbiAgICAgICAgc3RhdHMubWVtb3J5LnByb2dyYW1zLS07XG4gICAgfVxufTtcblxuRHJhd1JlbmRlcmVyLnByb3RvdHlwZS53ZWJnbENvbnRleHRSZXN0b3JlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9wcm9ncmFtID0gbnVsbDtcbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuZHJhd01lc2ggPSBmdW5jdGlvbiAoZnJhbWVDdHgsIG1lc2gpIHtcblxuICAgIGlmICghdGhpcy5fcHJvZ3JhbSkge1xuICAgICAgICB0aGlzLl9hbGxvY2F0ZShtZXNoKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhUZXh0dXJlVW5pdHMgPSBXRUJHTF9JTkZPLk1BWF9URVhUVVJFX1VOSVRTO1xuICAgIGNvbnN0IHNjZW5lID0gbWVzaC5zY2VuZTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG1lc2guX21hdGVyaWFsO1xuICAgIGNvbnN0IGdsID0gc2NlbmUuY2FudmFzLmdsO1xuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLl9wcm9ncmFtO1xuICAgIGNvbnN0IG1lc2hTdGF0ZSA9IG1lc2guX3N0YXRlO1xuICAgIGNvbnN0IG1hdGVyaWFsU3RhdGUgPSBtZXNoLl9tYXRlcmlhbC5fc3RhdGU7XG4gICAgY29uc3QgZ2VvbWV0cnlTdGF0ZSA9IG1lc2guX2dlb21ldHJ5Ll9zdGF0ZTtcbiAgICBjb25zdCBjYW1lcmEgPSBzY2VuZS5jYW1lcmE7XG4gICAgY29uc3QgcnRjQ2VudGVyID0gbWVzaC5ydGNDZW50ZXI7XG5cbiAgICBpZiAoZnJhbWVDdHgubGFzdFByb2dyYW1JZCAhPT0gdGhpcy5fcHJvZ3JhbS5pZCkge1xuICAgICAgICBmcmFtZUN0eC5sYXN0UHJvZ3JhbUlkID0gdGhpcy5fcHJvZ3JhbS5pZDtcbiAgICAgICAgdGhpcy5fYmluZFByb2dyYW0oZnJhbWVDdHgpO1xuICAgIH1cblxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVZpZXdNYXRyaXgsIGZhbHNlLCBydGNDZW50ZXIgPyBmcmFtZUN0eC5nZXRSVENWaWV3TWF0cml4KG1lc2hTdGF0ZS5ydGNDZW50ZXJIYXNoLCBydGNDZW50ZXIpIDogY2FtZXJhLnZpZXdNYXRyaXgpO1xuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVZpZXdOb3JtYWxNYXRyaXgsIGZhbHNlLCBjYW1lcmEudmlld05vcm1hbE1hdHJpeCk7XG5cbiAgICBpZiAobWVzaFN0YXRlLmNsaXBwYWJsZSkge1xuICAgICAgICBjb25zdCBudW1TZWN0aW9uUGxhbmVzID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDtcbiAgICAgICAgaWYgKG51bVNlY3Rpb25QbGFuZXMgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uUGxhbmVzID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyRmxhZ3MgPSBtZXNoLnJlbmRlckZsYWdzO1xuICAgICAgICAgICAgZm9yIChsZXQgc2VjdGlvblBsYW5lSW5kZXggPSAwOyBzZWN0aW9uUGxhbmVJbmRleCA8IG51bVNlY3Rpb25QbGFuZXM7IHNlY3Rpb25QbGFuZUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0aW9uUGxhbmVVbmlmb3JtcyA9IHRoaXMuX3VTZWN0aW9uUGxhbmVzW3NlY3Rpb25QbGFuZUluZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmUgPSByZW5kZXJGbGFncy5zZWN0aW9uUGxhbmVzQWN0aXZlUGVyTGF5ZXJbc2VjdGlvblBsYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaShzZWN0aW9uUGxhbmVVbmlmb3Jtcy5hY3RpdmUsIGFjdGl2ZSA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlY3Rpb25QbGFuZSA9IHNlY3Rpb25QbGFuZXNbc2VjdGlvblBsYW5lSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHNlY3Rpb25QbGFuZVVuaWZvcm1zLnBvcywgcnRjQ2VudGVyID8gZ2V0UGxhbmVSVENQb3Moc2VjdGlvblBsYW5lLmRpc3QsIHNlY3Rpb25QbGFuZS5kaXIsIHJ0Y0NlbnRlciwgdGVtcFZlYzNhKSA6IHNlY3Rpb25QbGFuZS5wb3MpO1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHNlY3Rpb25QbGFuZVVuaWZvcm1zLmRpciwgc2VjdGlvblBsYW5lLmRpcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGVyaWFsU3RhdGUuaWQgIT09IHRoaXMuX2xhc3RNYXRlcmlhbElkKSB7XG5cbiAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSB0aGlzLl9iYXNlVGV4dHVyZVVuaXQ7XG5cbiAgICAgICAgY29uc3QgYmFja2ZhY2VzID0gbWF0ZXJpYWxTdGF0ZS5iYWNrZmFjZXM7XG4gICAgICAgIGlmIChmcmFtZUN0eC5iYWNrZmFjZXMgIT09IGJhY2tmYWNlcykge1xuICAgICAgICAgICAgaWYgKGJhY2tmYWNlcykge1xuICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZUN0eC5iYWNrZmFjZXMgPSBiYWNrZmFjZXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9udGZhY2UgPSBtYXRlcmlhbFN0YXRlLmZyb250ZmFjZTtcbiAgICAgICAgaWYgKGZyYW1lQ3R4LmZyb250ZmFjZSAhPT0gZnJvbnRmYWNlKSB7XG4gICAgICAgICAgICBpZiAoZnJvbnRmYWNlKSB7XG4gICAgICAgICAgICAgICAgZ2wuZnJvbnRGYWNlKGdsLkNDVyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmZyb250RmFjZShnbC5DVyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZUN0eC5mcm9udGZhY2UgPSBmcm9udGZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJhbWVDdHgubGluZVdpZHRoICE9PSBtYXRlcmlhbFN0YXRlLmxpbmVXaWR0aCkge1xuICAgICAgICAgICAgZ2wubGluZVdpZHRoKG1hdGVyaWFsU3RhdGUubGluZVdpZHRoKTtcbiAgICAgICAgICAgIGZyYW1lQ3R4LmxpbmVXaWR0aCA9IG1hdGVyaWFsU3RhdGUubGluZVdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3VQb2ludFNpemUpIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UG9pbnRTaXplLCBtYXRlcmlhbFN0YXRlLnBvaW50U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG1hdGVyaWFsU3RhdGUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkxhbWJlcnRNYXRlcmlhbFwiOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxBbWJpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsQW1iaWVudCwgbWF0ZXJpYWxTdGF0ZS5hbWJpZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TWF0ZXJpYWxDb2xvciwgbWF0ZXJpYWxTdGF0ZS5jb2xvclswXSwgbWF0ZXJpYWxTdGF0ZS5jb2xvclsxXSwgbWF0ZXJpYWxTdGF0ZS5jb2xvclsyXSwgbWF0ZXJpYWxTdGF0ZS5hbHBoYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlLCBtYXRlcmlhbFN0YXRlLmVtaXNzaXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJQaG9uZ01hdGVyaWFsXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbFNoaW5pbmVzcykge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdU1hdGVyaWFsU2hpbmluZXNzLCBtYXRlcmlhbFN0YXRlLnNoaW5pbmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxBbWJpZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsQW1iaWVudCwgbWF0ZXJpYWxTdGF0ZS5hbWJpZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbERpZmZ1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxEaWZmdXNlLCBtYXRlcmlhbFN0YXRlLmRpZmZ1c2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxTcGVjdWxhciwgbWF0ZXJpYWxTdGF0ZS5zcGVjdWxhcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlLCBtYXRlcmlhbFN0YXRlLmVtaXNzaXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTW9kZUN1dG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgIDEuMCAqIG1hdGVyaWFsU3RhdGUuYWxwaGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFN0YXRlLmFscGhhTW9kZSA9PT0gMSA/IDEuMCA6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsU3RhdGUuYWxwaGFDdXRvZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9hbWJpZW50TWFwICYmIG1hdGVyaWFsLl9hbWJpZW50TWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VNYXRlcmlhbEFtYmllbnRNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwLCBtYXRlcmlhbC5fYW1iaWVudE1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsQW1iaWVudE1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2FtYmllbnRNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlTWFwICYmIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VEaWZmdXNlTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdURpZmZ1c2VNYXAsIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCwgZmFsc2UsIG1hdGVyaWFsLl9kaWZmdXNlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJNYXAgJiYgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VTcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VTcGVjdWxhck1hcCwgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNwZWN1bGFyTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX3NwZWN1bGFyTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVNYXAgJiYgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VFbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VFbWlzc2l2ZU1hcCwgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2VtaXNzaXZlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXAgJiYgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VBbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VBbHBoYU1hcCwgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUFscGhhTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX2FscGhhTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcmVmbGVjdGl2aXR5TWFwICYmIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdVJlZmxlY3Rpdml0eU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VSZWZsZWN0aXZpdHlNYXAsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VSZWZsZWN0aXZpdHlNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVJlZmxlY3Rpdml0eU1hcE1hdHJpeCwgZmFsc2UsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9ub3JtYWxNYXAgJiYgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Tm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdU5vcm1hbE1hcCwgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU5vcm1hbE1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91Tm9ybWFsTWFwTWF0cml4LCBmYWxzZSwgbWF0ZXJpYWwuX25vcm1hbE1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCAmJiBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VPY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91T2NjbHVzaW9uTWFwLCBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXgsIGZhbHNlLCBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZGlmZnVzZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdURpZmZ1c2VGcmVzbmVsRWRnZUJpYXMsIG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbC5lZGdlQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJCaWFzLCBtYXRlcmlhbC5fZGlmZnVzZUZyZXNuZWwuY2VudGVyQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91RGlmZnVzZUZyZXNuZWxFZGdlQ29sb3IsIG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbC5lZGdlQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91RGlmZnVzZUZyZXNuZWxDZW50ZXJDb2xvciwgbWF0ZXJpYWwuX2RpZmZ1c2VGcmVzbmVsLmNlbnRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdURpZmZ1c2VGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91RGlmZnVzZUZyZXNuZWxQb3dlciwgbWF0ZXJpYWwuX2RpZmZ1c2VGcmVzbmVsLnBvd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyRnJlc25lbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzLCBtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsLmVkZ2VCaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91U3BlY3VsYXJGcmVzbmVsQ2VudGVyQmlhcywgbWF0ZXJpYWwuX3NwZWN1bGFyRnJlc25lbC5jZW50ZXJCaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91U3BlY3VsYXJGcmVzbmVsRWRnZUNvbG9yLCBtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsLmVkZ2VDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VTcGVjdWxhckZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91U3BlY3VsYXJGcmVzbmVsQ2VudGVyQ29sb3IsIG1hdGVyaWFsLl9zcGVjdWxhckZyZXNuZWwuY2VudGVyQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91U3BlY3VsYXJGcmVzbmVsUG93ZXIsIG1hdGVyaWFsLl9zcGVjdWxhckZyZXNuZWwucG93ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUJpYXMsIG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwuZWRnZUJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsQ2VudGVyQmlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJCaWFzLCBtYXRlcmlhbC5fYWxwaGFGcmVzbmVsLmNlbnRlckJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFGcmVzbmVsRWRnZUNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VBbHBoYUZyZXNuZWxFZGdlQ29sb3IsIG1hdGVyaWFsLl9hbHBoYUZyZXNuZWwuZWRnZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhRnJlc25lbENlbnRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJDb2xvciwgbWF0ZXJpYWwuX2FscGhhRnJlc25lbC5jZW50ZXJDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlciwgbWF0ZXJpYWwuX2FscGhhRnJlc25lbC5wb3dlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdVJlZmxlY3Rpdml0eUZyZXNuZWxFZGdlQmlhcywgbWF0ZXJpYWwuX3JlZmxlY3Rpdml0eUZyZXNuZWwuZWRnZUJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckJpYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckJpYXMsIG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlGcmVzbmVsLmNlbnRlckJpYXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvciwgbWF0ZXJpYWwuX3JlZmxlY3Rpdml0eUZyZXNuZWwuZWRnZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVJlZmxlY3Rpdml0eUZyZXNuZWxDZW50ZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckNvbG9yLCBtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbC5jZW50ZXJDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsUG93ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbFBvd2VyLCBtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbC5wb3dlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQmlhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQmlhcywgbWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbC5lZGdlQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxDZW50ZXJCaWFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckJpYXMsIG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwuY2VudGVyQmlhcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZUZyZXNuZWxFZGdlQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUVtaXNzaXZlRnJlc25lbEVkZ2VDb2xvciwgbWF0ZXJpYWwuX2VtaXNzaXZlRnJlc25lbC5lZGdlQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91RW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckNvbG9yLCBtYXRlcmlhbC5fZW1pc3NpdmVGcmVzbmVsLmNlbnRlckNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyLCBtYXRlcmlhbC5fZW1pc3NpdmVGcmVzbmVsLnBvd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIk1ldGFsbGljTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUJhc2VDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VCYXNlQ29sb3IsIG1hdGVyaWFsU3RhdGUuYmFzZUNvbG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbE1ldGFsbGljKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih0aGlzLl91TWF0ZXJpYWxNZXRhbGxpYywgbWF0ZXJpYWxTdGF0ZS5tZXRhbGxpYyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxSb3VnaG5lc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbFJvdWdobmVzcywgbWF0ZXJpYWxTdGF0ZS5yb3VnaG5lc3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCwgbWF0ZXJpYWxTdGF0ZS5zcGVjdWxhckYwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUsIG1hdGVyaWFsU3RhdGUuZW1pc3NpdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhTW9kZUN1dG9mZikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGYoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgMS4wICogbWF0ZXJpYWxTdGF0ZS5hbHBoYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsU3RhdGUuYWxwaGFNb2RlID09PSAxID8gMS4wIDogMC4wLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxTdGF0ZS5hbHBoYUN1dG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgIDAuMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VDb2xvck1hcCA9IG1hdGVyaWFsLl9iYXNlQ29sb3JNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGJhc2VDb2xvck1hcCAmJiBiYXNlQ29sb3JNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUJhc2VDb2xvck1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VCYXNlQ29sb3JNYXAsIGJhc2VDb2xvck1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUJhc2VDb2xvck1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91QmFzZUNvbG9yTWFwTWF0cml4LCBmYWxzZSwgYmFzZUNvbG9yTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFsbGljTWFwID0gbWF0ZXJpYWwuX21ldGFsbGljTWFwO1xuICAgICAgICAgICAgICAgIGlmIChtZXRhbGxpY01hcCAmJiBtZXRhbGxpY01hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91TWV0YWxsaWNNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TWV0YWxsaWNNYXAsIG1ldGFsbGljTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWV0YWxsaWNNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU1ldGFsbGljTWFwTWF0cml4LCBmYWxzZSwgbWV0YWxsaWNNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgcm91Z2huZXNzTWFwID0gbWF0ZXJpYWwuX3JvdWdobmVzc01hcDtcbiAgICAgICAgICAgICAgICBpZiAocm91Z2huZXNzTWFwICYmIHJvdWdobmVzc01hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Um91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdVJvdWdobmVzc01hcCwgcm91Z2huZXNzTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91Um91Z2huZXNzTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VSb3VnaG5lc3NNYXBNYXRyaXgsIGZhbHNlLCByb3VnaG5lc3NNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWxsaWNSb3VnaG5lc3NNYXAgPSBtYXRlcmlhbC5fbWV0YWxsaWNSb3VnaG5lc3NNYXA7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGFsbGljUm91Z2huZXNzTWFwICYmIG1ldGFsbGljUm91Z2huZXNzTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcCwgbWV0YWxsaWNSb3VnaG5lc3NNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91TWV0YWxsaWNSb3VnaG5lc3NNYXBNYXRyaXgsIGZhbHNlLCBtZXRhbGxpY1JvdWdobmVzc01hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZW1pc3NpdmVNYXAgPSBtYXRlcmlhbC5fZW1pc3NpdmVNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGVtaXNzaXZlTWFwICYmIGVtaXNzaXZlTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VFbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VFbWlzc2l2ZU1hcCwgZW1pc3NpdmVNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXgsIGZhbHNlLCBlbWlzc2l2ZU1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb2NjbHVzaW9uTWFwID0gbWF0ZXJpYWwuX29jY2x1c2lvbk1hcDtcbiAgICAgICAgICAgICAgICBpZiAob2NjbHVzaW9uTWFwICYmIG1hdGVyaWFsLl9vY2NsdXNpb25NYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdU9jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VPY2NsdXNpb25NYXAsIG9jY2x1c2lvbk1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU9jY2x1c2lvbk1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4LCBmYWxzZSwgb2NjbHVzaW9uTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBhbHBoYU1hcCA9IG1hdGVyaWFsLl9hbHBoYU1hcDtcbiAgICAgICAgICAgICAgICBpZiAoYWxwaGFNYXAgJiYgYWxwaGFNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUFscGhhTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdUFscGhhTWFwLCBhbHBoYU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUFscGhhTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VBbHBoYU1hcE1hdHJpeCwgZmFsc2UsIGFscGhhTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxNYXAgPSBtYXRlcmlhbC5fbm9ybWFsTWFwO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxNYXAgJiYgbm9ybWFsTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VOb3JtYWxNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91Tm9ybWFsTWFwLCBub3JtYWxNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VOb3JtYWxNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU5vcm1hbE1hcE1hdHJpeCwgZmFsc2UsIG5vcm1hbE1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIlNwZWN1bGFyTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsRGlmZnVzZSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbERpZmZ1c2UsIG1hdGVyaWFsU3RhdGUuZGlmZnVzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxTcGVjdWxhcikge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VNYXRlcmlhbFNwZWN1bGFyLCBtYXRlcmlhbFN0YXRlLnNwZWN1bGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VNYXRlcmlhbEdsb3NzaW5lc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbEdsb3NzaW5lc3MsIG1hdGVyaWFsU3RhdGUuZ2xvc3NpbmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TWF0ZXJpYWxSZWZsZWN0aXZpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VNYXRlcmlhbFJlZmxlY3Rpdml0eSwgbWF0ZXJpYWxTdGF0ZS5yZWZsZWN0aXZpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSwgbWF0ZXJpYWxTdGF0ZS5lbWlzc2l2ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAxLjAgKiBtYXRlcmlhbFN0YXRlLmFscGhhLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxTdGF0ZS5hbHBoYU1vZGUgPT09IDEgPyAxLjAgOiAwLjAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFN0YXRlLmFscGhhQ3V0b2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgMC4wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZnVzZU1hcCA9IG1hdGVyaWFsLl9kaWZmdXNlTWFwO1xuICAgICAgICAgICAgICAgIGlmIChkaWZmdXNlTWFwICYmIGRpZmZ1c2VNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdURpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91RGlmZnVzZU1hcCwgZGlmZnVzZU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdURpZmZ1c2VNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdURpZmZ1c2VNYXBNYXRyaXgsIGZhbHNlLCBkaWZmdXNlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWN1bGFyTWFwID0gbWF0ZXJpYWwuX3NwZWN1bGFyTWFwO1xuICAgICAgICAgICAgICAgIGlmIChzcGVjdWxhck1hcCAmJiBzcGVjdWxhck1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91U3BlY3VsYXJNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91U3BlY3VsYXJNYXAsIHNwZWN1bGFyTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNwZWN1bGFyTWFwTWF0cml4LCBmYWxzZSwgc3BlY3VsYXJNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xvc3NpbmVzc01hcCA9IG1hdGVyaWFsLl9nbG9zc2luZXNzTWFwO1xuICAgICAgICAgICAgICAgIGlmIChnbG9zc2luZXNzTWFwICYmIGdsb3NzaW5lc3NNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUdsb3NzaW5lc3NNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91R2xvc3NpbmVzc01hcCwgZ2xvc3NpbmVzc01hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXgsIGZhbHNlLCBnbG9zc2luZXNzTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNwZWN1bGFyR2xvc3NpbmVzc01hcCA9IG1hdGVyaWFsLl9zcGVjdWxhckdsb3NzaW5lc3NNYXA7XG4gICAgICAgICAgICAgICAgaWYgKHNwZWN1bGFyR2xvc3NpbmVzc01hcCAmJiBzcGVjdWxhckdsb3NzaW5lc3NNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VTcGVjdWxhckdsb3NzaW5lc3NNYXAsIHNwZWN1bGFyR2xvc3NpbmVzc01hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91U3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4LCBmYWxzZSwgc3BlY3VsYXJHbG9zc2luZXNzTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBlbWlzc2l2ZU1hcCA9IG1hdGVyaWFsLl9lbWlzc2l2ZU1hcDtcbiAgICAgICAgICAgICAgICBpZiAoZW1pc3NpdmVNYXAgJiYgZW1pc3NpdmVNYXAuX3N0YXRlLnRleHR1cmUgJiYgdGhpcy5fdUVtaXNzaXZlTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdUVtaXNzaXZlTWFwLCBlbWlzc2l2ZU1hcC5fc3RhdGUudGV4dHVyZSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCwgZmFsc2UsIGVtaXNzaXZlTWFwLl9zdGF0ZS5tYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBvY2NsdXNpb25NYXAgPSBtYXRlcmlhbC5fb2NjbHVzaW9uTWFwO1xuICAgICAgICAgICAgICAgIGlmIChvY2NsdXNpb25NYXAgJiYgb2NjbHVzaW9uTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VPY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91T2NjbHVzaW9uTWFwLCBvY2NsdXNpb25NYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU9jY2x1c2lvbk1hcE1hdHJpeCwgZmFsc2UsIG9jY2x1c2lvbk1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYWxwaGFNYXAgPSBtYXRlcmlhbC5fYWxwaGFNYXA7XG4gICAgICAgICAgICAgICAgaWYgKGFscGhhTWFwICYmIGFscGhhTWFwLl9zdGF0ZS50ZXh0dXJlICYmIHRoaXMuX3VBbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VBbHBoYU1hcCwgYWxwaGFNYXAuX3N0YXRlLnRleHR1cmUsIGZyYW1lQ3R4LnRleHR1cmVVbml0KTtcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAoZnJhbWVDdHgudGV4dHVyZVVuaXQgKyAxKSAlIG1heFRleHR1cmVVbml0cztcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVDdHguYmluZFRleHR1cmUrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VBbHBoYU1hcE1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91QWxwaGFNYXBNYXRyaXgsIGZhbHNlLCBhbHBoYU1hcC5fc3RhdGUubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsTWFwID0gbWF0ZXJpYWwuX25vcm1hbE1hcDtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsTWFwICYmIG5vcm1hbE1hcC5fc3RhdGUudGV4dHVyZSAmJiB0aGlzLl91Tm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyYW0uYmluZFRleHR1cmUodGhpcy5fdU5vcm1hbE1hcCwgbm9ybWFsTWFwLl9zdGF0ZS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91Tm9ybWFsTWFwTWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VOb3JtYWxNYXBNYXRyaXgsIGZhbHNlLCBub3JtYWxNYXAuX3N0YXRlLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGFzdE1hdGVyaWFsSWQgPSBtYXRlcmlhbFN0YXRlLmlkO1xuICAgIH1cblxuICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdU1vZGVsTWF0cml4LCBnbC5GQUxTRSwgbWVzaC53b3JsZE1hdHJpeCk7XG4gICAgaWYgKHRoaXMuX3VNb2RlbE5vcm1hbE1hdHJpeCkge1xuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuX3VNb2RlbE5vcm1hbE1hdHJpeCwgZ2wuRkFMU0UsIG1lc2gud29ybGROb3JtYWxNYXRyaXgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91Q2xpcHBhYmxlKSB7XG4gICAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl91Q2xpcHBhYmxlLCBtZXNoU3RhdGUuY2xpcHBhYmxlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdUNvbG9yaXplKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yaXplID0gbWVzaFN0YXRlLmNvbG9yaXplO1xuICAgICAgICBjb25zdCBsYXN0Q29sb3JpemUgPSB0aGlzLl9sYXN0Q29sb3JpemU7XG4gICAgICAgIGlmIChsYXN0Q29sb3JpemVbMF0gIT09IGNvbG9yaXplWzBdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMV0gIT09IGNvbG9yaXplWzFdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMl0gIT09IGNvbG9yaXplWzJdIHx8XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbM10gIT09IGNvbG9yaXplWzNdKSB7XG4gICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHRoaXMuX3VDb2xvcml6ZSwgY29sb3JpemUpO1xuICAgICAgICAgICAgbGFzdENvbG9yaXplWzBdID0gY29sb3JpemVbMF07XG4gICAgICAgICAgICBsYXN0Q29sb3JpemVbMV0gPSBjb2xvcml6ZVsxXTtcbiAgICAgICAgICAgIGxhc3RDb2xvcml6ZVsyXSA9IGNvbG9yaXplWzJdO1xuICAgICAgICAgICAgbGFzdENvbG9yaXplWzNdID0gY29sb3JpemVbM107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VPZmZzZXQsIG1lc2hTdGF0ZS5vZmZzZXQpO1xuXG4gICAgLy8gQmluZCBWQk9zXG5cbiAgICBpZiAoZ2VvbWV0cnlTdGF0ZS5pZCAhPT0gdGhpcy5fbGFzdEdlb21ldHJ5SWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VQb3NpdGlvbnNEZWNvZGVNYXRyaXgpIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVBvc2l0aW9uc0RlY29kZU1hdHJpeCwgZmFsc2UsIGdlb21ldHJ5U3RhdGUucG9zaXRpb25zRGVjb2RlTWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdVVWRGVjb2RlTWF0cml4KSB7XG4gICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMuX3VVVkRlY29kZU1hdHJpeCwgZmFsc2UsIGdlb21ldHJ5U3RhdGUudXZEZWNvZGVNYXRyaXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2FQb3NpdGlvbi5iaW5kQXJyYXlCdWZmZXIoZ2VvbWV0cnlTdGF0ZS5wb3NpdGlvbnNCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FOb3JtYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FOb3JtYWwuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUubm9ybWFsc0J1Zik7XG4gICAgICAgICAgICBmcmFtZUN0eC5iaW5kQXJyYXkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYVVWKSB7XG4gICAgICAgICAgICB0aGlzLl9hVVYuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUudXZCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FDb2xvcikge1xuICAgICAgICAgICAgdGhpcy5fYUNvbG9yLmJpbmRBcnJheUJ1ZmZlcihnZW9tZXRyeVN0YXRlLmNvbG9yc0J1Zik7XG4gICAgICAgICAgICBmcmFtZUN0eC5iaW5kQXJyYXkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYUZsYWdzKSB7XG4gICAgICAgICAgICB0aGlzLl9hRmxhZ3MuYmluZEFycmF5QnVmZmVyKGdlb21ldHJ5U3RhdGUuZmxhZ3NCdWYpO1xuICAgICAgICAgICAgZnJhbWVDdHguYmluZEFycmF5Kys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlb21ldHJ5U3RhdGUuaW5kaWNlc0J1Zikge1xuICAgICAgICAgICAgZ2VvbWV0cnlTdGF0ZS5pbmRpY2VzQnVmLmJpbmQoKTtcbiAgICAgICAgICAgIGZyYW1lQ3R4LmJpbmRBcnJheSsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RHZW9tZXRyeUlkID0gZ2VvbWV0cnlTdGF0ZS5pZDtcbiAgICB9XG5cbiAgICAvLyBEcmF3IChpbmRpY2VzIGJvdW5kIGluIHByZXYgc3RlcClcblxuICAgIGlmIChnZW9tZXRyeVN0YXRlLmluZGljZXNCdWYpIHtcbiAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdlb21ldHJ5U3RhdGUucHJpbWl0aXZlLCBnZW9tZXRyeVN0YXRlLmluZGljZXNCdWYubnVtSXRlbXMsIGdlb21ldHJ5U3RhdGUuaW5kaWNlc0J1Zi5pdGVtVHlwZSwgMCk7XG4gICAgICAgIGZyYW1lQ3R4LmRyYXdFbGVtZW50cysrO1xuICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnlTdGF0ZS5wb3NpdGlvbnMpIHtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIGdlb21ldHJ5U3RhdGUucG9zaXRpb25zLm51bUl0ZW1zKTtcbiAgICAgICAgZnJhbWVDdHguZHJhd0FycmF5cysrO1xuICAgIH1cbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuX2FsbG9jYXRlID0gZnVuY3Rpb24gKG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBtZXNoLl9tYXRlcmlhbDtcbiAgICBjb25zdCBsaWdodHNTdGF0ZSA9IHNjZW5lLl9saWdodHNTdGF0ZTtcbiAgICBjb25zdCBzZWN0aW9uUGxhbmVzU3RhdGUgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlO1xuICAgIGNvbnN0IG1hdGVyaWFsU3RhdGUgPSBtZXNoLl9tYXRlcmlhbC5fc3RhdGU7XG5cbiAgICB0aGlzLl9wcm9ncmFtID0gbmV3IFByb2dyYW0oZ2wsIHRoaXMuX3NoYWRlclNvdXJjZSk7XG4gICAgaWYgKHRoaXMuX3Byb2dyYW0uZXJyb3JzKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5fcHJvZ3JhbS5lcnJvcnM7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3JhbSA9IHRoaXMuX3Byb2dyYW07XG4gICAgdGhpcy5fdVBvc2l0aW9uc0RlY29kZU1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJwb3NpdGlvbnNEZWNvZGVNYXRyaXhcIik7XG4gICAgdGhpcy5fdVVWRGVjb2RlTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInV2RGVjb2RlTWF0cml4XCIpO1xuICAgIHRoaXMuX3VNb2RlbE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtb2RlbE1hdHJpeFwiKTtcbiAgICB0aGlzLl91TW9kZWxOb3JtYWxNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibW9kZWxOb3JtYWxNYXRyaXhcIik7XG4gICAgdGhpcy5fdVZpZXdNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwidmlld01hdHJpeFwiKTtcbiAgICB0aGlzLl91Vmlld05vcm1hbE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJ2aWV3Tm9ybWFsTWF0cml4XCIpO1xuICAgIHRoaXMuX3VQcm9qTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInByb2pNYXRyaXhcIik7XG4gICAgdGhpcy5fdUdhbW1hRmFjdG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImdhbW1hRmFjdG9yXCIpO1xuICAgIHRoaXMuX3VMaWdodEFtYmllbnQgPSBbXTtcbiAgICB0aGlzLl91TGlnaHRDb2xvciA9IFtdO1xuICAgIHRoaXMuX3VMaWdodERpciA9IFtdO1xuICAgIHRoaXMuX3VMaWdodFBvcyA9IFtdO1xuICAgIHRoaXMuX3VMaWdodEF0dGVudWF0aW9uID0gW107XG4gICAgdGhpcy5fdVNoYWRvd1ZpZXdNYXRyaXggPSBbXTtcbiAgICB0aGlzLl91U2hhZG93UHJvak1hdHJpeCA9IFtdO1xuXG4gICAgaWYgKHNjZW5lLmxvZ2FyaXRobWljRGVwdGhCdWZmZXJFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuX3VMb2dEZXB0aEJ1ZkZDID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxvZ0RlcHRoQnVmRkNcIik7XG4gICAgfVxuXG4gICAgY29uc3QgbGlnaHRzID0gbGlnaHRzU3RhdGUubGlnaHRzO1xuICAgIGxldCBsaWdodDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaWdodHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGlnaHQgPSBsaWdodHNbaV07XG4gICAgICAgIHN3aXRjaCAobGlnaHQudHlwZSkge1xuXG4gICAgICAgICAgICBjYXNlIFwiYW1iaWVudFwiOlxuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodEFtYmllbnRbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRBbWJpZW50XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiZGlyXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0Q29sb3JbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRDb2xvclwiICsgaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0UG9zW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHREaXJbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHREaXJcIiArIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwicG9pbnRcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHRDb2xvcltpXSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJsaWdodENvbG9yXCIgKyBpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHRQb3NbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRQb3NcIiArIGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodERpcltpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0QXR0ZW51YXRpb25baV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRBdHRlbnVhdGlvblwiICsgaSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzcG90XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0Q29sb3JbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHRDb2xvclwiICsgaSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUxpZ2h0UG9zW2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxpZ2h0UG9zXCIgKyBpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91TGlnaHREaXJbaV0gPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibGlnaHREaXJcIiArIGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VMaWdodEF0dGVudWF0aW9uW2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImxpZ2h0QXR0ZW51YXRpb25cIiArIGkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpZ2h0LmNhc3RzU2hhZG93KSB7XG4gICAgICAgICAgICB0aGlzLl91U2hhZG93Vmlld01hdHJpeFtpXSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzaGFkb3dWaWV3TWF0cml4XCIgKyBpKTtcbiAgICAgICAgICAgIHRoaXMuX3VTaGFkb3dQcm9qTWF0cml4W2ldID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNoYWRvd1Byb2pNYXRyaXhcIiArIGkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxpZ2h0c1N0YXRlLmxpZ2h0TWFwcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3VMaWdodE1hcCA9IFwibGlnaHRNYXBcIjtcbiAgICB9XG5cbiAgICBpZiAobGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl91UmVmbGVjdGlvbk1hcCA9IFwicmVmbGVjdGlvbk1hcFwiO1xuICAgIH1cblxuICAgIHRoaXMuX3VTZWN0aW9uUGxhbmVzID0gW107XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lcyA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuX3VTZWN0aW9uUGxhbmVzLnB1c2goe1xuICAgICAgICAgICAgYWN0aXZlOiBwcm9ncmFtLmdldExvY2F0aW9uKFwic2VjdGlvblBsYW5lQWN0aXZlXCIgKyBpKSxcbiAgICAgICAgICAgIHBvczogcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNlY3Rpb25QbGFuZVBvc1wiICsgaSksXG4gICAgICAgICAgICBkaXI6IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzZWN0aW9uUGxhbmVEaXJcIiArIGkpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuX3VQb2ludFNpemUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicG9pbnRTaXplXCIpO1xuXG4gICAgc3dpdGNoIChtYXRlcmlhbFN0YXRlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIkxhbWJlcnRNYXRlcmlhbFwiOlxuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxDb2xvclwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbEVtaXNzaXZlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsRW1pc3NpdmVcIik7XG4gICAgICAgICAgICB0aGlzLl91QWxwaGFNb2RlQ3V0b2ZmID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsQWxwaGFNb2RlQ3V0b2ZmXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIlBob25nTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbEFtYmllbnQgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbWJpZW50XCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRGlmZnVzZSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbERpZmZ1c2VcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxTcGVjdWxhciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbFNwZWN1bGFyXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxFbWlzc2l2ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbHBoYU1vZGVDdXRvZmZcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxTaGluaW5lc3MgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxTaGluaW5lc3NcIik7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2FtYmllbnRNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxBbWJpZW50TWFwID0gXCJhbWJpZW50TWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsQW1iaWVudE1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbWJpZW50TWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VNYXAgPSBcImRpZmZ1c2VNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91RGlmZnVzZU1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJkaWZmdXNlTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9zcGVjdWxhck1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhck1hcCA9IFwic3BlY3VsYXJNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91U3BlY3VsYXJNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwic3BlY3VsYXJNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2VtaXNzaXZlTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlTWFwID0gXCJlbWlzc2l2ZU1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VFbWlzc2l2ZU1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJlbWlzc2l2ZU1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXAgPSBcImFscGhhTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9yZWZsZWN0aXZpdHlNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5TWFwID0gXCJyZWZsZWN0aXZpdHlNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5TWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInJlZmxlY3Rpdml0eU1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fbm9ybWFsTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU5vcm1hbE1hcCA9IFwibm9ybWFsTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU5vcm1hbE1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJub3JtYWxNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXAgPSBcIm9jY2x1c2lvbk1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwib2NjbHVzaW9uTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9kaWZmdXNlRnJlc25lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsRWRnZUJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsQ2VudGVyQmlhcyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJkaWZmdXNlRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsRWRnZUNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsRWRnZUNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VGcmVzbmVsQ2VudGVyQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdURpZmZ1c2VGcmVzbmVsUG93ZXIgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZGlmZnVzZUZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhckZyZXNuZWxDZW50ZXJCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhckZyZXNuZWxFZGdlQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcInNwZWN1bGFyRnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhckZyZXNuZWxQb3dlciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhckZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFGcmVzbmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbEVkZ2VCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYUZyZXNuZWxDZW50ZXJCaWFzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbENlbnRlckJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbHBoYUZyZXNuZWxFZGdlQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhRnJlc25lbENlbnRlckNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhRnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYUZyZXNuZWxQb3dlciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJhbHBoYUZyZXNuZWxQb3dlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcmVmbGVjdGl2aXR5RnJlc25lbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsRWRnZUJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VCaWFzXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQmlhcyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQmlhc1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91UmVmbGVjdGl2aXR5RnJlc25lbEVkZ2VDb2xvciA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsRWRnZUNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsQ2VudGVyQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbENlbnRlckNvbG9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VSZWZsZWN0aXZpdHlGcmVzbmVsUG93ZXIgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwicmVmbGVjdGl2aXR5RnJlc25lbFBvd2VyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZUZyZXNuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsRWRnZUJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsRWRnZUJpYXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlRnJlc25lbENlbnRlckJpYXMgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsQ2VudGVyQmlhc1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsRWRnZUNvbG9yID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlRnJlc25lbEVkZ2VDb2xvclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVGcmVzbmVsQ2VudGVyQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlRnJlc25lbFBvd2VyID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlRnJlc25lbFBvd2VyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcIk1ldGFsbGljTWF0ZXJpYWxcIjpcbiAgICAgICAgICAgIHRoaXMuX3VCYXNlQ29sb3IgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxCYXNlQ29sb3JcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxNZXRhbGxpYyA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbE1ldGFsbGljXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsUm91Z2huZXNzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsUm91Z2huZXNzXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsU3BlY3VsYXJGMCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbFNwZWN1bGFyRjBcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxFbWlzc2l2ZSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbEVtaXNzaXZlXCIpO1xuICAgICAgICAgICAgdGhpcy5fdUFscGhhTW9kZUN1dG9mZiA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtYXRlcmlhbEFscGhhTW9kZUN1dG9mZlwiKTtcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYmFzZUNvbG9yTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUJhc2VDb2xvck1hcCA9IFwiYmFzZUNvbG9yTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUJhc2VDb2xvck1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJiYXNlQ29sb3JNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1ldGFsbGljTWFwID0gXCJtZXRhbGxpY01hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VNZXRhbGxpY01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtZXRhbGxpY01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fcm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVJvdWdobmVzc01hcCA9IFwicm91Z2huZXNzTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVJvdWdobmVzc01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyb3VnaG5lc3NNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX21ldGFsbGljUm91Z2huZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdU1ldGFsbGljUm91Z2huZXNzTWFwID0gXCJtZXRhbGxpY1JvdWdobmVzc01hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VNZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJtZXRhbGxpY1JvdWdobmVzc01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZW1pc3NpdmVNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVNYXAgPSBcImVtaXNzaXZlTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUVtaXNzaXZlTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImVtaXNzaXZlTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9vY2NsdXNpb25NYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91T2NjbHVzaW9uTWFwID0gXCJvY2NsdXNpb25NYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91T2NjbHVzaW9uTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm9jY2x1c2lvbk1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fYWxwaGFNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXAgPSBcImFscGhhTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUFscGhhTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImFscGhhTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9ub3JtYWxNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91Tm9ybWFsTWFwID0gXCJub3JtYWxNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91Tm9ybWFsTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm5vcm1hbE1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJTcGVjdWxhck1hdGVyaWFsXCI6XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxEaWZmdXNlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsRGlmZnVzZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbFNwZWN1bGFyID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsU3BlY3VsYXJcIik7XG4gICAgICAgICAgICB0aGlzLl91TWF0ZXJpYWxHbG9zc2luZXNzID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsR2xvc3NpbmVzc1wiKTtcbiAgICAgICAgICAgIHRoaXMuX3VNYXRlcmlhbFJlZmxlY3Rpdml0eSA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJyZWZsZWN0aXZpdHlGcmVzbmVsXCIpO1xuICAgICAgICAgICAgdGhpcy5fdU1hdGVyaWFsRW1pc3NpdmUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxFbWlzc2l2ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1vZGVDdXRvZmYgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibWF0ZXJpYWxBbHBoYU1vZGVDdXRvZmZcIik7XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX2RpZmZ1c2VNYXApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91RGlmZnVzZU1hcCA9IFwiZGlmZnVzZU1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VEaWZmdXNlTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImRpZmZ1c2VNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX3NwZWN1bGFyTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyTWFwID0gXCJzcGVjdWxhck1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VTcGVjdWxhck1hcE1hdHJpeCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJzcGVjdWxhck1hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fZ2xvc3NpbmVzc01hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VHbG9zc2luZXNzTWFwID0gXCJnbG9zc2luZXNzTWFwXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fdUdsb3NzaW5lc3NNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZ2xvc3NpbmVzc01hcE1hdHJpeFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRlcmlhbC5fc3BlY3VsYXJHbG9zc2luZXNzTWFwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdVNwZWN1bGFyR2xvc3NpbmVzc01hcCA9IFwibWF0ZXJpYWxTcGVjdWxhckdsb3NzaW5lc3NNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91U3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4ID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcIm1hdGVyaWFsU3BlY3VsYXJHbG9zc2luZXNzTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9lbWlzc2l2ZU1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VFbWlzc2l2ZU1hcCA9IFwiZW1pc3NpdmVNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91RW1pc3NpdmVNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiZW1pc3NpdmVNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX29jY2x1c2lvbk1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXAgPSBcIm9jY2x1c2lvbk1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VPY2NsdXNpb25NYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwib2NjbHVzaW9uTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGVyaWFsLl9hbHBoYU1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VBbHBoYU1hcCA9IFwiYWxwaGFNYXBcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl91QWxwaGFNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiYWxwaGFNYXBNYXRyaXhcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0ZXJpYWwuX25vcm1hbE1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VOb3JtYWxNYXAgPSBcIm5vcm1hbE1hcFwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VOb3JtYWxNYXBNYXRyaXggPSBwcm9ncmFtLmdldExvY2F0aW9uKFwibm9ybWFsTWFwTWF0cml4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhpcy5fYVBvc2l0aW9uID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKTtcbiAgICB0aGlzLl9hTm9ybWFsID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJub3JtYWxcIik7XG4gICAgdGhpcy5fYVVWID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGUoXCJ1dlwiKTtcbiAgICB0aGlzLl9hQ29sb3IgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZShcImNvbG9yXCIpO1xuICAgIHRoaXMuX2FGbGFncyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlKFwiZmxhZ3NcIik7XG5cbiAgICB0aGlzLl91Q2xpcHBhYmxlID0gcHJvZ3JhbS5nZXRMb2NhdGlvbihcImNsaXBwYWJsZVwiKTtcbiAgICB0aGlzLl91Q29sb3JpemUgPSBwcm9ncmFtLmdldExvY2F0aW9uKFwiY29sb3JpemVcIik7XG4gICAgdGhpcy5fdU9mZnNldCA9IHByb2dyYW0uZ2V0TG9jYXRpb24oXCJvZmZzZXRcIik7XG5cbiAgICB0aGlzLl9sYXN0TWF0ZXJpYWxJZCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdFZlcnRleEJ1ZnNJZCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdEdlb21ldHJ5SWQgPSBudWxsO1xuXG4gICAgdGhpcy5fbGFzdENvbG9yaXplID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcblxuICAgIHRoaXMuX2Jhc2VUZXh0dXJlVW5pdCA9IDA7XG5cbn07XG5cbkRyYXdSZW5kZXJlci5wcm90b3R5cGUuX2JpbmRQcm9ncmFtID0gZnVuY3Rpb24gKGZyYW1lQ3R4KSB7XG5cbiAgICBjb25zdCBtYXhUZXh0dXJlVW5pdHMgPSBXRUJHTF9JTkZPLk1BWF9URVhUVVJFX1VOSVRTO1xuICAgIGNvbnN0IHNjZW5lID0gdGhpcy5fc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3QgbGlnaHRzU3RhdGUgPSBzY2VuZS5fbGlnaHRzU3RhdGU7XG4gICAgY29uc3QgcHJvamVjdCA9IHNjZW5lLmNhbWVyYS5wcm9qZWN0O1xuICAgIGxldCBsaWdodDtcblxuICAgIGNvbnN0IHByb2dyYW0gPSB0aGlzLl9wcm9ncmFtO1xuXG4gICAgcHJvZ3JhbS5iaW5kKCk7XG5cbiAgICBmcmFtZUN0eC51c2VQcm9ncmFtKys7XG4gICAgZnJhbWVDdHgudGV4dHVyZVVuaXQgPSAwO1xuXG4gICAgdGhpcy5fbGFzdE1hdGVyaWFsSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RWZXJ0ZXhCdWZzSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RHZW9tZXRyeUlkID0gbnVsbDtcblxuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVswXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVsxXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVsyXSA9IC0xO1xuICAgIHRoaXMuX2xhc3RDb2xvcml6ZVszXSA9IC0xO1xuXG4gICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91UHJvak1hdHJpeCwgZmFsc2UsIHByb2plY3QubWF0cml4KTtcblxuICAgIGlmIChzY2VuZS5sb2dhcml0aG1pY0RlcHRoQnVmZmVyRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBsb2dEZXB0aEJ1ZkZDID0gMi4wIC8gKE1hdGgubG9nKHByb2plY3QuZmFyICsgMS4wKSAvIE1hdGguTE4yKTtcbiAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VMb2dEZXB0aEJ1ZkZDLCBsb2dEZXB0aEJ1ZkZDKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlnaHRzU3RhdGUubGlnaHRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cbiAgICAgICAgbGlnaHQgPSBsaWdodHNTdGF0ZS5saWdodHNbaV07XG5cbiAgICAgICAgaWYgKHRoaXMuX3VMaWdodEFtYmllbnRbaV0pIHtcbiAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TGlnaHRBbWJpZW50W2ldLCBsaWdodC5jb2xvclswXSwgbGlnaHQuY29sb3JbMV0sIGxpZ2h0LmNvbG9yWzJdLCBsaWdodC5pbnRlbnNpdHkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHRDb2xvcltpXSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00Zih0aGlzLl91TGlnaHRDb2xvcltpXSwgbGlnaHQuY29sb3JbMF0sIGxpZ2h0LmNvbG9yWzFdLCBsaWdodC5jb2xvclsyXSwgbGlnaHQuaW50ZW5zaXR5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX3VMaWdodFBvc1tpXSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodGhpcy5fdUxpZ2h0UG9zW2ldLCBsaWdodC5wb3MpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHRBdHRlbnVhdGlvbltpXSkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUxpZ2h0QXR0ZW51YXRpb25baV0sIGxpZ2h0LmF0dGVudWF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl91TGlnaHREaXJbaV0pIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHRoaXMuX3VMaWdodERpcltpXSwgbGlnaHQuZGlyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxpZ2h0LmNhc3RzU2hhZG93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VTaGFkb3dWaWV3TWF0cml4W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5fdVNoYWRvd1ZpZXdNYXRyaXhbaV0sIGZhbHNlLCBsaWdodC5nZXRTaGFkb3dWaWV3TWF0cml4KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdVNoYWRvd1Byb2pNYXRyaXhbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl91U2hhZG93UHJvak1hdHJpeFtpXSwgZmFsc2UsIGxpZ2h0LmdldFNoYWRvd1Byb2pNYXRyaXgoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHNoYWRvd1JlbmRlckJ1ZiA9IGxpZ2h0LmdldFNoYWRvd1JlbmRlckJ1ZigpO1xuICAgICAgICAgICAgICAgIGlmIChzaGFkb3dSZW5kZXJCdWYpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZShcInNoYWRvd01hcFwiICsgaSwgc2hhZG93UmVuZGVyQnVmLmdldFRleHR1cmUoKSwgZnJhbWVDdHgudGV4dHVyZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC50ZXh0dXJlVW5pdCA9IChmcmFtZUN0eC50ZXh0dXJlVW5pdCArIDEpICUgbWF4VGV4dHVyZVVuaXRzO1xuICAgICAgICAgICAgICAgICAgICBmcmFtZUN0eC5iaW5kVGV4dHVyZSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsaWdodHNTdGF0ZS5saWdodE1hcHMubGVuZ3RoID4gMCAmJiBsaWdodHNTdGF0ZS5saWdodE1hcHNbMF0udGV4dHVyZSAmJiB0aGlzLl91TGlnaHRNYXApIHtcbiAgICAgICAgcHJvZ3JhbS5iaW5kVGV4dHVyZSh0aGlzLl91TGlnaHRNYXAsIGxpZ2h0c1N0YXRlLmxpZ2h0TWFwc1swXS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgfVxuXG4gICAgaWYgKGxpZ2h0c1N0YXRlLnJlZmxlY3Rpb25NYXBzLmxlbmd0aCA+IDAgJiYgbGlnaHRzU3RhdGUucmVmbGVjdGlvbk1hcHNbMF0udGV4dHVyZSAmJiB0aGlzLl91UmVmbGVjdGlvbk1hcCkge1xuICAgICAgICBwcm9ncmFtLmJpbmRUZXh0dXJlKHRoaXMuX3VSZWZsZWN0aW9uTWFwLCBsaWdodHNTdGF0ZS5yZWZsZWN0aW9uTWFwc1swXS50ZXh0dXJlLCBmcmFtZUN0eC50ZXh0dXJlVW5pdCk7XG4gICAgICAgIGZyYW1lQ3R4LnRleHR1cmVVbml0ID0gKGZyYW1lQ3R4LnRleHR1cmVVbml0ICsgMSkgJSBtYXhUZXh0dXJlVW5pdHM7XG4gICAgICAgIGZyYW1lQ3R4LmJpbmRUZXh0dXJlKys7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3VHYW1tYUZhY3Rvcikge1xuICAgICAgICBnbC51bmlmb3JtMWYodGhpcy5fdUdhbW1hRmFjdG9yLCBzY2VuZS5nYW1tYUZhY3Rvcik7XG4gICAgfVxuXG4gICAgdGhpcy5fYmFzZVRleHR1cmVVbml0ID0gZnJhbWVDdHgudGV4dHVyZVVuaXQ7XG59O1xuXG5leHBvcnQge0RyYXdSZW5kZXJlcn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js ***!
  \****************************************************************************************/
/*! exports provided: DrawShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawShaderSource\", function() { return DrawShaderSource; });\n/**\n * @private\n */\nconst DrawShaderSource = function (mesh) {\n    if (mesh._material._state.type === \"LambertMaterial\") {\n        this.vertex = buildVertexLambert(mesh);\n        this.fragment = buildFragmentLambert(mesh);\n    } else {\n        this.vertex = buildVertexDraw(mesh);\n        this.fragment = buildFragmentDraw(mesh);\n    }\n};\n\nconst TEXTURE_DECODE_FUNCS = {\n    \"linear\": \"linearToLinear\",\n    \"sRGB\": \"sRGBToLinear\",\n    \"gamma\": \"gammaToLinear\"\n};\n\nfunction getReceivesShadow(mesh) {\n    if (!mesh.receivesShadow) {\n        return false;\n    }\n    const lights = mesh.scene._lightsState.lights;\n    if (!lights || lights.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = lights.length; i < len; i++) {\n        if (lights[i].castsShadow) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction hasTextures(mesh) {\n    if (!mesh._geometry._state.uvBuf) {\n        return false;\n    }\n    const material = mesh._material;\n    return !!(material._ambientMap ||\n        material._occlusionMap ||\n        material._baseColorMap ||\n        material._diffuseMap ||\n        material._alphaMap ||\n        material._specularMap ||\n        material._glossinessMap ||\n        material._specularGlossinessMap ||\n        material._emissiveMap ||\n        material._metallicMap ||\n        material._roughnessMap ||\n        material._metallicRoughnessMap ||\n        material._reflectivityMap ||\n        material._normalMap);\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normalsBuf) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildVertexLambert(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const lightsState = mesh.scene._lightsState;\n    const geometryState = mesh._geometry._state;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!geometryState.compressGeometry;\n\n    const src = [];\n    src.push(\"// Lambertian drawing vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4 lightAmbient;\");\n    src.push(\"uniform vec4 materialColor;\");\n    src.push(\"uniform vec3 materialEmissive;\");\n    if (geometryState.normalsBuf) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (geometryState.normalsBuf) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (geometryState.normalsBuf) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (geometryState.normalsBuf) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (geometryState.normalsBuf) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = -normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = -normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"spot\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    //src.push(\"vColor = vec4((reflectedColor * materialColor) + (lightAmbient.rgb * lightAmbient.a), 1.0) * colorize;\");\n    src.push(\"vColor = vec4((lightAmbient.rgb * lightAmbient.a * materialColor.rgb) + materialEmissive.rgb + (reflectedColor * materialColor.rgb), materialColor.a) * colorize;\"); // TODO: How to have ambient bright enough for canvas BG but not too bright for scene?\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentLambert(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const solid =  false && false;\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n    const src = [];\n    src.push(\"// Lambertian drawing fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"    vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"    return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildVertexDraw(mesh) {\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const meshState = mesh._state;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const geometryState = mesh._geometry._state;\n    const lightsState = scene._lightsState;\n    let i;\n    let len;\n    let light;\n    const billboard = meshState.billboard;\n    const stationary = meshState.stationary;\n    const texturing = hasTextures(mesh);\n    const normals = hasNormals(mesh);\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const receivesShadow = getReceivesShadow(mesh);\n    const quantizedGeometry = !!geometryState.compressGeometry;\n    const src = [];\n    src.push(\"// Drawing vertex shader\");\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute  vec3 position;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"uniform  mat4 modelMatrix;\");\n    src.push(\"uniform  mat4 viewMatrix;\");\n    src.push(\"uniform  mat4 projMatrix;\");\n    src.push(\"varying  vec3 vViewPosition;\");\n    src.push(\"uniform  vec3 offset;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (lightsState.lightMaps.length > 0) {\n        src.push(\"varying    vec3 vWorldNormal;\");\n    }\n    if (normals) {\n        src.push(\"attribute  vec3 normal;\");\n        src.push(\"uniform    mat4 modelNormalMatrix;\");\n        src.push(\"uniform    mat4 viewNormalMatrix;\");\n        src.push(\"varying    vec3 vViewNormal;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (!(light.type === \"dir\" && light.space === \"view\")) {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    if (texturing) {\n        src.push(\"attribute vec2 uv;\");\n        src.push(\"varying vec2 vUV;\");\n        if (quantizedGeometry) {\n            src.push(\"uniform mat3 uvDecodeMatrix;\")\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"attribute vec4 color;\");\n        src.push(\"varying vec4 vColor;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    if (receivesShadow) {\n        src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"uniform mat4 shadowViewMatrix\" + i + \";\");\n                src.push(\"uniform mat4 shadowProjMatrix\" + i + \";\");\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n            }\n        }\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2    = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2     = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2           = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2          = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 worldNormal = (modelNormalMatrix2 * localNormal).xyz; \");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"vWorldNormal = worldNormal;\");\n        }\n        src.push(\"vViewNormal = normalize((viewNormalMatrix2 * vec4(worldNormal, 1.0)).xyz);\");\n        src.push(\"vec3 tmpVec3;\");\n        src.push(\"float lightDist;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Lights\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = vec3(viewMatrix2 * vec4(lightDir\" + i + \", 0.0) ).xyz;\");\n                    src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(-tmpVec3, 0.0);\");\n                }\n            }\n            if (light.type === \"point\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = (viewMatrix2 * vec4(lightPos\" + i + \", 1.0)).xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                } else {\n                    src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                }\n                src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(tmpVec3, lightDist);\");\n            }\n        }\n    }\n    if (texturing) {\n        if (quantizedGeometry) {\n            src.push(\"vUV = (uvDecodeMatrix * vec3(uv, 1.0)).xy;\");\n        } else {\n            src.push(\"vUV = uv;\");\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"vColor = color;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vViewPosition = viewPosition.xyz;\");\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n    }\n    src.push(\"gl_Position = clipPos;\");\n    if (receivesShadow) {\n        src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n        src.push(\"vec4 tempx; \");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"vShadowPosFromLight\" + i + \" = texUnitConverter * shadowProjMatrix\" + i + \" * (shadowViewMatrix\" + i + \" * worldPosition); \");\n            }\n        }\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentDraw(mesh) {\n\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const material = mesh._material;\n    const geometryState = mesh._geometry._state;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const lightsState = mesh.scene._lightsState;\n    const materialState = mesh._material._state;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const normals = hasNormals(mesh);\n    const uvs = geometryState.uvBuf;\n    const solid =  false && false;\n    const phongMaterial = (materialState.type === \"PhongMaterial\");\n    const metallicMaterial = (materialState.type === \"MetallicMaterial\");\n    const specularMaterial = (materialState.type === \"SpecularMaterial\");\n    const receivesShadow = getReceivesShadow(mesh);\n    const gammaInput = scene.gammaInput; // If set, then it expects that all textures and colors are premultiplied gamma. Default is false.\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n\n    let light;\n    const src = [];\n\n    src.push(\"// Drawing fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (receivesShadow) {\n        src.push(\"float unpackDepth (vec4 color) {\");\n        src.push(\"  const vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0 * 256.0), 1.0/(256.0*256.0*256.0));\");\n        src.push(\"  return dot(color, bitShift);\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // GAMMA CORRECTION\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform float gammaFactor;\");\n    src.push(\"vec4 linearToLinear( in vec4 value ) {\");\n    src.push(\"  return value;\");\n    src.push(\"}\");\n    src.push(\"vec4 sRGBToLinear( in vec4 value ) {\");\n    src.push(\"  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\");\n    src.push(\"}\");\n    src.push(\"vec4 gammaToLinear( in vec4 value) {\");\n    src.push(\"  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\");\n    src.push(\"}\");\n    if (gammaOutput) {\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // USER CLIP PLANES\n    //--------------------------------------------------------------------------------\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    if (normals) {\n\n        //--------------------------------------------------------------------------------\n        // LIGHT AND REFLECTION MAP INPUTS\n        // Define here so available globally to shader functions\n        //--------------------------------------------------------------------------------\n\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"uniform samplerCube lightMap;\");\n            src.push(\"uniform mat4 viewNormalMatrix;\");\n        }\n        if (lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform samplerCube reflectionMap;\");\n        }\n        if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform mat4 viewMatrix;\");\n        }\n\n        //--------------------------------------------------------------------------------\n        // SHADING FUNCTIONS\n        //--------------------------------------------------------------------------------\n\n        // CONSTANT DEFINITIONS\n\n        src.push(\"#define PI 3.14159265359\");\n        src.push(\"#define RECIPROCAL_PI 0.31830988618\");\n        src.push(\"#define RECIPROCAL_PI2 0.15915494\");\n        src.push(\"#define EPSILON 1e-6\");\n\n        src.push(\"#define saturate(a) clamp( a, 0.0, 1.0 )\");\n\n        // UTILITY DEFINITIONS\n\n        src.push(\"vec3 inverseTransformDirection(in vec3 dir, in mat4 matrix) {\");\n        src.push(\"   return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\");\n        src.push(\"}\");\n\n        // STRUCTURES\n\n        src.push(\"struct IncidentLight {\");\n        src.push(\"   vec3 color;\");\n        src.push(\"   vec3 direction;\");\n        src.push(\"};\");\n\n        src.push(\"struct ReflectedLight {\");\n        src.push(\"   vec3 diffuse;\");\n        src.push(\"   vec3 specular;\");\n        src.push(\"};\");\n\n        src.push(\"struct Geometry {\");\n        src.push(\"   vec3 position;\");\n        src.push(\"   vec3 viewNormal;\");\n        src.push(\"   vec3 worldNormal;\");\n        src.push(\"   vec3 viewEyeDir;\");\n        src.push(\"};\");\n\n        src.push(\"struct Material {\");\n        src.push(\"   vec3    diffuseColor;\");\n        src.push(\"   float   specularRoughness;\");\n        src.push(\"   vec3    specularColor;\");\n        src.push(\"   float   shine;\"); // Only used for Phong\n        src.push(\"};\");\n\n        // COMMON UTILS\n\n        if (phongMaterial) {\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePhongLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = \" + TEXTURE_DECODE_FUNCS[lightsState.lightMaps[0].encoding] + \"(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   vec3 radiance               = textureCube(reflectionMap, reflectVec).rgb * 0.2;\");\n                    src.push(\"   radiance *= PI;\");\n                    src.push(\"   reflectedLight.specular     += radiance;\");\n                }\n                src.push(\"}\");\n            }\n\n            src.push(\"void computePhongLighting(const in IncidentLight directLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, directLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * directLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += directLight.color * material.specularColor * pow(max(dot(reflect(-directLight.direction, -geometry.viewNormal), geometry.viewEyeDir), 0.0), material.shine);\");\n            src.push(\"}\");\n        }\n\n        if (metallicMaterial || specularMaterial) {\n\n            // IRRADIANCE EVALUATION\n\n            src.push(\"float GGXRoughnessToBlinnExponent(const in float ggxRoughness) {\");\n            src.push(\"   float r = ggxRoughness + 0.0001;\");\n            src.push(\"   return (2.0 / (r * r) - 2.0);\");\n            src.push(\"}\");\n\n            src.push(\"float getSpecularMIPLevel(const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n            src.push(\"   float maxMIPLevelScalar = float( maxMIPLevel );\");\n            src.push(\"   float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( ( blinnShininessExponent * blinnShininessExponent ) + 1.0 );\");\n            src.push(\"   return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\");\n            src.push(\"}\");\n\n            if (lightsState.reflectionMaps.length > 0) {\n                src.push(\"vec3 getLightProbeIndirectRadiance(const in vec3 reflectVec, const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n                src.push(\"   float mipLevel = 0.5 * getSpecularMIPLevel(blinnShininessExponent, maxMIPLevel);\"); //TODO: a random factor - fix this\n                src.push(\"   vec3 envMapColor = \" + TEXTURE_DECODE_FUNCS[lightsState.reflectionMaps[0].encoding] + \"(textureCube(reflectionMap, reflectVec, mipLevel)).rgb;\");\n                src.push(\"  return envMapColor;\");\n                src.push(\"}\");\n            }\n\n            // SPECULAR BRDF EVALUATION\n\n            src.push(\"vec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\");\n            src.push(\"   float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\");\n            src.push(\"   return ( 1.0 - specularColor ) * fresnel + specularColor;\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_Smith(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   return 1.0 / ( gl * gv );\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_SmithCorrelated(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   return 0.5 / max( gv + gl, EPSILON );\");\n            src.push(\"}\");\n\n            src.push(\"float D_GGX(const in float alpha, const in float dotNH) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float denom = ( dotNH * dotNH) * ( a2 - 1.0 ) + 1.0;\");\n            src.push(\"   return RECIPROCAL_PI * a2 / ( denom * denom);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX(const in IncidentLight incidentLight, const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float alpha = ( roughness * roughness );\");\n            src.push(\"   vec3 halfDir = normalize( incidentLight.direction + geometry.viewEyeDir );\");\n            src.push(\"   float dotNL = saturate( dot( geometry.viewNormal, incidentLight.direction ) );\");\n            src.push(\"   float dotNV = saturate( dot( geometry.viewNormal, geometry.viewEyeDir ) );\");\n            src.push(\"   float dotNH = saturate( dot( geometry.viewNormal, halfDir ) );\");\n            src.push(\"   float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\");\n            src.push(\"   vec3  F = F_Schlick( specularColor, dotLH );\");\n            src.push(\"   float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\");\n            src.push(\"   float D = D_GGX( alpha, dotNH );\");\n            src.push(\"   return F * (G * D);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX_Environment(const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float dotNV = saturate(dot(geometry.viewNormal, geometry.viewEyeDir));\");\n            src.push(\"   const vec4 c0 = vec4( -1, -0.0275, -0.572,  0.022);\");\n            src.push(\"   const vec4 c1 = vec4(  1,  0.0425,   1.04, -0.04);\");\n            src.push(\"   vec4 r = roughness * c0 + c1;\");\n            src.push(\"   float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\");\n            src.push(\"   vec2 AB    = vec2(-1.04, 1.04) * a004 + r.zw;\");\n            src.push(\"   return specularColor * AB.x + AB.y;\");\n            src.push(\"}\");\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePBRLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = sRGBToLinear(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                    //   src.push(\"   reflectedLight.diffuse = vec3(1.0, 0.0, 0.0);\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   reflectVec                  = inverseTransformDirection(reflectVec, viewMatrix);\");\n                    src.push(\"   float blinnExpFromRoughness = GGXRoughnessToBlinnExponent(material.specularRoughness);\");\n                    src.push(\"   vec3 radiance               = getLightProbeIndirectRadiance(reflectVec, blinnExpFromRoughness, 8);\");\n                    src.push(\"   vec3 specularBRDFContrib    = BRDF_Specular_GGX_Environment(geometry, material.specularColor, material.specularRoughness);\");\n                    src.push(\"   reflectedLight.specular     += radiance * specularBRDFContrib;\");\n                }\n                src.push(\"}\");\n            }\n\n            // MAIN LIGHTING COMPUTATION FUNCTION\n\n            src.push(\"void computePBRLighting(const in IncidentLight incidentLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, incidentLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * incidentLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += irradiance * BRDF_Specular_GGX(incidentLight, geometry, material.specularColor, material.specularRoughness);\");\n            src.push(\"}\");\n\n        } // (metallicMaterial || specularMaterial)\n\n    } // geometry.normals\n\n    //--------------------------------------------------------------------------------\n    // GEOMETRY INPUTS\n    //--------------------------------------------------------------------------------\n\n    src.push(\"varying vec3 vViewPosition;\");\n\n    if (geometryState.colors) {\n        src.push(\"varying vec4 vColor;\");\n    }\n\n    if (uvs &&\n        ((normals && material._normalMap)\n            || material._ambientMap\n            || material._baseColorMap\n            || material._diffuseMap\n            || material._emissiveMap\n            || material._metallicMap\n            || material._roughnessMap\n            || material._metallicRoughnessMap\n            || material._specularMap\n            || material._glossinessMap\n            || material._specularGlossinessMap\n            || material._occlusionMap\n            || material._alphaMap)) {\n        src.push(\"varying vec2 vUV;\");\n    }\n\n    if (normals) {\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"varying vec3 vWorldNormal;\");\n        }\n        src.push(\"varying vec3 vViewNormal;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL CHANNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (materialState.ambient) {\n        src.push(\"uniform vec3 materialAmbient;\");\n    }\n    if (materialState.baseColor) {\n        src.push(\"uniform vec3 materialBaseColor;\");\n    }\n    if (materialState.alpha !== undefined && materialState.alpha !== null) {\n        src.push(\"uniform vec4 materialAlphaModeCutoff;\"); // [alpha, alphaMode, alphaCutoff]\n    }\n    if (materialState.emissive) {\n        src.push(\"uniform vec3 materialEmissive;\");\n    }\n    if (materialState.diffuse) {\n        src.push(\"uniform vec3 materialDiffuse;\");\n    }\n    if (materialState.glossiness !== undefined && materialState.glossiness !== null) {\n        src.push(\"uniform float materialGlossiness;\");\n    }\n    if (materialState.shininess !== undefined && materialState.shininess !== null) {\n        src.push(\"uniform float materialShininess;\");  // Phong channel\n    }\n    if (materialState.specular) {\n        src.push(\"uniform vec3 materialSpecular;\");\n    }\n    if (materialState.metallic !== undefined && materialState.metallic !== null) {\n        src.push(\"uniform float materialMetallic;\");\n    }\n    if (materialState.roughness !== undefined && materialState.roughness !== null) {\n        src.push(\"uniform float materialRoughness;\");\n    }\n    if (materialState.specularF0 !== undefined && materialState.specularF0 !== null) {\n        src.push(\"uniform float materialSpecularF0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL TEXTURE INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (uvs && material._ambientMap) {\n        src.push(\"uniform sampler2D ambientMap;\");\n        if (material._ambientMap._state.matrix) {\n            src.push(\"uniform mat4 ambientMapMatrix;\");\n        }\n    }\n    if (uvs && material._baseColorMap) {\n        src.push(\"uniform sampler2D baseColorMap;\");\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"uniform mat4 baseColorMapMatrix;\");\n        }\n    }\n    if (uvs && material._diffuseMap) {\n        src.push(\"uniform sampler2D diffuseMap;\");\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"uniform mat4 diffuseMapMatrix;\");\n        }\n    }\n    if (uvs && material._emissiveMap) {\n        src.push(\"uniform sampler2D emissiveMap;\");\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"uniform mat4 emissiveMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicMap) {\n        src.push(\"uniform sampler2D metallicMap;\");\n        if (material._metallicMap._state.matrix) {\n            src.push(\"uniform mat4 metallicMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._roughnessMap) {\n        src.push(\"uniform sampler2D roughnessMap;\");\n        if (material._roughnessMap._state.matrix) {\n            src.push(\"uniform mat4 roughnessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicRoughnessMap) {\n        src.push(\"uniform sampler2D metallicRoughnessMap;\");\n        if (material._metallicRoughnessMap._state.matrix) {\n            src.push(\"uniform mat4 metallicRoughnessMapMatrix;\");\n        }\n    }\n    if (normals && material._normalMap) {\n        src.push(\"uniform sampler2D normalMap;\");\n        if (material._normalMap._state.matrix) {\n            src.push(\"uniform mat4 normalMapMatrix;\");\n        }\n        src.push(\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\");\n        src.push(\"      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\");\n        src.push(\"      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\");\n        src.push(\"      vec2 st0 = dFdx( uv.st );\");\n        src.push(\"      vec2 st1 = dFdy( uv.st );\");\n        src.push(\"      vec3 S = normalize( q0 * st1.t - q1 * st0.t );\");\n        src.push(\"      vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\");\n        src.push(\"      vec3 N = normalize( surf_norm );\");\n        src.push(\"      vec3 mapN = texture2D( normalMap, uv ).xyz * 2.0 - 1.0;\");\n        src.push(\"      mat3 tsn = mat3( S, T, N );\");\n        //     src.push(\"      mapN *= 3.0;\");\n        src.push(\"      return normalize( tsn * mapN );\");\n        src.push(\"}\");\n    }\n    if (uvs && material._occlusionMap) {\n        src.push(\"uniform sampler2D occlusionMap;\");\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"uniform mat4 occlusionMapMatrix;\");\n        }\n    }\n    if (uvs && material._alphaMap) {\n        src.push(\"uniform sampler2D alphaMap;\");\n        if (material._alphaMap._state.matrix) {\n            src.push(\"uniform mat4 alphaMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularMap) {\n        src.push(\"uniform sampler2D specularMap;\");\n        if (material._specularMap._state.matrix) {\n            src.push(\"uniform mat4 specularMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._glossinessMap) {\n        src.push(\"uniform sampler2D glossinessMap;\");\n        if (material._glossinessMap._state.matrix) {\n            src.push(\"uniform mat4 glossinessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularGlossinessMap) {\n        src.push(\"uniform sampler2D materialSpecularGlossinessMap;\");\n        if (material._specularGlossinessMap._state.matrix) {\n            src.push(\"uniform mat4 materialSpecularGlossinessMapMatrix;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL FRESNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (normals && (material._diffuseFresnel ||\n        material._specularFresnel ||\n        material._alphaFresnel ||\n        material._emissiveFresnel ||\n        material._reflectivityFresnel)) {\n        src.push(\"float fresnel(vec3 eyeDir, vec3 normal, float edgeBias, float centerBias, float power) {\");\n        src.push(\"    float fr = abs(dot(eyeDir, normal));\");\n        src.push(\"    float finalFr = clamp((fr - edgeBias) / (centerBias - edgeBias), 0.0, 1.0);\");\n        src.push(\"    return pow(finalFr, power);\");\n        src.push(\"}\");\n        if (material._diffuseFresnel) {\n            src.push(\"uniform float  diffuseFresnelCenterBias;\");\n            src.push(\"uniform float  diffuseFresnelEdgeBias;\");\n            src.push(\"uniform float  diffuseFresnelPower;\");\n            src.push(\"uniform vec3   diffuseFresnelCenterColor;\");\n            src.push(\"uniform vec3   diffuseFresnelEdgeColor;\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"uniform float  specularFresnelCenterBias;\");\n            src.push(\"uniform float  specularFresnelEdgeBias;\");\n            src.push(\"uniform float  specularFresnelPower;\");\n            src.push(\"uniform vec3   specularFresnelCenterColor;\");\n            src.push(\"uniform vec3   specularFresnelEdgeColor;\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"uniform float  alphaFresnelCenterBias;\");\n            src.push(\"uniform float  alphaFresnelEdgeBias;\");\n            src.push(\"uniform float  alphaFresnelPower;\");\n            src.push(\"uniform vec3   alphaFresnelCenterColor;\");\n            src.push(\"uniform vec3   alphaFresnelEdgeColor;\");\n        }\n        if (material._reflectivityFresnel) {\n            src.push(\"uniform float  materialSpecularF0FresnelCenterBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelEdgeBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelPower;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelCenterColor;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelEdgeColor;\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"uniform float  emissiveFresnelCenterBias;\");\n            src.push(\"uniform float  emissiveFresnelEdgeBias;\");\n            src.push(\"uniform float  emissiveFresnelPower;\");\n            src.push(\"uniform vec3   emissiveFresnelCenterColor;\");\n            src.push(\"uniform vec3   emissiveFresnelEdgeColor;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // LIGHT SOURCES\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform vec4   lightAmbient;\");\n\n    if (normals) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightAttenuation\" + i + \";\");\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            } else {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n    }\n\n    if (receivesShadow) {\n\n        // Variance castsShadow mapping filter\n\n        // src.push(\"float linstep(float low, float high, float v){\");\n        // src.push(\"      return clamp((v-low)/(high-low), 0.0, 1.0);\");\n        // src.push(\"}\");\n        //\n        // src.push(\"float VSM(sampler2D depths, vec2 uv, float compare){\");\n        // src.push(\"      vec2 moments = texture2D(depths, uv).xy;\");\n        // src.push(\"      float p = smoothstep(compare-0.02, compare, moments.x);\");\n        // src.push(\"      float variance = max(moments.y - moments.x*moments.x, -0.001);\");\n        // src.push(\"      float d = compare - moments.x;\");\n        // src.push(\"      float p_max = linstep(0.2, 1.0, variance / (variance + d*d));\");\n        // src.push(\"      return clamp(max(p, p_max), 0.0, 1.0);\");\n        // src.push(\"}\");\n\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castsShadow) {\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n                src.push(\"uniform sampler2D shadowMap\" + i + \";\");\n            }\n        }\n    }\n\n    src.push(\"uniform vec4 colorize;\");\n\n    //================================================================================\n    // MAIN\n    //================================================================================\n\n    src.push(\"void main(void) {\");\n\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n\n    src.push(\"float occlusion = 1.0;\");\n\n    if (materialState.ambient) {\n        src.push(\"vec3 ambientColor = materialAmbient;\");\n    } else {\n        src.push(\"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.diffuse) {\n        src.push(\"vec3 diffuseColor = materialDiffuse;\");\n    } else if (materialState.baseColor) {\n        src.push(\"vec3 diffuseColor = materialBaseColor;\");\n    } else {\n        src.push(\"vec3 diffuseColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"diffuseColor *= vColor.rgb;\");\n    }\n\n    if (materialState.emissive) {\n        src.push(\"vec3 emissiveColor = materialEmissive;\"); // Emissive default is (0,0,0), so initializing here\n    } else {\n        src.push(\"vec3  emissiveColor = vec3(0.0, 0.0, 0.0);\");\n    }\n\n    if (materialState.specular) {\n        src.push(\"vec3 specular = materialSpecular;\");\n    } else {\n        src.push(\"vec3 specular = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.alpha !== undefined) {\n        src.push(\"float alpha = materialAlphaModeCutoff[0];\");\n    } else {\n        src.push(\"float alpha = 1.0;\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"alpha *= vColor.a;\");\n    }\n\n    if (materialState.glossiness !== undefined) {\n        src.push(\"float glossiness = materialGlossiness;\");\n    } else {\n        src.push(\"float glossiness = 1.0;\");\n    }\n\n    if (materialState.metallic !== undefined) {\n        src.push(\"float metallic = materialMetallic;\");\n    } else {\n        src.push(\"float metallic = 1.0;\");\n    }\n\n    if (materialState.roughness !== undefined) {\n        src.push(\"float roughness = materialRoughness;\");\n    } else {\n        src.push(\"float roughness = 1.0;\");\n    }\n\n    if (materialState.specularF0 !== undefined) {\n        src.push(\"float specularF0 = materialSpecularF0;\");\n    } else {\n        src.push(\"float specularF0 = 1.0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // TEXTURING\n    //--------------------------------------------------------------------------------\n\n    if (uvs && ((normals && material._normalMap)\n        || material._ambientMap\n        || material._baseColorMap\n        || material._diffuseMap\n        || material._occlusionMap\n        || material._emissiveMap\n        || material._metallicMap\n        || material._roughnessMap\n        || material._metallicRoughnessMap\n        || material._specularMap\n        || material._glossinessMap\n        || material._specularGlossinessMap\n        || material._alphaMap)) {\n        src.push(\"vec4 texturePos = vec4(vUV.s, vUV.t, 1.0, 1.0);\");\n        src.push(\"vec2 textureCoord;\");\n    }\n\n    if (uvs && material._ambientMap) {\n        if (material._ambientMap._state.matrix) {\n            src.push(\"textureCoord = (ambientMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 ambientTexel = texture2D(ambientMap, textureCoord).rgb;\");\n        src.push(\"ambientTexel = \" + TEXTURE_DECODE_FUNCS[material._ambientMap._state.encoding] + \"(ambientTexel);\");\n        src.push(\"ambientColor *= ambientTexel.rgb;\");\n    }\n\n    if (uvs && material._diffuseMap) {\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"textureCoord = (diffuseMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 diffuseTexel = texture2D(diffuseMap, textureCoord);\");\n        src.push(\"diffuseTexel = \" + TEXTURE_DECODE_FUNCS[material._diffuseMap._state.encoding] + \"(diffuseTexel);\");\n        src.push(\"diffuseColor *= diffuseTexel.rgb;\");\n        src.push(\"alpha *= diffuseTexel.a;\");\n    }\n\n    if (uvs && material._baseColorMap) {\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"textureCoord = (baseColorMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 baseColorTexel = texture2D(baseColorMap, textureCoord);\");\n        src.push(\"baseColorTexel = \" + TEXTURE_DECODE_FUNCS[material._baseColorMap._state.encoding] + \"(baseColorTexel);\");\n        src.push(\"diffuseColor *= baseColorTexel.rgb;\");\n        src.push(\"alpha *= baseColorTexel.a;\");\n    }\n\n    if (uvs && material._emissiveMap) {\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"textureCoord = (emissiveMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 emissiveTexel = texture2D(emissiveMap, textureCoord);\");\n        src.push(\"emissiveTexel = \" + TEXTURE_DECODE_FUNCS[material._emissiveMap._state.encoding] + \"(emissiveTexel);\");\n        src.push(\"emissiveColor = emissiveTexel.rgb;\");\n    }\n\n    if (uvs && material._alphaMap) {\n        if (material._alphaMap._state.matrix) {\n            src.push(\"textureCoord = (alphaMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"alpha *= texture2D(alphaMap, textureCoord).r;\");\n    }\n\n    if (uvs && material._occlusionMap) {\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"textureCoord = (occlusionMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"occlusion *= texture2D(occlusionMap, textureCoord).r;\");\n    }\n\n    if (normals && ((lightsState.lights.length > 0) || lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n\n        //--------------------------------------------------------------------------------\n        // SHADING\n        //--------------------------------------------------------------------------------\n\n        if (uvs && material._normalMap) {\n            if (material._normalMap._state.matrix) {\n                src.push(\"textureCoord = (normalMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 viewNormal = perturbNormal2Arb( vViewPosition, normalize(vViewNormal), textureCoord );\");\n        } else {\n            src.push(\"vec3 viewNormal = normalize(vViewNormal);\");\n        }\n\n        if (uvs && material._specularMap) {\n            if (material._specularMap._state.matrix) {\n                src.push(\"textureCoord = (specularMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"specular *= texture2D(specularMap, textureCoord).rgb;\");\n        }\n\n        if (uvs && material._glossinessMap) {\n            if (material._glossinessMap._state.matrix) {\n                src.push(\"textureCoord = (glossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"glossiness *= texture2D(glossinessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._specularGlossinessMap) {\n            if (material._specularGlossinessMap._state.matrix) {\n                src.push(\"textureCoord = (materialSpecularGlossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec4 specGlossRGB = texture2D(materialSpecularGlossinessMap, textureCoord).rgba;\"); // TODO: what if only RGB texture?\n            src.push(\"specular *= specGlossRGB.rgb;\");\n            src.push(\"glossiness *= specGlossRGB.a;\");\n        }\n\n        if (uvs && material._metallicMap) {\n            if (material._metallicMap._state.matrix) {\n                src.push(\"textureCoord = (metallicMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"metallic *= texture2D(metallicMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._roughnessMap) {\n            if (material._roughnessMap._state.matrix) {\n                src.push(\"textureCoord = (roughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"roughness *= texture2D(roughnessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._metallicRoughnessMap) {\n            if (material._metallicRoughnessMap._state.matrix) {\n                src.push(\"textureCoord = (metallicRoughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 metalRoughRGB = texture2D(metallicRoughnessMap, textureCoord).rgb;\");\n            src.push(\"metallic *= metalRoughRGB.b;\");\n            src.push(\"roughness *= metalRoughRGB.g;\");\n        }\n\n        src.push(\"vec3 viewEyeDir = normalize(-vViewPosition);\");\n\n        if (material._diffuseFresnel) {\n            src.push(\"float diffuseFresnel = fresnel(viewEyeDir, viewNormal, diffuseFresnelEdgeBias, diffuseFresnelCenterBias, diffuseFresnelPower);\");\n            src.push(\"diffuseColor *= mix(diffuseFresnelEdgeColor, diffuseFresnelCenterColor, diffuseFresnel);\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"float specularFresnel = fresnel(viewEyeDir, viewNormal, specularFresnelEdgeBias, specularFresnelCenterBias, specularFresnelPower);\");\n            src.push(\"specular *= mix(specularFresnelEdgeColor, specularFresnelCenterColor, specularFresnel);\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"float alphaFresnel = fresnel(viewEyeDir, viewNormal, alphaFresnelEdgeBias, alphaFresnelCenterBias, alphaFresnelPower);\");\n            src.push(\"alpha *= mix(alphaFresnelEdgeColor.r, alphaFresnelCenterColor.r, alphaFresnel);\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"float emissiveFresnel = fresnel(viewEyeDir, viewNormal, emissiveFresnelEdgeBias, emissiveFresnelCenterBias, emissiveFresnelPower);\");\n            src.push(\"emissiveColor *= mix(emissiveFresnelEdgeColor, emissiveFresnelCenterColor, emissiveFresnel);\");\n        }\n\n        src.push(\"if (materialAlphaModeCutoff[1] == 1.0 && alpha < materialAlphaModeCutoff[2]) {\"); // ie. (alphaMode == \"mask\" && alpha < alphaCutoff)\n        src.push(\"   discard;\"); // TODO: Discard earlier within this shader?\n        src.push(\"}\");\n\n        // PREPARE INPUTS FOR SHADER FUNCTIONS\n\n        src.push(\"IncidentLight  light;\");\n        src.push(\"Material       material;\");\n        src.push(\"Geometry       geometry;\");\n        src.push(\"ReflectedLight reflectedLight = ReflectedLight(vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0));\");\n        src.push(\"vec3           viewLightDir;\");\n\n        if (phongMaterial) {\n            src.push(\"material.diffuseColor      = diffuseColor;\");\n            src.push(\"material.specularColor     = specular;\");\n            src.push(\"material.shine             = materialShininess;\");\n        }\n\n        if (specularMaterial) {\n            src.push(\"float oneMinusSpecularStrength = 1.0 - max(max(specular.r, specular.g ),specular.b);\"); // Energy conservation\n            src.push(\"material.diffuseColor      = diffuseColor * oneMinusSpecularStrength;\");\n            src.push(\"material.specularRoughness = clamp( 1.0 - glossiness, 0.04, 1.0 );\");\n            src.push(\"material.specularColor     = specular;\");\n        }\n\n        if (metallicMaterial) {\n            src.push(\"float dielectricSpecular = 0.16 * specularF0 * specularF0;\");\n            src.push(\"material.diffuseColor      = diffuseColor * (1.0 - dielectricSpecular) * (1.0 - metallic);\");\n            src.push(\"material.specularRoughness = clamp(roughness, 0.04, 1.0);\");\n            src.push(\"material.specularColor     = mix(vec3(dielectricSpecular), diffuseColor, metallic);\");\n        }\n\n        src.push(\"geometry.position      = vViewPosition;\");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"geometry.worldNormal   = normalize(vWorldNormal);\");\n        }\n        src.push(\"geometry.viewNormal    = viewNormal;\");\n        src.push(\"geometry.viewEyeDir    = viewEyeDir;\");\n\n        // ENVIRONMENT AND REFLECTION MAP SHADING\n\n        if ((phongMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePhongLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        if ((specularMaterial || metallicMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePBRLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        // LIGHT SOURCE SHADING\n\n        src.push(\"float shadow = 1.0;\");\n\n        // if (receivesShadow) {\n        //\n        //     src.push(\"float lightDepth2 = clamp(length(lightPos)/40.0, 0.0, 1.0);\");\n        //     src.push(\"float illuminated = VSM(sLightDepth, lightUV, lightDepth2);\");\n        //\n        src.push(\"float shadowAcneRemover = 0.007;\");\n        src.push(\"vec3 fragmentDepth;\");\n        src.push(\"float texelSize = 1.0 / 1024.0;\");\n        src.push(\"float amountInLight = 0.0;\");\n        src.push(\"vec3 shadowCoord;\");\n        src.push('vec4 rgbaDepth;');\n        src.push(\"float depth;\");\n        // }\n\n        const numShadows = 0;\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n\n            const light = lightsState.lights[i];\n\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"viewLightDir = -normalize(lightDir\" + i + \");\");\n            } else if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - vViewPosition);\");\n                //src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                //src.push(\"lightDist = abs(length(tmpVec3));\");\n            } else {\n                src.push(\"viewLightDir = normalize(vViewLightReverseDirAndDist\" + i + \".xyz);\"); // If normal mapping, the fragment->light vector will be in tangent space\n            }\n\n            if (receivesShadow && light.castsShadow) {\n\n                // if (true) {\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //     src.push(\"lightDepth2 = clamp(length(vec3[0.0, 20.0, 20.0])/40.0, 0.0, 1.0);\");\n                //     src.push(\"castsShadow *= VSM(shadowMap' + i + ', shadowCoord, lightDepth2);\");\n                // }\n                //\n                // if (false) {\n                //\n                // PCF\n\n                src.push(\"shadow = 0.0;\");\n\n                src.push(\"fragmentDepth = vShadowPosFromLight\" + i + \".xyz;\");\n                src.push(\"fragmentDepth.z -= shadowAcneRemover;\");\n                src.push(\"for (int x = -3; x <= 3; x++) {\");\n                src.push(\"  for (int y = -3; y <= 3; y++) {\");\n                src.push(\"      float texelDepth = unpackDepth(texture2D(shadowMap\" + i + \", fragmentDepth.xy + vec2(x, y) * texelSize));\");\n                src.push(\"      if (fragmentDepth.z < texelDepth) {\");\n                src.push(\"          shadow += 1.0;\");\n                src.push(\"      }\");\n                src.push(\"  }\");\n                src.push(\"}\");\n\n                src.push(\"shadow = shadow / 9.0;\");\n\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\"); // a is intensity\n                //\n                // }\n                //\n                // if (false){\n                //\n                //     src.push(\"shadow = 1.0;\");\n                //\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.94201624, -0.39906216 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.94558609, -0.76890725 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.094184101, -0.92938870 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.34495938, 0.29387760 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //\n                //     src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\");\n                // }\n            } else {\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a );\"); // a is intensity\n            }\n\n            src.push(\"light.direction = viewLightDir;\");\n\n            if (phongMaterial) {\n                src.push(\"computePhongLighting(light, geometry, material, reflectedLight);\");\n            }\n\n            if (specularMaterial || metallicMaterial) {\n                src.push(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n            }\n        }\n\n        if (numShadows > 0) {\n            //src.push(\"shadow /= \" + (9 * numShadows) + \".0;\");\n        }\n\n        //src.push(\"reflectedLight.diffuse *= shadow;\");\n\n        // COMBINE TERMS\n\n        if (phongMaterial) {\n            src.push(\"vec3 outgoingLight = (lightAmbient.rgb * lightAmbient.a * diffuseColor) + ((occlusion * (( reflectedLight.diffuse + reflectedLight.specular)))) + emissiveColor;\");\n\n        } else {\n            src.push(\"vec3 outgoingLight = (occlusion * (reflectedLight.diffuse)) + (occlusion * reflectedLight.specular) + emissiveColor;\");\n        }\n\n    } else {\n\n        //--------------------------------------------------------------------------------\n        // NO SHADING - EMISSIVE and AMBIENT ONLY\n        //--------------------------------------------------------------------------------\n\n        src.push(\"ambientColor *= (lightAmbient.rgb * lightAmbient.a);\");\n\n        src.push(\"vec3 outgoingLight = emissiveColor + ambientColor;\");\n    }\n\n    src.push(\"gl_FragColor = vec4(outgoingLight, alpha) * colorize;\");\n\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(gl_FragColor, gammaFactor);\");\n    }\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n\n    src.push(\"}\");\n\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/draw/DrawShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js ***!
  \*************************************************************************************************/
/*! exports provided: EmphasisEdgesRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisEdgesRenderer\", function() { return EmphasisEdgesRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _EmphasisEdgesShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EmphasisEdgesShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst EmphasisEdgesRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _EmphasisEdgesShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"EmphasisEdgesShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nEmphasisEdgesRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisEdgesRenderer(hash, mesh);\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisEdgesRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nEmphasisEdgesRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisEdgesRenderer.prototype.drawMesh = function (frameCtx, mesh, mode) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const camera = scene.camera;\n    const gl = scene.canvas.gl;\n    let materialState;\n    const meshState = mesh._state;\n    const geometry = mesh._geometry;\n    const geometryState = geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    switch (mode) {\n        case 0:\n            materialState = mesh._xrayMaterial._state;\n            break;\n        case 1:\n            materialState = mesh._highlightMaterial._state;\n            break;\n        case 2:\n            materialState = mesh._selectedMaterial._state;\n            break;\n        case 3:\n        default:\n            materialState = mesh._edgeMaterial._state;\n            break;\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        if (frameCtx.lineWidth !== materialState.edgeWidth) {\n            gl.lineWidth(materialState.edgeWidth);\n            frameCtx.lineWidth = materialState.edgeWidth;\n        }\n        if (this._uEdgeColor) {\n            const edgeColor = materialState.edgeColor;\n            const edgeAlpha = materialState.edgeAlpha;\n            gl.uniform4f(this._uEdgeColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n    let indicesBuf;\n    if (geometryState.primitive === gl.TRIANGLES) {\n        indicesBuf = geometry._getEdgeIndices();\n    } else if (geometryState.primitive === gl.LINES) {\n        indicesBuf = geometryState.indicesBuf;\n    }\n\n    if (indicesBuf) {\n        if (geometryState.id !== this._lastGeometryId) {\n            if (this._uPositionsDecodeMatrix) {\n                gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n            }\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frameCtx.bindArray++;\n            }\n            indicesBuf.bind();\n            frameCtx.bindArray++;\n            this._lastGeometryId = geometryState.id;\n        }\n\n        gl.drawElements(gl.LINES, indicesBuf.numItems, indicesBuf.itemType, 0);\n\n        frameCtx.drawElements++;\n    }\n};\n\nEmphasisEdgesRenderer.prototype._allocate = function (mesh) {\n\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n\n    const program = this._program;\n\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._uEdgeColor = program.getLocation(\"edgeColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uOffset = program.getLocation(\"offset\");\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisEdgesRenderer.prototype._bindProgram = function (frameCtx) {\n\n    const program = this._program;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const camera = scene.camera;\n    const project = camera.project;\n\n    program.bind();\n\n    frameCtx.useProgram++;\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js ***!
  \*****************************************************************************************************/
/*! exports provided: EmphasisEdgesShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisEdgesShaderSource\", function() { return EmphasisEdgesShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n/**\n * @private\n */\nclass EmphasisEdgesShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Edges drawing vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 edgeColor;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    src.push(\"vColor = edgeColor;\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Edges drawing fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisEdgesShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js ***!
  \************************************************************************************************/
/*! exports provided: EmphasisFillRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisFillRenderer\", function() { return EmphasisFillRenderer; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _EmphasisFillShaderSource_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EmphasisFillShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst EmphasisFillRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _EmphasisFillShaderSource_js__WEBPACK_IMPORTED_MODULE_1__[\"EmphasisFillShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst xrayFillRenderers = {};\n\nEmphasisFillRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._sectionPlanesState.getHash(),\n        !!mesh._geometry._state.normalsBuf ? \"n\" : \"\",\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = xrayFillRenderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisFillRenderer(hash, mesh);\n        xrayFillRenderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisFillRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete xrayFillRenderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_3__[\"stats\"].memory.programs--;\n    }\n};\n\nEmphasisFillRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisFillRenderer.prototype.drawMesh = function (frameCtx, mesh, mode) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const camera = scene.camera;\n    const gl = scene.canvas.gl;\n    const materialState = mode === 0 ? mesh._xrayMaterial._state : (mode === 1 ? mesh._highlightMaterial._state : mesh._selectedMaterial._state);\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.viewNormalMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_5__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const fillColor = materialState.fillColor;\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        gl.uniform4f(this._uFillColor, fillColor[0], fillColor[1], fillColor[2], materialState.fillAlpha);\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, meshState.offset);\n\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n            frameCtx.bindArray++;\n        }\n        if (this._aNormal) {\n            this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n            // gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            // frameCtx.drawElements++;\n        } else if (geometryState.positionsBuf) {\n            // gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            //  frameCtx.drawArrays++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positionsBuf) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positionsBuf.numItems);\n        frameCtx.drawArrays++;\n    }\n};\n\nEmphasisFillRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const lightsState = scene._lightsState;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_2__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n        const light = lightsState.lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n    this._uSectionPlanes = [];\n    for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._uFillColor = program.getLocation(\"fillColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisFillRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const camera = scene.camera;\n    const project = camera.project;\n    const program = this._program;\n    program.bind();\n    frameCtx.useProgram++;\n    frameCtx.textureUnit = 0;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    this._lastIndicesBufId = null;\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, camera.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n        const light = lightsState.lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js ***!
  \****************************************************************************************************/
/*! exports provided: EmphasisFillShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EmphasisFillShaderSource\", function() { return EmphasisFillShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n\n\n/**\n * @private\n */\nclass EmphasisFillShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n\n    const scene = mesh.scene;\n    const lightsState = scene._lightsState;\n    const normals = hasNormals(mesh);\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n\n    src.push(\"// EmphasisFillShaderSource vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4   lightAmbient;\");\n    src.push(\"uniform vec4   fillColor;\");\n    if (normals) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (normals) {\n        for (let i = 0, len = lightsState.lights.length; i < len; i++) {\n            const light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    // TODO: A blending mode for emphasis materials, to select add/multiply/mix\n    //src.push(\"vColor = vec4((mix(reflectedColor, fillColor.rgb, 0.7)), fillColor.a);\");\n    src.push(\"vColor = vec4(reflectedColor * fillColor.rgb, fillColor.a);\");\n    //src.push(\"vColor = vec4(reflectedColor + fillColor.rgb, fillColor.a);\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normalsBuf) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = mesh.scene._sectionPlanesState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Lambertian drawing fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0, len = sectionPlanesState.sectionPlanes.length; i < len; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/emphasis/EmphasisFillShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js ***!
  \**********************************************************************************************/
/*! exports provided: OcclusionRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionRenderer\", function() { return OcclusionRenderer; });\n/* harmony import */ var _OcclusionShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OcclusionShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3();\n\n// No ID, because there is exactly one PickMeshRenderer per scene\n\n/**\n * @private\n */\nconst OcclusionRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _OcclusionShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"OcclusionShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nOcclusionRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new OcclusionRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nOcclusionRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nOcclusionRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nOcclusionRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    const camera = scene.camera;\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCViewMatrix(meshState.rtcCenterHash, rtcCenter) : camera.viewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n    }\n};\n\nOcclusionRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nOcclusionRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const project = scene.camera.project;\n    const gl = scene.canvas.gl;\n    this._program.bind();\n    frameCtx.useProgram++;\n    gl.uniformMatrix4fv(this._uProjMatrix, false, project.matrix);\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js ***!
  \**************************************************************************************************/
/*! exports provided: OcclusionShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"OcclusionShaderSource\", function() { return OcclusionShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n/**\n * @private\n */\nclass OcclusionShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Mesh occlusion vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix2 * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n\n    src.push(\"// Mesh occlusion fragment shader\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"void main(void) {\");\n\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n\n    src.push(\"   gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0); \");\n\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n\n    src.push(\"}\");\n\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/occlusion/OcclusionShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js ***!
  \****************************************************************************************/
/*! exports provided: PickMeshRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickMeshRenderer\", function() { return PickMeshRenderer; });\n/* harmony import */ var _PickMeshShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PickMeshShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_3__[\"math\"].vec3();\n\n// No ID, because there is exactly one PickMeshRenderer per scene\n\n/**\n * @private\n */\nconst PickMeshRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _PickMeshShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"PickMeshShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickMeshRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickMeshRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickMeshRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nPickMeshRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickMeshRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCPickViewMatrix(meshState.rtcCenterHash, rtcCenter) : frameCtx.pickViewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_4__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frameCtx.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frameCtx.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frameCtx.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frameCtx.frontface = frontface;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frameCtx.pickProjMatrix);\n    gl.uniformMatrix4fv(this._uModelMatrix, false, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._aPosition) {\n            this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n            frameCtx.bindArray++;\n        }\n        if (geometryState.indicesBuf) {\n            geometryState.indicesBuf.bind();\n            frameCtx.bindArray++;\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    // Mesh-indexed color\n    var pickID = mesh._state.pickID;\n    const a = pickID >> 24 & 0xFF;\n    const b = pickID >> 16 & 0xFF;\n    const g = pickID >> 8 & 0xFF;\n    const r = pickID & 0xFF;\n    gl.uniform4f(this._uPickColor, r / 255, g / 255, b / 255, a / 255);\n\n    if (geometryState.indicesBuf) {\n        gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n        frameCtx.drawElements++;\n    } else if (geometryState.positions) {\n        gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n    }\n};\n\nPickMeshRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uPickColor = program.getLocation(\"pickColor\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n    this._lastMaterialId = null;\n    this._lastGeometryId = null;\n};\n\nPickMeshRenderer.prototype._bindProgram = function (frameCtx) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const project = scene.camera.project;\n    this._program.bind();\n    frameCtx.useProgram++;\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n    this._lastMaterialId = null;\n    this._lastGeometryId = null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js ***!
  \********************************************************************************************/
/*! exports provided: PickMeshShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickMeshShaderSource\", function() { return PickMeshShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n/**\n * @private\n */\nclass PickMeshShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Mesh picking vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"varying vec4 vViewPosition;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix2 * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Mesh picking fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    src.push(\"uniform vec4 pickColor;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    src.push(\"   gl_FragColor = pickColor; \");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickMeshShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js ***!
  \********************************************************************************************/
/*! exports provided: PickTriangleRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickTriangleRenderer\", function() { return PickTriangleRenderer; });\n/* harmony import */ var _PickTriangleShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PickTriangleShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n/* harmony import */ var _math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../math/rtcCoords.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/rtcCoords.js\");\n/* harmony import */ var _math_math_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../math/math.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/math/math.js\");\n/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n\n\n\n\n\n\nconst tempVec3a = _math_math_js__WEBPACK_IMPORTED_MODULE_4__[\"math\"].vec3();\n\n/**\n * @private\n */\nconst PickTriangleRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new _PickTriangleShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"PickTriangleShaderSource\"](mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickTriangleRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._sectionPlanesState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickTriangleRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickTriangleRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nPickTriangleRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickTriangleRenderer.prototype.drawMesh = function (frameCtx, mesh) {\n\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometry = mesh._geometry;\n    const geometryState = mesh._geometry._state;\n    const rtcCenter = mesh.rtcCenter;\n    const backfaces = materialState.backfaces;\n    const frontface = materialState.frontface;\n    const project = scene.camera.project;\n    const positionsBuf = geometry._getPickTrianglePositions();\n    const pickColorsBuf = geometry._getPickTriangleColors();\n\n    this._program.bind();\n\n    frameCtx.useProgram++;\n\n    if (scene.logarithmicDepthBufferEnabled ) {\n        const logDepthBufFC = 2.0 / (Math.log(project.far + 1.0) / Math.LN2);\n        gl.uniform1f(this._uLogDepthBufFC, logDepthBufFC);\n    }\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, rtcCenter ? frameCtx.getRTCPickViewMatrix(meshState.rtcCenterHash, rtcCenter) : frameCtx.pickViewMatrix);\n\n    if (meshState.clippable) {\n        const numSectionPlanes = scene._sectionPlanesState.sectionPlanes.length;\n        if (numSectionPlanes > 0) {\n            const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n            const renderFlags = mesh.renderFlags;\n            for (let sectionPlaneIndex = 0; sectionPlaneIndex < numSectionPlanes; sectionPlaneIndex++) {\n                const sectionPlaneUniforms = this._uSectionPlanes[sectionPlaneIndex];\n                const active = renderFlags.sectionPlanesActivePerLayer[sectionPlaneIndex];\n                gl.uniform1i(sectionPlaneUniforms.active, active ? 1 : 0);\n                if (active) {\n                    const sectionPlane = sectionPlanes[sectionPlaneIndex];\n                    gl.uniform3fv(sectionPlaneUniforms.pos, rtcCenter ? Object(_math_rtcCoords_js__WEBPACK_IMPORTED_MODULE_3__[\"getPlaneRTCPos\"])(sectionPlane.dist, sectionPlane.dir, rtcCenter, tempVec3a) : sectionPlane.pos);\n                    gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n                }\n            }\n        }\n    }\n\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frameCtx.pickProjMatrix);\n\n    if (scene.logarithmicDepthBufferEnabled) {\n        gl.uniform1f(this._uZFar, scene.camera.project.far);\n    }\n\n    if (frameCtx.backfaces !== backfaces) {\n        if (backfaces) {\n            gl.disable(gl.CULL_FACE);\n        } else {\n            gl.enable(gl.CULL_FACE);\n        }\n        frameCtx.backfaces = backfaces;\n    }\n    if (frameCtx.frontface !== frontface) {\n        if (frontface) {\n            gl.frontFace(gl.CCW);\n        } else {\n            gl.frontFace(gl.CW);\n        }\n        frameCtx.frontface = frontface;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, false, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n    if (this._uPositionsDecodeMatrix) {\n        gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        this._aPosition.bindArrayBuffer(positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n    } else {\n        this._aPosition.bindArrayBuffer(positionsBuf);\n    }\n    pickColorsBuf.bind();\n    gl.enableVertexAttribArray(this._aColor.location);\n    gl.vertexAttribPointer(this._aColor.location, pickColorsBuf.itemSize, pickColorsBuf.itemType, true, 0, 0); // Normalize\n    gl.drawArrays(geometryState.primitive, 0, positionsBuf.numItems / 3);\n};\n\nPickTriangleRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uSectionPlanes = [];\n    const sectionPlanes = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = sectionPlanes.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aColor = program.getAttribute(\"color\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    if (scene.logarithmicDepthBufferEnabled ) {\n        this._uLogDepthBufFC = program.getLocation(\"logDepthBufFC\");\n    }\n};\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js ***!
  \************************************************************************************************/
/*! exports provided: PickTriangleShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PickTriangleShaderSource\", function() { return PickTriangleShaderSource; });\n/* harmony import */ var _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../webglInfo.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\");\n/**\n * @private\n */\n\n\nclass PickTriangleShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Surface picking vertex shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (scene.logarithmicDepthBufferEnabled) {\n        src.push(\"uniform float logDepthBufFC;\");\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"varying float vFragDepth;\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix * localPosition; \");\n    src.push(\"   worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"   vec4 viewPosition = viewMatrix * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vColor = color;\");\n    src.push(\"vec4 clipPos = projMatrix * viewPosition;\");\n    if (scene.logarithmicDepthBufferEnabled) {\n        if (_webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n            src.push(\"vFragDepth = 1.0 + clipPos.w;\");\n        } else {\n            src.push(\"clipPos.z = log2( max( 1e-6, clipPos.w + 1.0 ) ) * logDepthBufFC - 1.0;\");\n            src.push(\"clipPos.z *= clipPos.w;\");\n        }\n    }\n    src.push(\"gl_Position = clipPos;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Surface picking fragment shader\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"#extension GL_EXT_frag_depth : enable\");\n    }\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n    src.push(\"varying vec4 vColor;\");\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"uniform float logDepthBufFC;\");\n        src.push(\"varying float vFragDepth;\");\n    }\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (let i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (let i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (scene.logarithmicDepthBufferEnabled && _webglInfo_js__WEBPACK_IMPORTED_MODULE_0__[\"WEBGL_INFO\"].SUPPORTED_EXTENSIONS[\"EXT_frag_depth\"]) {\n        src.push(\"gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\");\n    }\n    src.push(\"   gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/pick/PickTriangleShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js ***!
  \****************************************************************************************/
/*! exports provided: ShadowRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShadowRenderer\", function() { return ShadowRenderer; });\n/* harmony import */ var _ShadowShaderSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ShadowShaderSource.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js\");\n/* harmony import */ var _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../webgl/Program.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../stats.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\");\n\n\n\n\n/**\n * @private\n */\nconst ShadowRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new _ShadowShaderSource_js__WEBPACK_IMPORTED_MODULE_0__[\"ShadowShaderSource\"](mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nShadowRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [scene.canvas.canvas.id, scene._sectionPlanesState.getHash(), mesh._geometry._state.hash, mesh._state.hash].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new ShadowRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nShadowRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        _stats_js__WEBPACK_IMPORTED_MODULE_2__[\"stats\"].memory.programs--;\n    }\n};\n\nShadowRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nShadowRenderer.prototype.drawMesh = function (frame, mesh) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frame.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frame.frontface = frontface;\n        }\n        if (frame.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frame.lineWidth = materialState.lineWidth;\n        }\n        if (this._uPointSize) {\n            gl.uniform1i(this._uPointSize, materialState.pointSize);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh.vertexBufs;\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    gl.uniform3fv(this._uOffset, mesh._state.offset);\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the preceding VertexBufs chunk\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nShadowRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new _webgl_Program_js__WEBPACK_IMPORTED_MODULE_1__[\"Program\"](gl, this._shaderSource);\n    this._scene = scene;\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uShadowViewMatrix = program.getLocation(\"shadowViewMatrix\");\n    this._uShadowProjMatrix = program.getLocation(\"shadowProjMatrix\");\n    this._uSectionPlanes = {};\n    const clips = scene._sectionPlanesState.sectionPlanes;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uSectionPlanes.push({\n            active: program.getLocation(\"sectionPlaneActive\" + i),\n            pos: program.getLocation(\"sectionPlanePos\" + i),\n            dir: program.getLocation(\"sectionPlaneDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uOffset = program.getLocation(\"offset\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nShadowRenderer.prototype._bindProgram = function (frame) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n    this._program.bind();\n    frame.useProgram++;\n    gl.uniformMatrix4fv(this._uShadowViewMatrix, false, frame.shadowViewMatrix);\n    gl.uniformMatrix4fv(this._uShadowProjMatrix, false, frame.shadowProjMatrix);\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    if (sectionPlanesState.sectionPlanes.length > 0) {\n        let sectionPlaneUniforms;\n        let uSectionPlaneActive;\n        let sectionPlane;\n        let uSectionPlanePos;\n        let uSectionPlaneDir;\n        for (let i = 0, len = this._uSectionPlanes.length; i < len; i++) {\n            sectionPlaneUniforms = this._uSectionPlanes[i];\n            uSectionPlaneActive = sectionPlaneUniforms.active;\n            sectionPlane = sectionPlanesState.sectionPlanes[i];\n            if (uSectionPlaneActive) {\n                gl.uniform1i(uSectionPlaneActive, sectionPlane.active);\n            }\n            uSectionPlanePos = sectionPlaneUniforms.pos;\n            if (uSectionPlanePos) {\n                gl.uniform3fv(sectionPlaneUniforms.pos, sectionPlane.pos);\n            }\n            uSectionPlaneDir = sectionPlaneUniforms.dir;\n            if (uSectionPlaneDir) {\n                gl.uniform3fv(sectionPlaneUniforms.dir, sectionPlane.dir);\n            }\n        }\n    }\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowRenderer.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js ***!
  \********************************************************************************************/
/*! exports provided: ShadowShaderSource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShadowShaderSource\", function() { return ShadowShaderSource; });\n/**\n * @private\n */\nclass ShadowShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._sectionPlanesState.sectionPlanes.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const src = [];\n    src.push(\"// Mesh shadow vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 shadowViewMatrix;\");\n    src.push(\"uniform mat4 shadowProjMatrix;\");\n    src.push(\"uniform vec3 offset;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"worldPosition = modelMatrix * localPosition;\");\n    src.push(\"worldPosition.xyz = worldPosition.xyz + offset;\");\n    src.push(\"vec4 viewPosition  = shadowViewMatrix * worldPosition; \");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = shadowProjMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const sectionPlanesState = scene._sectionPlanesState;\n    const clipping = sectionPlanesState.sectionPlanes.length > 0;\n    const src = [];\n    src.push(\"// Mesh shadow fragment shader\");\n\n    src.push(\"#ifdef GL_FRAGMENT_PRECISION_HIGH\");\n    src.push(\"precision highp float;\");\n    src.push(\"precision highp int;\");\n    src.push(\"#else\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"#endif\");\n\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"uniform bool sectionPlaneActive\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlanePos\" + i + \";\");\n            src.push(\"uniform vec3 sectionPlaneDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"vec4 encodeFloat( const in float depth ) {\");\n    src.push(\"  const vec4 bitShift = vec4(256 * 256 * 256, 256 * 256, 256, 1.0);\");\n    src.push(\"  const vec4 bitMask = vec4(0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\");\n    src.push(\"  vec4 comp = fract(depth * bitShift);\");\n    src.push(\"  comp -= comp.xxyz * bitMask;\");\n    src.push(\"  return comp;\");\n    src.push(\"}\");\n\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < sectionPlanesState.sectionPlanes.length; i++) {\n            src.push(\"if (sectionPlaneActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-sectionPlaneDir\" + i + \".xyz, vWorldPosition.xyz - sectionPlanePos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = encodeFloat(gl_FragCoord.z);\");\n    src.push(\"}\");\n    return src;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL21lc2gvc2hhZG93L1NoYWRvd1NoYWRlclNvdXJjZS5qcz84MzU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLHVDQUF1QztBQUN2Qyw0Q0FBNEM7QUFDNUMsNENBQTRDO0FBQzVDLGtDQUFrQztBQUNsQztBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsK0JBQStCO0FBQy9CLHVEQUF1RDtBQUN2RCxpQ0FBaUM7QUFDakM7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQSwwREFBMEQ7QUFDMUQsNkRBQTZEO0FBQzdELG9FQUFvRTtBQUNwRTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLCtEQUErRDtBQUMvRCxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFDbEM7QUFDQSxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDOztBQUVBO0FBQ0EseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qyx1QkFBdUIsNkNBQTZDO0FBQ3BFLCtEQUErRDtBQUMvRCw0REFBNEQ7QUFDNUQsNERBQTREO0FBQzVEO0FBQ0E7O0FBRUEsd0RBQXdEO0FBQ3hELGlGQUFpRjtBQUNqRixvRkFBb0Y7QUFDcEYsb0RBQW9EO0FBQ3BELDRDQUE0QztBQUM1Qyw0QkFBNEI7QUFDNUIsZUFBZTs7QUFFZiwrQkFBK0I7QUFDL0I7QUFDQSxrQ0FBa0M7QUFDbEMscUNBQXFDO0FBQ3JDLHVCQUF1Qiw2Q0FBNkM7QUFDcEUsd0RBQXdEO0FBQ3hELDJJQUEySTtBQUMzSSx1QkFBdUI7QUFDdkI7QUFDQSxxQ0FBcUMsU0FBUyxFQUFFO0FBQ2hELG1CQUFtQjtBQUNuQjtBQUNBLHlEQUF5RDtBQUN6RCxlQUFlO0FBQ2Y7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS9tZXNoL3NoYWRvdy9TaGFkb3dTaGFkZXJTb3VyY2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFNoYWRvd1NoYWRlclNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IobWVzaCkge1xuICAgICAgICB0aGlzLnZlcnRleCA9IGJ1aWxkVmVydGV4KG1lc2gpO1xuICAgICAgICB0aGlzLmZyYWdtZW50ID0gYnVpbGRGcmFnbWVudChtZXNoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVmVydGV4KG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBzY2VuZS5fc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoID4gMDtcbiAgICBjb25zdCBxdWFudGl6ZWRHZW9tZXRyeSA9ICEhbWVzaC5fZ2VvbWV0cnkuX3N0YXRlLmNvbXByZXNzR2VvbWV0cnk7XG4gICAgY29uc3Qgc3JjID0gW107XG4gICAgc3JjLnB1c2goXCIvLyBNZXNoIHNoYWRvdyB2ZXJ0ZXggc2hhZGVyXCIpO1xuICAgIHNyYy5wdXNoKFwiYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XCIpO1xuICAgIHNyYy5wdXNoKFwidW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzaGFkb3dWaWV3TWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBzaGFkb3dQcm9qTWF0cml4O1wiKTtcbiAgICBzcmMucHVzaChcInVuaWZvcm0gdmVjMyBvZmZzZXQ7XCIpO1xuICAgIGlmIChxdWFudGl6ZWRHZW9tZXRyeSkge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gbWF0NCBwb3NpdGlvbnNEZWNvZGVNYXRyaXg7XCIpO1xuICAgIH1cbiAgICBpZiAoY2xpcHBpbmcpIHtcbiAgICAgICAgc3JjLnB1c2goXCJ2YXJ5aW5nIHZlYzQgdldvcmxkUG9zaXRpb247XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcInZvaWQgbWFpbih2b2lkKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCBsb2NhbFBvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4wKTsgXCIpO1xuICAgIHNyYy5wdXNoKFwidmVjNCB3b3JsZFBvc2l0aW9uO1wiKTtcbiAgICBpZiAocXVhbnRpemVkR2VvbWV0cnkpIHtcbiAgICAgICAgc3JjLnB1c2goXCJsb2NhbFBvc2l0aW9uID0gcG9zaXRpb25zRGVjb2RlTWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgfVxuICAgIHNyYy5wdXNoKFwid29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogbG9jYWxQb3NpdGlvbjtcIik7XG4gICAgc3JjLnB1c2goXCJ3b3JsZFBvc2l0aW9uLnh5eiA9IHdvcmxkUG9zaXRpb24ueHl6ICsgb2Zmc2V0O1wiKTtcbiAgICBzcmMucHVzaChcInZlYzQgdmlld1Bvc2l0aW9uICA9IHNoYWRvd1ZpZXdNYXRyaXggKiB3b3JsZFBvc2l0aW9uOyBcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwidldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uO1wiKTtcbiAgICB9XG4gICAgc3JjLnB1c2goXCIgICBnbF9Qb3NpdGlvbiA9IHNoYWRvd1Byb2pNYXRyaXggKiB2aWV3UG9zaXRpb247XCIpO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICByZXR1cm4gc3JjO1xufVxuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KG1lc2gpIHtcbiAgICBjb25zdCBzY2VuZSA9IG1lc2guc2NlbmU7XG4gICAgY29uc3QgZ2wgPSBzY2VuZS5jYW52YXMuZ2w7XG4gICAgY29uc3Qgc2VjdGlvblBsYW5lc1N0YXRlID0gc2NlbmUuX3NlY3Rpb25QbGFuZXNTdGF0ZTtcbiAgICBjb25zdCBjbGlwcGluZyA9IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aCA+IDA7XG4gICAgY29uc3Qgc3JjID0gW107XG4gICAgc3JjLnB1c2goXCIvLyBNZXNoIHNoYWRvdyBmcmFnbWVudCBzaGFkZXJcIik7XG5cbiAgICBzcmMucHVzaChcIiNpZmRlZiBHTF9GUkFHTUVOVF9QUkVDSVNJT05fSElHSFwiKTtcbiAgICBzcmMucHVzaChcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcIik7XG4gICAgc3JjLnB1c2goXCJwcmVjaXNpb24gaGlnaHAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbHNlXCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XCIpO1xuICAgIHNyYy5wdXNoKFwicHJlY2lzaW9uIG1lZGl1bXAgaW50O1wiKTtcbiAgICBzcmMucHVzaChcIiNlbmRpZlwiKTtcblxuICAgIGlmIChjbGlwcGluZykge1xuICAgICAgICBzcmMucHVzaChcInVuaWZvcm0gYm9vbCBjbGlwcGFibGU7XCIpO1xuICAgICAgICBzcmMucHVzaChcInZhcnlpbmcgdmVjNCB2V29ybGRQb3NpdGlvbjtcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VjdGlvblBsYW5lc1N0YXRlLnNlY3Rpb25QbGFuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSBib29sIHNlY3Rpb25QbGFuZUFjdGl2ZVwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIHNlY3Rpb25QbGFuZVBvc1wiICsgaSArIFwiO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwidW5pZm9ybSB2ZWMzIHNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiO1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNyYy5wdXNoKFwidmVjNCBlbmNvZGVGbG9hdCggY29uc3QgaW4gZmxvYXQgZGVwdGggKSB7XCIpO1xuICAgIHNyYy5wdXNoKFwiICBjb25zdCB2ZWM0IGJpdFNoaWZ0ID0gdmVjNCgyNTYgKiAyNTYgKiAyNTYsIDI1NiAqIDI1NiwgMjU2LCAxLjApO1wiKTtcbiAgICBzcmMucHVzaChcIiAgY29uc3QgdmVjNCBiaXRNYXNrID0gdmVjNCgwLCAxLjAgLyAyNTYuMCwgMS4wIC8gMjU2LjAsIDEuMCAvIDI1Ni4wKTtcIik7XG4gICAgc3JjLnB1c2goXCIgIHZlYzQgY29tcCA9IGZyYWN0KGRlcHRoICogYml0U2hpZnQpO1wiKTtcbiAgICBzcmMucHVzaChcIiAgY29tcCAtPSBjb21wLnh4eXogKiBiaXRNYXNrO1wiKTtcbiAgICBzcmMucHVzaChcIiAgcmV0dXJuIGNvbXA7XCIpO1xuICAgIHNyYy5wdXNoKFwifVwiKTtcblxuICAgIHNyYy5wdXNoKFwidm9pZCBtYWluKHZvaWQpIHtcIik7XG4gICAgaWYgKGNsaXBwaW5nKSB7XG4gICAgICAgIHNyYy5wdXNoKFwiaWYgKGNsaXBwYWJsZSkge1wiKTtcbiAgICAgICAgc3JjLnB1c2goXCIgIGZsb2F0IGRpc3QgPSAwLjA7XCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlY3Rpb25QbGFuZXNTdGF0ZS5zZWN0aW9uUGxhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzcmMucHVzaChcImlmIChzZWN0aW9uUGxhbmVBY3RpdmVcIiArIGkgKyBcIikge1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwiICAgZGlzdCArPSBjbGFtcChkb3QoLXNlY3Rpb25QbGFuZURpclwiICsgaSArIFwiLnh5eiwgdldvcmxkUG9zaXRpb24ueHl6IC0gc2VjdGlvblBsYW5lUG9zXCIgKyBpICsgXCIueHl6KSwgMC4wLCAxMDAwLjApO1wiKTtcbiAgICAgICAgICAgIHNyYy5wdXNoKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzcmMucHVzaChcIiAgaWYgKGRpc3QgPiAwLjApIHsgZGlzY2FyZDsgfVwiKTtcbiAgICAgICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIH1cbiAgICBzcmMucHVzaChcImdsX0ZyYWdDb2xvciA9IGVuY29kZUZsb2F0KGdsX0ZyYWdDb29yZC56KTtcIik7XG4gICAgc3JjLnB1c2goXCJ9XCIpO1xuICAgIHJldHVybiBzcmM7XG59XG5cbmV4cG9ydCB7U2hhZG93U2hhZGVyU291cmNlfTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/mesh/shadow/ShadowShaderSource.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js ***!
  \*******************************************************************/
/*! exports provided: stats */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stats\", function() { return stats; });\n/**\n * xeokit runtime statistics.\n * @private\n * @type {{components: {models: number, objects: number, scenes: number, meshes: number}, memory: {indices: number, uvs: number, textures: number, materials: number, transforms: number, positions: number, programs: number, normals: number, meshes: number, colors: number}, build: {version: string}, client: {browser: string}, frame: {frameCount: number, useProgram: number, bindTexture: number, drawElements: number, bindArray: number, tasksRun: number, fps: number, drawArrays: number, tasksScheduled: number}}}\n */\nconst stats = {\n    build: {\n        version: \"0.8\"\n    },\n    client: {\n        browser: (navigator && navigator.userAgent) ? navigator.userAgent : \"n/a\"\n    },\n\n    components: {\n        scenes: 0,\n        models: 0,\n        meshes: 0,\n        objects: 0\n    },\n    memory: {\n        meshes: 0,\n        positions: 0,\n        colors: 0,\n        normals: 0,\n        uvs: 0,\n        indices: 0,\n        textures: 0,\n        transforms: 0,\n        materials: 0,\n        programs: 0\n    },\n    frame: {\n        frameCount: 0,\n        fps: 0,\n        useProgram: 0,\n        bindTexture: 0,\n        bindArray: 0,\n        drawElements: 0,\n        drawArrays: 0,\n        tasksRun: 0,\n        tasksScheduled: 0\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3N0YXRzLmpzPzg0NDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYSxnRUFBZ0UsV0FBVyw0S0FBNEssVUFBVSxnQkFBZ0IsV0FBVyxnQkFBZ0IsVUFBVTtBQUM5VTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3N0YXRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB4ZW9raXQgcnVudGltZSBzdGF0aXN0aWNzLlxuICogQHByaXZhdGVcbiAqIEB0eXBlIHt7Y29tcG9uZW50czoge21vZGVsczogbnVtYmVyLCBvYmplY3RzOiBudW1iZXIsIHNjZW5lczogbnVtYmVyLCBtZXNoZXM6IG51bWJlcn0sIG1lbW9yeToge2luZGljZXM6IG51bWJlciwgdXZzOiBudW1iZXIsIHRleHR1cmVzOiBudW1iZXIsIG1hdGVyaWFsczogbnVtYmVyLCB0cmFuc2Zvcm1zOiBudW1iZXIsIHBvc2l0aW9uczogbnVtYmVyLCBwcm9ncmFtczogbnVtYmVyLCBub3JtYWxzOiBudW1iZXIsIG1lc2hlczogbnVtYmVyLCBjb2xvcnM6IG51bWJlcn0sIGJ1aWxkOiB7dmVyc2lvbjogc3RyaW5nfSwgY2xpZW50OiB7YnJvd3Nlcjogc3RyaW5nfSwgZnJhbWU6IHtmcmFtZUNvdW50OiBudW1iZXIsIHVzZVByb2dyYW06IG51bWJlciwgYmluZFRleHR1cmU6IG51bWJlciwgZHJhd0VsZW1lbnRzOiBudW1iZXIsIGJpbmRBcnJheTogbnVtYmVyLCB0YXNrc1J1bjogbnVtYmVyLCBmcHM6IG51bWJlciwgZHJhd0FycmF5czogbnVtYmVyLCB0YXNrc1NjaGVkdWxlZDogbnVtYmVyfX19XG4gKi9cbmNvbnN0IHN0YXRzID0ge1xuICAgIGJ1aWxkOiB7XG4gICAgICAgIHZlcnNpb246IFwiMC44XCJcbiAgICB9LFxuICAgIGNsaWVudDoge1xuICAgICAgICBicm93c2VyOiAobmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQpID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6IFwibi9hXCJcbiAgICB9LFxuXG4gICAgY29tcG9uZW50czoge1xuICAgICAgICBzY2VuZXM6IDAsXG4gICAgICAgIG1vZGVsczogMCxcbiAgICAgICAgbWVzaGVzOiAwLFxuICAgICAgICBvYmplY3RzOiAwXG4gICAgfSxcbiAgICBtZW1vcnk6IHtcbiAgICAgICAgbWVzaGVzOiAwLFxuICAgICAgICBwb3NpdGlvbnM6IDAsXG4gICAgICAgIGNvbG9yczogMCxcbiAgICAgICAgbm9ybWFsczogMCxcbiAgICAgICAgdXZzOiAwLFxuICAgICAgICBpbmRpY2VzOiAwLFxuICAgICAgICB0ZXh0dXJlczogMCxcbiAgICAgICAgdHJhbnNmb3JtczogMCxcbiAgICAgICAgbWF0ZXJpYWxzOiAwLFxuICAgICAgICBwcm9ncmFtczogMFxuICAgIH0sXG4gICAgZnJhbWU6IHtcbiAgICAgICAgZnJhbWVDb3VudDogMCxcbiAgICAgICAgZnBzOiAwLFxuICAgICAgICB1c2VQcm9ncmFtOiAwLFxuICAgICAgICBiaW5kVGV4dHVyZTogMCxcbiAgICAgICAgYmluZEFycmF5OiAwLFxuICAgICAgICBkcmF3RWxlbWVudHM6IDAsXG4gICAgICAgIGRyYXdBcnJheXM6IDAsXG4gICAgICAgIHRhc2tzUnVuOiAwLFxuICAgICAgICB0YXNrc1NjaGVkdWxlZDogMFxuICAgIH1cbn07XG5cbmV4cG9ydCB7c3RhdHN9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/stats.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js ***!
  \*******************************************************************/
/*! exports provided: utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"utils\", function() { return utils; });\n/**\n * @private\n */\nfunction xmlToJson(node, attributeRenamer) {\n    if (node.nodeType === node.TEXT_NODE) {\n        var v = node.nodeValue;\n        if (v.match(/^\\s+$/) === null) {\n            return v;\n        }\n    } else if (node.nodeType === node.ELEMENT_NODE ||\n        node.nodeType === node.DOCUMENT_NODE) {\n        var json = {type: node.nodeName, children: []};\n\n        if (node.nodeType === node.ELEMENT_NODE) {\n            for (var j = 0; j < node.attributes.length; j++) {\n                var attribute = node.attributes[j];\n                var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                json[nm] = attribute.nodeValue;\n            }\n        }\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n            var item = node.childNodes[i];\n            var j = xmlToJson(item, attributeRenamer);\n            if (j) json.children.push(j);\n        }\n\n        return json;\n    }\n}\n\n/**\n * @private\n */\nfunction clone(ob) {\n    return JSON.parse(JSON.stringify(ob));\n}\n\n/**\n * @private\n */\nvar guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\n/**\n * @private\n */\nfunction b64(v, len) {\n    var r = (!len || len === 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n}\n\n/**\n * @private\n */\nfunction compressGuid(g) {\n    var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n        return parseInt(g.substr(i, 2), 16);\n    });\n    return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n        return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n    }).join(\"\");\n}\n\n/**\n * @private\n */\nfunction findNodeOfType(m, t) {\n    var li = [];\n    var _ = function (n) {\n        if (n.type === t) li.push(n);\n        (n.children || []).forEach(function (c) {\n            _(c);\n        });\n    };\n    _(m);\n    return li;\n}\n\n/**\n * @private\n */\nfunction timeout(dt) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(resolve, dt);\n    });\n}\n\n/**\n * @private\n */\nfunction httpRequest(args) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(args.method || \"GET\", args.url, true);\n        xhr.onload = function (e) {\n            console.log(args.url, xhr.readyState, xhr.status);\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseXML);\n                } else {\n                    reject(xhr.statusText);\n                }\n            }\n        };\n        xhr.send(null);\n    });\n}\n\n/**\n * @private\n */\nconst queryString = function () {\n    // This function is anonymous, is executed immediately and\n    // the return value is assigned to QueryString!\n    var query_string = {};\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        // If first entry with this name\n        if (typeof query_string[pair[0]] === \"undefined\") {\n            query_string[pair[0]] = decodeURIComponent(pair[1]);\n            // If second entry with this name\n        } else if (typeof query_string[pair[0]] === \"string\") {\n            var arr = [query_string[pair[0]], decodeURIComponent(pair[1])];\n            query_string[pair[0]] = arr;\n            // If third or later entry with this name\n        } else {\n            query_string[pair[0]].push(decodeURIComponent(pair[1]));\n        }\n    }\n    return query_string;\n}();\n\n/**\n * @private\n */\nfunction loadJSON(url, ok, err) {\n    // Avoid checking ok and err on each use.\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n\n    var request = new XMLHttpRequest();\n    request.overrideMimeType(\"application/json\");\n    request.open('GET', url, true);\n    request.addEventListener('load', function (event) {\n        var response = event.target.response;\n        if (this.status === 200) {\n            var json;\n            try {\n                json = JSON.parse(response);\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n            ok(json);\n        } else if (this.status === 0) {\n            // Some browsers return HTTP Status 0 when using non-http protocol\n            // e.g. 'file://' or 'data://'. Handle as success.\n            console.warn('loadFile: HTTP Status 0 received.');\n            try {\n                ok(JSON.parse(response));\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n        } else {\n            err(event);\n        }\n    }, false);\n\n    request.addEventListener('error', function (event) {\n        err(event);\n    }, false);\n    request.send(null);\n}\n\n/**\n * @private\n */\nfunction loadArraybuffer(url, ok, err) {\n    // Check for data: URI\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n    const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n    const dataUriRegexResult = url.match(dataUriRegex);\n    if (dataUriRegexResult) { // Safari can't handle data URIs through XMLHttpRequest\n        const isBase64 = !!dataUriRegexResult[2];\n        var data = dataUriRegexResult[3];\n        data = window.decodeURIComponent(data);\n        if (isBase64) {\n            data = window.atob(data);\n        }\n        try {\n            const buffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(buffer);\n            for (var i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n            }\n            window.setTimeout(function () {\n                ok(buffer);\n            }, 0);\n        } catch (error) {\n            window.setTimeout(function () {\n                err(error);\n            }, 0);\n        }\n    } else {\n        const request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onreadystatechange = function () {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    ok(request.response);\n                } else {\n                    err('loadArrayBuffer error : ' + request.response);\n                }\n            }\n        };\n        request.send(null);\n    }\n}\n\n/**\n Tests if the given object is an array\n @private\n */\nfunction isArray(value) {\n    return value && !(value.propertyIsEnumerable('length')) && typeof value === 'object' && typeof value.length === 'number';\n}\n\n/**\n Tests if the given value is a string\n @param value\n @returns {boolean}\n @private\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\n/**\n Tests if the given value is a number\n @param value\n @returns {boolean}\n @private\n */\nfunction isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n/**\n Tests if the given value is an ID\n @param value\n @returns {boolean}\n @private\n */\nfunction isID(value) {\n    return utils.isString(value) || utils.isNumeric(value);\n}\n\n/**\n Tests if the given components are the same, where the components can be either IDs or instances.\n @param c1\n @param c2\n @returns {boolean}\n @private\n */\nfunction isSameComponent(c1, c2) {\n    if (!c1 || !c2) {\n        return false;\n    }\n    const id1 = (utils.isNumeric(c1) || utils.isString(c1)) ? `${c1}` : c1.id;\n    const id2 = (utils.isNumeric(c2) || utils.isString(c2)) ? `${c2}` : c2.id;\n    return id1 === id2;\n}\n\n/**\n Tests if the given value is a function\n @param value\n @returns {boolean}\n @private\n */\nfunction isFunction(value) {\n    return (typeof value === \"function\");\n}\n\n/**\n Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.\n @param value\n @returns {boolean}\n @private\n */\nfunction isObject(value) {\n    const objectConstructor = {}.constructor;\n    return (!!value && value.constructor === objectConstructor);\n}\n\n/** Returns a shallow copy\n */\nfunction copy(o) {\n    return utils.apply(o, {});\n}\n\n/** Add properties of o to o2, overwriting them on o2 if already there\n */\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n Add non-null/defined properties of o to o2\n @private\n */\nfunction apply2(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o[name] !== undefined && o[name] !== null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Add properties of o to o2 where undefined or null on o2\n @private\n */\nfunction applyIf(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o2[name] === undefined || o2[name] === null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Returns true if the given map is empty.\n @param obj\n @returns {boolean}\n @private\n */\nfunction isEmptyObject(obj) {\n    for (const name in obj) {\n        if (obj.hasOwnProperty(name)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\n This is useful for logging IDs.\n\n @param {Number| String} id The ID\n @returns {String}\n @private\n */\nfunction inQuotes(id) {\n    return utils.isNumeric(id) ? (`${id}`) : (`'${id}'`);\n}\n\n/**\n Returns the concatenation of two typed arrays.\n @param a\n @param b\n @returns {*|a}\n @private\n */\nfunction concat(a, b) {\n    const c = new a.constructor(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n}\n\nfunction flattenParentChildHierarchy(root) {\n    var list = [];\n\n    function visit(node) {\n        node.id = node.uuid;\n        delete node.oid;\n        list.push(node);\n        var children = node.children;\n\n        if (children) {\n            for (var i = 0, len = children.length; i < len; i++) {\n                const child = children[i];\n                child.parent = node.id;\n                visit(children[i]);\n            }\n        }\n        node.children = [];\n    }\n\n    visit(root);\n    return list;\n}\n\n/**\n * @private\n */\nconst utils = {\n    xmlToJson: xmlToJson,\n    clone: clone,\n    compressGuid: compressGuid,\n    findNodeOfType: findNodeOfType,\n    timeout: timeout,\n    httpRequest: httpRequest,\n    loadJSON: loadJSON,\n    loadArraybuffer: loadArraybuffer,\n    queryString: queryString,\n    isArray: isArray,\n    isString: isString,\n    isNumeric: isNumeric,\n    isID: isID,\n    isSameComponent: isSameComponent,\n    isFunction: isFunction,\n    isObject: isObject,\n    copy: copy,\n    apply: apply,\n    apply2: apply2,\n    applyIf: applyIf,\n    isEmptyObject: isEmptyObject,\n    inQuotes: inQuotes,\n    concat: concat,\n    flattenParentChildHierarchy: flattenParentChildHierarchy\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js ***!
  \***********************************************************************/
/*! exports provided: Map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Map\", function() { return Map; });\n/** @private */\nclass Map {\n\n    constructor(items, baseId) {\n        this.items = items || [];\n        this._lastUniqueId = (baseId || 0) + 1;\n    }\n\n    /**\n     * Usage:\n     *\n     * id = myMap.addItem(\"foo\") // ID internally generated\n     * id = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"\n     */\n    addItem() {\n        let item;\n        if (arguments.length === 2) {\n            const id = arguments[0];\n            item = arguments[1];\n            if (this.items[id]) { // Won't happen if given ID is string\n                throw \"ID clash: '\" + id + \"'\";\n            }\n            this.items[id] = item;\n            return id;\n\n        } else {\n            item = arguments[0] || {};\n            while (true) {\n                const findId = this._lastUniqueId++;\n                if (!this.items[findId]) {\n                    this.items[findId] = item;\n                    return findId;\n                }\n            }\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items[id];\n        delete this.items[id];\n        return item;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL01hcC5qcz84ZDZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS91dGlscy9NYXAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQHByaXZhdGUgKi9cbmNsYXNzIE1hcCB7XG5cbiAgICBjb25zdHJ1Y3RvcihpdGVtcywgYmFzZUlkKSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcyB8fCBbXTtcbiAgICAgICAgdGhpcy5fbGFzdFVuaXF1ZUlkID0gKGJhc2VJZCB8fCAwKSArIDE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBpZCA9IG15TWFwLmFkZEl0ZW0oXCJmb29cIikgLy8gSUQgaW50ZXJuYWxseSBnZW5lcmF0ZWRcbiAgICAgKiBpZCA9IG15TWFwLmFkZEl0ZW0oXCJmb29cIiwgXCJiYXJcIikgLy8gSUQgaXMgXCJmb29cIlxuICAgICAqL1xuICAgIGFkZEl0ZW0oKSB7XG4gICAgICAgIGxldCBpdGVtO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBpdGVtID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXNbaWRdKSB7IC8vIFdvbid0IGhhcHBlbiBpZiBnaXZlbiBJRCBpcyBzdHJpbmdcbiAgICAgICAgICAgICAgICB0aHJvdyBcIklEIGNsYXNoOiAnXCIgKyBpZCArIFwiJ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpZF0gPSBpdGVtO1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtID0gYXJndW1lbnRzWzBdIHx8IHt9O1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5kSWQgPSB0aGlzLl9sYXN0VW5pcXVlSWQrKztcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXRlbXNbZmluZElkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2ZpbmRJZF0gPSBpdGVtO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oaWQpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1tpZF07XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbn1cblxuZXhwb3J0IHtNYXB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js ***!
  \*************************************************************************/
/*! exports provided: Queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Queue\", function() { return Queue; });\n// Fast queue that avoids using potentially inefficient array .shift() calls\n// Based on https://github.com/creationix/fastqueue\n\n/** @private */\nclass Queue {\n\n    constructor() {\n\n        this._head = [];\n        this._headLength = 0;\n        this._tail = [];\n        this._index = 0;\n        this._length = 0;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    shift() {\n        if (this._index >= this._headLength) {\n            const t = this._head;\n            t.length = 0;\n            this._head = this._tail;\n            this._tail = t;\n            this._index = 0;\n            this._headLength = this._head.length;\n            if (!this._headLength) {\n                return;\n            }\n        }\n        const value = this._head[this._index];\n        if (this._index < 0) {\n            delete this._head[this._index++];\n        }\n        else {\n            this._head[this._index++] = undefined;\n        }\n        this._length--;\n        return value;\n    }\n\n    push(item) {\n        this._length++;\n        this._tail.push(item);\n        return this;\n    };\n\n    unshift(item) {\n        this._head[--this._index] = item;\n        this._length++;\n        return this;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL1F1ZXVlLmpzP2Y5YzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3V0aWxzL1F1ZXVlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmFzdCBxdWV1ZSB0aGF0IGF2b2lkcyB1c2luZyBwb3RlbnRpYWxseSBpbmVmZmljaWVudCBhcnJheSAuc2hpZnQoKSBjYWxsc1xuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2NyZWF0aW9uaXgvZmFzdHF1ZXVlXG5cbi8qKiBAcHJpdmF0ZSAqL1xuY2xhc3MgUXVldWUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAgICAgdGhpcy5faGVhZCA9IFtdO1xuICAgICAgICB0aGlzLl9oZWFkTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IFtdO1xuICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgICB9XG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IHRoaXMuX2hlYWRMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gdDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRMZW5ndGggPSB0aGlzLl9oZWFkLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICghdGhpcy5faGVhZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2hlYWRbdGhpcy5faW5kZXhdO1xuICAgICAgICBpZiAodGhpcy5faW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGVhZFt0aGlzLl9pbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWRbdGhpcy5faW5kZXgrK10gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBwdXNoKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgICAgIHRoaXMuX3RhaWwucHVzaChpdGVtKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHVuc2hpZnQoaXRlbSkge1xuICAgICAgICB0aGlzLl9oZWFkWy0tdGhpcy5faW5kZXhdID0gaXRlbTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IHtRdWV1ZX07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Queue.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js ***!
  \*****************************************************************************/
/*! exports provided: Attribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Attribute\", function() { return Attribute; });\n/**\n * @desc Represents a WebGL vertex attribute buffer (VBO).\n * @private\n * @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Attribute {\n\n    constructor(gl, location) {\n        this._gl = gl;\n        this.location = location;\n    }\n\n    bindArrayBuffer(arrayBuf) {\n        if (!arrayBuf) {\n            return;\n        }\n        arrayBuf.bind();\n        this._gl.enableVertexAttribArray(this.location);\n        this._gl.vertexAttribPointer(this.location, arrayBuf.itemSize, arrayBuf.itemType, arrayBuf.normalized, arrayBuf.stride, arrayBuf.offset);\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL0F0dHJpYnV0ZS5qcz8xMmE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFbUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvd2ViZ2wvQXR0cmlidXRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzYyBSZXByZXNlbnRzIGEgV2ViR0wgdmVydGV4IGF0dHJpYnV0ZSBidWZmZXIgKFZCTykuXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGdsIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IFRoZSBXZWJHTCByZW5kZXJpbmcgY29udGV4dC5cbiAqL1xuY2xhc3MgQXR0cmlidXRlIHtcblxuICAgIGNvbnN0cnVjdG9yKGdsLCBsb2NhdGlvbikge1xuICAgICAgICB0aGlzLl9nbCA9IGdsO1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgYmluZEFycmF5QnVmZmVyKGFycmF5QnVmKSB7XG4gICAgICAgIGlmICghYXJyYXlCdWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhcnJheUJ1Zi5iaW5kKCk7XG4gICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMubG9jYXRpb24pO1xuICAgICAgICB0aGlzLl9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMubG9jYXRpb24sIGFycmF5QnVmLml0ZW1TaXplLCBhcnJheUJ1Zi5pdGVtVHlwZSwgYXJyYXlCdWYubm9ybWFsaXplZCwgYXJyYXlCdWYuc3RyaWRlLCBhcnJheUJ1Zi5vZmZzZXQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtBdHRyaWJ1dGV9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js ***!
  \***************************************************************************/
/*! exports provided: Program */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Program\", function() { return Program; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n/* harmony import */ var _Shader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shader.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js\");\n/* harmony import */ var _Sampler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Sampler.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js\");\n/* harmony import */ var _Attribute_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Attribute.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Attribute.js\");\n\n\n\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\nfunction joinSansComments(srcLines) {\n    const src = [];\n    let line;\n    let n;\n    for (let i = 0, len = srcLines.length; i < len; i++) {\n        line = srcLines[i];\n        n = line.indexOf(\"/\");\n        if (n > 0) {\n            if (line.charAt(n + 1) === \"/\") {\n                line = line.substring(0, n);\n            }\n        }\n        src.push(line);\n    }\n    return src.join(\"\\n\");\n}\n\nfunction logErrors(errors) {\n    console.error(errors.join(\"\\n\"));\n}\n\n/**\n * @desc Represents a WebGL program.\n * @private\n */\nclass Program {\n\n    constructor(gl, shaderSource) {\n        this.id = ids.addItem({});\n        this.source = shaderSource;\n        this.init(gl);\n    }\n\n    init(gl) {\n        this.gl = gl;\n        this.allocated = false;\n        this.compiled = false;\n        this.linked = false;\n        this.validated = false;\n        this.errors = null;\n        this.uniforms = {};\n        this.samplers = {};\n        this.attributes = {};\n        this._vertexShader = new _Shader_js__WEBPACK_IMPORTED_MODULE_1__[\"Shader\"](gl, gl.VERTEX_SHADER, joinSansComments(this.source.vertex));\n        this._fragmentShader = new _Shader_js__WEBPACK_IMPORTED_MODULE_1__[\"Shader\"](gl, gl.FRAGMENT_SHADER, joinSansComments(this.source.fragment));\n        if (!this._vertexShader.allocated) {\n            this.errors = [\"Vertex shader failed to allocate\"].concat(this._vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        if (!this._fragmentShader.allocated) {\n            this.errors = [\"Fragment shader failed to allocate\"].concat(this._fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        this.allocated = true;\n        if (!this._vertexShader.compiled) {\n            this.errors = [\"Vertex shader failed to compile\"].concat(this._vertexShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        if (!this._fragmentShader.compiled) {\n            this.errors = [\"Fragment shader failed to compile\"].concat(this._fragmentShader.errors);\n            logErrors(this.errors);\n            return;\n        }\n        this.compiled = true;\n        let a;\n        let i;\n        let u;\n        let uName;\n        let location;\n        this.handle = gl.createProgram();\n        if (!this.handle) {\n            this.errors = [\"Failed to allocate program\"];\n            return;\n        }\n        gl.attachShader(this.handle, this._vertexShader.handle);\n        gl.attachShader(this.handle, this._fragmentShader.handle);\n        gl.linkProgram(this.handle);\n        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeokit/issues/5\n        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?\n        this.validated = true;\n        if (!this.linked || !this.validated) {\n            this.errors = [];\n            this.errors.push(\"\");\n            this.errors.push(gl.getProgramInfoLog(this.handle));\n            this.errors.push(\"\\nVertex shader:\\n\");\n            this.errors = this.errors.concat(this.source.vertex);\n            this.errors.push(\"\\nFragment shader:\\n\");\n            this.errors = this.errors.concat(this.source.fragment);\n            logErrors(this.errors);\n            return;\n        }\n        const numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        for (i = 0; i < numUniforms; ++i) {\n            u = gl.getActiveUniform(this.handle, i);\n            if (u) {\n                uName = u.name;\n                if (uName[uName.length - 1] === \"\\u0000\") {\n                    uName = uName.substr(0, uName.length - 1);\n                }\n                location = gl.getUniformLocation(this.handle, uName);\n                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {\n                    this.samplers[uName] = new _Sampler_js__WEBPACK_IMPORTED_MODULE_2__[\"Sampler\"](gl, location);\n                } else {\n                    this.uniforms[uName] = location;\n                }\n            }\n        }\n        const numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        for (i = 0; i < numAttribs; i++) {\n            a = gl.getActiveAttrib(this.handle, i);\n            if (a) {\n                location = gl.getAttribLocation(this.handle, a.name);\n                this.attributes[a.name] = new _Attribute_js__WEBPACK_IMPORTED_MODULE_3__[\"Attribute\"](gl, location);\n            }\n        }\n        this.allocated = true;\n    }\n\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    }\n\n    getLocation(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.uniforms[name];\n    }\n\n    getAttribute(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.attributes[name];\n    }\n\n    bindTexture(name, texture, unit) {\n        if (!this.allocated) {\n            return false;\n        }\n        const sampler = this.samplers[name];\n        if (sampler) {\n            return sampler.bindTexture(texture, unit);\n        } else {\n            return false;\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        ids.removeItem(this.id);\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this._vertexShader.handle);\n        this.gl.deleteShader(this._fragmentShader.handle);\n        this.handle = null;\n        this.attributes = null;\n        this.uniforms = null;\n        this.samplers = null;\n        this.allocated = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Program.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js ***!
  \*******************************************************************************/
/*! exports provided: RenderFlags */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderFlags\", function() { return RenderFlags; });\n/**\n * Indicates what rendering needs to be done for the layers within a {@link Drawable}.\n *\n * Each Drawable has a RenderFlags in {@link Drawable#renderFlags}.\n *\n * Before rendering each frame, {@link Renderer} will call {@link Drawable#rebuildRenderFlags} on each {@link Drawable}.\n *\n * Then, when rendering a frame, Renderer will apply rendering passes to each Drawable according on what flags are set in {@link Drawable#renderFlags}.\n *\n * @private\n */\nclass RenderFlags {\n\n    /**\n     * @private\n     */\n    constructor() {\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate which layers are visible within the {@link Drawable}.\n         *\n         * This is a list of IDs of visible layers within the {@link Drawable}. The IDs will be whatever the\n         * {@link Drawable} uses to identify its layers, usually integers.\n         *\n         * @property visibleLayers\n         * @type {Number[]}\n         */\n        this.visibleLayers = [];\n\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate which {@link SectionPlane}s are active within each layer of the {@link Drawable}.\n         *\n         * Layout is as follows:\n         *\n         * ````[\n         *      false, false, true, // Layer 0, SectionPlanes 0, 1, 2\n         *      false, true, true,  // Layer 1, SectionPlanes 0, 1, 2\n         *      true, false, true   // Layer 2, SectionPlanes 0, 1, 2\n         * ]````\n         *\n         * @property sectionPlanesActivePerLayer\n         * @type {Boolean[]}\n         */\n        this.sectionPlanesActivePerLayer = [];\n\n        this.reset();\n    }\n\n    /**\n     * @private\n     */\n    reset() {\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate whether the {@link Drawable} is culled.\n         * \n         * When this is ````false````, then all of the other properties on ````RenderFlags```` will remain at their default values.\n         * \n         * @property culled\n         * @type {Boolean}\n         */\n        this.culled = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate whether the {@link Drawable} is sliced by any {@link SectionPlane}s.\n         *\n         * @property sectioned\n         * @type {Boolean}\n         */\n        this.sectioned  = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the number of layers within the {@link Drawable}.\n         *\n         * @property numLayers\n         * @type {Number}\n         */\n        this.numLayers = 0;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the number of visible layers within the {@link Drawable}.\n         *\n         * @property numVisibleLayers\n         * @type {Number}\n         */\n        this.numVisibleLayers = 0;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawColorOpaque}.\n         * @property colorOpaque\n         * @type {boolean}\n         */\n        this.colorOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawColorTransparent}.\n         * @property colorTransparent\n         * @type {boolean}\n         */\n        this.colorTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawEdgesColorOpaque}.\n         * @property edgesOpaque\n         * @type {boolean}\n         */\n        this.edgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs {@link Drawable#drawEdgesColorTransparent}.\n         * @property edgesTransparent\n         * @type {boolean}\n         */\n        this.edgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteXRayed}.\n         * @property xrayedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.xrayedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesXRayed}.\n         * @property xrayedEdgesOpaque\n         * @type {boolean}\n         */\n        this.xrayedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteXRayed}.\n         * @property xrayedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.xrayedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesXRayed}.\n         * @property xrayedEdgesTransparent\n         * @type {boolean}\n         */\n        this.xrayedEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteHighlighted}.\n         * @property highlightedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.highlightedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesHighlighted}.\n         * @property highlightedEdgesOpaque\n         * @type {boolean}\n         */\n        this.highlightedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteHighlighted}.\n         * @property highlightedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.highlightedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesHighlighted}.\n         * @property highlightedEdgesTransparent\n         * @type {boolean}\n         */\n        this.highlightedEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawSilhouetteSelected}.\n         * @property selectedSilhouetteOpaque\n         * @type {boolean}\n         */\n        this.selectedSilhouetteOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs an opaque {@link Drawable#drawEdgesSelected}.\n         * @property selectedEdgesOpaque\n         * @type {boolean}\n         */\n        this.selectedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawSilhouetteSelected}.\n         * @property selectedSilhouetteTransparent\n         * @type {boolean}\n         */\n        this.selectedSilhouetteTransparent = false;\n\n        /**\n         * Set by {@link Drawable#rebuildRenderFlags} to indicate the {@link Drawable} needs a transparent {@link Drawable#drawEdgesSelected}.\n         * @property selectedEdgesTransparent\n         * @type {boolean}\n         */\n        this.selectedEdgesTransparent = false;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderFlags.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js ***!
  \*******************************************************************************/
/*! exports provided: RenderState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderState\", function() { return RenderState; });\n/* harmony import */ var _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Map.js */ \"./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/utils/Map.js\");\n\n\nconst ids = new _utils_Map_js__WEBPACK_IMPORTED_MODULE_0__[\"Map\"]({});\n\n/**\n * @desc Represents a chunk of state changes applied by the {@link Scene}'s renderer while it renders a frame.\n *\n * * Contains properties that represent the state changes.\n * * Has a unique automatically-generated numeric ID, which the renderer can use to sort these, in order to avoid applying redundant state changes for each frame.\n * * Initialize your own properties on a RenderState via its constructor.\n *\n * @private\n */\nclass RenderState {\n\n    constructor(cfg) {\n\n        /**\n         The RenderState's ID, unique within the renderer.\n         @property id\n         @type {Number}\n         @final\n         */\n        this.id = ids.addItem({});\n        for (const key in cfg) {\n            if (cfg.hasOwnProperty(key)) {\n                this[key] = cfg[key];\n            }\n        }\n    }\n\n    /**\n     Destroys this RenderState.\n     */\n    destroy() {\n        ids.removeItem(this.id);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1JlbmRlclN0YXRlLmpzP2I1MWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQW9DOztBQUVwQyxnQkFBZ0IsaURBQUcsR0FBRzs7QUFFdEI7QUFDQSw2REFBNkQsWUFBWTtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9SZW5kZXJTdGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TWFwfSBmcm9tIFwiLi4vdXRpbHMvTWFwLmpzXCI7XG5cbmNvbnN0IGlkcyA9IG5ldyBNYXAoe30pO1xuXG4vKipcbiAqIEBkZXNjIFJlcHJlc2VudHMgYSBjaHVuayBvZiBzdGF0ZSBjaGFuZ2VzIGFwcGxpZWQgYnkgdGhlIHtAbGluayBTY2VuZX0ncyByZW5kZXJlciB3aGlsZSBpdCByZW5kZXJzIGEgZnJhbWUuXG4gKlxuICogKiBDb250YWlucyBwcm9wZXJ0aWVzIHRoYXQgcmVwcmVzZW50IHRoZSBzdGF0ZSBjaGFuZ2VzLlxuICogKiBIYXMgYSB1bmlxdWUgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgbnVtZXJpYyBJRCwgd2hpY2ggdGhlIHJlbmRlcmVyIGNhbiB1c2UgdG8gc29ydCB0aGVzZSwgaW4gb3JkZXIgdG8gYXZvaWQgYXBwbHlpbmcgcmVkdW5kYW50IHN0YXRlIGNoYW5nZXMgZm9yIGVhY2ggZnJhbWUuXG4gKiAqIEluaXRpYWxpemUgeW91ciBvd24gcHJvcGVydGllcyBvbiBhIFJlbmRlclN0YXRlIHZpYSBpdHMgY29uc3RydWN0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUmVuZGVyU3RhdGUge1xuXG4gICAgY29uc3RydWN0b3IoY2ZnKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICBUaGUgUmVuZGVyU3RhdGUncyBJRCwgdW5pcXVlIHdpdGhpbiB0aGUgcmVuZGVyZXIuXG4gICAgICAgICBAcHJvcGVydHkgaWRcbiAgICAgICAgIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICBAZmluYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaWQgPSBpZHMuYWRkSXRlbSh7fSk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNmZykge1xuICAgICAgICAgICAgaWYgKGNmZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gY2ZnW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgRGVzdHJveXMgdGhpcyBSZW5kZXJTdGF0ZS5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZHMucmVtb3ZlSXRlbSh0aGlzLmlkKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7UmVuZGVyU3RhdGV9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/RenderState.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js ***!
  \***************************************************************************/
/*! exports provided: Sampler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sampler\", function() { return Sampler; });\n/**\n * @desc A low-level component that represents a WebGL Sampler.\n * @private\n */\nclass Sampler {\n\n    constructor(gl, location) {\n        this.bindTexture = function (texture, unit) {\n            if (texture.bind(unit)) {\n                gl.uniform1i(location, unit);\n                return true;\n            }\n            return false;\n        };\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1NhbXBsZXIuanM/MzkyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9TYW1wbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZGVzYyBBIGxvdy1sZXZlbCBjb21wb25lbnQgdGhhdCByZXByZXNlbnRzIGEgV2ViR0wgU2FtcGxlci5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFNhbXBsZXIge1xuXG4gICAgY29uc3RydWN0b3IoZ2wsIGxvY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuYmluZFRleHR1cmUgPSBmdW5jdGlvbiAodGV4dHVyZSwgdW5pdCkge1xuICAgICAgICAgICAgaWYgKHRleHR1cmUuYmluZCh1bml0KSkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdW5pdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQge1NhbXBsZXJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Sampler.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js ***!
  \**************************************************************************/
/*! exports provided: Shader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader\", function() { return Shader; });\n/**\n * @desc Represents a vertex or fragment stage within a {@link Program}.\n * @private\n */\nclass Shader {\n\n    constructor(gl, type, source) {\n\n        this.allocated = false;\n        this.compiled = false;\n        this.handle = gl.createShader(type);\n\n        if (!this.handle) {\n            this.errors = [\n                \"Failed to allocate\"\n            ];\n            return;\n        }\n\n        this.allocated = true;\n\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n\n        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);\n\n        if (!this.compiled) {\n\n            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here\n\n                const lines = source.split(\"\\n\");\n                const numberedLines = [];\n                for (let i = 0; i < lines.length; i++) {\n                    numberedLines.push((i + 1) + \": \" + lines[i] + \"\\n\");\n                }\n                this.errors = [];\n                this.errors.push(\"\");\n                this.errors.push(gl.getShaderInfoLog(this.handle));\n                this.errors = this.errors.concat(numberedLines.join(\"\"));\n            }\n        }\n    }\n\n    destroy() {\n\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsL1NoYWRlci5qcz83ZGU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBLHlEQUF5RCxjQUFjO0FBQ3ZFO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDOztBQUV0QztBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AeGVva2l0L3hlb2tpdC1zZGsvc3JjL3ZpZXdlci9zY2VuZS93ZWJnbC9TaGFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXNjIFJlcHJlc2VudHMgYSB2ZXJ0ZXggb3IgZnJhZ21lbnQgc3RhZ2Ugd2l0aGluIGEge0BsaW5rIFByb2dyYW19LlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU2hhZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGdsLCB0eXBlLCBzb3VyY2UpIHtcblxuICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNvbXBpbGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZGxlID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuXG4gICAgICAgIGlmICghdGhpcy5oYW5kbGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gW1xuICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIGFsbG9jYXRlXCJcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFsbG9jYXRlZCA9IHRydWU7XG5cbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHRoaXMuaGFuZGxlLCBzb3VyY2UpO1xuICAgICAgICBnbC5jb21waWxlU2hhZGVyKHRoaXMuaGFuZGxlKTtcblxuICAgICAgICB0aGlzLmNvbXBpbGVkID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHRoaXMuaGFuZGxlLCBnbC5DT01QSUxFX1NUQVRVUyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbXBpbGVkKSB7XG5cbiAgICAgICAgICAgIGlmICghZ2wuaXNDb250ZXh0TG9zdCgpKSB7IC8vIEhhbmRsZWQgZXhwbGljaXRseSBlbHNld2hlcmUsIHNvIHdvbid0IHJlLWhhbmRsZSBoZXJlXG5cbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdChcIlxcblwiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJlZExpbmVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBudW1iZXJlZExpbmVzLnB1c2goKGkgKyAxKSArIFwiOiBcIiArIGxpbmVzW2ldICsgXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChcIlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGdsLmdldFNoYWRlckluZm9Mb2codGhpcy5oYW5kbGUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChudW1iZXJlZExpbmVzLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtTaGFkZXJ9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webgl/Shader.js\n");

/***/ }),

/***/ "./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js ***!
  \***********************************************************************/
/*! exports provided: WEBGL_INFO */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WEBGL_INFO\", function() { return WEBGL_INFO; });\n/**\n * @private\n * @type {{WEBGL: boolean, SUPPORTED_EXTENSIONS: {}}}\n */\nconst WEBGL_INFO = {\n    WEBGL: false,\n    SUPPORTED_EXTENSIONS: {}\n};\n\nconst canvas = document.createElement(\"canvas\");\n\nif (canvas) {\n\n    const gl = canvas.getContext(\"webgl\", {antialias: true}) || canvas.getContext(\"experimental-webgl\", {antialias: true});\n\n    WEBGL_INFO.WEBGL = !!gl;\n\n    if (WEBGL_INFO.WEBGL) {\n        WEBGL_INFO.ANTIALIAS = gl.getContextAttributes().antialias;\n        if (gl.getShaderPrecisionFormat) {\n            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"highp\";\n            } else if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n            } else {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"lowp\";\n            }\n        } else {\n            WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n        }\n        WEBGL_INFO.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);\n        WEBGL_INFO.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        WEBGL_INFO.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WEBGL_INFO.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n        gl.getSupportedExtensions().forEach(function (ext) {\n            WEBGL_INFO.SUPPORTED_EXTENSIONS[ext] = true;\n        });\n        WEBGL_INFO.depthTexturesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"WEBGL_depth_texture\"];\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B4ZW9raXQveGVva2l0LXNkay9zcmMvdmlld2VyL3NjZW5lL3dlYmdsSW5mby5qcz82YzUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsMkNBQTJDLGdCQUFnQiw4Q0FBOEMsZ0JBQWdCOztBQUV6SDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHhlb2tpdC94ZW9raXQtc2RrL3NyYy92aWV3ZXIvc2NlbmUvd2ViZ2xJbmZvLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJpdmF0ZVxuICogQHR5cGUge3tXRUJHTDogYm9vbGVhbiwgU1VQUE9SVEVEX0VYVEVOU0lPTlM6IHt9fX1cbiAqL1xuY29uc3QgV0VCR0xfSU5GTyA9IHtcbiAgICBXRUJHTDogZmFsc2UsXG4gICAgU1VQUE9SVEVEX0VYVEVOU0lPTlM6IHt9XG59O1xuXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG5pZiAoY2FudmFzKSB7XG5cbiAgICBjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiwge2FudGlhbGlhczogdHJ1ZX0pIHx8IGNhbnZhcy5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIsIHthbnRpYWxpYXM6IHRydWV9KTtcblxuICAgIFdFQkdMX0lORk8uV0VCR0wgPSAhIWdsO1xuXG4gICAgaWYgKFdFQkdMX0lORk8uV0VCR0wpIHtcbiAgICAgICAgV0VCR0xfSU5GTy5BTlRJQUxJQVMgPSBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpLmFudGlhbGlhcztcbiAgICAgICAgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkhJR0hfRkxPQVQpLnByZWNpc2lvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBXRUJHTF9JTkZPLkZTX01BWF9GTE9BVF9QUkVDSVNJT04gPSBcImhpZ2hwXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCkucHJlY2lzaW9uID4gMCkge1xuICAgICAgICAgICAgICAgIFdFQkdMX0lORk8uRlNfTUFYX0ZMT0FUX1BSRUNJU0lPTiA9IFwibWVkaXVtcFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBXRUJHTF9JTkZPLkZTX01BWF9GTE9BVF9QUkVDSVNJT04gPSBcImxvd3BcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFdFQkdMX0lORk8uRlNfTUFYX0ZMT0FUX1BSRUNJU0lPTiA9IFwibWVkaXVtcFwiO1xuICAgICAgICB9XG4gICAgICAgIFdFQkdMX0lORk8uREVQVEhfQlVGRkVSX0JJVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuREVQVEhfQklUUyk7XG4gICAgICAgIFdFQkdMX0lORk8uTUFYX1RFWFRVUkVfU0laRSA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVEVYVFVSRV9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfQ1VCRV9NQVBfU0laRSA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfUkVOREVSQlVGRkVSX1NJWkUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1JFTkRFUkJVRkZFUl9TSVpFKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfVEVYVFVSRV9VTklUUyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyk7XG4gICAgICAgIFdFQkdMX0lORk8uTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WRVJURVhfQVRUUklCUyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVkVSVEVYX0FUVFJJQlMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTKTtcbiAgICAgICAgV0VCR0xfSU5GTy5NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9GUkFHTUVOVF9VTklGT1JNX1ZFQ1RPUlMpO1xuICAgICAgICBXRUJHTF9JTkZPLk1BWF9WQVJZSU5HX1ZFQ1RPUlMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1ZBUllJTkdfVkVDVE9SUyk7XG4gICAgICAgIGdsLmdldFN1cHBvcnRlZEV4dGVuc2lvbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChleHQpIHtcbiAgICAgICAgICAgIFdFQkdMX0lORk8uU1VQUE9SVEVEX0VYVEVOU0lPTlNbZXh0XSA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBXRUJHTF9JTkZPLmRlcHRoVGV4dHVyZXNTdXBwb3J0ZWQgPSBXRUJHTF9JTkZPLlNVUFBPUlRFRF9FWFRFTlNJT05TW1wiV0VCR0xfZGVwdGhfdGV4dHVyZVwiXTtcbiAgICB9XG59XG5cbmV4cG9ydCB7V0VCR0xfSU5GT307Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@xeokit/xeokit-sdk/src/viewer/scene/webglInfo.js\n");

/***/ })

}]);